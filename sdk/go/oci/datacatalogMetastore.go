// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package oci

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource provides the Metastore resource in Oracle Cloud Infrastructure Data Catalog service.
//
// Creates a new metastore.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-oci/sdk/go/oci"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := oci.NewDatacatalogMetastore(ctx, "testMetastore", &oci.DatacatalogMetastoreArgs{
// 			CompartmentId:                pulumi.Any(_var.Compartment_id),
// 			DefaultExternalTableLocation: pulumi.Any(_var.Metastore_default_external_table_location),
// 			DefaultManagedTableLocation:  pulumi.Any(_var.Metastore_default_managed_table_location),
// 			DefinedTags: pulumi.AnyMap{
// 				"foo-namespace.bar-key": pulumi.Any("value"),
// 			},
// 			DisplayName: pulumi.Any(_var.Metastore_display_name),
// 			FreeformTags: pulumi.AnyMap{
// 				"bar-key": pulumi.Any("value"),
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// Metastores can be imported using the `id`, e.g.
//
// ```sh
//  $ pulumi import oci:index/datacatalogMetastore:DatacatalogMetastore test_metastore "id"
// ```
type DatacatalogMetastore struct {
	pulumi.CustomResourceState

	// (Updatable) OCID of the compartment which holds the metastore.
	CompartmentId pulumi.StringOutput `pulumi:"compartmentId"`
	// Location under which external tables will be created by default. This references Object Storage using an HDFS URI format. Example: oci://bucket@namespace/sub-dir/
	DefaultExternalTableLocation pulumi.StringOutput `pulumi:"defaultExternalTableLocation"`
	// Location under which managed tables will be created by default. This references Object Storage using an HDFS URI format. Example: oci://bucket@namespace/sub-dir/
	DefaultManagedTableLocation pulumi.StringOutput `pulumi:"defaultManagedTableLocation"`
	// (Updatable) Usage of predefined tag keys. These predefined keys are scoped to namespaces. Example: `{"foo-namespace.bar-key": "value"}`
	DefinedTags pulumi.MapOutput `pulumi:"definedTags"`
	// (Updatable) Mutable name of the metastore.
	DisplayName pulumi.StringOutput `pulumi:"displayName"`
	// (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
	FreeformTags pulumi.MapOutput `pulumi:"freeformTags"`
	// A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in Failed state.
	LifecycleDetails pulumi.StringOutput `pulumi:"lifecycleDetails"`
	// The current state of the metastore.
	State pulumi.StringOutput `pulumi:"state"`
	// Time at which the metastore was created. An [RFC3339](https://tools.ietf.org/html/rfc3339) formatted datetime string.
	TimeCreated pulumi.StringOutput `pulumi:"timeCreated"`
	// Time at which the metastore was last modified. An [RFC3339](https://tools.ietf.org/html/rfc3339) formatted datetime string.
	TimeUpdated pulumi.StringOutput `pulumi:"timeUpdated"`
}

// NewDatacatalogMetastore registers a new resource with the given unique name, arguments, and options.
func NewDatacatalogMetastore(ctx *pulumi.Context,
	name string, args *DatacatalogMetastoreArgs, opts ...pulumi.ResourceOption) (*DatacatalogMetastore, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CompartmentId == nil {
		return nil, errors.New("invalid value for required argument 'CompartmentId'")
	}
	if args.DefaultExternalTableLocation == nil {
		return nil, errors.New("invalid value for required argument 'DefaultExternalTableLocation'")
	}
	if args.DefaultManagedTableLocation == nil {
		return nil, errors.New("invalid value for required argument 'DefaultManagedTableLocation'")
	}
	var resource DatacatalogMetastore
	err := ctx.RegisterResource("oci:index/datacatalogMetastore:DatacatalogMetastore", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDatacatalogMetastore gets an existing DatacatalogMetastore resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDatacatalogMetastore(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DatacatalogMetastoreState, opts ...pulumi.ResourceOption) (*DatacatalogMetastore, error) {
	var resource DatacatalogMetastore
	err := ctx.ReadResource("oci:index/datacatalogMetastore:DatacatalogMetastore", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DatacatalogMetastore resources.
type datacatalogMetastoreState struct {
	// (Updatable) OCID of the compartment which holds the metastore.
	CompartmentId *string `pulumi:"compartmentId"`
	// Location under which external tables will be created by default. This references Object Storage using an HDFS URI format. Example: oci://bucket@namespace/sub-dir/
	DefaultExternalTableLocation *string `pulumi:"defaultExternalTableLocation"`
	// Location under which managed tables will be created by default. This references Object Storage using an HDFS URI format. Example: oci://bucket@namespace/sub-dir/
	DefaultManagedTableLocation *string `pulumi:"defaultManagedTableLocation"`
	// (Updatable) Usage of predefined tag keys. These predefined keys are scoped to namespaces. Example: `{"foo-namespace.bar-key": "value"}`
	DefinedTags map[string]interface{} `pulumi:"definedTags"`
	// (Updatable) Mutable name of the metastore.
	DisplayName *string `pulumi:"displayName"`
	// (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
	FreeformTags map[string]interface{} `pulumi:"freeformTags"`
	// A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in Failed state.
	LifecycleDetails *string `pulumi:"lifecycleDetails"`
	// The current state of the metastore.
	State *string `pulumi:"state"`
	// Time at which the metastore was created. An [RFC3339](https://tools.ietf.org/html/rfc3339) formatted datetime string.
	TimeCreated *string `pulumi:"timeCreated"`
	// Time at which the metastore was last modified. An [RFC3339](https://tools.ietf.org/html/rfc3339) formatted datetime string.
	TimeUpdated *string `pulumi:"timeUpdated"`
}

type DatacatalogMetastoreState struct {
	// (Updatable) OCID of the compartment which holds the metastore.
	CompartmentId pulumi.StringPtrInput
	// Location under which external tables will be created by default. This references Object Storage using an HDFS URI format. Example: oci://bucket@namespace/sub-dir/
	DefaultExternalTableLocation pulumi.StringPtrInput
	// Location under which managed tables will be created by default. This references Object Storage using an HDFS URI format. Example: oci://bucket@namespace/sub-dir/
	DefaultManagedTableLocation pulumi.StringPtrInput
	// (Updatable) Usage of predefined tag keys. These predefined keys are scoped to namespaces. Example: `{"foo-namespace.bar-key": "value"}`
	DefinedTags pulumi.MapInput
	// (Updatable) Mutable name of the metastore.
	DisplayName pulumi.StringPtrInput
	// (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
	FreeformTags pulumi.MapInput
	// A message describing the current state in more detail. For example, can be used to provide actionable information for a resource in Failed state.
	LifecycleDetails pulumi.StringPtrInput
	// The current state of the metastore.
	State pulumi.StringPtrInput
	// Time at which the metastore was created. An [RFC3339](https://tools.ietf.org/html/rfc3339) formatted datetime string.
	TimeCreated pulumi.StringPtrInput
	// Time at which the metastore was last modified. An [RFC3339](https://tools.ietf.org/html/rfc3339) formatted datetime string.
	TimeUpdated pulumi.StringPtrInput
}

func (DatacatalogMetastoreState) ElementType() reflect.Type {
	return reflect.TypeOf((*datacatalogMetastoreState)(nil)).Elem()
}

type datacatalogMetastoreArgs struct {
	// (Updatable) OCID of the compartment which holds the metastore.
	CompartmentId string `pulumi:"compartmentId"`
	// Location under which external tables will be created by default. This references Object Storage using an HDFS URI format. Example: oci://bucket@namespace/sub-dir/
	DefaultExternalTableLocation string `pulumi:"defaultExternalTableLocation"`
	// Location under which managed tables will be created by default. This references Object Storage using an HDFS URI format. Example: oci://bucket@namespace/sub-dir/
	DefaultManagedTableLocation string `pulumi:"defaultManagedTableLocation"`
	// (Updatable) Usage of predefined tag keys. These predefined keys are scoped to namespaces. Example: `{"foo-namespace.bar-key": "value"}`
	DefinedTags map[string]interface{} `pulumi:"definedTags"`
	// (Updatable) Mutable name of the metastore.
	DisplayName *string `pulumi:"displayName"`
	// (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
	FreeformTags map[string]interface{} `pulumi:"freeformTags"`
}

// The set of arguments for constructing a DatacatalogMetastore resource.
type DatacatalogMetastoreArgs struct {
	// (Updatable) OCID of the compartment which holds the metastore.
	CompartmentId pulumi.StringInput
	// Location under which external tables will be created by default. This references Object Storage using an HDFS URI format. Example: oci://bucket@namespace/sub-dir/
	DefaultExternalTableLocation pulumi.StringInput
	// Location under which managed tables will be created by default. This references Object Storage using an HDFS URI format. Example: oci://bucket@namespace/sub-dir/
	DefaultManagedTableLocation pulumi.StringInput
	// (Updatable) Usage of predefined tag keys. These predefined keys are scoped to namespaces. Example: `{"foo-namespace.bar-key": "value"}`
	DefinedTags pulumi.MapInput
	// (Updatable) Mutable name of the metastore.
	DisplayName pulumi.StringPtrInput
	// (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
	FreeformTags pulumi.MapInput
}

func (DatacatalogMetastoreArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*datacatalogMetastoreArgs)(nil)).Elem()
}

type DatacatalogMetastoreInput interface {
	pulumi.Input

	ToDatacatalogMetastoreOutput() DatacatalogMetastoreOutput
	ToDatacatalogMetastoreOutputWithContext(ctx context.Context) DatacatalogMetastoreOutput
}

func (*DatacatalogMetastore) ElementType() reflect.Type {
	return reflect.TypeOf((*DatacatalogMetastore)(nil))
}

func (i *DatacatalogMetastore) ToDatacatalogMetastoreOutput() DatacatalogMetastoreOutput {
	return i.ToDatacatalogMetastoreOutputWithContext(context.Background())
}

func (i *DatacatalogMetastore) ToDatacatalogMetastoreOutputWithContext(ctx context.Context) DatacatalogMetastoreOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatacatalogMetastoreOutput)
}

func (i *DatacatalogMetastore) ToDatacatalogMetastorePtrOutput() DatacatalogMetastorePtrOutput {
	return i.ToDatacatalogMetastorePtrOutputWithContext(context.Background())
}

func (i *DatacatalogMetastore) ToDatacatalogMetastorePtrOutputWithContext(ctx context.Context) DatacatalogMetastorePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatacatalogMetastorePtrOutput)
}

type DatacatalogMetastorePtrInput interface {
	pulumi.Input

	ToDatacatalogMetastorePtrOutput() DatacatalogMetastorePtrOutput
	ToDatacatalogMetastorePtrOutputWithContext(ctx context.Context) DatacatalogMetastorePtrOutput
}

type datacatalogMetastorePtrType DatacatalogMetastoreArgs

func (*datacatalogMetastorePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DatacatalogMetastore)(nil))
}

func (i *datacatalogMetastorePtrType) ToDatacatalogMetastorePtrOutput() DatacatalogMetastorePtrOutput {
	return i.ToDatacatalogMetastorePtrOutputWithContext(context.Background())
}

func (i *datacatalogMetastorePtrType) ToDatacatalogMetastorePtrOutputWithContext(ctx context.Context) DatacatalogMetastorePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatacatalogMetastorePtrOutput)
}

// DatacatalogMetastoreArrayInput is an input type that accepts DatacatalogMetastoreArray and DatacatalogMetastoreArrayOutput values.
// You can construct a concrete instance of `DatacatalogMetastoreArrayInput` via:
//
//          DatacatalogMetastoreArray{ DatacatalogMetastoreArgs{...} }
type DatacatalogMetastoreArrayInput interface {
	pulumi.Input

	ToDatacatalogMetastoreArrayOutput() DatacatalogMetastoreArrayOutput
	ToDatacatalogMetastoreArrayOutputWithContext(context.Context) DatacatalogMetastoreArrayOutput
}

type DatacatalogMetastoreArray []DatacatalogMetastoreInput

func (DatacatalogMetastoreArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DatacatalogMetastore)(nil)).Elem()
}

func (i DatacatalogMetastoreArray) ToDatacatalogMetastoreArrayOutput() DatacatalogMetastoreArrayOutput {
	return i.ToDatacatalogMetastoreArrayOutputWithContext(context.Background())
}

func (i DatacatalogMetastoreArray) ToDatacatalogMetastoreArrayOutputWithContext(ctx context.Context) DatacatalogMetastoreArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatacatalogMetastoreArrayOutput)
}

// DatacatalogMetastoreMapInput is an input type that accepts DatacatalogMetastoreMap and DatacatalogMetastoreMapOutput values.
// You can construct a concrete instance of `DatacatalogMetastoreMapInput` via:
//
//          DatacatalogMetastoreMap{ "key": DatacatalogMetastoreArgs{...} }
type DatacatalogMetastoreMapInput interface {
	pulumi.Input

	ToDatacatalogMetastoreMapOutput() DatacatalogMetastoreMapOutput
	ToDatacatalogMetastoreMapOutputWithContext(context.Context) DatacatalogMetastoreMapOutput
}

type DatacatalogMetastoreMap map[string]DatacatalogMetastoreInput

func (DatacatalogMetastoreMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DatacatalogMetastore)(nil)).Elem()
}

func (i DatacatalogMetastoreMap) ToDatacatalogMetastoreMapOutput() DatacatalogMetastoreMapOutput {
	return i.ToDatacatalogMetastoreMapOutputWithContext(context.Background())
}

func (i DatacatalogMetastoreMap) ToDatacatalogMetastoreMapOutputWithContext(ctx context.Context) DatacatalogMetastoreMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatacatalogMetastoreMapOutput)
}

type DatacatalogMetastoreOutput struct {
	*pulumi.OutputState
}

func (DatacatalogMetastoreOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatacatalogMetastore)(nil))
}

func (o DatacatalogMetastoreOutput) ToDatacatalogMetastoreOutput() DatacatalogMetastoreOutput {
	return o
}

func (o DatacatalogMetastoreOutput) ToDatacatalogMetastoreOutputWithContext(ctx context.Context) DatacatalogMetastoreOutput {
	return o
}

func (o DatacatalogMetastoreOutput) ToDatacatalogMetastorePtrOutput() DatacatalogMetastorePtrOutput {
	return o.ToDatacatalogMetastorePtrOutputWithContext(context.Background())
}

func (o DatacatalogMetastoreOutput) ToDatacatalogMetastorePtrOutputWithContext(ctx context.Context) DatacatalogMetastorePtrOutput {
	return o.ApplyT(func(v DatacatalogMetastore) *DatacatalogMetastore {
		return &v
	}).(DatacatalogMetastorePtrOutput)
}

type DatacatalogMetastorePtrOutput struct {
	*pulumi.OutputState
}

func (DatacatalogMetastorePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DatacatalogMetastore)(nil))
}

func (o DatacatalogMetastorePtrOutput) ToDatacatalogMetastorePtrOutput() DatacatalogMetastorePtrOutput {
	return o
}

func (o DatacatalogMetastorePtrOutput) ToDatacatalogMetastorePtrOutputWithContext(ctx context.Context) DatacatalogMetastorePtrOutput {
	return o
}

type DatacatalogMetastoreArrayOutput struct{ *pulumi.OutputState }

func (DatacatalogMetastoreArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DatacatalogMetastore)(nil))
}

func (o DatacatalogMetastoreArrayOutput) ToDatacatalogMetastoreArrayOutput() DatacatalogMetastoreArrayOutput {
	return o
}

func (o DatacatalogMetastoreArrayOutput) ToDatacatalogMetastoreArrayOutputWithContext(ctx context.Context) DatacatalogMetastoreArrayOutput {
	return o
}

func (o DatacatalogMetastoreArrayOutput) Index(i pulumi.IntInput) DatacatalogMetastoreOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DatacatalogMetastore {
		return vs[0].([]DatacatalogMetastore)[vs[1].(int)]
	}).(DatacatalogMetastoreOutput)
}

type DatacatalogMetastoreMapOutput struct{ *pulumi.OutputState }

func (DatacatalogMetastoreMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]DatacatalogMetastore)(nil))
}

func (o DatacatalogMetastoreMapOutput) ToDatacatalogMetastoreMapOutput() DatacatalogMetastoreMapOutput {
	return o
}

func (o DatacatalogMetastoreMapOutput) ToDatacatalogMetastoreMapOutputWithContext(ctx context.Context) DatacatalogMetastoreMapOutput {
	return o
}

func (o DatacatalogMetastoreMapOutput) MapIndex(k pulumi.StringInput) DatacatalogMetastoreOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) DatacatalogMetastore {
		return vs[0].(map[string]DatacatalogMetastore)[vs[1].(string)]
	}).(DatacatalogMetastoreOutput)
}

func init() {
	pulumi.RegisterOutputType(DatacatalogMetastoreOutput{})
	pulumi.RegisterOutputType(DatacatalogMetastorePtrOutput{})
	pulumi.RegisterOutputType(DatacatalogMetastoreArrayOutput{})
	pulumi.RegisterOutputType(DatacatalogMetastoreMapOutput{})
}
