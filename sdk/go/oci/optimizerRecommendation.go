// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package oci

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource provides the Recommendation resource in Oracle Cloud Infrastructure Optimizer service.
//
// Updates the recommendation that corresponds to the specified OCID.
// Use this operation to implement the following actions:
//
//   * Postpone recommendation
//   * Dismiss recommendation
//   * Reactivate recommendation
//
// ## Import
//
// Recommendations can be imported using the `id`, e.g.
//
// ```sh
//  $ pulumi import oci:index/optimizerRecommendation:OptimizerRecommendation test_recommendation "id"
// ```
type OptimizerRecommendation struct {
	pulumi.CustomResourceState

	// The unique OCID associated with the category.
	CategoryId pulumi.StringOutput `pulumi:"categoryId"`
	// The OCID of the tenancy. The tenancy is the root compartment.
	CompartmentId pulumi.StringOutput `pulumi:"compartmentId"`
	// Text describing the recommendation.
	Description pulumi.StringOutput `pulumi:"description"`
	// The estimated cost savings, in dollars, for the recommendation.
	EstimatedCostSaving pulumi.Float64Output `pulumi:"estimatedCostSaving"`
	// The level of importance assigned to the recommendation.
	Importance pulumi.StringOutput `pulumi:"importance"`
	// The name of the profile level.
	Name pulumi.StringOutput `pulumi:"name"`
	// The unique OCID associated with the recommendation.
	RecommendationId pulumi.StringOutput `pulumi:"recommendationId"`
	// An array of `ResourceCount` objects grouped by the status of the resource actions.
	ResourceCounts OptimizerRecommendationResourceCountArrayOutput `pulumi:"resourceCounts"`
	// The recommendation's current state.
	State pulumi.StringOutput `pulumi:"state"`
	// (Updatable) The status of the recommendation.
	Status pulumi.StringOutput `pulumi:"status"`
	// Optional. The profile levels supported by a recommendation. For example, profile level values could be `Low`, `Medium`, and `High`. Not all recommendations support this field.
	SupportedLevels OptimizerRecommendationSupportedLevelsOutput `pulumi:"supportedLevels"`
	// The date and time the recommendation details were created, in the format defined by RFC3339.
	TimeCreated pulumi.StringOutput `pulumi:"timeCreated"`
	// The date and time that the recommendation entered its current status. The format is defined by RFC3339.
	TimeStatusBegin pulumi.StringOutput `pulumi:"timeStatusBegin"`
	// (Updatable) The date and time the current status will change. The format is defined by RFC3339.
	TimeStatusEnd pulumi.StringOutput `pulumi:"timeStatusEnd"`
	// The date and time the recommendation details were last updated, in the format defined by RFC3339.
	TimeUpdated pulumi.StringOutput `pulumi:"timeUpdated"`
}

// NewOptimizerRecommendation registers a new resource with the given unique name, arguments, and options.
func NewOptimizerRecommendation(ctx *pulumi.Context,
	name string, args *OptimizerRecommendationArgs, opts ...pulumi.ResourceOption) (*OptimizerRecommendation, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.RecommendationId == nil {
		return nil, errors.New("invalid value for required argument 'RecommendationId'")
	}
	if args.Status == nil {
		return nil, errors.New("invalid value for required argument 'Status'")
	}
	var resource OptimizerRecommendation
	err := ctx.RegisterResource("oci:index/optimizerRecommendation:OptimizerRecommendation", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetOptimizerRecommendation gets an existing OptimizerRecommendation resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetOptimizerRecommendation(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *OptimizerRecommendationState, opts ...pulumi.ResourceOption) (*OptimizerRecommendation, error) {
	var resource OptimizerRecommendation
	err := ctx.ReadResource("oci:index/optimizerRecommendation:OptimizerRecommendation", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering OptimizerRecommendation resources.
type optimizerRecommendationState struct {
	// The unique OCID associated with the category.
	CategoryId *string `pulumi:"categoryId"`
	// The OCID of the tenancy. The tenancy is the root compartment.
	CompartmentId *string `pulumi:"compartmentId"`
	// Text describing the recommendation.
	Description *string `pulumi:"description"`
	// The estimated cost savings, in dollars, for the recommendation.
	EstimatedCostSaving *float64 `pulumi:"estimatedCostSaving"`
	// The level of importance assigned to the recommendation.
	Importance *string `pulumi:"importance"`
	// The name of the profile level.
	Name *string `pulumi:"name"`
	// The unique OCID associated with the recommendation.
	RecommendationId *string `pulumi:"recommendationId"`
	// An array of `ResourceCount` objects grouped by the status of the resource actions.
	ResourceCounts []OptimizerRecommendationResourceCount `pulumi:"resourceCounts"`
	// The recommendation's current state.
	State *string `pulumi:"state"`
	// (Updatable) The status of the recommendation.
	Status *string `pulumi:"status"`
	// Optional. The profile levels supported by a recommendation. For example, profile level values could be `Low`, `Medium`, and `High`. Not all recommendations support this field.
	SupportedLevels *OptimizerRecommendationSupportedLevels `pulumi:"supportedLevels"`
	// The date and time the recommendation details were created, in the format defined by RFC3339.
	TimeCreated *string `pulumi:"timeCreated"`
	// The date and time that the recommendation entered its current status. The format is defined by RFC3339.
	TimeStatusBegin *string `pulumi:"timeStatusBegin"`
	// (Updatable) The date and time the current status will change. The format is defined by RFC3339.
	TimeStatusEnd *string `pulumi:"timeStatusEnd"`
	// The date and time the recommendation details were last updated, in the format defined by RFC3339.
	TimeUpdated *string `pulumi:"timeUpdated"`
}

type OptimizerRecommendationState struct {
	// The unique OCID associated with the category.
	CategoryId pulumi.StringPtrInput
	// The OCID of the tenancy. The tenancy is the root compartment.
	CompartmentId pulumi.StringPtrInput
	// Text describing the recommendation.
	Description pulumi.StringPtrInput
	// The estimated cost savings, in dollars, for the recommendation.
	EstimatedCostSaving pulumi.Float64PtrInput
	// The level of importance assigned to the recommendation.
	Importance pulumi.StringPtrInput
	// The name of the profile level.
	Name pulumi.StringPtrInput
	// The unique OCID associated with the recommendation.
	RecommendationId pulumi.StringPtrInput
	// An array of `ResourceCount` objects grouped by the status of the resource actions.
	ResourceCounts OptimizerRecommendationResourceCountArrayInput
	// The recommendation's current state.
	State pulumi.StringPtrInput
	// (Updatable) The status of the recommendation.
	Status pulumi.StringPtrInput
	// Optional. The profile levels supported by a recommendation. For example, profile level values could be `Low`, `Medium`, and `High`. Not all recommendations support this field.
	SupportedLevels OptimizerRecommendationSupportedLevelsPtrInput
	// The date and time the recommendation details were created, in the format defined by RFC3339.
	TimeCreated pulumi.StringPtrInput
	// The date and time that the recommendation entered its current status. The format is defined by RFC3339.
	TimeStatusBegin pulumi.StringPtrInput
	// (Updatable) The date and time the current status will change. The format is defined by RFC3339.
	TimeStatusEnd pulumi.StringPtrInput
	// The date and time the recommendation details were last updated, in the format defined by RFC3339.
	TimeUpdated pulumi.StringPtrInput
}

func (OptimizerRecommendationState) ElementType() reflect.Type {
	return reflect.TypeOf((*optimizerRecommendationState)(nil)).Elem()
}

type optimizerRecommendationArgs struct {
	// The unique OCID associated with the recommendation.
	RecommendationId string `pulumi:"recommendationId"`
	// (Updatable) The status of the recommendation.
	Status string `pulumi:"status"`
	// (Updatable) The date and time the current status will change. The format is defined by RFC3339.
	TimeStatusEnd *string `pulumi:"timeStatusEnd"`
}

// The set of arguments for constructing a OptimizerRecommendation resource.
type OptimizerRecommendationArgs struct {
	// The unique OCID associated with the recommendation.
	RecommendationId pulumi.StringInput
	// (Updatable) The status of the recommendation.
	Status pulumi.StringInput
	// (Updatable) The date and time the current status will change. The format is defined by RFC3339.
	TimeStatusEnd pulumi.StringPtrInput
}

func (OptimizerRecommendationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*optimizerRecommendationArgs)(nil)).Elem()
}

type OptimizerRecommendationInput interface {
	pulumi.Input

	ToOptimizerRecommendationOutput() OptimizerRecommendationOutput
	ToOptimizerRecommendationOutputWithContext(ctx context.Context) OptimizerRecommendationOutput
}

func (*OptimizerRecommendation) ElementType() reflect.Type {
	return reflect.TypeOf((*OptimizerRecommendation)(nil))
}

func (i *OptimizerRecommendation) ToOptimizerRecommendationOutput() OptimizerRecommendationOutput {
	return i.ToOptimizerRecommendationOutputWithContext(context.Background())
}

func (i *OptimizerRecommendation) ToOptimizerRecommendationOutputWithContext(ctx context.Context) OptimizerRecommendationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OptimizerRecommendationOutput)
}

func (i *OptimizerRecommendation) ToOptimizerRecommendationPtrOutput() OptimizerRecommendationPtrOutput {
	return i.ToOptimizerRecommendationPtrOutputWithContext(context.Background())
}

func (i *OptimizerRecommendation) ToOptimizerRecommendationPtrOutputWithContext(ctx context.Context) OptimizerRecommendationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OptimizerRecommendationPtrOutput)
}

type OptimizerRecommendationPtrInput interface {
	pulumi.Input

	ToOptimizerRecommendationPtrOutput() OptimizerRecommendationPtrOutput
	ToOptimizerRecommendationPtrOutputWithContext(ctx context.Context) OptimizerRecommendationPtrOutput
}

type optimizerRecommendationPtrType OptimizerRecommendationArgs

func (*optimizerRecommendationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**OptimizerRecommendation)(nil))
}

func (i *optimizerRecommendationPtrType) ToOptimizerRecommendationPtrOutput() OptimizerRecommendationPtrOutput {
	return i.ToOptimizerRecommendationPtrOutputWithContext(context.Background())
}

func (i *optimizerRecommendationPtrType) ToOptimizerRecommendationPtrOutputWithContext(ctx context.Context) OptimizerRecommendationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OptimizerRecommendationPtrOutput)
}

// OptimizerRecommendationArrayInput is an input type that accepts OptimizerRecommendationArray and OptimizerRecommendationArrayOutput values.
// You can construct a concrete instance of `OptimizerRecommendationArrayInput` via:
//
//          OptimizerRecommendationArray{ OptimizerRecommendationArgs{...} }
type OptimizerRecommendationArrayInput interface {
	pulumi.Input

	ToOptimizerRecommendationArrayOutput() OptimizerRecommendationArrayOutput
	ToOptimizerRecommendationArrayOutputWithContext(context.Context) OptimizerRecommendationArrayOutput
}

type OptimizerRecommendationArray []OptimizerRecommendationInput

func (OptimizerRecommendationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*OptimizerRecommendation)(nil)).Elem()
}

func (i OptimizerRecommendationArray) ToOptimizerRecommendationArrayOutput() OptimizerRecommendationArrayOutput {
	return i.ToOptimizerRecommendationArrayOutputWithContext(context.Background())
}

func (i OptimizerRecommendationArray) ToOptimizerRecommendationArrayOutputWithContext(ctx context.Context) OptimizerRecommendationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OptimizerRecommendationArrayOutput)
}

// OptimizerRecommendationMapInput is an input type that accepts OptimizerRecommendationMap and OptimizerRecommendationMapOutput values.
// You can construct a concrete instance of `OptimizerRecommendationMapInput` via:
//
//          OptimizerRecommendationMap{ "key": OptimizerRecommendationArgs{...} }
type OptimizerRecommendationMapInput interface {
	pulumi.Input

	ToOptimizerRecommendationMapOutput() OptimizerRecommendationMapOutput
	ToOptimizerRecommendationMapOutputWithContext(context.Context) OptimizerRecommendationMapOutput
}

type OptimizerRecommendationMap map[string]OptimizerRecommendationInput

func (OptimizerRecommendationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*OptimizerRecommendation)(nil)).Elem()
}

func (i OptimizerRecommendationMap) ToOptimizerRecommendationMapOutput() OptimizerRecommendationMapOutput {
	return i.ToOptimizerRecommendationMapOutputWithContext(context.Background())
}

func (i OptimizerRecommendationMap) ToOptimizerRecommendationMapOutputWithContext(ctx context.Context) OptimizerRecommendationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OptimizerRecommendationMapOutput)
}

type OptimizerRecommendationOutput struct {
	*pulumi.OutputState
}

func (OptimizerRecommendationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OptimizerRecommendation)(nil))
}

func (o OptimizerRecommendationOutput) ToOptimizerRecommendationOutput() OptimizerRecommendationOutput {
	return o
}

func (o OptimizerRecommendationOutput) ToOptimizerRecommendationOutputWithContext(ctx context.Context) OptimizerRecommendationOutput {
	return o
}

func (o OptimizerRecommendationOutput) ToOptimizerRecommendationPtrOutput() OptimizerRecommendationPtrOutput {
	return o.ToOptimizerRecommendationPtrOutputWithContext(context.Background())
}

func (o OptimizerRecommendationOutput) ToOptimizerRecommendationPtrOutputWithContext(ctx context.Context) OptimizerRecommendationPtrOutput {
	return o.ApplyT(func(v OptimizerRecommendation) *OptimizerRecommendation {
		return &v
	}).(OptimizerRecommendationPtrOutput)
}

type OptimizerRecommendationPtrOutput struct {
	*pulumi.OutputState
}

func (OptimizerRecommendationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OptimizerRecommendation)(nil))
}

func (o OptimizerRecommendationPtrOutput) ToOptimizerRecommendationPtrOutput() OptimizerRecommendationPtrOutput {
	return o
}

func (o OptimizerRecommendationPtrOutput) ToOptimizerRecommendationPtrOutputWithContext(ctx context.Context) OptimizerRecommendationPtrOutput {
	return o
}

type OptimizerRecommendationArrayOutput struct{ *pulumi.OutputState }

func (OptimizerRecommendationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OptimizerRecommendation)(nil))
}

func (o OptimizerRecommendationArrayOutput) ToOptimizerRecommendationArrayOutput() OptimizerRecommendationArrayOutput {
	return o
}

func (o OptimizerRecommendationArrayOutput) ToOptimizerRecommendationArrayOutputWithContext(ctx context.Context) OptimizerRecommendationArrayOutput {
	return o
}

func (o OptimizerRecommendationArrayOutput) Index(i pulumi.IntInput) OptimizerRecommendationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) OptimizerRecommendation {
		return vs[0].([]OptimizerRecommendation)[vs[1].(int)]
	}).(OptimizerRecommendationOutput)
}

type OptimizerRecommendationMapOutput struct{ *pulumi.OutputState }

func (OptimizerRecommendationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]OptimizerRecommendation)(nil))
}

func (o OptimizerRecommendationMapOutput) ToOptimizerRecommendationMapOutput() OptimizerRecommendationMapOutput {
	return o
}

func (o OptimizerRecommendationMapOutput) ToOptimizerRecommendationMapOutputWithContext(ctx context.Context) OptimizerRecommendationMapOutput {
	return o
}

func (o OptimizerRecommendationMapOutput) MapIndex(k pulumi.StringInput) OptimizerRecommendationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) OptimizerRecommendation {
		return vs[0].(map[string]OptimizerRecommendation)[vs[1].(string)]
	}).(OptimizerRecommendationOutput)
}

func init() {
	pulumi.RegisterOutputType(OptimizerRecommendationOutput{})
	pulumi.RegisterOutputType(OptimizerRecommendationPtrOutput{})
	pulumi.RegisterOutputType(OptimizerRecommendationArrayOutput{})
	pulumi.RegisterOutputType(OptimizerRecommendationMapOutput{})
}
