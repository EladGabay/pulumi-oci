// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package oci

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource provides the Session resource in Oracle Cloud Infrastructure Bastion service.
//
// Creates a new session in a bastion. A bastion session lets authorized users connect to a target resource for a predetermined amount of time. The Bastion service recognizes two types of sessions, managed SSH sessions and SSH port forwarding sessions. Managed SSH sessions require that the target resource has an OpenSSH server and the Oracle Cloud Agent both running.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-oci/sdk/go/oci"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := oci.NewBastionSession(ctx, "testSession", &oci.BastionSessionArgs{
// 			BastionId: pulumi.Any(oci_bastion_bastion.Test_bastion.Id),
// 			KeyDetails: &BastionSessionKeyDetailsArgs{
// 				PublicKeyContent: pulumi.Any(_var.Session_key_details_public_key_content),
// 			},
// 			TargetResourceDetails: &BastionSessionTargetResourceDetailsArgs{
// 				SessionType:                           pulumi.Any(_var.Session_target_resource_details_session_type),
// 				TargetResourceId:                      pulumi.Any(oci_bastion_target_resource.Test_target_resource.Id),
// 				TargetResourceOperatingSystemUserName: pulumi.Any(oci_identity_user.Test_user.Name),
// 				TargetResourcePort:                    pulumi.Any(_var.Session_target_resource_details_target_resource_port),
// 				TargetResourcePrivateIpAddress:        pulumi.Any(_var.Session_target_resource_details_target_resource_private_ip_address),
// 			},
// 			DisplayName:         pulumi.Any(_var.Session_display_name),
// 			KeyType:             pulumi.Any(_var.Session_key_type),
// 			SessionTtlInSeconds: pulumi.Any(_var.Session_session_ttl_in_seconds),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// Sessions can be imported using the `id`, e.g.
//
// ```sh
//  $ pulumi import oci:index/bastionSession:BastionSession test_session "id"
// ```
type BastionSession struct {
	pulumi.CustomResourceState

	// The unique identifier (OCID) of the bastion on which to create this session.
	BastionId pulumi.StringOutput `pulumi:"bastionId"`
	// The name of the bastion that is hosting this session.
	BastionName pulumi.StringOutput `pulumi:"bastionName"`
	// The public key of the bastion host. You can use this to verify that you're connecting to the correct bastion.
	BastionPublicHostKeyInfo pulumi.StringOutput `pulumi:"bastionPublicHostKeyInfo"`
	// The username that the session uses to connect to the target resource.
	BastionUserName pulumi.StringOutput `pulumi:"bastionUserName"`
	// (Updatable) The name of the session.
	DisplayName pulumi.StringOutput `pulumi:"displayName"`
	// Public key details for a bastion session.
	KeyDetails BastionSessionKeyDetailsOutput `pulumi:"keyDetails"`
	// The type of the key used to connect to the session. PUB is a standard public key in OpenSSH format.
	KeyType pulumi.StringOutput `pulumi:"keyType"`
	// A message describing the current session state in more detail.
	LifecycleDetails pulumi.StringOutput `pulumi:"lifecycleDetails"`
	// The amount of time the session can remain active.
	SessionTtlInSeconds pulumi.IntOutput `pulumi:"sessionTtlInSeconds"`
	// The connection message for the session.
	SshMetadata pulumi.MapOutput `pulumi:"sshMetadata"`
	// The current state of the session.
	State pulumi.StringOutput `pulumi:"state"`
	// Details about a bastion session's target resource.
	TargetResourceDetails BastionSessionTargetResourceDetailsOutput `pulumi:"targetResourceDetails"`
	// The time the session was created. Format is defined by [RFC3339](https://tools.ietf.org/html/rfc3339). Example: `2020-01-25T21:10:29.600Z`
	TimeCreated pulumi.StringOutput `pulumi:"timeCreated"`
	// The time the session was updated. Format is defined by [RFC3339](https://tools.ietf.org/html/rfc3339). Example: `2020-01-25T21:10:29.600Z`
	TimeUpdated pulumi.StringOutput `pulumi:"timeUpdated"`
}

// NewBastionSession registers a new resource with the given unique name, arguments, and options.
func NewBastionSession(ctx *pulumi.Context,
	name string, args *BastionSessionArgs, opts ...pulumi.ResourceOption) (*BastionSession, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.BastionId == nil {
		return nil, errors.New("invalid value for required argument 'BastionId'")
	}
	if args.KeyDetails == nil {
		return nil, errors.New("invalid value for required argument 'KeyDetails'")
	}
	if args.TargetResourceDetails == nil {
		return nil, errors.New("invalid value for required argument 'TargetResourceDetails'")
	}
	var resource BastionSession
	err := ctx.RegisterResource("oci:index/bastionSession:BastionSession", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetBastionSession gets an existing BastionSession resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetBastionSession(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *BastionSessionState, opts ...pulumi.ResourceOption) (*BastionSession, error) {
	var resource BastionSession
	err := ctx.ReadResource("oci:index/bastionSession:BastionSession", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering BastionSession resources.
type bastionSessionState struct {
	// The unique identifier (OCID) of the bastion on which to create this session.
	BastionId *string `pulumi:"bastionId"`
	// The name of the bastion that is hosting this session.
	BastionName *string `pulumi:"bastionName"`
	// The public key of the bastion host. You can use this to verify that you're connecting to the correct bastion.
	BastionPublicHostKeyInfo *string `pulumi:"bastionPublicHostKeyInfo"`
	// The username that the session uses to connect to the target resource.
	BastionUserName *string `pulumi:"bastionUserName"`
	// (Updatable) The name of the session.
	DisplayName *string `pulumi:"displayName"`
	// Public key details for a bastion session.
	KeyDetails *BastionSessionKeyDetails `pulumi:"keyDetails"`
	// The type of the key used to connect to the session. PUB is a standard public key in OpenSSH format.
	KeyType *string `pulumi:"keyType"`
	// A message describing the current session state in more detail.
	LifecycleDetails *string `pulumi:"lifecycleDetails"`
	// The amount of time the session can remain active.
	SessionTtlInSeconds *int `pulumi:"sessionTtlInSeconds"`
	// The connection message for the session.
	SshMetadata map[string]interface{} `pulumi:"sshMetadata"`
	// The current state of the session.
	State *string `pulumi:"state"`
	// Details about a bastion session's target resource.
	TargetResourceDetails *BastionSessionTargetResourceDetails `pulumi:"targetResourceDetails"`
	// The time the session was created. Format is defined by [RFC3339](https://tools.ietf.org/html/rfc3339). Example: `2020-01-25T21:10:29.600Z`
	TimeCreated *string `pulumi:"timeCreated"`
	// The time the session was updated. Format is defined by [RFC3339](https://tools.ietf.org/html/rfc3339). Example: `2020-01-25T21:10:29.600Z`
	TimeUpdated *string `pulumi:"timeUpdated"`
}

type BastionSessionState struct {
	// The unique identifier (OCID) of the bastion on which to create this session.
	BastionId pulumi.StringPtrInput
	// The name of the bastion that is hosting this session.
	BastionName pulumi.StringPtrInput
	// The public key of the bastion host. You can use this to verify that you're connecting to the correct bastion.
	BastionPublicHostKeyInfo pulumi.StringPtrInput
	// The username that the session uses to connect to the target resource.
	BastionUserName pulumi.StringPtrInput
	// (Updatable) The name of the session.
	DisplayName pulumi.StringPtrInput
	// Public key details for a bastion session.
	KeyDetails BastionSessionKeyDetailsPtrInput
	// The type of the key used to connect to the session. PUB is a standard public key in OpenSSH format.
	KeyType pulumi.StringPtrInput
	// A message describing the current session state in more detail.
	LifecycleDetails pulumi.StringPtrInput
	// The amount of time the session can remain active.
	SessionTtlInSeconds pulumi.IntPtrInput
	// The connection message for the session.
	SshMetadata pulumi.MapInput
	// The current state of the session.
	State pulumi.StringPtrInput
	// Details about a bastion session's target resource.
	TargetResourceDetails BastionSessionTargetResourceDetailsPtrInput
	// The time the session was created. Format is defined by [RFC3339](https://tools.ietf.org/html/rfc3339). Example: `2020-01-25T21:10:29.600Z`
	TimeCreated pulumi.StringPtrInput
	// The time the session was updated. Format is defined by [RFC3339](https://tools.ietf.org/html/rfc3339). Example: `2020-01-25T21:10:29.600Z`
	TimeUpdated pulumi.StringPtrInput
}

func (BastionSessionState) ElementType() reflect.Type {
	return reflect.TypeOf((*bastionSessionState)(nil)).Elem()
}

type bastionSessionArgs struct {
	// The unique identifier (OCID) of the bastion on which to create this session.
	BastionId string `pulumi:"bastionId"`
	// (Updatable) The name of the session.
	DisplayName *string `pulumi:"displayName"`
	// Public key details for a bastion session.
	KeyDetails BastionSessionKeyDetails `pulumi:"keyDetails"`
	// The type of the key used to connect to the session. PUB is a standard public key in OpenSSH format.
	KeyType *string `pulumi:"keyType"`
	// The amount of time the session can remain active.
	SessionTtlInSeconds *int `pulumi:"sessionTtlInSeconds"`
	// Details about a bastion session's target resource.
	TargetResourceDetails BastionSessionTargetResourceDetails `pulumi:"targetResourceDetails"`
}

// The set of arguments for constructing a BastionSession resource.
type BastionSessionArgs struct {
	// The unique identifier (OCID) of the bastion on which to create this session.
	BastionId pulumi.StringInput
	// (Updatable) The name of the session.
	DisplayName pulumi.StringPtrInput
	// Public key details for a bastion session.
	KeyDetails BastionSessionKeyDetailsInput
	// The type of the key used to connect to the session. PUB is a standard public key in OpenSSH format.
	KeyType pulumi.StringPtrInput
	// The amount of time the session can remain active.
	SessionTtlInSeconds pulumi.IntPtrInput
	// Details about a bastion session's target resource.
	TargetResourceDetails BastionSessionTargetResourceDetailsInput
}

func (BastionSessionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*bastionSessionArgs)(nil)).Elem()
}

type BastionSessionInput interface {
	pulumi.Input

	ToBastionSessionOutput() BastionSessionOutput
	ToBastionSessionOutputWithContext(ctx context.Context) BastionSessionOutput
}

func (*BastionSession) ElementType() reflect.Type {
	return reflect.TypeOf((*BastionSession)(nil))
}

func (i *BastionSession) ToBastionSessionOutput() BastionSessionOutput {
	return i.ToBastionSessionOutputWithContext(context.Background())
}

func (i *BastionSession) ToBastionSessionOutputWithContext(ctx context.Context) BastionSessionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BastionSessionOutput)
}

func (i *BastionSession) ToBastionSessionPtrOutput() BastionSessionPtrOutput {
	return i.ToBastionSessionPtrOutputWithContext(context.Background())
}

func (i *BastionSession) ToBastionSessionPtrOutputWithContext(ctx context.Context) BastionSessionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BastionSessionPtrOutput)
}

type BastionSessionPtrInput interface {
	pulumi.Input

	ToBastionSessionPtrOutput() BastionSessionPtrOutput
	ToBastionSessionPtrOutputWithContext(ctx context.Context) BastionSessionPtrOutput
}

type bastionSessionPtrType BastionSessionArgs

func (*bastionSessionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BastionSession)(nil))
}

func (i *bastionSessionPtrType) ToBastionSessionPtrOutput() BastionSessionPtrOutput {
	return i.ToBastionSessionPtrOutputWithContext(context.Background())
}

func (i *bastionSessionPtrType) ToBastionSessionPtrOutputWithContext(ctx context.Context) BastionSessionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BastionSessionPtrOutput)
}

// BastionSessionArrayInput is an input type that accepts BastionSessionArray and BastionSessionArrayOutput values.
// You can construct a concrete instance of `BastionSessionArrayInput` via:
//
//          BastionSessionArray{ BastionSessionArgs{...} }
type BastionSessionArrayInput interface {
	pulumi.Input

	ToBastionSessionArrayOutput() BastionSessionArrayOutput
	ToBastionSessionArrayOutputWithContext(context.Context) BastionSessionArrayOutput
}

type BastionSessionArray []BastionSessionInput

func (BastionSessionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*BastionSession)(nil)).Elem()
}

func (i BastionSessionArray) ToBastionSessionArrayOutput() BastionSessionArrayOutput {
	return i.ToBastionSessionArrayOutputWithContext(context.Background())
}

func (i BastionSessionArray) ToBastionSessionArrayOutputWithContext(ctx context.Context) BastionSessionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BastionSessionArrayOutput)
}

// BastionSessionMapInput is an input type that accepts BastionSessionMap and BastionSessionMapOutput values.
// You can construct a concrete instance of `BastionSessionMapInput` via:
//
//          BastionSessionMap{ "key": BastionSessionArgs{...} }
type BastionSessionMapInput interface {
	pulumi.Input

	ToBastionSessionMapOutput() BastionSessionMapOutput
	ToBastionSessionMapOutputWithContext(context.Context) BastionSessionMapOutput
}

type BastionSessionMap map[string]BastionSessionInput

func (BastionSessionMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*BastionSession)(nil)).Elem()
}

func (i BastionSessionMap) ToBastionSessionMapOutput() BastionSessionMapOutput {
	return i.ToBastionSessionMapOutputWithContext(context.Background())
}

func (i BastionSessionMap) ToBastionSessionMapOutputWithContext(ctx context.Context) BastionSessionMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BastionSessionMapOutput)
}

type BastionSessionOutput struct {
	*pulumi.OutputState
}

func (BastionSessionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BastionSession)(nil))
}

func (o BastionSessionOutput) ToBastionSessionOutput() BastionSessionOutput {
	return o
}

func (o BastionSessionOutput) ToBastionSessionOutputWithContext(ctx context.Context) BastionSessionOutput {
	return o
}

func (o BastionSessionOutput) ToBastionSessionPtrOutput() BastionSessionPtrOutput {
	return o.ToBastionSessionPtrOutputWithContext(context.Background())
}

func (o BastionSessionOutput) ToBastionSessionPtrOutputWithContext(ctx context.Context) BastionSessionPtrOutput {
	return o.ApplyT(func(v BastionSession) *BastionSession {
		return &v
	}).(BastionSessionPtrOutput)
}

type BastionSessionPtrOutput struct {
	*pulumi.OutputState
}

func (BastionSessionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BastionSession)(nil))
}

func (o BastionSessionPtrOutput) ToBastionSessionPtrOutput() BastionSessionPtrOutput {
	return o
}

func (o BastionSessionPtrOutput) ToBastionSessionPtrOutputWithContext(ctx context.Context) BastionSessionPtrOutput {
	return o
}

type BastionSessionArrayOutput struct{ *pulumi.OutputState }

func (BastionSessionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BastionSession)(nil))
}

func (o BastionSessionArrayOutput) ToBastionSessionArrayOutput() BastionSessionArrayOutput {
	return o
}

func (o BastionSessionArrayOutput) ToBastionSessionArrayOutputWithContext(ctx context.Context) BastionSessionArrayOutput {
	return o
}

func (o BastionSessionArrayOutput) Index(i pulumi.IntInput) BastionSessionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) BastionSession {
		return vs[0].([]BastionSession)[vs[1].(int)]
	}).(BastionSessionOutput)
}

type BastionSessionMapOutput struct{ *pulumi.OutputState }

func (BastionSessionMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]BastionSession)(nil))
}

func (o BastionSessionMapOutput) ToBastionSessionMapOutput() BastionSessionMapOutput {
	return o
}

func (o BastionSessionMapOutput) ToBastionSessionMapOutputWithContext(ctx context.Context) BastionSessionMapOutput {
	return o
}

func (o BastionSessionMapOutput) MapIndex(k pulumi.StringInput) BastionSessionOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) BastionSession {
		return vs[0].(map[string]BastionSession)[vs[1].(string)]
	}).(BastionSessionOutput)
}

func init() {
	pulumi.RegisterOutputType(BastionSessionOutput{})
	pulumi.RegisterOutputType(BastionSessionPtrOutput{})
	pulumi.RegisterOutputType(BastionSessionArrayOutput{})
	pulumi.RegisterOutputType(BastionSessionMapOutput{})
}
