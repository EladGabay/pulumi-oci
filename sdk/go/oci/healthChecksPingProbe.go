// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package oci

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource provides the Ping Probe resource in Oracle Cloud Infrastructure Health Checks service.
//
// Creates an on-demand ping probe. The location response header contains the URL for
// fetching probe results.
//
// *Note:* The on-demand probe configuration is not saved.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-oci/sdk/go/oci"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := oci.NewHealthChecksPingProbe(ctx, "testPingProbe", &oci.HealthChecksPingProbeArgs{
// 			CompartmentId:     pulumi.Any(_var.Compartment_id),
// 			Protocol:          pulumi.Any(_var.Ping_probe_protocol),
// 			Targets:           pulumi.Any(_var.Ping_probe_targets),
// 			Port:              pulumi.Any(_var.Ping_probe_port),
// 			TimeoutInSeconds:  pulumi.Any(_var.Ping_probe_timeout_in_seconds),
// 			VantagePointNames: pulumi.Any(_var.Ping_probe_vantage_point_names),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// PingProbes can be imported using the `id`, e.g.
//
// ```sh
//  $ pulumi import oci:index/healthChecksPingProbe:HealthChecksPingProbe test_ping_probe "id"
// ```
type HealthChecksPingProbe struct {
	pulumi.CustomResourceState

	// The OCID of the compartment.
	CompartmentId pulumi.StringOutput `pulumi:"compartmentId"`
	// The region where updates must be made and where results must be fetched from.
	HomeRegion pulumi.StringOutput `pulumi:"homeRegion"`
	// The port on which to probe endpoints. If unspecified, probes will use the default port of their protocol.
	Port pulumi.IntOutput `pulumi:"port"`
	// The protocols for ping probes.
	Protocol pulumi.StringOutput `pulumi:"protocol"`
	// A URL for fetching the probe results.
	ResultsUrl pulumi.StringOutput `pulumi:"resultsUrl"`
	// A list of targets (hostnames or IP addresses) of the probe.
	Targets pulumi.StringArrayOutput `pulumi:"targets"`
	// The RFC 3339-formatted creation date and time of the probe.
	TimeCreated pulumi.StringOutput `pulumi:"timeCreated"`
	// The probe timeout in seconds. Valid values: 10, 20, 30, and 60. The probe timeout must be less than or equal to `intervalInSeconds` for monitors.
	TimeoutInSeconds pulumi.IntOutput `pulumi:"timeoutInSeconds"`
	// A list of names of vantage points from which to execute the probe.
	VantagePointNames pulumi.StringArrayOutput `pulumi:"vantagePointNames"`
}

// NewHealthChecksPingProbe registers a new resource with the given unique name, arguments, and options.
func NewHealthChecksPingProbe(ctx *pulumi.Context,
	name string, args *HealthChecksPingProbeArgs, opts ...pulumi.ResourceOption) (*HealthChecksPingProbe, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CompartmentId == nil {
		return nil, errors.New("invalid value for required argument 'CompartmentId'")
	}
	if args.Protocol == nil {
		return nil, errors.New("invalid value for required argument 'Protocol'")
	}
	if args.Targets == nil {
		return nil, errors.New("invalid value for required argument 'Targets'")
	}
	var resource HealthChecksPingProbe
	err := ctx.RegisterResource("oci:index/healthChecksPingProbe:HealthChecksPingProbe", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetHealthChecksPingProbe gets an existing HealthChecksPingProbe resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetHealthChecksPingProbe(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *HealthChecksPingProbeState, opts ...pulumi.ResourceOption) (*HealthChecksPingProbe, error) {
	var resource HealthChecksPingProbe
	err := ctx.ReadResource("oci:index/healthChecksPingProbe:HealthChecksPingProbe", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering HealthChecksPingProbe resources.
type healthChecksPingProbeState struct {
	// The OCID of the compartment.
	CompartmentId *string `pulumi:"compartmentId"`
	// The region where updates must be made and where results must be fetched from.
	HomeRegion *string `pulumi:"homeRegion"`
	// The port on which to probe endpoints. If unspecified, probes will use the default port of their protocol.
	Port *int `pulumi:"port"`
	// The protocols for ping probes.
	Protocol *string `pulumi:"protocol"`
	// A URL for fetching the probe results.
	ResultsUrl *string `pulumi:"resultsUrl"`
	// A list of targets (hostnames or IP addresses) of the probe.
	Targets []string `pulumi:"targets"`
	// The RFC 3339-formatted creation date and time of the probe.
	TimeCreated *string `pulumi:"timeCreated"`
	// The probe timeout in seconds. Valid values: 10, 20, 30, and 60. The probe timeout must be less than or equal to `intervalInSeconds` for monitors.
	TimeoutInSeconds *int `pulumi:"timeoutInSeconds"`
	// A list of names of vantage points from which to execute the probe.
	VantagePointNames []string `pulumi:"vantagePointNames"`
}

type HealthChecksPingProbeState struct {
	// The OCID of the compartment.
	CompartmentId pulumi.StringPtrInput
	// The region where updates must be made and where results must be fetched from.
	HomeRegion pulumi.StringPtrInput
	// The port on which to probe endpoints. If unspecified, probes will use the default port of their protocol.
	Port pulumi.IntPtrInput
	// The protocols for ping probes.
	Protocol pulumi.StringPtrInput
	// A URL for fetching the probe results.
	ResultsUrl pulumi.StringPtrInput
	// A list of targets (hostnames or IP addresses) of the probe.
	Targets pulumi.StringArrayInput
	// The RFC 3339-formatted creation date and time of the probe.
	TimeCreated pulumi.StringPtrInput
	// The probe timeout in seconds. Valid values: 10, 20, 30, and 60. The probe timeout must be less than or equal to `intervalInSeconds` for monitors.
	TimeoutInSeconds pulumi.IntPtrInput
	// A list of names of vantage points from which to execute the probe.
	VantagePointNames pulumi.StringArrayInput
}

func (HealthChecksPingProbeState) ElementType() reflect.Type {
	return reflect.TypeOf((*healthChecksPingProbeState)(nil)).Elem()
}

type healthChecksPingProbeArgs struct {
	// The OCID of the compartment.
	CompartmentId string `pulumi:"compartmentId"`
	// The port on which to probe endpoints. If unspecified, probes will use the default port of their protocol.
	Port *int `pulumi:"port"`
	// The protocols for ping probes.
	Protocol string `pulumi:"protocol"`
	// A list of targets (hostnames or IP addresses) of the probe.
	Targets []string `pulumi:"targets"`
	// The probe timeout in seconds. Valid values: 10, 20, 30, and 60. The probe timeout must be less than or equal to `intervalInSeconds` for monitors.
	TimeoutInSeconds *int `pulumi:"timeoutInSeconds"`
	// A list of names of vantage points from which to execute the probe.
	VantagePointNames []string `pulumi:"vantagePointNames"`
}

// The set of arguments for constructing a HealthChecksPingProbe resource.
type HealthChecksPingProbeArgs struct {
	// The OCID of the compartment.
	CompartmentId pulumi.StringInput
	// The port on which to probe endpoints. If unspecified, probes will use the default port of their protocol.
	Port pulumi.IntPtrInput
	// The protocols for ping probes.
	Protocol pulumi.StringInput
	// A list of targets (hostnames or IP addresses) of the probe.
	Targets pulumi.StringArrayInput
	// The probe timeout in seconds. Valid values: 10, 20, 30, and 60. The probe timeout must be less than or equal to `intervalInSeconds` for monitors.
	TimeoutInSeconds pulumi.IntPtrInput
	// A list of names of vantage points from which to execute the probe.
	VantagePointNames pulumi.StringArrayInput
}

func (HealthChecksPingProbeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*healthChecksPingProbeArgs)(nil)).Elem()
}

type HealthChecksPingProbeInput interface {
	pulumi.Input

	ToHealthChecksPingProbeOutput() HealthChecksPingProbeOutput
	ToHealthChecksPingProbeOutputWithContext(ctx context.Context) HealthChecksPingProbeOutput
}

func (*HealthChecksPingProbe) ElementType() reflect.Type {
	return reflect.TypeOf((*HealthChecksPingProbe)(nil))
}

func (i *HealthChecksPingProbe) ToHealthChecksPingProbeOutput() HealthChecksPingProbeOutput {
	return i.ToHealthChecksPingProbeOutputWithContext(context.Background())
}

func (i *HealthChecksPingProbe) ToHealthChecksPingProbeOutputWithContext(ctx context.Context) HealthChecksPingProbeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HealthChecksPingProbeOutput)
}

func (i *HealthChecksPingProbe) ToHealthChecksPingProbePtrOutput() HealthChecksPingProbePtrOutput {
	return i.ToHealthChecksPingProbePtrOutputWithContext(context.Background())
}

func (i *HealthChecksPingProbe) ToHealthChecksPingProbePtrOutputWithContext(ctx context.Context) HealthChecksPingProbePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HealthChecksPingProbePtrOutput)
}

type HealthChecksPingProbePtrInput interface {
	pulumi.Input

	ToHealthChecksPingProbePtrOutput() HealthChecksPingProbePtrOutput
	ToHealthChecksPingProbePtrOutputWithContext(ctx context.Context) HealthChecksPingProbePtrOutput
}

type healthChecksPingProbePtrType HealthChecksPingProbeArgs

func (*healthChecksPingProbePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HealthChecksPingProbe)(nil))
}

func (i *healthChecksPingProbePtrType) ToHealthChecksPingProbePtrOutput() HealthChecksPingProbePtrOutput {
	return i.ToHealthChecksPingProbePtrOutputWithContext(context.Background())
}

func (i *healthChecksPingProbePtrType) ToHealthChecksPingProbePtrOutputWithContext(ctx context.Context) HealthChecksPingProbePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HealthChecksPingProbePtrOutput)
}

// HealthChecksPingProbeArrayInput is an input type that accepts HealthChecksPingProbeArray and HealthChecksPingProbeArrayOutput values.
// You can construct a concrete instance of `HealthChecksPingProbeArrayInput` via:
//
//          HealthChecksPingProbeArray{ HealthChecksPingProbeArgs{...} }
type HealthChecksPingProbeArrayInput interface {
	pulumi.Input

	ToHealthChecksPingProbeArrayOutput() HealthChecksPingProbeArrayOutput
	ToHealthChecksPingProbeArrayOutputWithContext(context.Context) HealthChecksPingProbeArrayOutput
}

type HealthChecksPingProbeArray []HealthChecksPingProbeInput

func (HealthChecksPingProbeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*HealthChecksPingProbe)(nil)).Elem()
}

func (i HealthChecksPingProbeArray) ToHealthChecksPingProbeArrayOutput() HealthChecksPingProbeArrayOutput {
	return i.ToHealthChecksPingProbeArrayOutputWithContext(context.Background())
}

func (i HealthChecksPingProbeArray) ToHealthChecksPingProbeArrayOutputWithContext(ctx context.Context) HealthChecksPingProbeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HealthChecksPingProbeArrayOutput)
}

// HealthChecksPingProbeMapInput is an input type that accepts HealthChecksPingProbeMap and HealthChecksPingProbeMapOutput values.
// You can construct a concrete instance of `HealthChecksPingProbeMapInput` via:
//
//          HealthChecksPingProbeMap{ "key": HealthChecksPingProbeArgs{...} }
type HealthChecksPingProbeMapInput interface {
	pulumi.Input

	ToHealthChecksPingProbeMapOutput() HealthChecksPingProbeMapOutput
	ToHealthChecksPingProbeMapOutputWithContext(context.Context) HealthChecksPingProbeMapOutput
}

type HealthChecksPingProbeMap map[string]HealthChecksPingProbeInput

func (HealthChecksPingProbeMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*HealthChecksPingProbe)(nil)).Elem()
}

func (i HealthChecksPingProbeMap) ToHealthChecksPingProbeMapOutput() HealthChecksPingProbeMapOutput {
	return i.ToHealthChecksPingProbeMapOutputWithContext(context.Background())
}

func (i HealthChecksPingProbeMap) ToHealthChecksPingProbeMapOutputWithContext(ctx context.Context) HealthChecksPingProbeMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HealthChecksPingProbeMapOutput)
}

type HealthChecksPingProbeOutput struct {
	*pulumi.OutputState
}

func (HealthChecksPingProbeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HealthChecksPingProbe)(nil))
}

func (o HealthChecksPingProbeOutput) ToHealthChecksPingProbeOutput() HealthChecksPingProbeOutput {
	return o
}

func (o HealthChecksPingProbeOutput) ToHealthChecksPingProbeOutputWithContext(ctx context.Context) HealthChecksPingProbeOutput {
	return o
}

func (o HealthChecksPingProbeOutput) ToHealthChecksPingProbePtrOutput() HealthChecksPingProbePtrOutput {
	return o.ToHealthChecksPingProbePtrOutputWithContext(context.Background())
}

func (o HealthChecksPingProbeOutput) ToHealthChecksPingProbePtrOutputWithContext(ctx context.Context) HealthChecksPingProbePtrOutput {
	return o.ApplyT(func(v HealthChecksPingProbe) *HealthChecksPingProbe {
		return &v
	}).(HealthChecksPingProbePtrOutput)
}

type HealthChecksPingProbePtrOutput struct {
	*pulumi.OutputState
}

func (HealthChecksPingProbePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HealthChecksPingProbe)(nil))
}

func (o HealthChecksPingProbePtrOutput) ToHealthChecksPingProbePtrOutput() HealthChecksPingProbePtrOutput {
	return o
}

func (o HealthChecksPingProbePtrOutput) ToHealthChecksPingProbePtrOutputWithContext(ctx context.Context) HealthChecksPingProbePtrOutput {
	return o
}

type HealthChecksPingProbeArrayOutput struct{ *pulumi.OutputState }

func (HealthChecksPingProbeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HealthChecksPingProbe)(nil))
}

func (o HealthChecksPingProbeArrayOutput) ToHealthChecksPingProbeArrayOutput() HealthChecksPingProbeArrayOutput {
	return o
}

func (o HealthChecksPingProbeArrayOutput) ToHealthChecksPingProbeArrayOutputWithContext(ctx context.Context) HealthChecksPingProbeArrayOutput {
	return o
}

func (o HealthChecksPingProbeArrayOutput) Index(i pulumi.IntInput) HealthChecksPingProbeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) HealthChecksPingProbe {
		return vs[0].([]HealthChecksPingProbe)[vs[1].(int)]
	}).(HealthChecksPingProbeOutput)
}

type HealthChecksPingProbeMapOutput struct{ *pulumi.OutputState }

func (HealthChecksPingProbeMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]HealthChecksPingProbe)(nil))
}

func (o HealthChecksPingProbeMapOutput) ToHealthChecksPingProbeMapOutput() HealthChecksPingProbeMapOutput {
	return o
}

func (o HealthChecksPingProbeMapOutput) ToHealthChecksPingProbeMapOutputWithContext(ctx context.Context) HealthChecksPingProbeMapOutput {
	return o
}

func (o HealthChecksPingProbeMapOutput) MapIndex(k pulumi.StringInput) HealthChecksPingProbeOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) HealthChecksPingProbe {
		return vs[0].(map[string]HealthChecksPingProbe)[vs[1].(string)]
	}).(HealthChecksPingProbeOutput)
}

func init() {
	pulumi.RegisterOutputType(HealthChecksPingProbeOutput{})
	pulumi.RegisterOutputType(HealthChecksPingProbePtrOutput{})
	pulumi.RegisterOutputType(HealthChecksPingProbeArrayOutput{})
	pulumi.RegisterOutputType(HealthChecksPingProbeMapOutput{})
}
