// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci
{
    public static class GetEmailSenders
    {
        /// <summary>
        /// This data source provides the list of Senders in Oracle Cloud Infrastructure Email service.
        /// 
        /// Gets a collection of approved sender email addresses and sender IDs.
        /// 
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var testSenders = Output.Create(Oci.GetEmailSenders.InvokeAsync(new Oci.GetEmailSendersArgs
        ///         {
        ///             CompartmentId = @var.Compartment_id,
        ///             Domain = @var.Sender_domain,
        ///             EmailAddress = @var.Sender_email_address,
        ///             State = @var.Sender_state,
        ///         }));
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetEmailSendersResult> InvokeAsync(GetEmailSendersArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetEmailSendersResult>("oci:index/getEmailSenders:GetEmailSenders", args ?? new GetEmailSendersArgs(), options.WithVersion());
    }


    public sealed class GetEmailSendersArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The OCID for the compartment.
        /// </summary>
        [Input("compartmentId", required: true)]
        public string CompartmentId { get; set; } = null!;

        /// <summary>
        /// A filter to only return resources that match the given domain exactly.
        /// </summary>
        [Input("domain")]
        public string? Domain { get; set; }

        /// <summary>
        /// The email address of the approved sender.
        /// </summary>
        [Input("emailAddress")]
        public string? EmailAddress { get; set; }

        [Input("filters")]
        private List<Inputs.GetEmailSendersFilterArgs>? _filters;
        public List<Inputs.GetEmailSendersFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetEmailSendersFilterArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// The current state of a sender.
        /// </summary>
        [Input("state")]
        public string? State { get; set; }

        public GetEmailSendersArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetEmailSendersResult
    {
        /// <summary>
        /// The OCID for the compartment.
        /// </summary>
        public readonly string CompartmentId;
        public readonly string? Domain;
        /// <summary>
        /// The email address of the sender.
        /// </summary>
        public readonly string? EmailAddress;
        public readonly ImmutableArray<Outputs.GetEmailSendersFilterResult> Filters;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The list of senders.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetEmailSendersSenderResult> Senders;
        /// <summary>
        /// The current status of the approved sender.
        /// </summary>
        public readonly string? State;

        [OutputConstructor]
        private GetEmailSendersResult(
            string compartmentId,

            string? domain,

            string? emailAddress,

            ImmutableArray<Outputs.GetEmailSendersFilterResult> filters,

            string id,

            ImmutableArray<Outputs.GetEmailSendersSenderResult> senders,

            string? state)
        {
            CompartmentId = compartmentId;
            Domain = domain;
            EmailAddress = emailAddress;
            Filters = filters;
            Id = id;
            Senders = senders;
            State = state;
        }
    }
}
