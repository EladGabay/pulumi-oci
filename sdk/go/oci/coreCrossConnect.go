// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package oci

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource provides the Cross Connect resource in Oracle Cloud Infrastructure Core service.
//
// Creates a new cross-connect. Oracle recommends you create each cross-connect in a
// [CrossConnectGroup](https://docs.cloud.oracle.com/iaas/api/#/en/iaas/latest/CrossConnectGroup) so you can use link aggregation
// with the connection.
//
// After creating the `CrossConnect` object, you need to go the FastConnect location
// and request to have the physical cable installed. For more information, see
// [FastConnect Overview](https://docs.cloud.oracle.com/iaas/Content/Network/Concepts/fastconnect.htm).
//
// For the purposes of access control, you must provide the [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the
// compartment where you want the cross-connect to reside. If you're
// not sure which compartment to use, put the cross-connect in the
// same compartment with your VCN. For more information about
// compartments and access control, see
// [Overview of the IAM Service](https://docs.cloud.oracle.com/iaas/Content/Identity/Concepts/overview.htm).
// For information about OCIDs, see
// [Resource Identifiers](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
//
// You may optionally specify a *display name* for the cross-connect.
// It does not have to be unique, and you can change it. Avoid entering confidential information.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-oci/sdk/go/oci"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := oci.NewCoreCrossConnect(ctx, "testCrossConnect", &oci.CoreCrossConnectArgs{
// 			CompartmentId:         pulumi.Any(_var.Compartment_id),
// 			LocationName:          pulumi.Any(_var.Cross_connect_location_name),
// 			PortSpeedShapeName:    pulumi.Any(_var.Cross_connect_port_speed_shape_name),
// 			CrossConnectGroupId:   pulumi.Any(oci_core_cross_connect_group.Test_cross_connect_group.Id),
// 			CustomerReferenceName: pulumi.Any(_var.Cross_connect_customer_reference_name),
// 			DefinedTags: pulumi.AnyMap{
// 				"Operations.CostCenter": pulumi.Any("42"),
// 			},
// 			DisplayName:                          pulumi.Any(_var.Cross_connect_display_name),
// 			FarCrossConnectOrCrossConnectGroupId: pulumi.Any(oci_core_cross_connect_group.Test_cross_connect_group.Id),
// 			FreeformTags: pulumi.AnyMap{
// 				"Department": pulumi.Any("Finance"),
// 			},
// 			NearCrossConnectOrCrossConnectGroupId: pulumi.Any(oci_core_cross_connect_group.Test_cross_connect_group.Id),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// CrossConnects can be imported using the `id`, e.g.
//
// ```sh
//  $ pulumi import oci:index/coreCrossConnect:CoreCrossConnect test_cross_connect "id"
// ```
type CoreCrossConnect struct {
	pulumi.CustomResourceState

	// (Updatable) The OCID of the compartment to contain the cross-connect.
	CompartmentId pulumi.StringOutput `pulumi:"compartmentId"`
	// The OCID of the cross-connect group to put this cross-connect in.
	CrossConnectGroupId pulumi.StringOutput `pulumi:"crossConnectGroupId"`
	// (Updatable) A reference name or identifier for the physical fiber connection that this cross-connect uses.
	CustomerReferenceName pulumi.StringOutput `pulumi:"customerReferenceName"`
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Operations.CostCenter": "42"}`
	DefinedTags pulumi.MapOutput `pulumi:"definedTags"`
	// (Updatable) A user-friendly name. Does not have to be unique, and it's changeable. Avoid entering confidential information.
	DisplayName pulumi.StringOutput `pulumi:"displayName"`
	// If you already have an existing cross-connect or cross-connect group at this FastConnect location, and you want this new cross-connect to be on a different router (for the purposes of redundancy), provide the OCID of that existing cross-connect or cross-connect group.
	FarCrossConnectOrCrossConnectGroupId pulumi.StringOutput `pulumi:"farCrossConnectOrCrossConnectGroupId"`
	// (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Department": "Finance"}`
	FreeformTags pulumi.MapOutput `pulumi:"freeformTags"`
	// (Updatable) Set to true to activate the cross-connect. You activate it after the physical cabling is complete, and you've confirmed the cross-connect's light levels are good and your side of the interface is up. Activation indicates to Oracle that the physical connection is ready.
	IsActive pulumi.BoolPtrOutput `pulumi:"isActive"`
	// The name of the FastConnect location where this cross-connect will be installed. To get a list of the available locations, see [ListCrossConnectLocations](https://docs.cloud.oracle.com/iaas/api/#/en/iaas/20160918/CrossConnectLocation/ListCrossConnectLocations).  Example: `CyrusOne, Chandler, AZ`
	LocationName pulumi.StringOutput `pulumi:"locationName"`
	// If you already have an existing cross-connect or cross-connect group at this FastConnect location, and you want this new cross-connect to be on the same router, provide the OCID of that existing cross-connect or cross-connect group.
	NearCrossConnectOrCrossConnectGroupId pulumi.StringOutput `pulumi:"nearCrossConnectOrCrossConnectGroupId"`
	// A string identifying the meet-me room port for this cross-connect.
	PortName pulumi.StringOutput `pulumi:"portName"`
	// The port speed for this cross-connect. To get a list of the available port speeds, see [ListCrossConnectPortSpeedShapes](https://docs.cloud.oracle.com/iaas/api/#/en/iaas/latest/CrossConnectPortSpeedShape/ListCrossconnectPortSpeedShapes).  Example: `10 Gbps`
	PortSpeedShapeName pulumi.StringOutput `pulumi:"portSpeedShapeName"`
	// The cross-connect's current state.
	State pulumi.StringOutput `pulumi:"state"`
	// The date and time the cross-connect was created, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).  Example: `2016-08-25T21:10:29.600Z`
	TimeCreated pulumi.StringOutput `pulumi:"timeCreated"`
}

// NewCoreCrossConnect registers a new resource with the given unique name, arguments, and options.
func NewCoreCrossConnect(ctx *pulumi.Context,
	name string, args *CoreCrossConnectArgs, opts ...pulumi.ResourceOption) (*CoreCrossConnect, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CompartmentId == nil {
		return nil, errors.New("invalid value for required argument 'CompartmentId'")
	}
	if args.LocationName == nil {
		return nil, errors.New("invalid value for required argument 'LocationName'")
	}
	if args.PortSpeedShapeName == nil {
		return nil, errors.New("invalid value for required argument 'PortSpeedShapeName'")
	}
	var resource CoreCrossConnect
	err := ctx.RegisterResource("oci:index/coreCrossConnect:CoreCrossConnect", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCoreCrossConnect gets an existing CoreCrossConnect resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCoreCrossConnect(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CoreCrossConnectState, opts ...pulumi.ResourceOption) (*CoreCrossConnect, error) {
	var resource CoreCrossConnect
	err := ctx.ReadResource("oci:index/coreCrossConnect:CoreCrossConnect", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CoreCrossConnect resources.
type coreCrossConnectState struct {
	// (Updatable) The OCID of the compartment to contain the cross-connect.
	CompartmentId *string `pulumi:"compartmentId"`
	// The OCID of the cross-connect group to put this cross-connect in.
	CrossConnectGroupId *string `pulumi:"crossConnectGroupId"`
	// (Updatable) A reference name or identifier for the physical fiber connection that this cross-connect uses.
	CustomerReferenceName *string `pulumi:"customerReferenceName"`
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Operations.CostCenter": "42"}`
	DefinedTags map[string]interface{} `pulumi:"definedTags"`
	// (Updatable) A user-friendly name. Does not have to be unique, and it's changeable. Avoid entering confidential information.
	DisplayName *string `pulumi:"displayName"`
	// If you already have an existing cross-connect or cross-connect group at this FastConnect location, and you want this new cross-connect to be on a different router (for the purposes of redundancy), provide the OCID of that existing cross-connect or cross-connect group.
	FarCrossConnectOrCrossConnectGroupId *string `pulumi:"farCrossConnectOrCrossConnectGroupId"`
	// (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Department": "Finance"}`
	FreeformTags map[string]interface{} `pulumi:"freeformTags"`
	// (Updatable) Set to true to activate the cross-connect. You activate it after the physical cabling is complete, and you've confirmed the cross-connect's light levels are good and your side of the interface is up. Activation indicates to Oracle that the physical connection is ready.
	IsActive *bool `pulumi:"isActive"`
	// The name of the FastConnect location where this cross-connect will be installed. To get a list of the available locations, see [ListCrossConnectLocations](https://docs.cloud.oracle.com/iaas/api/#/en/iaas/20160918/CrossConnectLocation/ListCrossConnectLocations).  Example: `CyrusOne, Chandler, AZ`
	LocationName *string `pulumi:"locationName"`
	// If you already have an existing cross-connect or cross-connect group at this FastConnect location, and you want this new cross-connect to be on the same router, provide the OCID of that existing cross-connect or cross-connect group.
	NearCrossConnectOrCrossConnectGroupId *string `pulumi:"nearCrossConnectOrCrossConnectGroupId"`
	// A string identifying the meet-me room port for this cross-connect.
	PortName *string `pulumi:"portName"`
	// The port speed for this cross-connect. To get a list of the available port speeds, see [ListCrossConnectPortSpeedShapes](https://docs.cloud.oracle.com/iaas/api/#/en/iaas/latest/CrossConnectPortSpeedShape/ListCrossconnectPortSpeedShapes).  Example: `10 Gbps`
	PortSpeedShapeName *string `pulumi:"portSpeedShapeName"`
	// The cross-connect's current state.
	State *string `pulumi:"state"`
	// The date and time the cross-connect was created, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).  Example: `2016-08-25T21:10:29.600Z`
	TimeCreated *string `pulumi:"timeCreated"`
}

type CoreCrossConnectState struct {
	// (Updatable) The OCID of the compartment to contain the cross-connect.
	CompartmentId pulumi.StringPtrInput
	// The OCID of the cross-connect group to put this cross-connect in.
	CrossConnectGroupId pulumi.StringPtrInput
	// (Updatable) A reference name or identifier for the physical fiber connection that this cross-connect uses.
	CustomerReferenceName pulumi.StringPtrInput
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Operations.CostCenter": "42"}`
	DefinedTags pulumi.MapInput
	// (Updatable) A user-friendly name. Does not have to be unique, and it's changeable. Avoid entering confidential information.
	DisplayName pulumi.StringPtrInput
	// If you already have an existing cross-connect or cross-connect group at this FastConnect location, and you want this new cross-connect to be on a different router (for the purposes of redundancy), provide the OCID of that existing cross-connect or cross-connect group.
	FarCrossConnectOrCrossConnectGroupId pulumi.StringPtrInput
	// (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Department": "Finance"}`
	FreeformTags pulumi.MapInput
	// (Updatable) Set to true to activate the cross-connect. You activate it after the physical cabling is complete, and you've confirmed the cross-connect's light levels are good and your side of the interface is up. Activation indicates to Oracle that the physical connection is ready.
	IsActive pulumi.BoolPtrInput
	// The name of the FastConnect location where this cross-connect will be installed. To get a list of the available locations, see [ListCrossConnectLocations](https://docs.cloud.oracle.com/iaas/api/#/en/iaas/20160918/CrossConnectLocation/ListCrossConnectLocations).  Example: `CyrusOne, Chandler, AZ`
	LocationName pulumi.StringPtrInput
	// If you already have an existing cross-connect or cross-connect group at this FastConnect location, and you want this new cross-connect to be on the same router, provide the OCID of that existing cross-connect or cross-connect group.
	NearCrossConnectOrCrossConnectGroupId pulumi.StringPtrInput
	// A string identifying the meet-me room port for this cross-connect.
	PortName pulumi.StringPtrInput
	// The port speed for this cross-connect. To get a list of the available port speeds, see [ListCrossConnectPortSpeedShapes](https://docs.cloud.oracle.com/iaas/api/#/en/iaas/latest/CrossConnectPortSpeedShape/ListCrossconnectPortSpeedShapes).  Example: `10 Gbps`
	PortSpeedShapeName pulumi.StringPtrInput
	// The cross-connect's current state.
	State pulumi.StringPtrInput
	// The date and time the cross-connect was created, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).  Example: `2016-08-25T21:10:29.600Z`
	TimeCreated pulumi.StringPtrInput
}

func (CoreCrossConnectState) ElementType() reflect.Type {
	return reflect.TypeOf((*coreCrossConnectState)(nil)).Elem()
}

type coreCrossConnectArgs struct {
	// (Updatable) The OCID of the compartment to contain the cross-connect.
	CompartmentId string `pulumi:"compartmentId"`
	// The OCID of the cross-connect group to put this cross-connect in.
	CrossConnectGroupId *string `pulumi:"crossConnectGroupId"`
	// (Updatable) A reference name or identifier for the physical fiber connection that this cross-connect uses.
	CustomerReferenceName *string `pulumi:"customerReferenceName"`
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Operations.CostCenter": "42"}`
	DefinedTags map[string]interface{} `pulumi:"definedTags"`
	// (Updatable) A user-friendly name. Does not have to be unique, and it's changeable. Avoid entering confidential information.
	DisplayName *string `pulumi:"displayName"`
	// If you already have an existing cross-connect or cross-connect group at this FastConnect location, and you want this new cross-connect to be on a different router (for the purposes of redundancy), provide the OCID of that existing cross-connect or cross-connect group.
	FarCrossConnectOrCrossConnectGroupId *string `pulumi:"farCrossConnectOrCrossConnectGroupId"`
	// (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Department": "Finance"}`
	FreeformTags map[string]interface{} `pulumi:"freeformTags"`
	// (Updatable) Set to true to activate the cross-connect. You activate it after the physical cabling is complete, and you've confirmed the cross-connect's light levels are good and your side of the interface is up. Activation indicates to Oracle that the physical connection is ready.
	IsActive *bool `pulumi:"isActive"`
	// The name of the FastConnect location where this cross-connect will be installed. To get a list of the available locations, see [ListCrossConnectLocations](https://docs.cloud.oracle.com/iaas/api/#/en/iaas/20160918/CrossConnectLocation/ListCrossConnectLocations).  Example: `CyrusOne, Chandler, AZ`
	LocationName string `pulumi:"locationName"`
	// If you already have an existing cross-connect or cross-connect group at this FastConnect location, and you want this new cross-connect to be on the same router, provide the OCID of that existing cross-connect or cross-connect group.
	NearCrossConnectOrCrossConnectGroupId *string `pulumi:"nearCrossConnectOrCrossConnectGroupId"`
	// The port speed for this cross-connect. To get a list of the available port speeds, see [ListCrossConnectPortSpeedShapes](https://docs.cloud.oracle.com/iaas/api/#/en/iaas/latest/CrossConnectPortSpeedShape/ListCrossconnectPortSpeedShapes).  Example: `10 Gbps`
	PortSpeedShapeName string `pulumi:"portSpeedShapeName"`
}

// The set of arguments for constructing a CoreCrossConnect resource.
type CoreCrossConnectArgs struct {
	// (Updatable) The OCID of the compartment to contain the cross-connect.
	CompartmentId pulumi.StringInput
	// The OCID of the cross-connect group to put this cross-connect in.
	CrossConnectGroupId pulumi.StringPtrInput
	// (Updatable) A reference name or identifier for the physical fiber connection that this cross-connect uses.
	CustomerReferenceName pulumi.StringPtrInput
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Operations.CostCenter": "42"}`
	DefinedTags pulumi.MapInput
	// (Updatable) A user-friendly name. Does not have to be unique, and it's changeable. Avoid entering confidential information.
	DisplayName pulumi.StringPtrInput
	// If you already have an existing cross-connect or cross-connect group at this FastConnect location, and you want this new cross-connect to be on a different router (for the purposes of redundancy), provide the OCID of that existing cross-connect or cross-connect group.
	FarCrossConnectOrCrossConnectGroupId pulumi.StringPtrInput
	// (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Department": "Finance"}`
	FreeformTags pulumi.MapInput
	// (Updatable) Set to true to activate the cross-connect. You activate it after the physical cabling is complete, and you've confirmed the cross-connect's light levels are good and your side of the interface is up. Activation indicates to Oracle that the physical connection is ready.
	IsActive pulumi.BoolPtrInput
	// The name of the FastConnect location where this cross-connect will be installed. To get a list of the available locations, see [ListCrossConnectLocations](https://docs.cloud.oracle.com/iaas/api/#/en/iaas/20160918/CrossConnectLocation/ListCrossConnectLocations).  Example: `CyrusOne, Chandler, AZ`
	LocationName pulumi.StringInput
	// If you already have an existing cross-connect or cross-connect group at this FastConnect location, and you want this new cross-connect to be on the same router, provide the OCID of that existing cross-connect or cross-connect group.
	NearCrossConnectOrCrossConnectGroupId pulumi.StringPtrInput
	// The port speed for this cross-connect. To get a list of the available port speeds, see [ListCrossConnectPortSpeedShapes](https://docs.cloud.oracle.com/iaas/api/#/en/iaas/latest/CrossConnectPortSpeedShape/ListCrossconnectPortSpeedShapes).  Example: `10 Gbps`
	PortSpeedShapeName pulumi.StringInput
}

func (CoreCrossConnectArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*coreCrossConnectArgs)(nil)).Elem()
}

type CoreCrossConnectInput interface {
	pulumi.Input

	ToCoreCrossConnectOutput() CoreCrossConnectOutput
	ToCoreCrossConnectOutputWithContext(ctx context.Context) CoreCrossConnectOutput
}

func (*CoreCrossConnect) ElementType() reflect.Type {
	return reflect.TypeOf((*CoreCrossConnect)(nil))
}

func (i *CoreCrossConnect) ToCoreCrossConnectOutput() CoreCrossConnectOutput {
	return i.ToCoreCrossConnectOutputWithContext(context.Background())
}

func (i *CoreCrossConnect) ToCoreCrossConnectOutputWithContext(ctx context.Context) CoreCrossConnectOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CoreCrossConnectOutput)
}

func (i *CoreCrossConnect) ToCoreCrossConnectPtrOutput() CoreCrossConnectPtrOutput {
	return i.ToCoreCrossConnectPtrOutputWithContext(context.Background())
}

func (i *CoreCrossConnect) ToCoreCrossConnectPtrOutputWithContext(ctx context.Context) CoreCrossConnectPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CoreCrossConnectPtrOutput)
}

type CoreCrossConnectPtrInput interface {
	pulumi.Input

	ToCoreCrossConnectPtrOutput() CoreCrossConnectPtrOutput
	ToCoreCrossConnectPtrOutputWithContext(ctx context.Context) CoreCrossConnectPtrOutput
}

type coreCrossConnectPtrType CoreCrossConnectArgs

func (*coreCrossConnectPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CoreCrossConnect)(nil))
}

func (i *coreCrossConnectPtrType) ToCoreCrossConnectPtrOutput() CoreCrossConnectPtrOutput {
	return i.ToCoreCrossConnectPtrOutputWithContext(context.Background())
}

func (i *coreCrossConnectPtrType) ToCoreCrossConnectPtrOutputWithContext(ctx context.Context) CoreCrossConnectPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CoreCrossConnectPtrOutput)
}

// CoreCrossConnectArrayInput is an input type that accepts CoreCrossConnectArray and CoreCrossConnectArrayOutput values.
// You can construct a concrete instance of `CoreCrossConnectArrayInput` via:
//
//          CoreCrossConnectArray{ CoreCrossConnectArgs{...} }
type CoreCrossConnectArrayInput interface {
	pulumi.Input

	ToCoreCrossConnectArrayOutput() CoreCrossConnectArrayOutput
	ToCoreCrossConnectArrayOutputWithContext(context.Context) CoreCrossConnectArrayOutput
}

type CoreCrossConnectArray []CoreCrossConnectInput

func (CoreCrossConnectArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CoreCrossConnect)(nil)).Elem()
}

func (i CoreCrossConnectArray) ToCoreCrossConnectArrayOutput() CoreCrossConnectArrayOutput {
	return i.ToCoreCrossConnectArrayOutputWithContext(context.Background())
}

func (i CoreCrossConnectArray) ToCoreCrossConnectArrayOutputWithContext(ctx context.Context) CoreCrossConnectArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CoreCrossConnectArrayOutput)
}

// CoreCrossConnectMapInput is an input type that accepts CoreCrossConnectMap and CoreCrossConnectMapOutput values.
// You can construct a concrete instance of `CoreCrossConnectMapInput` via:
//
//          CoreCrossConnectMap{ "key": CoreCrossConnectArgs{...} }
type CoreCrossConnectMapInput interface {
	pulumi.Input

	ToCoreCrossConnectMapOutput() CoreCrossConnectMapOutput
	ToCoreCrossConnectMapOutputWithContext(context.Context) CoreCrossConnectMapOutput
}

type CoreCrossConnectMap map[string]CoreCrossConnectInput

func (CoreCrossConnectMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CoreCrossConnect)(nil)).Elem()
}

func (i CoreCrossConnectMap) ToCoreCrossConnectMapOutput() CoreCrossConnectMapOutput {
	return i.ToCoreCrossConnectMapOutputWithContext(context.Background())
}

func (i CoreCrossConnectMap) ToCoreCrossConnectMapOutputWithContext(ctx context.Context) CoreCrossConnectMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CoreCrossConnectMapOutput)
}

type CoreCrossConnectOutput struct {
	*pulumi.OutputState
}

func (CoreCrossConnectOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CoreCrossConnect)(nil))
}

func (o CoreCrossConnectOutput) ToCoreCrossConnectOutput() CoreCrossConnectOutput {
	return o
}

func (o CoreCrossConnectOutput) ToCoreCrossConnectOutputWithContext(ctx context.Context) CoreCrossConnectOutput {
	return o
}

func (o CoreCrossConnectOutput) ToCoreCrossConnectPtrOutput() CoreCrossConnectPtrOutput {
	return o.ToCoreCrossConnectPtrOutputWithContext(context.Background())
}

func (o CoreCrossConnectOutput) ToCoreCrossConnectPtrOutputWithContext(ctx context.Context) CoreCrossConnectPtrOutput {
	return o.ApplyT(func(v CoreCrossConnect) *CoreCrossConnect {
		return &v
	}).(CoreCrossConnectPtrOutput)
}

type CoreCrossConnectPtrOutput struct {
	*pulumi.OutputState
}

func (CoreCrossConnectPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CoreCrossConnect)(nil))
}

func (o CoreCrossConnectPtrOutput) ToCoreCrossConnectPtrOutput() CoreCrossConnectPtrOutput {
	return o
}

func (o CoreCrossConnectPtrOutput) ToCoreCrossConnectPtrOutputWithContext(ctx context.Context) CoreCrossConnectPtrOutput {
	return o
}

type CoreCrossConnectArrayOutput struct{ *pulumi.OutputState }

func (CoreCrossConnectArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CoreCrossConnect)(nil))
}

func (o CoreCrossConnectArrayOutput) ToCoreCrossConnectArrayOutput() CoreCrossConnectArrayOutput {
	return o
}

func (o CoreCrossConnectArrayOutput) ToCoreCrossConnectArrayOutputWithContext(ctx context.Context) CoreCrossConnectArrayOutput {
	return o
}

func (o CoreCrossConnectArrayOutput) Index(i pulumi.IntInput) CoreCrossConnectOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CoreCrossConnect {
		return vs[0].([]CoreCrossConnect)[vs[1].(int)]
	}).(CoreCrossConnectOutput)
}

type CoreCrossConnectMapOutput struct{ *pulumi.OutputState }

func (CoreCrossConnectMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]CoreCrossConnect)(nil))
}

func (o CoreCrossConnectMapOutput) ToCoreCrossConnectMapOutput() CoreCrossConnectMapOutput {
	return o
}

func (o CoreCrossConnectMapOutput) ToCoreCrossConnectMapOutputWithContext(ctx context.Context) CoreCrossConnectMapOutput {
	return o
}

func (o CoreCrossConnectMapOutput) MapIndex(k pulumi.StringInput) CoreCrossConnectOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) CoreCrossConnect {
		return vs[0].(map[string]CoreCrossConnect)[vs[1].(string)]
	}).(CoreCrossConnectOutput)
}

func init() {
	pulumi.RegisterOutputType(CoreCrossConnectOutput{})
	pulumi.RegisterOutputType(CoreCrossConnectPtrOutput{})
	pulumi.RegisterOutputType(CoreCrossConnectArrayOutput{})
	pulumi.RegisterOutputType(CoreCrossConnectMapOutput{})
}
