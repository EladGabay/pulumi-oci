// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package oci

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource provides the Analytics Instance Private Access Channel resource in Oracle Cloud Infrastructure Analytics service.
//
// Create a Private access Channel for the Analytics instance. The operation is long-running
// and creates a new WorkRequest.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-oci/sdk/go/oci"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := oci.NewAnalyticsAnalyticsInstancePrivateAccessChannel(ctx, "testAnalyticsInstancePrivateAccessChannel", &oci.AnalyticsAnalyticsInstancePrivateAccessChannelArgs{
// 			AnalyticsInstanceId: pulumi.Any(oci_analytics_analytics_instance.Test_analytics_instance.Id),
// 			DisplayName:         pulumi.Any(_var.Analytics_instance_private_access_channel_display_name),
// 			PrivateSourceDnsZones: AnalyticsAnalyticsInstancePrivateAccessChannelPrivateSourceDnsZoneArray{
// 				&AnalyticsAnalyticsInstancePrivateAccessChannelPrivateSourceDnsZoneArgs{
// 					DnsZone:     pulumi.Any(_var.Analytics_instance_private_access_channel_private_source_dns_zones_dns_zone),
// 					Description: pulumi.Any(_var.Analytics_instance_private_access_channel_private_source_dns_zones_description),
// 				},
// 			},
// 			SubnetId: pulumi.Any(oci_core_subnet.Test_subnet.Id),
// 			VcnId:    pulumi.Any(oci_core_vcn.Test_vcn.Id),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// AnalyticsInstancePrivateAccessChannels can be imported using the `id`, e.g.
//
// ```sh
//  $ pulumi import oci:index/analyticsAnalyticsInstancePrivateAccessChannel:AnalyticsAnalyticsInstancePrivateAccessChannel test_analytics_instance_private_access_channel "analyticsInstances/{analyticsInstanceId}/privateAccessChannels/{privateAccessChannelKey}"
// ```
type AnalyticsAnalyticsInstancePrivateAccessChannel struct {
	pulumi.CustomResourceState

	// The OCID of the AnalyticsInstance.
	AnalyticsInstanceId pulumi.StringOutput `pulumi:"analyticsInstanceId"`
	// (Updatable) Display Name of the Private Access Channel.
	DisplayName pulumi.StringOutput `pulumi:"displayName"`
	// The list of IP addresses from the customer subnet connected to private access channel, used as a source Ip by Private Access Channel for network traffic from the AnalyticsInstance to Private Sources.
	EgressSourceIpAddresses pulumi.StringArrayOutput `pulumi:"egressSourceIpAddresses"`
	// IP Address of the Private Access channel.
	IpAddress pulumi.StringOutput `pulumi:"ipAddress"`
	// Private Access Channel unique identifier key.
	Key pulumi.StringOutput `pulumi:"key"`
	// (Updatable) List of Private Source DNS zones registered with Private Access Channel, where datasource hostnames from these dns zones / domains will be resolved in the peered VCN for access from Analytics Instance. Min of 1 is required and Max of 30 Private Source DNS zones can be registered.
	PrivateSourceDnsZones AnalyticsAnalyticsInstancePrivateAccessChannelPrivateSourceDnsZoneArrayOutput `pulumi:"privateSourceDnsZones"`
	// (Updatable) OCID of the customer subnet connected to private access channel.
	SubnetId pulumi.StringOutput `pulumi:"subnetId"`
	// (Updatable) OCID of the customer VCN peered with private access channel.
	VcnId pulumi.StringOutput `pulumi:"vcnId"`
}

// NewAnalyticsAnalyticsInstancePrivateAccessChannel registers a new resource with the given unique name, arguments, and options.
func NewAnalyticsAnalyticsInstancePrivateAccessChannel(ctx *pulumi.Context,
	name string, args *AnalyticsAnalyticsInstancePrivateAccessChannelArgs, opts ...pulumi.ResourceOption) (*AnalyticsAnalyticsInstancePrivateAccessChannel, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AnalyticsInstanceId == nil {
		return nil, errors.New("invalid value for required argument 'AnalyticsInstanceId'")
	}
	if args.DisplayName == nil {
		return nil, errors.New("invalid value for required argument 'DisplayName'")
	}
	if args.PrivateSourceDnsZones == nil {
		return nil, errors.New("invalid value for required argument 'PrivateSourceDnsZones'")
	}
	if args.SubnetId == nil {
		return nil, errors.New("invalid value for required argument 'SubnetId'")
	}
	if args.VcnId == nil {
		return nil, errors.New("invalid value for required argument 'VcnId'")
	}
	var resource AnalyticsAnalyticsInstancePrivateAccessChannel
	err := ctx.RegisterResource("oci:index/analyticsAnalyticsInstancePrivateAccessChannel:AnalyticsAnalyticsInstancePrivateAccessChannel", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAnalyticsAnalyticsInstancePrivateAccessChannel gets an existing AnalyticsAnalyticsInstancePrivateAccessChannel resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAnalyticsAnalyticsInstancePrivateAccessChannel(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AnalyticsAnalyticsInstancePrivateAccessChannelState, opts ...pulumi.ResourceOption) (*AnalyticsAnalyticsInstancePrivateAccessChannel, error) {
	var resource AnalyticsAnalyticsInstancePrivateAccessChannel
	err := ctx.ReadResource("oci:index/analyticsAnalyticsInstancePrivateAccessChannel:AnalyticsAnalyticsInstancePrivateAccessChannel", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AnalyticsAnalyticsInstancePrivateAccessChannel resources.
type analyticsAnalyticsInstancePrivateAccessChannelState struct {
	// The OCID of the AnalyticsInstance.
	AnalyticsInstanceId *string `pulumi:"analyticsInstanceId"`
	// (Updatable) Display Name of the Private Access Channel.
	DisplayName *string `pulumi:"displayName"`
	// The list of IP addresses from the customer subnet connected to private access channel, used as a source Ip by Private Access Channel for network traffic from the AnalyticsInstance to Private Sources.
	EgressSourceIpAddresses []string `pulumi:"egressSourceIpAddresses"`
	// IP Address of the Private Access channel.
	IpAddress *string `pulumi:"ipAddress"`
	// Private Access Channel unique identifier key.
	Key *string `pulumi:"key"`
	// (Updatable) List of Private Source DNS zones registered with Private Access Channel, where datasource hostnames from these dns zones / domains will be resolved in the peered VCN for access from Analytics Instance. Min of 1 is required and Max of 30 Private Source DNS zones can be registered.
	PrivateSourceDnsZones []AnalyticsAnalyticsInstancePrivateAccessChannelPrivateSourceDnsZone `pulumi:"privateSourceDnsZones"`
	// (Updatable) OCID of the customer subnet connected to private access channel.
	SubnetId *string `pulumi:"subnetId"`
	// (Updatable) OCID of the customer VCN peered with private access channel.
	VcnId *string `pulumi:"vcnId"`
}

type AnalyticsAnalyticsInstancePrivateAccessChannelState struct {
	// The OCID of the AnalyticsInstance.
	AnalyticsInstanceId pulumi.StringPtrInput
	// (Updatable) Display Name of the Private Access Channel.
	DisplayName pulumi.StringPtrInput
	// The list of IP addresses from the customer subnet connected to private access channel, used as a source Ip by Private Access Channel for network traffic from the AnalyticsInstance to Private Sources.
	EgressSourceIpAddresses pulumi.StringArrayInput
	// IP Address of the Private Access channel.
	IpAddress pulumi.StringPtrInput
	// Private Access Channel unique identifier key.
	Key pulumi.StringPtrInput
	// (Updatable) List of Private Source DNS zones registered with Private Access Channel, where datasource hostnames from these dns zones / domains will be resolved in the peered VCN for access from Analytics Instance. Min of 1 is required and Max of 30 Private Source DNS zones can be registered.
	PrivateSourceDnsZones AnalyticsAnalyticsInstancePrivateAccessChannelPrivateSourceDnsZoneArrayInput
	// (Updatable) OCID of the customer subnet connected to private access channel.
	SubnetId pulumi.StringPtrInput
	// (Updatable) OCID of the customer VCN peered with private access channel.
	VcnId pulumi.StringPtrInput
}

func (AnalyticsAnalyticsInstancePrivateAccessChannelState) ElementType() reflect.Type {
	return reflect.TypeOf((*analyticsAnalyticsInstancePrivateAccessChannelState)(nil)).Elem()
}

type analyticsAnalyticsInstancePrivateAccessChannelArgs struct {
	// The OCID of the AnalyticsInstance.
	AnalyticsInstanceId string `pulumi:"analyticsInstanceId"`
	// (Updatable) Display Name of the Private Access Channel.
	DisplayName string `pulumi:"displayName"`
	// (Updatable) List of Private Source DNS zones registered with Private Access Channel, where datasource hostnames from these dns zones / domains will be resolved in the peered VCN for access from Analytics Instance. Min of 1 is required and Max of 30 Private Source DNS zones can be registered.
	PrivateSourceDnsZones []AnalyticsAnalyticsInstancePrivateAccessChannelPrivateSourceDnsZone `pulumi:"privateSourceDnsZones"`
	// (Updatable) OCID of the customer subnet connected to private access channel.
	SubnetId string `pulumi:"subnetId"`
	// (Updatable) OCID of the customer VCN peered with private access channel.
	VcnId string `pulumi:"vcnId"`
}

// The set of arguments for constructing a AnalyticsAnalyticsInstancePrivateAccessChannel resource.
type AnalyticsAnalyticsInstancePrivateAccessChannelArgs struct {
	// The OCID of the AnalyticsInstance.
	AnalyticsInstanceId pulumi.StringInput
	// (Updatable) Display Name of the Private Access Channel.
	DisplayName pulumi.StringInput
	// (Updatable) List of Private Source DNS zones registered with Private Access Channel, where datasource hostnames from these dns zones / domains will be resolved in the peered VCN for access from Analytics Instance. Min of 1 is required and Max of 30 Private Source DNS zones can be registered.
	PrivateSourceDnsZones AnalyticsAnalyticsInstancePrivateAccessChannelPrivateSourceDnsZoneArrayInput
	// (Updatable) OCID of the customer subnet connected to private access channel.
	SubnetId pulumi.StringInput
	// (Updatable) OCID of the customer VCN peered with private access channel.
	VcnId pulumi.StringInput
}

func (AnalyticsAnalyticsInstancePrivateAccessChannelArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*analyticsAnalyticsInstancePrivateAccessChannelArgs)(nil)).Elem()
}

type AnalyticsAnalyticsInstancePrivateAccessChannelInput interface {
	pulumi.Input

	ToAnalyticsAnalyticsInstancePrivateAccessChannelOutput() AnalyticsAnalyticsInstancePrivateAccessChannelOutput
	ToAnalyticsAnalyticsInstancePrivateAccessChannelOutputWithContext(ctx context.Context) AnalyticsAnalyticsInstancePrivateAccessChannelOutput
}

func (*AnalyticsAnalyticsInstancePrivateAccessChannel) ElementType() reflect.Type {
	return reflect.TypeOf((*AnalyticsAnalyticsInstancePrivateAccessChannel)(nil))
}

func (i *AnalyticsAnalyticsInstancePrivateAccessChannel) ToAnalyticsAnalyticsInstancePrivateAccessChannelOutput() AnalyticsAnalyticsInstancePrivateAccessChannelOutput {
	return i.ToAnalyticsAnalyticsInstancePrivateAccessChannelOutputWithContext(context.Background())
}

func (i *AnalyticsAnalyticsInstancePrivateAccessChannel) ToAnalyticsAnalyticsInstancePrivateAccessChannelOutputWithContext(ctx context.Context) AnalyticsAnalyticsInstancePrivateAccessChannelOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnalyticsAnalyticsInstancePrivateAccessChannelOutput)
}

func (i *AnalyticsAnalyticsInstancePrivateAccessChannel) ToAnalyticsAnalyticsInstancePrivateAccessChannelPtrOutput() AnalyticsAnalyticsInstancePrivateAccessChannelPtrOutput {
	return i.ToAnalyticsAnalyticsInstancePrivateAccessChannelPtrOutputWithContext(context.Background())
}

func (i *AnalyticsAnalyticsInstancePrivateAccessChannel) ToAnalyticsAnalyticsInstancePrivateAccessChannelPtrOutputWithContext(ctx context.Context) AnalyticsAnalyticsInstancePrivateAccessChannelPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnalyticsAnalyticsInstancePrivateAccessChannelPtrOutput)
}

type AnalyticsAnalyticsInstancePrivateAccessChannelPtrInput interface {
	pulumi.Input

	ToAnalyticsAnalyticsInstancePrivateAccessChannelPtrOutput() AnalyticsAnalyticsInstancePrivateAccessChannelPtrOutput
	ToAnalyticsAnalyticsInstancePrivateAccessChannelPtrOutputWithContext(ctx context.Context) AnalyticsAnalyticsInstancePrivateAccessChannelPtrOutput
}

type analyticsAnalyticsInstancePrivateAccessChannelPtrType AnalyticsAnalyticsInstancePrivateAccessChannelArgs

func (*analyticsAnalyticsInstancePrivateAccessChannelPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AnalyticsAnalyticsInstancePrivateAccessChannel)(nil))
}

func (i *analyticsAnalyticsInstancePrivateAccessChannelPtrType) ToAnalyticsAnalyticsInstancePrivateAccessChannelPtrOutput() AnalyticsAnalyticsInstancePrivateAccessChannelPtrOutput {
	return i.ToAnalyticsAnalyticsInstancePrivateAccessChannelPtrOutputWithContext(context.Background())
}

func (i *analyticsAnalyticsInstancePrivateAccessChannelPtrType) ToAnalyticsAnalyticsInstancePrivateAccessChannelPtrOutputWithContext(ctx context.Context) AnalyticsAnalyticsInstancePrivateAccessChannelPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnalyticsAnalyticsInstancePrivateAccessChannelPtrOutput)
}

// AnalyticsAnalyticsInstancePrivateAccessChannelArrayInput is an input type that accepts AnalyticsAnalyticsInstancePrivateAccessChannelArray and AnalyticsAnalyticsInstancePrivateAccessChannelArrayOutput values.
// You can construct a concrete instance of `AnalyticsAnalyticsInstancePrivateAccessChannelArrayInput` via:
//
//          AnalyticsAnalyticsInstancePrivateAccessChannelArray{ AnalyticsAnalyticsInstancePrivateAccessChannelArgs{...} }
type AnalyticsAnalyticsInstancePrivateAccessChannelArrayInput interface {
	pulumi.Input

	ToAnalyticsAnalyticsInstancePrivateAccessChannelArrayOutput() AnalyticsAnalyticsInstancePrivateAccessChannelArrayOutput
	ToAnalyticsAnalyticsInstancePrivateAccessChannelArrayOutputWithContext(context.Context) AnalyticsAnalyticsInstancePrivateAccessChannelArrayOutput
}

type AnalyticsAnalyticsInstancePrivateAccessChannelArray []AnalyticsAnalyticsInstancePrivateAccessChannelInput

func (AnalyticsAnalyticsInstancePrivateAccessChannelArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AnalyticsAnalyticsInstancePrivateAccessChannel)(nil)).Elem()
}

func (i AnalyticsAnalyticsInstancePrivateAccessChannelArray) ToAnalyticsAnalyticsInstancePrivateAccessChannelArrayOutput() AnalyticsAnalyticsInstancePrivateAccessChannelArrayOutput {
	return i.ToAnalyticsAnalyticsInstancePrivateAccessChannelArrayOutputWithContext(context.Background())
}

func (i AnalyticsAnalyticsInstancePrivateAccessChannelArray) ToAnalyticsAnalyticsInstancePrivateAccessChannelArrayOutputWithContext(ctx context.Context) AnalyticsAnalyticsInstancePrivateAccessChannelArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnalyticsAnalyticsInstancePrivateAccessChannelArrayOutput)
}

// AnalyticsAnalyticsInstancePrivateAccessChannelMapInput is an input type that accepts AnalyticsAnalyticsInstancePrivateAccessChannelMap and AnalyticsAnalyticsInstancePrivateAccessChannelMapOutput values.
// You can construct a concrete instance of `AnalyticsAnalyticsInstancePrivateAccessChannelMapInput` via:
//
//          AnalyticsAnalyticsInstancePrivateAccessChannelMap{ "key": AnalyticsAnalyticsInstancePrivateAccessChannelArgs{...} }
type AnalyticsAnalyticsInstancePrivateAccessChannelMapInput interface {
	pulumi.Input

	ToAnalyticsAnalyticsInstancePrivateAccessChannelMapOutput() AnalyticsAnalyticsInstancePrivateAccessChannelMapOutput
	ToAnalyticsAnalyticsInstancePrivateAccessChannelMapOutputWithContext(context.Context) AnalyticsAnalyticsInstancePrivateAccessChannelMapOutput
}

type AnalyticsAnalyticsInstancePrivateAccessChannelMap map[string]AnalyticsAnalyticsInstancePrivateAccessChannelInput

func (AnalyticsAnalyticsInstancePrivateAccessChannelMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AnalyticsAnalyticsInstancePrivateAccessChannel)(nil)).Elem()
}

func (i AnalyticsAnalyticsInstancePrivateAccessChannelMap) ToAnalyticsAnalyticsInstancePrivateAccessChannelMapOutput() AnalyticsAnalyticsInstancePrivateAccessChannelMapOutput {
	return i.ToAnalyticsAnalyticsInstancePrivateAccessChannelMapOutputWithContext(context.Background())
}

func (i AnalyticsAnalyticsInstancePrivateAccessChannelMap) ToAnalyticsAnalyticsInstancePrivateAccessChannelMapOutputWithContext(ctx context.Context) AnalyticsAnalyticsInstancePrivateAccessChannelMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnalyticsAnalyticsInstancePrivateAccessChannelMapOutput)
}

type AnalyticsAnalyticsInstancePrivateAccessChannelOutput struct {
	*pulumi.OutputState
}

func (AnalyticsAnalyticsInstancePrivateAccessChannelOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AnalyticsAnalyticsInstancePrivateAccessChannel)(nil))
}

func (o AnalyticsAnalyticsInstancePrivateAccessChannelOutput) ToAnalyticsAnalyticsInstancePrivateAccessChannelOutput() AnalyticsAnalyticsInstancePrivateAccessChannelOutput {
	return o
}

func (o AnalyticsAnalyticsInstancePrivateAccessChannelOutput) ToAnalyticsAnalyticsInstancePrivateAccessChannelOutputWithContext(ctx context.Context) AnalyticsAnalyticsInstancePrivateAccessChannelOutput {
	return o
}

func (o AnalyticsAnalyticsInstancePrivateAccessChannelOutput) ToAnalyticsAnalyticsInstancePrivateAccessChannelPtrOutput() AnalyticsAnalyticsInstancePrivateAccessChannelPtrOutput {
	return o.ToAnalyticsAnalyticsInstancePrivateAccessChannelPtrOutputWithContext(context.Background())
}

func (o AnalyticsAnalyticsInstancePrivateAccessChannelOutput) ToAnalyticsAnalyticsInstancePrivateAccessChannelPtrOutputWithContext(ctx context.Context) AnalyticsAnalyticsInstancePrivateAccessChannelPtrOutput {
	return o.ApplyT(func(v AnalyticsAnalyticsInstancePrivateAccessChannel) *AnalyticsAnalyticsInstancePrivateAccessChannel {
		return &v
	}).(AnalyticsAnalyticsInstancePrivateAccessChannelPtrOutput)
}

type AnalyticsAnalyticsInstancePrivateAccessChannelPtrOutput struct {
	*pulumi.OutputState
}

func (AnalyticsAnalyticsInstancePrivateAccessChannelPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AnalyticsAnalyticsInstancePrivateAccessChannel)(nil))
}

func (o AnalyticsAnalyticsInstancePrivateAccessChannelPtrOutput) ToAnalyticsAnalyticsInstancePrivateAccessChannelPtrOutput() AnalyticsAnalyticsInstancePrivateAccessChannelPtrOutput {
	return o
}

func (o AnalyticsAnalyticsInstancePrivateAccessChannelPtrOutput) ToAnalyticsAnalyticsInstancePrivateAccessChannelPtrOutputWithContext(ctx context.Context) AnalyticsAnalyticsInstancePrivateAccessChannelPtrOutput {
	return o
}

type AnalyticsAnalyticsInstancePrivateAccessChannelArrayOutput struct{ *pulumi.OutputState }

func (AnalyticsAnalyticsInstancePrivateAccessChannelArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AnalyticsAnalyticsInstancePrivateAccessChannel)(nil))
}

func (o AnalyticsAnalyticsInstancePrivateAccessChannelArrayOutput) ToAnalyticsAnalyticsInstancePrivateAccessChannelArrayOutput() AnalyticsAnalyticsInstancePrivateAccessChannelArrayOutput {
	return o
}

func (o AnalyticsAnalyticsInstancePrivateAccessChannelArrayOutput) ToAnalyticsAnalyticsInstancePrivateAccessChannelArrayOutputWithContext(ctx context.Context) AnalyticsAnalyticsInstancePrivateAccessChannelArrayOutput {
	return o
}

func (o AnalyticsAnalyticsInstancePrivateAccessChannelArrayOutput) Index(i pulumi.IntInput) AnalyticsAnalyticsInstancePrivateAccessChannelOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AnalyticsAnalyticsInstancePrivateAccessChannel {
		return vs[0].([]AnalyticsAnalyticsInstancePrivateAccessChannel)[vs[1].(int)]
	}).(AnalyticsAnalyticsInstancePrivateAccessChannelOutput)
}

type AnalyticsAnalyticsInstancePrivateAccessChannelMapOutput struct{ *pulumi.OutputState }

func (AnalyticsAnalyticsInstancePrivateAccessChannelMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]AnalyticsAnalyticsInstancePrivateAccessChannel)(nil))
}

func (o AnalyticsAnalyticsInstancePrivateAccessChannelMapOutput) ToAnalyticsAnalyticsInstancePrivateAccessChannelMapOutput() AnalyticsAnalyticsInstancePrivateAccessChannelMapOutput {
	return o
}

func (o AnalyticsAnalyticsInstancePrivateAccessChannelMapOutput) ToAnalyticsAnalyticsInstancePrivateAccessChannelMapOutputWithContext(ctx context.Context) AnalyticsAnalyticsInstancePrivateAccessChannelMapOutput {
	return o
}

func (o AnalyticsAnalyticsInstancePrivateAccessChannelMapOutput) MapIndex(k pulumi.StringInput) AnalyticsAnalyticsInstancePrivateAccessChannelOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) AnalyticsAnalyticsInstancePrivateAccessChannel {
		return vs[0].(map[string]AnalyticsAnalyticsInstancePrivateAccessChannel)[vs[1].(string)]
	}).(AnalyticsAnalyticsInstancePrivateAccessChannelOutput)
}

func init() {
	pulumi.RegisterOutputType(AnalyticsAnalyticsInstancePrivateAccessChannelOutput{})
	pulumi.RegisterOutputType(AnalyticsAnalyticsInstancePrivateAccessChannelPtrOutput{})
	pulumi.RegisterOutputType(AnalyticsAnalyticsInstancePrivateAccessChannelArrayOutput{})
	pulumi.RegisterOutputType(AnalyticsAnalyticsInstancePrivateAccessChannelMapOutput{})
}
