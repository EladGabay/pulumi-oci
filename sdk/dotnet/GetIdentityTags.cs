// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci
{
    public static class GetIdentityTags
    {
        /// <summary>
        /// This data source provides the list of Tags in Oracle Cloud Infrastructure Identity service.
        /// 
        /// Lists the tag definitions in the specified tag namespace.
        /// 
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var testTags = Output.Create(Oci.GetIdentityTags.InvokeAsync(new Oci.GetIdentityTagsArgs
        ///         {
        ///             TagNamespaceId = oci_identity_tag_namespace.Test_tag_namespace.Id,
        ///             State = @var.Tag_state,
        ///         }));
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetIdentityTagsResult> InvokeAsync(GetIdentityTagsArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetIdentityTagsResult>("oci:index/getIdentityTags:GetIdentityTags", args ?? new GetIdentityTagsArgs(), options.WithVersion());
    }


    public sealed class GetIdentityTagsArgs : Pulumi.InvokeArgs
    {
        [Input("filters")]
        private List<Inputs.GetIdentityTagsFilterArgs>? _filters;
        public List<Inputs.GetIdentityTagsFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetIdentityTagsFilterArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// A filter to only return resources that match the given lifecycle state.  The state value is case-insensitive.
        /// </summary>
        [Input("state")]
        public string? State { get; set; }

        /// <summary>
        /// The OCID of the tag namespace.
        /// </summary>
        [Input("tagNamespaceId", required: true)]
        public string TagNamespaceId { get; set; } = null!;

        public GetIdentityTagsArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetIdentityTagsResult
    {
        public readonly ImmutableArray<Outputs.GetIdentityTagsFilterResult> Filters;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The tag's current state. After creating a tag, make sure its `lifecycleState` is ACTIVE before using it. After retiring a tag, make sure its `lifecycleState` is INACTIVE before using it. If you delete a tag, you cannot delete another tag until the deleted tag's `lifecycleState` changes from DELETING to DELETED.
        /// </summary>
        public readonly string? State;
        /// <summary>
        /// The OCID of the namespace that contains the tag definition.
        /// </summary>
        public readonly string TagNamespaceId;
        /// <summary>
        /// The list of tags.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetIdentityTagsTagResult> Tags;

        [OutputConstructor]
        private GetIdentityTagsResult(
            ImmutableArray<Outputs.GetIdentityTagsFilterResult> filters,

            string id,

            string? state,

            string tagNamespaceId,

            ImmutableArray<Outputs.GetIdentityTagsTagResult> tags)
        {
            Filters = filters;
            Id = id;
            State = state;
            TagNamespaceId = tagNamespaceId;
            Tags = tags;
        }
    }
}
