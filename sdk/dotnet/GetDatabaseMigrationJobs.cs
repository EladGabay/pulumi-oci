// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci
{
    public static class GetDatabaseMigrationJobs
    {
        /// <summary>
        /// This data source provides the list of Jobs in Oracle Cloud Infrastructure Database Migration service.
        /// 
        /// List all the names of the Migration jobs associated to the specified
        /// migration site.
        /// 
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var testJobs = Output.Create(Oci.GetDatabaseMigrationJobs.InvokeAsync(new Oci.GetDatabaseMigrationJobsArgs
        ///         {
        ///             MigrationId = oci_database_migration_migration.Test_migration.Id,
        ///             DisplayName = @var.Job_display_name,
        ///             State = @var.Job_state,
        ///         }));
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetDatabaseMigrationJobsResult> InvokeAsync(GetDatabaseMigrationJobsArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetDatabaseMigrationJobsResult>("oci:index/getDatabaseMigrationJobs:GetDatabaseMigrationJobs", args ?? new GetDatabaseMigrationJobsArgs(), options.WithVersion());
    }


    public sealed class GetDatabaseMigrationJobsArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// A filter to return only resources that match the entire display name given.
        /// </summary>
        [Input("displayName")]
        public string? DisplayName { get; set; }

        [Input("filters")]
        private List<Inputs.GetDatabaseMigrationJobsFilterArgs>? _filters;
        public List<Inputs.GetDatabaseMigrationJobsFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetDatabaseMigrationJobsFilterArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// The ID of the migration in which to list resources.
        /// </summary>
        [Input("migrationId", required: true)]
        public string MigrationId { get; set; } = null!;

        /// <summary>
        /// The lifecycle state of the Migration Job.
        /// </summary>
        [Input("state")]
        public string? State { get; set; }

        public GetDatabaseMigrationJobsArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetDatabaseMigrationJobsResult
    {
        /// <summary>
        /// Name of the job.
        /// </summary>
        public readonly string? DisplayName;
        public readonly ImmutableArray<Outputs.GetDatabaseMigrationJobsFilterResult> Filters;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The list of job_collection.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetDatabaseMigrationJobsJobCollectionResult> JobCollections;
        /// <summary>
        /// The OCID of the Migration that this job belongs to.
        /// </summary>
        public readonly string MigrationId;
        /// <summary>
        /// The current state of the migration job.
        /// </summary>
        public readonly string? State;

        [OutputConstructor]
        private GetDatabaseMigrationJobsResult(
            string? displayName,

            ImmutableArray<Outputs.GetDatabaseMigrationJobsFilterResult> filters,

            string id,

            ImmutableArray<Outputs.GetDatabaseMigrationJobsJobCollectionResult> jobCollections,

            string migrationId,

            string? state)
        {
            DisplayName = displayName;
            Filters = filters;
            Id = id;
            JobCollections = jobCollections;
            MigrationId = migrationId;
            State = state;
        }
    }
}
