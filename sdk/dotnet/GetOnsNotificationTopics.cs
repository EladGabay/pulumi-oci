// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci
{
    public static class GetOnsNotificationTopics
    {
        /// <summary>
        /// This data source provides the list of Notification Topics in Oracle Cloud Infrastructure Notifications service.
        /// 
        /// Lists topics in the specified compartment.
        /// 
        /// Transactions Per Minute (TPM) per-tenancy limit for this operation: 120.
        /// 
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var testNotificationTopics = Output.Create(Oci.GetOnsNotificationTopics.InvokeAsync(new Oci.GetOnsNotificationTopicsArgs
        ///         {
        ///             CompartmentId = @var.Compartment_id,
        ///             Id = @var.Notification_topic_id,
        ///             Name = @var.Notification_topic_name,
        ///             State = @var.Notification_topic_state,
        ///         }));
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetOnsNotificationTopicsResult> InvokeAsync(GetOnsNotificationTopicsArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetOnsNotificationTopicsResult>("oci:index/getOnsNotificationTopics:GetOnsNotificationTopics", args ?? new GetOnsNotificationTopicsArgs(), options.WithVersion());
    }


    public sealed class GetOnsNotificationTopicsArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
        /// </summary>
        [Input("compartmentId", required: true)]
        public string CompartmentId { get; set; } = null!;

        [Input("filters")]
        private List<Inputs.GetOnsNotificationTopicsFilterArgs>? _filters;
        public List<Inputs.GetOnsNotificationTopicsFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetOnsNotificationTopicsFilterArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// A filter to only return resources that match the given id exactly.
        /// </summary>
        [Input("id")]
        public string? Id { get; set; }

        /// <summary>
        /// A filter to only return resources that match the given name exactly.
        /// </summary>
        [Input("name")]
        public string? Name { get; set; }

        /// <summary>
        /// Filter returned list by specified lifecycle state. This parameter is case-insensitive.
        /// </summary>
        [Input("state")]
        public string? State { get; set; }

        public GetOnsNotificationTopicsArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetOnsNotificationTopicsResult
    {
        /// <summary>
        /// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment for the topic.
        /// </summary>
        public readonly string CompartmentId;
        public readonly ImmutableArray<Outputs.GetOnsNotificationTopicsFilterResult> Filters;
        public readonly string? Id;
        /// <summary>
        /// The name of the topic.
        /// </summary>
        public readonly string? Name;
        /// <summary>
        /// The list of notification_topics.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetOnsNotificationTopicsNotificationTopicResult> NotificationTopics;
        /// <summary>
        /// The lifecycle state of the topic.
        /// </summary>
        public readonly string? State;

        [OutputConstructor]
        private GetOnsNotificationTopicsResult(
            string compartmentId,

            ImmutableArray<Outputs.GetOnsNotificationTopicsFilterResult> filters,

            string? id,

            string? name,

            ImmutableArray<Outputs.GetOnsNotificationTopicsNotificationTopicResult> notificationTopics,

            string? state)
        {
            CompartmentId = compartmentId;
            Filters = filters;
            Id = id;
            Name = name;
            NotificationTopics = notificationTopics;
            State = state;
        }
    }
}
