// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci
{
    public static class GetMeteringComputationQueries
    {
        /// <summary>
        /// This data source provides the list of Queries in Oracle Cloud Infrastructure Metering Computation service.
        /// 
        /// Returns the saved query list.
        /// 
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var testQueries = Output.Create(Oci.GetMeteringComputationQueries.InvokeAsync(new Oci.GetMeteringComputationQueriesArgs
        ///         {
        ///             CompartmentId = @var.Compartment_id,
        ///         }));
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetMeteringComputationQueriesResult> InvokeAsync(GetMeteringComputationQueriesArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetMeteringComputationQueriesResult>("oci:index/getMeteringComputationQueries:GetMeteringComputationQueries", args ?? new GetMeteringComputationQueriesArgs(), options.WithVersion());
    }


    public sealed class GetMeteringComputationQueriesArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The compartment ID in which to list resources.
        /// </summary>
        [Input("compartmentId", required: true)]
        public string CompartmentId { get; set; } = null!;

        [Input("filters")]
        private List<Inputs.GetMeteringComputationQueriesFilterArgs>? _filters;
        public List<Inputs.GetMeteringComputationQueriesFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetMeteringComputationQueriesFilterArgs>());
            set => _filters = value;
        }

        public GetMeteringComputationQueriesArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetMeteringComputationQueriesResult
    {
        /// <summary>
        /// The compartment OCID.
        /// </summary>
        public readonly string CompartmentId;
        public readonly ImmutableArray<Outputs.GetMeteringComputationQueriesFilterResult> Filters;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The list of query_collection.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetMeteringComputationQueriesQueryCollectionResult> QueryCollections;

        [OutputConstructor]
        private GetMeteringComputationQueriesResult(
            string compartmentId,

            ImmutableArray<Outputs.GetMeteringComputationQueriesFilterResult> filters,

            string id,

            ImmutableArray<Outputs.GetMeteringComputationQueriesQueryCollectionResult> queryCollections)
        {
            CompartmentId = compartmentId;
            Filters = filters;
            Id = id;
            QueryCollections = queryCollections;
        }
    }
}
