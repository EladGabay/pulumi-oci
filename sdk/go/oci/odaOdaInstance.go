// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package oci

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource provides the Oda Instance resource in Oracle Cloud Infrastructure Digital Assistant service.
//
// Starts an asynchronous job to create a Digital Assistant instance.
//
// To monitor the status of the job, take the `opc-work-request-id` response
// header value and use it to call `GET /workRequests/{workRequestID}`.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-oci/sdk/go/oci"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := oci.NewOdaOdaInstance(ctx, "testOdaInstance", &oci.OdaOdaInstanceArgs{
// 			CompartmentId: pulumi.Any(_var.Compartment_id),
// 			ShapeName:     pulumi.String("DEVELOPMENT"),
// 			DefinedTags: pulumi.AnyMap{
// 				"foo-namespace.bar-key": pulumi.Any("value"),
// 			},
// 			Description: pulumi.Any(_var.Oda_instance_description),
// 			DisplayName: pulumi.Any(_var.Oda_instance_display_name),
// 			FreeformTags: pulumi.AnyMap{
// 				"bar-key": pulumi.Any("value"),
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// OdaInstances can be imported using the `id`, e.g.
//
// ```sh
//  $ pulumi import oci:index/odaOdaInstance:OdaOdaInstance test_oda_instance "id"
// ```
type OdaOdaInstance struct {
	pulumi.CustomResourceState

	// (Updatable) Identifier of the compartment.
	CompartmentId pulumi.StringOutput `pulumi:"compartmentId"`
	// URL for the connector's endpoint.
	ConnectorUrl pulumi.StringOutput `pulumi:"connectorUrl"`
	// (Updatable) Usage of predefined tag keys. These predefined keys are scoped to namespaces. Example: `{"foo-namespace.bar-key": "value"}`
	DefinedTags pulumi.MapOutput `pulumi:"definedTags"`
	// (Updatable) Description of the Digital Assistant instance.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// (Updatable) User-friendly name for the instance. Avoid entering confidential information. You can change this value anytime.
	DisplayName pulumi.StringOutput `pulumi:"displayName"`
	// (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
	FreeformTags pulumi.MapOutput `pulumi:"freeformTags"`
	// The current sub-state of the Digital Assistant instance.
	LifecycleSubState pulumi.StringOutput `pulumi:"lifecycleSubState"`
	// Shape or size of the instance.
	ShapeName pulumi.StringOutput `pulumi:"shapeName"`
	// The current state of the Digital Assistant instance.
	State pulumi.StringOutput `pulumi:"state"`
	// A message that describes the current state in more detail. For example, actionable information about an instance that's in the `FAILED` state.
	StateMessage pulumi.StringOutput `pulumi:"stateMessage"`
	// When the Digital Assistant instance was created. A date-time string as described in [RFC 3339](https://tools.ietf.org/rfc/rfc3339), section 14.29.
	TimeCreated pulumi.StringOutput `pulumi:"timeCreated"`
	// When the Digital Assistance instance was last updated. A date-time string as described in [RFC 3339](https://tools.ietf.org/rfc/rfc3339), section 14.29.
	TimeUpdated pulumi.StringOutput `pulumi:"timeUpdated"`
	// URL for the Digital Assistant web application that's associated with the instance.
	WebAppUrl pulumi.StringOutput `pulumi:"webAppUrl"`
}

// NewOdaOdaInstance registers a new resource with the given unique name, arguments, and options.
func NewOdaOdaInstance(ctx *pulumi.Context,
	name string, args *OdaOdaInstanceArgs, opts ...pulumi.ResourceOption) (*OdaOdaInstance, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CompartmentId == nil {
		return nil, errors.New("invalid value for required argument 'CompartmentId'")
	}
	if args.ShapeName == nil {
		return nil, errors.New("invalid value for required argument 'ShapeName'")
	}
	var resource OdaOdaInstance
	err := ctx.RegisterResource("oci:index/odaOdaInstance:OdaOdaInstance", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetOdaOdaInstance gets an existing OdaOdaInstance resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetOdaOdaInstance(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *OdaOdaInstanceState, opts ...pulumi.ResourceOption) (*OdaOdaInstance, error) {
	var resource OdaOdaInstance
	err := ctx.ReadResource("oci:index/odaOdaInstance:OdaOdaInstance", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering OdaOdaInstance resources.
type odaOdaInstanceState struct {
	// (Updatable) Identifier of the compartment.
	CompartmentId *string `pulumi:"compartmentId"`
	// URL for the connector's endpoint.
	ConnectorUrl *string `pulumi:"connectorUrl"`
	// (Updatable) Usage of predefined tag keys. These predefined keys are scoped to namespaces. Example: `{"foo-namespace.bar-key": "value"}`
	DefinedTags map[string]interface{} `pulumi:"definedTags"`
	// (Updatable) Description of the Digital Assistant instance.
	Description *string `pulumi:"description"`
	// (Updatable) User-friendly name for the instance. Avoid entering confidential information. You can change this value anytime.
	DisplayName *string `pulumi:"displayName"`
	// (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
	FreeformTags map[string]interface{} `pulumi:"freeformTags"`
	// The current sub-state of the Digital Assistant instance.
	LifecycleSubState *string `pulumi:"lifecycleSubState"`
	// Shape or size of the instance.
	ShapeName *string `pulumi:"shapeName"`
	// The current state of the Digital Assistant instance.
	State *string `pulumi:"state"`
	// A message that describes the current state in more detail. For example, actionable information about an instance that's in the `FAILED` state.
	StateMessage *string `pulumi:"stateMessage"`
	// When the Digital Assistant instance was created. A date-time string as described in [RFC 3339](https://tools.ietf.org/rfc/rfc3339), section 14.29.
	TimeCreated *string `pulumi:"timeCreated"`
	// When the Digital Assistance instance was last updated. A date-time string as described in [RFC 3339](https://tools.ietf.org/rfc/rfc3339), section 14.29.
	TimeUpdated *string `pulumi:"timeUpdated"`
	// URL for the Digital Assistant web application that's associated with the instance.
	WebAppUrl *string `pulumi:"webAppUrl"`
}

type OdaOdaInstanceState struct {
	// (Updatable) Identifier of the compartment.
	CompartmentId pulumi.StringPtrInput
	// URL for the connector's endpoint.
	ConnectorUrl pulumi.StringPtrInput
	// (Updatable) Usage of predefined tag keys. These predefined keys are scoped to namespaces. Example: `{"foo-namespace.bar-key": "value"}`
	DefinedTags pulumi.MapInput
	// (Updatable) Description of the Digital Assistant instance.
	Description pulumi.StringPtrInput
	// (Updatable) User-friendly name for the instance. Avoid entering confidential information. You can change this value anytime.
	DisplayName pulumi.StringPtrInput
	// (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
	FreeformTags pulumi.MapInput
	// The current sub-state of the Digital Assistant instance.
	LifecycleSubState pulumi.StringPtrInput
	// Shape or size of the instance.
	ShapeName pulumi.StringPtrInput
	// The current state of the Digital Assistant instance.
	State pulumi.StringPtrInput
	// A message that describes the current state in more detail. For example, actionable information about an instance that's in the `FAILED` state.
	StateMessage pulumi.StringPtrInput
	// When the Digital Assistant instance was created. A date-time string as described in [RFC 3339](https://tools.ietf.org/rfc/rfc3339), section 14.29.
	TimeCreated pulumi.StringPtrInput
	// When the Digital Assistance instance was last updated. A date-time string as described in [RFC 3339](https://tools.ietf.org/rfc/rfc3339), section 14.29.
	TimeUpdated pulumi.StringPtrInput
	// URL for the Digital Assistant web application that's associated with the instance.
	WebAppUrl pulumi.StringPtrInput
}

func (OdaOdaInstanceState) ElementType() reflect.Type {
	return reflect.TypeOf((*odaOdaInstanceState)(nil)).Elem()
}

type odaOdaInstanceArgs struct {
	// (Updatable) Identifier of the compartment.
	CompartmentId string `pulumi:"compartmentId"`
	// (Updatable) Usage of predefined tag keys. These predefined keys are scoped to namespaces. Example: `{"foo-namespace.bar-key": "value"}`
	DefinedTags map[string]interface{} `pulumi:"definedTags"`
	// (Updatable) Description of the Digital Assistant instance.
	Description *string `pulumi:"description"`
	// (Updatable) User-friendly name for the instance. Avoid entering confidential information. You can change this value anytime.
	DisplayName *string `pulumi:"displayName"`
	// (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
	FreeformTags map[string]interface{} `pulumi:"freeformTags"`
	// Shape or size of the instance.
	ShapeName string `pulumi:"shapeName"`
	// The current state of the Digital Assistant instance.
	State *string `pulumi:"state"`
}

// The set of arguments for constructing a OdaOdaInstance resource.
type OdaOdaInstanceArgs struct {
	// (Updatable) Identifier of the compartment.
	CompartmentId pulumi.StringInput
	// (Updatable) Usage of predefined tag keys. These predefined keys are scoped to namespaces. Example: `{"foo-namespace.bar-key": "value"}`
	DefinedTags pulumi.MapInput
	// (Updatable) Description of the Digital Assistant instance.
	Description pulumi.StringPtrInput
	// (Updatable) User-friendly name for the instance. Avoid entering confidential information. You can change this value anytime.
	DisplayName pulumi.StringPtrInput
	// (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
	FreeformTags pulumi.MapInput
	// Shape or size of the instance.
	ShapeName pulumi.StringInput
	// The current state of the Digital Assistant instance.
	State pulumi.StringPtrInput
}

func (OdaOdaInstanceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*odaOdaInstanceArgs)(nil)).Elem()
}

type OdaOdaInstanceInput interface {
	pulumi.Input

	ToOdaOdaInstanceOutput() OdaOdaInstanceOutput
	ToOdaOdaInstanceOutputWithContext(ctx context.Context) OdaOdaInstanceOutput
}

func (*OdaOdaInstance) ElementType() reflect.Type {
	return reflect.TypeOf((*OdaOdaInstance)(nil))
}

func (i *OdaOdaInstance) ToOdaOdaInstanceOutput() OdaOdaInstanceOutput {
	return i.ToOdaOdaInstanceOutputWithContext(context.Background())
}

func (i *OdaOdaInstance) ToOdaOdaInstanceOutputWithContext(ctx context.Context) OdaOdaInstanceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OdaOdaInstanceOutput)
}

func (i *OdaOdaInstance) ToOdaOdaInstancePtrOutput() OdaOdaInstancePtrOutput {
	return i.ToOdaOdaInstancePtrOutputWithContext(context.Background())
}

func (i *OdaOdaInstance) ToOdaOdaInstancePtrOutputWithContext(ctx context.Context) OdaOdaInstancePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OdaOdaInstancePtrOutput)
}

type OdaOdaInstancePtrInput interface {
	pulumi.Input

	ToOdaOdaInstancePtrOutput() OdaOdaInstancePtrOutput
	ToOdaOdaInstancePtrOutputWithContext(ctx context.Context) OdaOdaInstancePtrOutput
}

type odaOdaInstancePtrType OdaOdaInstanceArgs

func (*odaOdaInstancePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**OdaOdaInstance)(nil))
}

func (i *odaOdaInstancePtrType) ToOdaOdaInstancePtrOutput() OdaOdaInstancePtrOutput {
	return i.ToOdaOdaInstancePtrOutputWithContext(context.Background())
}

func (i *odaOdaInstancePtrType) ToOdaOdaInstancePtrOutputWithContext(ctx context.Context) OdaOdaInstancePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OdaOdaInstancePtrOutput)
}

// OdaOdaInstanceArrayInput is an input type that accepts OdaOdaInstanceArray and OdaOdaInstanceArrayOutput values.
// You can construct a concrete instance of `OdaOdaInstanceArrayInput` via:
//
//          OdaOdaInstanceArray{ OdaOdaInstanceArgs{...} }
type OdaOdaInstanceArrayInput interface {
	pulumi.Input

	ToOdaOdaInstanceArrayOutput() OdaOdaInstanceArrayOutput
	ToOdaOdaInstanceArrayOutputWithContext(context.Context) OdaOdaInstanceArrayOutput
}

type OdaOdaInstanceArray []OdaOdaInstanceInput

func (OdaOdaInstanceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*OdaOdaInstance)(nil)).Elem()
}

func (i OdaOdaInstanceArray) ToOdaOdaInstanceArrayOutput() OdaOdaInstanceArrayOutput {
	return i.ToOdaOdaInstanceArrayOutputWithContext(context.Background())
}

func (i OdaOdaInstanceArray) ToOdaOdaInstanceArrayOutputWithContext(ctx context.Context) OdaOdaInstanceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OdaOdaInstanceArrayOutput)
}

// OdaOdaInstanceMapInput is an input type that accepts OdaOdaInstanceMap and OdaOdaInstanceMapOutput values.
// You can construct a concrete instance of `OdaOdaInstanceMapInput` via:
//
//          OdaOdaInstanceMap{ "key": OdaOdaInstanceArgs{...} }
type OdaOdaInstanceMapInput interface {
	pulumi.Input

	ToOdaOdaInstanceMapOutput() OdaOdaInstanceMapOutput
	ToOdaOdaInstanceMapOutputWithContext(context.Context) OdaOdaInstanceMapOutput
}

type OdaOdaInstanceMap map[string]OdaOdaInstanceInput

func (OdaOdaInstanceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*OdaOdaInstance)(nil)).Elem()
}

func (i OdaOdaInstanceMap) ToOdaOdaInstanceMapOutput() OdaOdaInstanceMapOutput {
	return i.ToOdaOdaInstanceMapOutputWithContext(context.Background())
}

func (i OdaOdaInstanceMap) ToOdaOdaInstanceMapOutputWithContext(ctx context.Context) OdaOdaInstanceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OdaOdaInstanceMapOutput)
}

type OdaOdaInstanceOutput struct {
	*pulumi.OutputState
}

func (OdaOdaInstanceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OdaOdaInstance)(nil))
}

func (o OdaOdaInstanceOutput) ToOdaOdaInstanceOutput() OdaOdaInstanceOutput {
	return o
}

func (o OdaOdaInstanceOutput) ToOdaOdaInstanceOutputWithContext(ctx context.Context) OdaOdaInstanceOutput {
	return o
}

func (o OdaOdaInstanceOutput) ToOdaOdaInstancePtrOutput() OdaOdaInstancePtrOutput {
	return o.ToOdaOdaInstancePtrOutputWithContext(context.Background())
}

func (o OdaOdaInstanceOutput) ToOdaOdaInstancePtrOutputWithContext(ctx context.Context) OdaOdaInstancePtrOutput {
	return o.ApplyT(func(v OdaOdaInstance) *OdaOdaInstance {
		return &v
	}).(OdaOdaInstancePtrOutput)
}

type OdaOdaInstancePtrOutput struct {
	*pulumi.OutputState
}

func (OdaOdaInstancePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OdaOdaInstance)(nil))
}

func (o OdaOdaInstancePtrOutput) ToOdaOdaInstancePtrOutput() OdaOdaInstancePtrOutput {
	return o
}

func (o OdaOdaInstancePtrOutput) ToOdaOdaInstancePtrOutputWithContext(ctx context.Context) OdaOdaInstancePtrOutput {
	return o
}

type OdaOdaInstanceArrayOutput struct{ *pulumi.OutputState }

func (OdaOdaInstanceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OdaOdaInstance)(nil))
}

func (o OdaOdaInstanceArrayOutput) ToOdaOdaInstanceArrayOutput() OdaOdaInstanceArrayOutput {
	return o
}

func (o OdaOdaInstanceArrayOutput) ToOdaOdaInstanceArrayOutputWithContext(ctx context.Context) OdaOdaInstanceArrayOutput {
	return o
}

func (o OdaOdaInstanceArrayOutput) Index(i pulumi.IntInput) OdaOdaInstanceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) OdaOdaInstance {
		return vs[0].([]OdaOdaInstance)[vs[1].(int)]
	}).(OdaOdaInstanceOutput)
}

type OdaOdaInstanceMapOutput struct{ *pulumi.OutputState }

func (OdaOdaInstanceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]OdaOdaInstance)(nil))
}

func (o OdaOdaInstanceMapOutput) ToOdaOdaInstanceMapOutput() OdaOdaInstanceMapOutput {
	return o
}

func (o OdaOdaInstanceMapOutput) ToOdaOdaInstanceMapOutputWithContext(ctx context.Context) OdaOdaInstanceMapOutput {
	return o
}

func (o OdaOdaInstanceMapOutput) MapIndex(k pulumi.StringInput) OdaOdaInstanceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) OdaOdaInstance {
		return vs[0].(map[string]OdaOdaInstance)[vs[1].(string)]
	}).(OdaOdaInstanceOutput)
}

func init() {
	pulumi.RegisterOutputType(OdaOdaInstanceOutput{})
	pulumi.RegisterOutputType(OdaOdaInstancePtrOutput{})
	pulumi.RegisterOutputType(OdaOdaInstanceArrayOutput{})
	pulumi.RegisterOutputType(OdaOdaInstanceMapOutput{})
}
