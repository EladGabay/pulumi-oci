// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci
{
    public static class GetBlockchainPeer
    {
        /// <summary>
        /// This data source provides details about a specific Peer resource in Oracle Cloud Infrastructure Blockchain service.
        /// 
        /// Gets information about a peer identified by the specific id
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var testPeer = Output.Create(Oci.GetBlockchainPeer.InvokeAsync(new Oci.GetBlockchainPeerArgs
        ///         {
        ///             BlockchainPlatformId = oci_blockchain_blockchain_platform.Test_blockchain_platform.Id,
        ///             PeerId = oci_blockchain_peer.Test_peer.Id,
        ///         }));
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetBlockchainPeerResult> InvokeAsync(GetBlockchainPeerArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetBlockchainPeerResult>("oci:index/getBlockchainPeer:GetBlockchainPeer", args ?? new GetBlockchainPeerArgs(), options.WithVersion());
    }


    public sealed class GetBlockchainPeerArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// Unique service identifier.
        /// </summary>
        [Input("blockchainPlatformId", required: true)]
        public string BlockchainPlatformId { get; set; } = null!;

        /// <summary>
        /// Peer identifier.
        /// </summary>
        [Input("peerId", required: true)]
        public string PeerId { get; set; } = null!;

        public GetBlockchainPeerArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetBlockchainPeerResult
    {
        /// <summary>
        /// Availability Domain of peer
        /// </summary>
        public readonly string Ad;
        /// <summary>
        /// peer alias
        /// </summary>
        public readonly string Alias;
        public readonly string BlockchainPlatformId;
        /// <summary>
        /// Host on which the Peer exists
        /// </summary>
        public readonly string Host;
        public readonly string Id;
        /// <summary>
        /// OCPU allocation parameter
        /// </summary>
        public readonly Outputs.GetBlockchainPeerOcpuAllocationParamResult OcpuAllocationParam;
        public readonly string PeerId;
        /// <summary>
        /// peer identifier
        /// </summary>
        public readonly string PeerKey;
        /// <summary>
        /// Peer role
        /// </summary>
        public readonly string Role;
        /// <summary>
        /// The current state of the peer.
        /// </summary>
        public readonly string State;

        [OutputConstructor]
        private GetBlockchainPeerResult(
            string ad,

            string alias,

            string blockchainPlatformId,

            string host,

            string id,

            Outputs.GetBlockchainPeerOcpuAllocationParamResult ocpuAllocationParam,

            string peerId,

            string peerKey,

            string role,

            string state)
        {
            Ad = ad;
            Alias = alias;
            BlockchainPlatformId = blockchainPlatformId;
            Host = host;
            Id = id;
            OcpuAllocationParam = ocpuAllocationParam;
            PeerId = peerId;
            PeerKey = peerKey;
            Role = role;
            State = state;
        }
    }
}
