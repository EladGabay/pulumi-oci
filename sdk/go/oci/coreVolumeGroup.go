// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package oci

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Import
//
// VolumeGroups can be imported using the `id`, e.g.
//
// ```sh
//  $ pulumi import oci:index/coreVolumeGroup:CoreVolumeGroup test_volume_group "id"
// ```
type CoreVolumeGroup struct {
	pulumi.CustomResourceState

	// The availability domain of the volume group.
	AvailabilityDomain pulumi.StringOutput `pulumi:"availabilityDomain"`
	// If provided, specifies the ID of the volume backup policy to assign to the newly created volume group. If omitted, no policy will be assigned.
	BackupPolicyId pulumi.StringOutput `pulumi:"backupPolicyId"`
	// (Updatable) The OCID of the compartment that contains the volume group.
	CompartmentId pulumi.StringOutput `pulumi:"compartmentId"`
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Operations.CostCenter": "42"}`
	DefinedTags pulumi.MapOutput `pulumi:"definedTags"`
	// (Updatable) A user-friendly name for the volume group. Does not have to be unique, and it's changeable. Avoid entering confidential information.
	DisplayName pulumi.StringOutput `pulumi:"displayName"`
	// (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Department": "Finance"}`
	FreeformTags pulumi.MapOutput `pulumi:"freeformTags"`
	// Specifies whether the newly created cloned volume group's data has finished copying from the source volume group or backup.
	IsHydrated pulumi.BoolOutput `pulumi:"isHydrated"`
	// The aggregate size of the volume group in GBs.
	SizeInGbs pulumi.StringOutput `pulumi:"sizeInGbs"`
	// The aggregate size of the volume group in MBs.
	SizeInMbs pulumi.StringOutput `pulumi:"sizeInMbs"`
	// Specifies the source for a volume group.
	SourceDetails CoreVolumeGroupSourceDetailsOutput `pulumi:"sourceDetails"`
	// The current state of a volume group.
	State pulumi.StringOutput `pulumi:"state"`
	// The date and time the volume group was created. Format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
	TimeCreated pulumi.StringOutput `pulumi:"timeCreated"`
	// OCIDs for the volumes in this volume group.
	VolumeIds pulumi.StringArrayOutput `pulumi:"volumeIds"`
}

// NewCoreVolumeGroup registers a new resource with the given unique name, arguments, and options.
func NewCoreVolumeGroup(ctx *pulumi.Context,
	name string, args *CoreVolumeGroupArgs, opts ...pulumi.ResourceOption) (*CoreVolumeGroup, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AvailabilityDomain == nil {
		return nil, errors.New("invalid value for required argument 'AvailabilityDomain'")
	}
	if args.CompartmentId == nil {
		return nil, errors.New("invalid value for required argument 'CompartmentId'")
	}
	if args.SourceDetails == nil {
		return nil, errors.New("invalid value for required argument 'SourceDetails'")
	}
	var resource CoreVolumeGroup
	err := ctx.RegisterResource("oci:index/coreVolumeGroup:CoreVolumeGroup", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCoreVolumeGroup gets an existing CoreVolumeGroup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCoreVolumeGroup(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CoreVolumeGroupState, opts ...pulumi.ResourceOption) (*CoreVolumeGroup, error) {
	var resource CoreVolumeGroup
	err := ctx.ReadResource("oci:index/coreVolumeGroup:CoreVolumeGroup", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CoreVolumeGroup resources.
type coreVolumeGroupState struct {
	// The availability domain of the volume group.
	AvailabilityDomain *string `pulumi:"availabilityDomain"`
	// If provided, specifies the ID of the volume backup policy to assign to the newly created volume group. If omitted, no policy will be assigned.
	BackupPolicyId *string `pulumi:"backupPolicyId"`
	// (Updatable) The OCID of the compartment that contains the volume group.
	CompartmentId *string `pulumi:"compartmentId"`
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Operations.CostCenter": "42"}`
	DefinedTags map[string]interface{} `pulumi:"definedTags"`
	// (Updatable) A user-friendly name for the volume group. Does not have to be unique, and it's changeable. Avoid entering confidential information.
	DisplayName *string `pulumi:"displayName"`
	// (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Department": "Finance"}`
	FreeformTags map[string]interface{} `pulumi:"freeformTags"`
	// Specifies whether the newly created cloned volume group's data has finished copying from the source volume group or backup.
	IsHydrated *bool `pulumi:"isHydrated"`
	// The aggregate size of the volume group in GBs.
	SizeInGbs *string `pulumi:"sizeInGbs"`
	// The aggregate size of the volume group in MBs.
	SizeInMbs *string `pulumi:"sizeInMbs"`
	// Specifies the source for a volume group.
	SourceDetails *CoreVolumeGroupSourceDetails `pulumi:"sourceDetails"`
	// The current state of a volume group.
	State *string `pulumi:"state"`
	// The date and time the volume group was created. Format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
	TimeCreated *string `pulumi:"timeCreated"`
	// OCIDs for the volumes in this volume group.
	VolumeIds []string `pulumi:"volumeIds"`
}

type CoreVolumeGroupState struct {
	// The availability domain of the volume group.
	AvailabilityDomain pulumi.StringPtrInput
	// If provided, specifies the ID of the volume backup policy to assign to the newly created volume group. If omitted, no policy will be assigned.
	BackupPolicyId pulumi.StringPtrInput
	// (Updatable) The OCID of the compartment that contains the volume group.
	CompartmentId pulumi.StringPtrInput
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Operations.CostCenter": "42"}`
	DefinedTags pulumi.MapInput
	// (Updatable) A user-friendly name for the volume group. Does not have to be unique, and it's changeable. Avoid entering confidential information.
	DisplayName pulumi.StringPtrInput
	// (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Department": "Finance"}`
	FreeformTags pulumi.MapInput
	// Specifies whether the newly created cloned volume group's data has finished copying from the source volume group or backup.
	IsHydrated pulumi.BoolPtrInput
	// The aggregate size of the volume group in GBs.
	SizeInGbs pulumi.StringPtrInput
	// The aggregate size of the volume group in MBs.
	SizeInMbs pulumi.StringPtrInput
	// Specifies the source for a volume group.
	SourceDetails CoreVolumeGroupSourceDetailsPtrInput
	// The current state of a volume group.
	State pulumi.StringPtrInput
	// The date and time the volume group was created. Format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
	TimeCreated pulumi.StringPtrInput
	// OCIDs for the volumes in this volume group.
	VolumeIds pulumi.StringArrayInput
}

func (CoreVolumeGroupState) ElementType() reflect.Type {
	return reflect.TypeOf((*coreVolumeGroupState)(nil)).Elem()
}

type coreVolumeGroupArgs struct {
	// The availability domain of the volume group.
	AvailabilityDomain string `pulumi:"availabilityDomain"`
	// If provided, specifies the ID of the volume backup policy to assign to the newly created volume group. If omitted, no policy will be assigned.
	BackupPolicyId *string `pulumi:"backupPolicyId"`
	// (Updatable) The OCID of the compartment that contains the volume group.
	CompartmentId string `pulumi:"compartmentId"`
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Operations.CostCenter": "42"}`
	DefinedTags map[string]interface{} `pulumi:"definedTags"`
	// (Updatable) A user-friendly name for the volume group. Does not have to be unique, and it's changeable. Avoid entering confidential information.
	DisplayName *string `pulumi:"displayName"`
	// (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Department": "Finance"}`
	FreeformTags map[string]interface{} `pulumi:"freeformTags"`
	// Specifies the source for a volume group.
	SourceDetails CoreVolumeGroupSourceDetails `pulumi:"sourceDetails"`
}

// The set of arguments for constructing a CoreVolumeGroup resource.
type CoreVolumeGroupArgs struct {
	// The availability domain of the volume group.
	AvailabilityDomain pulumi.StringInput
	// If provided, specifies the ID of the volume backup policy to assign to the newly created volume group. If omitted, no policy will be assigned.
	BackupPolicyId pulumi.StringPtrInput
	// (Updatable) The OCID of the compartment that contains the volume group.
	CompartmentId pulumi.StringInput
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Operations.CostCenter": "42"}`
	DefinedTags pulumi.MapInput
	// (Updatable) A user-friendly name for the volume group. Does not have to be unique, and it's changeable. Avoid entering confidential information.
	DisplayName pulumi.StringPtrInput
	// (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Department": "Finance"}`
	FreeformTags pulumi.MapInput
	// Specifies the source for a volume group.
	SourceDetails CoreVolumeGroupSourceDetailsInput
}

func (CoreVolumeGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*coreVolumeGroupArgs)(nil)).Elem()
}

type CoreVolumeGroupInput interface {
	pulumi.Input

	ToCoreVolumeGroupOutput() CoreVolumeGroupOutput
	ToCoreVolumeGroupOutputWithContext(ctx context.Context) CoreVolumeGroupOutput
}

func (*CoreVolumeGroup) ElementType() reflect.Type {
	return reflect.TypeOf((*CoreVolumeGroup)(nil))
}

func (i *CoreVolumeGroup) ToCoreVolumeGroupOutput() CoreVolumeGroupOutput {
	return i.ToCoreVolumeGroupOutputWithContext(context.Background())
}

func (i *CoreVolumeGroup) ToCoreVolumeGroupOutputWithContext(ctx context.Context) CoreVolumeGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CoreVolumeGroupOutput)
}

func (i *CoreVolumeGroup) ToCoreVolumeGroupPtrOutput() CoreVolumeGroupPtrOutput {
	return i.ToCoreVolumeGroupPtrOutputWithContext(context.Background())
}

func (i *CoreVolumeGroup) ToCoreVolumeGroupPtrOutputWithContext(ctx context.Context) CoreVolumeGroupPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CoreVolumeGroupPtrOutput)
}

type CoreVolumeGroupPtrInput interface {
	pulumi.Input

	ToCoreVolumeGroupPtrOutput() CoreVolumeGroupPtrOutput
	ToCoreVolumeGroupPtrOutputWithContext(ctx context.Context) CoreVolumeGroupPtrOutput
}

type coreVolumeGroupPtrType CoreVolumeGroupArgs

func (*coreVolumeGroupPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CoreVolumeGroup)(nil))
}

func (i *coreVolumeGroupPtrType) ToCoreVolumeGroupPtrOutput() CoreVolumeGroupPtrOutput {
	return i.ToCoreVolumeGroupPtrOutputWithContext(context.Background())
}

func (i *coreVolumeGroupPtrType) ToCoreVolumeGroupPtrOutputWithContext(ctx context.Context) CoreVolumeGroupPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CoreVolumeGroupPtrOutput)
}

// CoreVolumeGroupArrayInput is an input type that accepts CoreVolumeGroupArray and CoreVolumeGroupArrayOutput values.
// You can construct a concrete instance of `CoreVolumeGroupArrayInput` via:
//
//          CoreVolumeGroupArray{ CoreVolumeGroupArgs{...} }
type CoreVolumeGroupArrayInput interface {
	pulumi.Input

	ToCoreVolumeGroupArrayOutput() CoreVolumeGroupArrayOutput
	ToCoreVolumeGroupArrayOutputWithContext(context.Context) CoreVolumeGroupArrayOutput
}

type CoreVolumeGroupArray []CoreVolumeGroupInput

func (CoreVolumeGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CoreVolumeGroup)(nil)).Elem()
}

func (i CoreVolumeGroupArray) ToCoreVolumeGroupArrayOutput() CoreVolumeGroupArrayOutput {
	return i.ToCoreVolumeGroupArrayOutputWithContext(context.Background())
}

func (i CoreVolumeGroupArray) ToCoreVolumeGroupArrayOutputWithContext(ctx context.Context) CoreVolumeGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CoreVolumeGroupArrayOutput)
}

// CoreVolumeGroupMapInput is an input type that accepts CoreVolumeGroupMap and CoreVolumeGroupMapOutput values.
// You can construct a concrete instance of `CoreVolumeGroupMapInput` via:
//
//          CoreVolumeGroupMap{ "key": CoreVolumeGroupArgs{...} }
type CoreVolumeGroupMapInput interface {
	pulumi.Input

	ToCoreVolumeGroupMapOutput() CoreVolumeGroupMapOutput
	ToCoreVolumeGroupMapOutputWithContext(context.Context) CoreVolumeGroupMapOutput
}

type CoreVolumeGroupMap map[string]CoreVolumeGroupInput

func (CoreVolumeGroupMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CoreVolumeGroup)(nil)).Elem()
}

func (i CoreVolumeGroupMap) ToCoreVolumeGroupMapOutput() CoreVolumeGroupMapOutput {
	return i.ToCoreVolumeGroupMapOutputWithContext(context.Background())
}

func (i CoreVolumeGroupMap) ToCoreVolumeGroupMapOutputWithContext(ctx context.Context) CoreVolumeGroupMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CoreVolumeGroupMapOutput)
}

type CoreVolumeGroupOutput struct {
	*pulumi.OutputState
}

func (CoreVolumeGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CoreVolumeGroup)(nil))
}

func (o CoreVolumeGroupOutput) ToCoreVolumeGroupOutput() CoreVolumeGroupOutput {
	return o
}

func (o CoreVolumeGroupOutput) ToCoreVolumeGroupOutputWithContext(ctx context.Context) CoreVolumeGroupOutput {
	return o
}

func (o CoreVolumeGroupOutput) ToCoreVolumeGroupPtrOutput() CoreVolumeGroupPtrOutput {
	return o.ToCoreVolumeGroupPtrOutputWithContext(context.Background())
}

func (o CoreVolumeGroupOutput) ToCoreVolumeGroupPtrOutputWithContext(ctx context.Context) CoreVolumeGroupPtrOutput {
	return o.ApplyT(func(v CoreVolumeGroup) *CoreVolumeGroup {
		return &v
	}).(CoreVolumeGroupPtrOutput)
}

type CoreVolumeGroupPtrOutput struct {
	*pulumi.OutputState
}

func (CoreVolumeGroupPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CoreVolumeGroup)(nil))
}

func (o CoreVolumeGroupPtrOutput) ToCoreVolumeGroupPtrOutput() CoreVolumeGroupPtrOutput {
	return o
}

func (o CoreVolumeGroupPtrOutput) ToCoreVolumeGroupPtrOutputWithContext(ctx context.Context) CoreVolumeGroupPtrOutput {
	return o
}

type CoreVolumeGroupArrayOutput struct{ *pulumi.OutputState }

func (CoreVolumeGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CoreVolumeGroup)(nil))
}

func (o CoreVolumeGroupArrayOutput) ToCoreVolumeGroupArrayOutput() CoreVolumeGroupArrayOutput {
	return o
}

func (o CoreVolumeGroupArrayOutput) ToCoreVolumeGroupArrayOutputWithContext(ctx context.Context) CoreVolumeGroupArrayOutput {
	return o
}

func (o CoreVolumeGroupArrayOutput) Index(i pulumi.IntInput) CoreVolumeGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CoreVolumeGroup {
		return vs[0].([]CoreVolumeGroup)[vs[1].(int)]
	}).(CoreVolumeGroupOutput)
}

type CoreVolumeGroupMapOutput struct{ *pulumi.OutputState }

func (CoreVolumeGroupMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]CoreVolumeGroup)(nil))
}

func (o CoreVolumeGroupMapOutput) ToCoreVolumeGroupMapOutput() CoreVolumeGroupMapOutput {
	return o
}

func (o CoreVolumeGroupMapOutput) ToCoreVolumeGroupMapOutputWithContext(ctx context.Context) CoreVolumeGroupMapOutput {
	return o
}

func (o CoreVolumeGroupMapOutput) MapIndex(k pulumi.StringInput) CoreVolumeGroupOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) CoreVolumeGroup {
		return vs[0].(map[string]CoreVolumeGroup)[vs[1].(string)]
	}).(CoreVolumeGroupOutput)
}

func init() {
	pulumi.RegisterOutputType(CoreVolumeGroupOutput{})
	pulumi.RegisterOutputType(CoreVolumeGroupPtrOutput{})
	pulumi.RegisterOutputType(CoreVolumeGroupArrayOutput{})
	pulumi.RegisterOutputType(CoreVolumeGroupMapOutput{})
}
