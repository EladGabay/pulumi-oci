// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package oci

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource provides the Ssl Cipher Suite resource in Oracle Cloud Infrastructure Load Balancer service.
//
// Creates a custom SSL cipher suite.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-oci/sdk/go/oci"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := oci.NewLoadBalancerSslCipherSuite(ctx, "testSslCipherSuite", &oci.LoadBalancerSslCipherSuiteArgs{
// 			Ciphers:        pulumi.Any(_var.Ssl_cipher_suite_ciphers),
// 			LoadBalancerId: pulumi.Any(oci_load_balancer_load_balancer.Test_load_balancer.Id),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// SslCipherSuites can be imported using the `id`, e.g.
//
// ```sh
//  $ pulumi import oci:index/loadBalancerSslCipherSuite:LoadBalancerSslCipherSuite test_ssl_cipher_suite "loadBalancers/{loadBalancerId}/sslCipherSuites/{name}"
// ```
type LoadBalancerSslCipherSuite struct {
	pulumi.CustomResourceState

	// A list of SSL ciphers the load balancer must support for HTTPS or SSL connections.
	Ciphers pulumi.StringArrayOutput `pulumi:"ciphers"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the associated load balancer.
	LoadBalancerId pulumi.StringOutput `pulumi:"loadBalancerId"`
	// A friendly name for the SSL cipher suite. It must be unique and it cannot be changed.
	Name  pulumi.StringOutput `pulumi:"name"`
	State pulumi.StringOutput `pulumi:"state"`
}

// NewLoadBalancerSslCipherSuite registers a new resource with the given unique name, arguments, and options.
func NewLoadBalancerSslCipherSuite(ctx *pulumi.Context,
	name string, args *LoadBalancerSslCipherSuiteArgs, opts ...pulumi.ResourceOption) (*LoadBalancerSslCipherSuite, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Ciphers == nil {
		return nil, errors.New("invalid value for required argument 'Ciphers'")
	}
	var resource LoadBalancerSslCipherSuite
	err := ctx.RegisterResource("oci:index/loadBalancerSslCipherSuite:LoadBalancerSslCipherSuite", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLoadBalancerSslCipherSuite gets an existing LoadBalancerSslCipherSuite resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLoadBalancerSslCipherSuite(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LoadBalancerSslCipherSuiteState, opts ...pulumi.ResourceOption) (*LoadBalancerSslCipherSuite, error) {
	var resource LoadBalancerSslCipherSuite
	err := ctx.ReadResource("oci:index/loadBalancerSslCipherSuite:LoadBalancerSslCipherSuite", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LoadBalancerSslCipherSuite resources.
type loadBalancerSslCipherSuiteState struct {
	// A list of SSL ciphers the load balancer must support for HTTPS or SSL connections.
	Ciphers []string `pulumi:"ciphers"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the associated load balancer.
	LoadBalancerId *string `pulumi:"loadBalancerId"`
	// A friendly name for the SSL cipher suite. It must be unique and it cannot be changed.
	Name  *string `pulumi:"name"`
	State *string `pulumi:"state"`
}

type LoadBalancerSslCipherSuiteState struct {
	// A list of SSL ciphers the load balancer must support for HTTPS or SSL connections.
	Ciphers pulumi.StringArrayInput
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the associated load balancer.
	LoadBalancerId pulumi.StringPtrInput
	// A friendly name for the SSL cipher suite. It must be unique and it cannot be changed.
	Name  pulumi.StringPtrInput
	State pulumi.StringPtrInput
}

func (LoadBalancerSslCipherSuiteState) ElementType() reflect.Type {
	return reflect.TypeOf((*loadBalancerSslCipherSuiteState)(nil)).Elem()
}

type loadBalancerSslCipherSuiteArgs struct {
	// A list of SSL ciphers the load balancer must support for HTTPS or SSL connections.
	Ciphers []string `pulumi:"ciphers"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the associated load balancer.
	LoadBalancerId *string `pulumi:"loadBalancerId"`
	// A friendly name for the SSL cipher suite. It must be unique and it cannot be changed.
	Name *string `pulumi:"name"`
}

// The set of arguments for constructing a LoadBalancerSslCipherSuite resource.
type LoadBalancerSslCipherSuiteArgs struct {
	// A list of SSL ciphers the load balancer must support for HTTPS or SSL connections.
	Ciphers pulumi.StringArrayInput
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the associated load balancer.
	LoadBalancerId pulumi.StringPtrInput
	// A friendly name for the SSL cipher suite. It must be unique and it cannot be changed.
	Name pulumi.StringPtrInput
}

func (LoadBalancerSslCipherSuiteArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*loadBalancerSslCipherSuiteArgs)(nil)).Elem()
}

type LoadBalancerSslCipherSuiteInput interface {
	pulumi.Input

	ToLoadBalancerSslCipherSuiteOutput() LoadBalancerSslCipherSuiteOutput
	ToLoadBalancerSslCipherSuiteOutputWithContext(ctx context.Context) LoadBalancerSslCipherSuiteOutput
}

func (*LoadBalancerSslCipherSuite) ElementType() reflect.Type {
	return reflect.TypeOf((*LoadBalancerSslCipherSuite)(nil))
}

func (i *LoadBalancerSslCipherSuite) ToLoadBalancerSslCipherSuiteOutput() LoadBalancerSslCipherSuiteOutput {
	return i.ToLoadBalancerSslCipherSuiteOutputWithContext(context.Background())
}

func (i *LoadBalancerSslCipherSuite) ToLoadBalancerSslCipherSuiteOutputWithContext(ctx context.Context) LoadBalancerSslCipherSuiteOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoadBalancerSslCipherSuiteOutput)
}

func (i *LoadBalancerSslCipherSuite) ToLoadBalancerSslCipherSuitePtrOutput() LoadBalancerSslCipherSuitePtrOutput {
	return i.ToLoadBalancerSslCipherSuitePtrOutputWithContext(context.Background())
}

func (i *LoadBalancerSslCipherSuite) ToLoadBalancerSslCipherSuitePtrOutputWithContext(ctx context.Context) LoadBalancerSslCipherSuitePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoadBalancerSslCipherSuitePtrOutput)
}

type LoadBalancerSslCipherSuitePtrInput interface {
	pulumi.Input

	ToLoadBalancerSslCipherSuitePtrOutput() LoadBalancerSslCipherSuitePtrOutput
	ToLoadBalancerSslCipherSuitePtrOutputWithContext(ctx context.Context) LoadBalancerSslCipherSuitePtrOutput
}

type loadBalancerSslCipherSuitePtrType LoadBalancerSslCipherSuiteArgs

func (*loadBalancerSslCipherSuitePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LoadBalancerSslCipherSuite)(nil))
}

func (i *loadBalancerSslCipherSuitePtrType) ToLoadBalancerSslCipherSuitePtrOutput() LoadBalancerSslCipherSuitePtrOutput {
	return i.ToLoadBalancerSslCipherSuitePtrOutputWithContext(context.Background())
}

func (i *loadBalancerSslCipherSuitePtrType) ToLoadBalancerSslCipherSuitePtrOutputWithContext(ctx context.Context) LoadBalancerSslCipherSuitePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoadBalancerSslCipherSuitePtrOutput)
}

// LoadBalancerSslCipherSuiteArrayInput is an input type that accepts LoadBalancerSslCipherSuiteArray and LoadBalancerSslCipherSuiteArrayOutput values.
// You can construct a concrete instance of `LoadBalancerSslCipherSuiteArrayInput` via:
//
//          LoadBalancerSslCipherSuiteArray{ LoadBalancerSslCipherSuiteArgs{...} }
type LoadBalancerSslCipherSuiteArrayInput interface {
	pulumi.Input

	ToLoadBalancerSslCipherSuiteArrayOutput() LoadBalancerSslCipherSuiteArrayOutput
	ToLoadBalancerSslCipherSuiteArrayOutputWithContext(context.Context) LoadBalancerSslCipherSuiteArrayOutput
}

type LoadBalancerSslCipherSuiteArray []LoadBalancerSslCipherSuiteInput

func (LoadBalancerSslCipherSuiteArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LoadBalancerSslCipherSuite)(nil)).Elem()
}

func (i LoadBalancerSslCipherSuiteArray) ToLoadBalancerSslCipherSuiteArrayOutput() LoadBalancerSslCipherSuiteArrayOutput {
	return i.ToLoadBalancerSslCipherSuiteArrayOutputWithContext(context.Background())
}

func (i LoadBalancerSslCipherSuiteArray) ToLoadBalancerSslCipherSuiteArrayOutputWithContext(ctx context.Context) LoadBalancerSslCipherSuiteArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoadBalancerSslCipherSuiteArrayOutput)
}

// LoadBalancerSslCipherSuiteMapInput is an input type that accepts LoadBalancerSslCipherSuiteMap and LoadBalancerSslCipherSuiteMapOutput values.
// You can construct a concrete instance of `LoadBalancerSslCipherSuiteMapInput` via:
//
//          LoadBalancerSslCipherSuiteMap{ "key": LoadBalancerSslCipherSuiteArgs{...} }
type LoadBalancerSslCipherSuiteMapInput interface {
	pulumi.Input

	ToLoadBalancerSslCipherSuiteMapOutput() LoadBalancerSslCipherSuiteMapOutput
	ToLoadBalancerSslCipherSuiteMapOutputWithContext(context.Context) LoadBalancerSslCipherSuiteMapOutput
}

type LoadBalancerSslCipherSuiteMap map[string]LoadBalancerSslCipherSuiteInput

func (LoadBalancerSslCipherSuiteMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LoadBalancerSslCipherSuite)(nil)).Elem()
}

func (i LoadBalancerSslCipherSuiteMap) ToLoadBalancerSslCipherSuiteMapOutput() LoadBalancerSslCipherSuiteMapOutput {
	return i.ToLoadBalancerSslCipherSuiteMapOutputWithContext(context.Background())
}

func (i LoadBalancerSslCipherSuiteMap) ToLoadBalancerSslCipherSuiteMapOutputWithContext(ctx context.Context) LoadBalancerSslCipherSuiteMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoadBalancerSslCipherSuiteMapOutput)
}

type LoadBalancerSslCipherSuiteOutput struct {
	*pulumi.OutputState
}

func (LoadBalancerSslCipherSuiteOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LoadBalancerSslCipherSuite)(nil))
}

func (o LoadBalancerSslCipherSuiteOutput) ToLoadBalancerSslCipherSuiteOutput() LoadBalancerSslCipherSuiteOutput {
	return o
}

func (o LoadBalancerSslCipherSuiteOutput) ToLoadBalancerSslCipherSuiteOutputWithContext(ctx context.Context) LoadBalancerSslCipherSuiteOutput {
	return o
}

func (o LoadBalancerSslCipherSuiteOutput) ToLoadBalancerSslCipherSuitePtrOutput() LoadBalancerSslCipherSuitePtrOutput {
	return o.ToLoadBalancerSslCipherSuitePtrOutputWithContext(context.Background())
}

func (o LoadBalancerSslCipherSuiteOutput) ToLoadBalancerSslCipherSuitePtrOutputWithContext(ctx context.Context) LoadBalancerSslCipherSuitePtrOutput {
	return o.ApplyT(func(v LoadBalancerSslCipherSuite) *LoadBalancerSslCipherSuite {
		return &v
	}).(LoadBalancerSslCipherSuitePtrOutput)
}

type LoadBalancerSslCipherSuitePtrOutput struct {
	*pulumi.OutputState
}

func (LoadBalancerSslCipherSuitePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LoadBalancerSslCipherSuite)(nil))
}

func (o LoadBalancerSslCipherSuitePtrOutput) ToLoadBalancerSslCipherSuitePtrOutput() LoadBalancerSslCipherSuitePtrOutput {
	return o
}

func (o LoadBalancerSslCipherSuitePtrOutput) ToLoadBalancerSslCipherSuitePtrOutputWithContext(ctx context.Context) LoadBalancerSslCipherSuitePtrOutput {
	return o
}

type LoadBalancerSslCipherSuiteArrayOutput struct{ *pulumi.OutputState }

func (LoadBalancerSslCipherSuiteArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LoadBalancerSslCipherSuite)(nil))
}

func (o LoadBalancerSslCipherSuiteArrayOutput) ToLoadBalancerSslCipherSuiteArrayOutput() LoadBalancerSslCipherSuiteArrayOutput {
	return o
}

func (o LoadBalancerSslCipherSuiteArrayOutput) ToLoadBalancerSslCipherSuiteArrayOutputWithContext(ctx context.Context) LoadBalancerSslCipherSuiteArrayOutput {
	return o
}

func (o LoadBalancerSslCipherSuiteArrayOutput) Index(i pulumi.IntInput) LoadBalancerSslCipherSuiteOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) LoadBalancerSslCipherSuite {
		return vs[0].([]LoadBalancerSslCipherSuite)[vs[1].(int)]
	}).(LoadBalancerSslCipherSuiteOutput)
}

type LoadBalancerSslCipherSuiteMapOutput struct{ *pulumi.OutputState }

func (LoadBalancerSslCipherSuiteMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]LoadBalancerSslCipherSuite)(nil))
}

func (o LoadBalancerSslCipherSuiteMapOutput) ToLoadBalancerSslCipherSuiteMapOutput() LoadBalancerSslCipherSuiteMapOutput {
	return o
}

func (o LoadBalancerSslCipherSuiteMapOutput) ToLoadBalancerSslCipherSuiteMapOutputWithContext(ctx context.Context) LoadBalancerSslCipherSuiteMapOutput {
	return o
}

func (o LoadBalancerSslCipherSuiteMapOutput) MapIndex(k pulumi.StringInput) LoadBalancerSslCipherSuiteOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) LoadBalancerSslCipherSuite {
		return vs[0].(map[string]LoadBalancerSslCipherSuite)[vs[1].(string)]
	}).(LoadBalancerSslCipherSuiteOutput)
}

func init() {
	pulumi.RegisterOutputType(LoadBalancerSslCipherSuiteOutput{})
	pulumi.RegisterOutputType(LoadBalancerSslCipherSuitePtrOutput{})
	pulumi.RegisterOutputType(LoadBalancerSslCipherSuiteArrayOutput{})
	pulumi.RegisterOutputType(LoadBalancerSslCipherSuiteMapOutput{})
}
