// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci
{
    public static class GetLoggingLogGroups
    {
        /// <summary>
        /// This data source provides the list of Log Groups in Oracle Cloud Infrastructure Logging service.
        /// 
        /// Lists all log groups for the specified compartment or tenancy.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var testLogGroups = Output.Create(Oci.GetLoggingLogGroups.InvokeAsync(new Oci.GetLoggingLogGroupsArgs
        ///         {
        ///             CompartmentId = @var.Compartment_id,
        ///             DisplayName = @var.Log_group_display_name,
        ///             IsCompartmentIdInSubtree = @var.Log_group_is_compartment_id_in_subtree,
        ///         }));
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetLoggingLogGroupsResult> InvokeAsync(GetLoggingLogGroupsArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetLoggingLogGroupsResult>("oci:index/getLoggingLogGroups:GetLoggingLogGroups", args ?? new GetLoggingLogGroupsArgs(), options.WithVersion());
    }


    public sealed class GetLoggingLogGroupsArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// Compartment OCID to list resources in. See compartmentIdInSubtree for nested compartments traversal.
        /// </summary>
        [Input("compartmentId", required: true)]
        public string CompartmentId { get; set; } = null!;

        /// <summary>
        /// Resource name
        /// </summary>
        [Input("displayName")]
        public string? DisplayName { get; set; }

        [Input("filters")]
        private List<Inputs.GetLoggingLogGroupsFilterArgs>? _filters;
        public List<Inputs.GetLoggingLogGroupsFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetLoggingLogGroupsFilterArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// Specifies whether or not nested compartments should be traversed. Defaults to false.
        /// </summary>
        [Input("isCompartmentIdInSubtree")]
        public bool? IsCompartmentIdInSubtree { get; set; }

        public GetLoggingLogGroupsArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetLoggingLogGroupsResult
    {
        /// <summary>
        /// The OCID of the compartment that the resource belongs to.
        /// </summary>
        public readonly string CompartmentId;
        /// <summary>
        /// The user-friendly display name. This must be unique within the enclosing resource, and it's changeable. Avoid entering confidential information.
        /// </summary>
        public readonly string? DisplayName;
        public readonly ImmutableArray<Outputs.GetLoggingLogGroupsFilterResult> Filters;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly bool? IsCompartmentIdInSubtree;
        /// <summary>
        /// The list of log_groups.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetLoggingLogGroupsLogGroupResult> LogGroups;

        [OutputConstructor]
        private GetLoggingLogGroupsResult(
            string compartmentId,

            string? displayName,

            ImmutableArray<Outputs.GetLoggingLogGroupsFilterResult> filters,

            string id,

            bool? isCompartmentIdInSubtree,

            ImmutableArray<Outputs.GetLoggingLogGroupsLogGroupResult> logGroups)
        {
            CompartmentId = compartmentId;
            DisplayName = displayName;
            Filters = filters;
            Id = id;
            IsCompartmentIdInSubtree = isCompartmentIdInSubtree;
            LogGroups = logGroups;
        }
    }
}
