// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package oci

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource provides the Resolver resource in Oracle Cloud Infrastructure DNS service.
//
// Updates the specified resolver with your new information. Requires a `PRIVATE` scope query parameter.
//
// Note: Resolvers are associated with VCNs and created when a VCN is created. Wait until created VCN's state shows as Available in OCI console before updating DNS resolver properties.
// Also a VCN cannot be deleted while its resolver has resolver endpoints. Additionally a resolver endpoint cannot be deleted if it is referenced in the resolver's rules. To remove the rules from a resolver user needs to update the resolver resource. Since DNS Resolver gets deleted when VCN is deleted there is no support for Delete for DNS Resolver.
//
// ## Import
//
// For legacy Resolvers that were created without using `scope`, these Resolvers can be imported using the `id`, e.g.
//
// ```sh
//  $ pulumi import oci:index/dnsResolver:DnsResolver test_resolver "id"
// ```
//
//  For Resolvers created using `scope`, these Resolvers can be imported using the `id`, e.g.
//
// ```sh
//  $ pulumi import oci:index/dnsResolver:DnsResolver test_resolver "resolverId/{resolverId}/scope/{scope}"
// ```
type DnsResolver struct {
	pulumi.CustomResourceState

	// The OCID of the attached VCN.
	AttachedVcnId pulumi.StringOutput `pulumi:"attachedVcnId"`
	// (Updatable) The attached views. Views are evaluated in order.
	AttachedViews DnsResolverAttachedViewArrayOutput `pulumi:"attachedViews"`
	// (Updatable) The OCID of the owning compartment.
	CompartmentId pulumi.StringOutput `pulumi:"compartmentId"`
	// The OCID of the default view.
	DefaultViewId pulumi.StringOutput `pulumi:"defaultViewId"`
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
	DefinedTags pulumi.MapOutput `pulumi:"definedTags"`
	// (Updatable) The display name of the resolver.
	DisplayName pulumi.StringOutput `pulumi:"displayName"`
	// Read-only array of endpoints for the resolver.
	Endpoints DnsResolverEndpointTypeArrayOutput `pulumi:"endpoints"`
	// (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
	FreeformTags pulumi.MapOutput `pulumi:"freeformTags"`
	// A Boolean flag indicating whether or not parts of the resource are unable to be explicitly managed.
	IsProtected pulumi.BoolOutput `pulumi:"isProtected"`
	// The OCID of the target resolver.
	ResolverId pulumi.StringOutput `pulumi:"resolverId"`
	// (Updatable) Rules for the resolver. Rules are evaluated in order.
	Rules DnsResolverRuleArrayOutput `pulumi:"rules"`
	// Value must be `PRIVATE` when creating private name resolvers.
	Scope pulumi.StringOutput `pulumi:"scope"`
	// The canonical absolute URL of the resource.
	Self pulumi.StringOutput `pulumi:"self"`
	// The current state of the resource.
	State pulumi.StringOutput `pulumi:"state"`
	// The date and time the resource was created in "YYYY-MM-ddThh:mm:ssZ" format with a Z offset, as defined by RFC 3339.
	TimeCreated pulumi.StringOutput `pulumi:"timeCreated"`
	// The date and time the resource was last updated in "YYYY-MM-ddThh:mm:ssZ" format with a Z offset, as defined by RFC 3339.
	TimeUpdated pulumi.StringOutput `pulumi:"timeUpdated"`
}

// NewDnsResolver registers a new resource with the given unique name, arguments, and options.
func NewDnsResolver(ctx *pulumi.Context,
	name string, args *DnsResolverArgs, opts ...pulumi.ResourceOption) (*DnsResolver, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ResolverId == nil {
		return nil, errors.New("invalid value for required argument 'ResolverId'")
	}
	if args.Scope == nil {
		return nil, errors.New("invalid value for required argument 'Scope'")
	}
	var resource DnsResolver
	err := ctx.RegisterResource("oci:index/dnsResolver:DnsResolver", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDnsResolver gets an existing DnsResolver resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDnsResolver(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DnsResolverState, opts ...pulumi.ResourceOption) (*DnsResolver, error) {
	var resource DnsResolver
	err := ctx.ReadResource("oci:index/dnsResolver:DnsResolver", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DnsResolver resources.
type dnsResolverState struct {
	// The OCID of the attached VCN.
	AttachedVcnId *string `pulumi:"attachedVcnId"`
	// (Updatable) The attached views. Views are evaluated in order.
	AttachedViews []DnsResolverAttachedView `pulumi:"attachedViews"`
	// (Updatable) The OCID of the owning compartment.
	CompartmentId *string `pulumi:"compartmentId"`
	// The OCID of the default view.
	DefaultViewId *string `pulumi:"defaultViewId"`
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
	DefinedTags map[string]interface{} `pulumi:"definedTags"`
	// (Updatable) The display name of the resolver.
	DisplayName *string `pulumi:"displayName"`
	// Read-only array of endpoints for the resolver.
	Endpoints []DnsResolverEndpointType `pulumi:"endpoints"`
	// (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
	FreeformTags map[string]interface{} `pulumi:"freeformTags"`
	// A Boolean flag indicating whether or not parts of the resource are unable to be explicitly managed.
	IsProtected *bool `pulumi:"isProtected"`
	// The OCID of the target resolver.
	ResolverId *string `pulumi:"resolverId"`
	// (Updatable) Rules for the resolver. Rules are evaluated in order.
	Rules []DnsResolverRule `pulumi:"rules"`
	// Value must be `PRIVATE` when creating private name resolvers.
	Scope *string `pulumi:"scope"`
	// The canonical absolute URL of the resource.
	Self *string `pulumi:"self"`
	// The current state of the resource.
	State *string `pulumi:"state"`
	// The date and time the resource was created in "YYYY-MM-ddThh:mm:ssZ" format with a Z offset, as defined by RFC 3339.
	TimeCreated *string `pulumi:"timeCreated"`
	// The date and time the resource was last updated in "YYYY-MM-ddThh:mm:ssZ" format with a Z offset, as defined by RFC 3339.
	TimeUpdated *string `pulumi:"timeUpdated"`
}

type DnsResolverState struct {
	// The OCID of the attached VCN.
	AttachedVcnId pulumi.StringPtrInput
	// (Updatable) The attached views. Views are evaluated in order.
	AttachedViews DnsResolverAttachedViewArrayInput
	// (Updatable) The OCID of the owning compartment.
	CompartmentId pulumi.StringPtrInput
	// The OCID of the default view.
	DefaultViewId pulumi.StringPtrInput
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
	DefinedTags pulumi.MapInput
	// (Updatable) The display name of the resolver.
	DisplayName pulumi.StringPtrInput
	// Read-only array of endpoints for the resolver.
	Endpoints DnsResolverEndpointTypeArrayInput
	// (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
	FreeformTags pulumi.MapInput
	// A Boolean flag indicating whether or not parts of the resource are unable to be explicitly managed.
	IsProtected pulumi.BoolPtrInput
	// The OCID of the target resolver.
	ResolverId pulumi.StringPtrInput
	// (Updatable) Rules for the resolver. Rules are evaluated in order.
	Rules DnsResolverRuleArrayInput
	// Value must be `PRIVATE` when creating private name resolvers.
	Scope pulumi.StringPtrInput
	// The canonical absolute URL of the resource.
	Self pulumi.StringPtrInput
	// The current state of the resource.
	State pulumi.StringPtrInput
	// The date and time the resource was created in "YYYY-MM-ddThh:mm:ssZ" format with a Z offset, as defined by RFC 3339.
	TimeCreated pulumi.StringPtrInput
	// The date and time the resource was last updated in "YYYY-MM-ddThh:mm:ssZ" format with a Z offset, as defined by RFC 3339.
	TimeUpdated pulumi.StringPtrInput
}

func (DnsResolverState) ElementType() reflect.Type {
	return reflect.TypeOf((*dnsResolverState)(nil)).Elem()
}

type dnsResolverArgs struct {
	// (Updatable) The attached views. Views are evaluated in order.
	AttachedViews []DnsResolverAttachedView `pulumi:"attachedViews"`
	// (Updatable) The OCID of the owning compartment.
	CompartmentId *string `pulumi:"compartmentId"`
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
	DefinedTags map[string]interface{} `pulumi:"definedTags"`
	// (Updatable) The display name of the resolver.
	DisplayName *string `pulumi:"displayName"`
	// (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
	FreeformTags map[string]interface{} `pulumi:"freeformTags"`
	// The OCID of the target resolver.
	ResolverId string `pulumi:"resolverId"`
	// (Updatable) Rules for the resolver. Rules are evaluated in order.
	Rules []DnsResolverRule `pulumi:"rules"`
	// Value must be `PRIVATE` when creating private name resolvers.
	Scope string `pulumi:"scope"`
}

// The set of arguments for constructing a DnsResolver resource.
type DnsResolverArgs struct {
	// (Updatable) The attached views. Views are evaluated in order.
	AttachedViews DnsResolverAttachedViewArrayInput
	// (Updatable) The OCID of the owning compartment.
	CompartmentId pulumi.StringPtrInput
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
	DefinedTags pulumi.MapInput
	// (Updatable) The display name of the resolver.
	DisplayName pulumi.StringPtrInput
	// (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
	FreeformTags pulumi.MapInput
	// The OCID of the target resolver.
	ResolverId pulumi.StringInput
	// (Updatable) Rules for the resolver. Rules are evaluated in order.
	Rules DnsResolverRuleArrayInput
	// Value must be `PRIVATE` when creating private name resolvers.
	Scope pulumi.StringInput
}

func (DnsResolverArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*dnsResolverArgs)(nil)).Elem()
}

type DnsResolverInput interface {
	pulumi.Input

	ToDnsResolverOutput() DnsResolverOutput
	ToDnsResolverOutputWithContext(ctx context.Context) DnsResolverOutput
}

func (*DnsResolver) ElementType() reflect.Type {
	return reflect.TypeOf((*DnsResolver)(nil))
}

func (i *DnsResolver) ToDnsResolverOutput() DnsResolverOutput {
	return i.ToDnsResolverOutputWithContext(context.Background())
}

func (i *DnsResolver) ToDnsResolverOutputWithContext(ctx context.Context) DnsResolverOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DnsResolverOutput)
}

func (i *DnsResolver) ToDnsResolverPtrOutput() DnsResolverPtrOutput {
	return i.ToDnsResolverPtrOutputWithContext(context.Background())
}

func (i *DnsResolver) ToDnsResolverPtrOutputWithContext(ctx context.Context) DnsResolverPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DnsResolverPtrOutput)
}

type DnsResolverPtrInput interface {
	pulumi.Input

	ToDnsResolverPtrOutput() DnsResolverPtrOutput
	ToDnsResolverPtrOutputWithContext(ctx context.Context) DnsResolverPtrOutput
}

type dnsResolverPtrType DnsResolverArgs

func (*dnsResolverPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DnsResolver)(nil))
}

func (i *dnsResolverPtrType) ToDnsResolverPtrOutput() DnsResolverPtrOutput {
	return i.ToDnsResolverPtrOutputWithContext(context.Background())
}

func (i *dnsResolverPtrType) ToDnsResolverPtrOutputWithContext(ctx context.Context) DnsResolverPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DnsResolverPtrOutput)
}

// DnsResolverArrayInput is an input type that accepts DnsResolverArray and DnsResolverArrayOutput values.
// You can construct a concrete instance of `DnsResolverArrayInput` via:
//
//          DnsResolverArray{ DnsResolverArgs{...} }
type DnsResolverArrayInput interface {
	pulumi.Input

	ToDnsResolverArrayOutput() DnsResolverArrayOutput
	ToDnsResolverArrayOutputWithContext(context.Context) DnsResolverArrayOutput
}

type DnsResolverArray []DnsResolverInput

func (DnsResolverArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DnsResolver)(nil)).Elem()
}

func (i DnsResolverArray) ToDnsResolverArrayOutput() DnsResolverArrayOutput {
	return i.ToDnsResolverArrayOutputWithContext(context.Background())
}

func (i DnsResolverArray) ToDnsResolverArrayOutputWithContext(ctx context.Context) DnsResolverArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DnsResolverArrayOutput)
}

// DnsResolverMapInput is an input type that accepts DnsResolverMap and DnsResolverMapOutput values.
// You can construct a concrete instance of `DnsResolverMapInput` via:
//
//          DnsResolverMap{ "key": DnsResolverArgs{...} }
type DnsResolverMapInput interface {
	pulumi.Input

	ToDnsResolverMapOutput() DnsResolverMapOutput
	ToDnsResolverMapOutputWithContext(context.Context) DnsResolverMapOutput
}

type DnsResolverMap map[string]DnsResolverInput

func (DnsResolverMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DnsResolver)(nil)).Elem()
}

func (i DnsResolverMap) ToDnsResolverMapOutput() DnsResolverMapOutput {
	return i.ToDnsResolverMapOutputWithContext(context.Background())
}

func (i DnsResolverMap) ToDnsResolverMapOutputWithContext(ctx context.Context) DnsResolverMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DnsResolverMapOutput)
}

type DnsResolverOutput struct {
	*pulumi.OutputState
}

func (DnsResolverOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DnsResolver)(nil))
}

func (o DnsResolverOutput) ToDnsResolverOutput() DnsResolverOutput {
	return o
}

func (o DnsResolverOutput) ToDnsResolverOutputWithContext(ctx context.Context) DnsResolverOutput {
	return o
}

func (o DnsResolverOutput) ToDnsResolverPtrOutput() DnsResolverPtrOutput {
	return o.ToDnsResolverPtrOutputWithContext(context.Background())
}

func (o DnsResolverOutput) ToDnsResolverPtrOutputWithContext(ctx context.Context) DnsResolverPtrOutput {
	return o.ApplyT(func(v DnsResolver) *DnsResolver {
		return &v
	}).(DnsResolverPtrOutput)
}

type DnsResolverPtrOutput struct {
	*pulumi.OutputState
}

func (DnsResolverPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DnsResolver)(nil))
}

func (o DnsResolverPtrOutput) ToDnsResolverPtrOutput() DnsResolverPtrOutput {
	return o
}

func (o DnsResolverPtrOutput) ToDnsResolverPtrOutputWithContext(ctx context.Context) DnsResolverPtrOutput {
	return o
}

type DnsResolverArrayOutput struct{ *pulumi.OutputState }

func (DnsResolverArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DnsResolver)(nil))
}

func (o DnsResolverArrayOutput) ToDnsResolverArrayOutput() DnsResolverArrayOutput {
	return o
}

func (o DnsResolverArrayOutput) ToDnsResolverArrayOutputWithContext(ctx context.Context) DnsResolverArrayOutput {
	return o
}

func (o DnsResolverArrayOutput) Index(i pulumi.IntInput) DnsResolverOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DnsResolver {
		return vs[0].([]DnsResolver)[vs[1].(int)]
	}).(DnsResolverOutput)
}

type DnsResolverMapOutput struct{ *pulumi.OutputState }

func (DnsResolverMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]DnsResolver)(nil))
}

func (o DnsResolverMapOutput) ToDnsResolverMapOutput() DnsResolverMapOutput {
	return o
}

func (o DnsResolverMapOutput) ToDnsResolverMapOutputWithContext(ctx context.Context) DnsResolverMapOutput {
	return o
}

func (o DnsResolverMapOutput) MapIndex(k pulumi.StringInput) DnsResolverOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) DnsResolver {
		return vs[0].(map[string]DnsResolver)[vs[1].(string)]
	}).(DnsResolverOutput)
}

func init() {
	pulumi.RegisterOutputType(DnsResolverOutput{})
	pulumi.RegisterOutputType(DnsResolverPtrOutput{})
	pulumi.RegisterOutputType(DnsResolverArrayOutput{})
	pulumi.RegisterOutputType(DnsResolverMapOutput{})
}
