// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * This resource provides the Swift Password resource in Oracle Cloud Infrastructure Identity service.
 *
 * **Deprecated. Use [CreateAuthToken](https://docs.cloud.oracle.com/iaas/api/#/en/identity/20160918/AuthToken/CreateAuthToken) instead.**
 *
 * Creates a new Swift password for the specified user. For information about what Swift passwords are for, see
 * [Managing User Credentials](https://docs.cloud.oracle.com/iaas/Content/Identity/Tasks/managingcredentials.htm).
 *
 * You must specify a *description* for the Swift password (although it can be an empty string). It does not
 * have to be unique, and you can change it anytime with
 * [UpdateSwiftPassword](https://docs.cloud.oracle.com/iaas/api/#/en/identity/20160918/SwiftPassword/UpdateSwiftPassword).
 *
 * Every user has permission to create a Swift password for *their own user ID*. An administrator in your organization
 * does not need to write a policy to give users this ability. To compare, administrators who have permission to the
 * tenancy can use this operation to create a Swift password for any user, including themselves.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as oci from "@pulumi/oci";
 *
 * const testSwiftPassword = new oci.IdentitySwiftPassword("testSwiftPassword", {
 *     description: _var.swift_password_description,
 *     userId: oci_identity_user.test_user.id,
 * });
 * ```
 *
 * ## Import
 *
 * SwiftPasswords can be imported using the `id`, e.g.
 *
 * ```sh
 *  $ pulumi import oci:index/identitySwiftPassword:IdentitySwiftPassword test_swift_password "users/{userId}/swiftPasswords/{swiftPasswordId}"
 * ```
 */
export class IdentitySwiftPassword extends pulumi.CustomResource {
    /**
     * Get an existing IdentitySwiftPassword resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: IdentitySwiftPasswordState, opts?: pulumi.CustomResourceOptions): IdentitySwiftPassword {
        return new IdentitySwiftPassword(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'oci:index/identitySwiftPassword:IdentitySwiftPassword';

    /**
     * Returns true if the given object is an instance of IdentitySwiftPassword.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is IdentitySwiftPassword {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === IdentitySwiftPassword.__pulumiType;
    }

    /**
     * (Updatable) The description you assign to the Swift password during creation. Does not have to be unique, and it's changeable.
     */
    public readonly description!: pulumi.Output<string>;
    /**
     * Date and time when this password will expire, in the format defined by RFC3339. Null if it never expires.  Example: `2016-08-25T21:10:29.600Z`
     */
    public /*out*/ readonly expiresOn!: pulumi.Output<string>;
    /**
     * The detailed status of INACTIVE lifecycleState.
     */
    public /*out*/ readonly inactiveState!: pulumi.Output<string>;
    /**
     * The Swift password. The value is available only in the response for `CreateSwiftPassword`, and not for `ListSwiftPasswords` or `UpdateSwiftPassword`.
     */
    public /*out*/ readonly password!: pulumi.Output<string>;
    /**
     * The password's current state.
     */
    public /*out*/ readonly state!: pulumi.Output<string>;
    /**
     * Date and time the `SwiftPassword` object was created, in the format defined by RFC3339.  Example: `2016-08-25T21:10:29.600Z`
     */
    public /*out*/ readonly timeCreated!: pulumi.Output<string>;
    /**
     * The OCID of the user.
     */
    public readonly userId!: pulumi.Output<string>;

    /**
     * Create a IdentitySwiftPassword resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: IdentitySwiftPasswordArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: IdentitySwiftPasswordArgs | IdentitySwiftPasswordState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as IdentitySwiftPasswordState | undefined;
            inputs["description"] = state ? state.description : undefined;
            inputs["expiresOn"] = state ? state.expiresOn : undefined;
            inputs["inactiveState"] = state ? state.inactiveState : undefined;
            inputs["password"] = state ? state.password : undefined;
            inputs["state"] = state ? state.state : undefined;
            inputs["timeCreated"] = state ? state.timeCreated : undefined;
            inputs["userId"] = state ? state.userId : undefined;
        } else {
            const args = argsOrState as IdentitySwiftPasswordArgs | undefined;
            if ((!args || args.description === undefined) && !opts.urn) {
                throw new Error("Missing required property 'description'");
            }
            if ((!args || args.userId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'userId'");
            }
            inputs["description"] = args ? args.description : undefined;
            inputs["userId"] = args ? args.userId : undefined;
            inputs["expiresOn"] = undefined /*out*/;
            inputs["inactiveState"] = undefined /*out*/;
            inputs["password"] = undefined /*out*/;
            inputs["state"] = undefined /*out*/;
            inputs["timeCreated"] = undefined /*out*/;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion()});
        }
        super(IdentitySwiftPassword.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering IdentitySwiftPassword resources.
 */
export interface IdentitySwiftPasswordState {
    /**
     * (Updatable) The description you assign to the Swift password during creation. Does not have to be unique, and it's changeable.
     */
    description?: pulumi.Input<string>;
    /**
     * Date and time when this password will expire, in the format defined by RFC3339. Null if it never expires.  Example: `2016-08-25T21:10:29.600Z`
     */
    expiresOn?: pulumi.Input<string>;
    /**
     * The detailed status of INACTIVE lifecycleState.
     */
    inactiveState?: pulumi.Input<string>;
    /**
     * The Swift password. The value is available only in the response for `CreateSwiftPassword`, and not for `ListSwiftPasswords` or `UpdateSwiftPassword`.
     */
    password?: pulumi.Input<string>;
    /**
     * The password's current state.
     */
    state?: pulumi.Input<string>;
    /**
     * Date and time the `SwiftPassword` object was created, in the format defined by RFC3339.  Example: `2016-08-25T21:10:29.600Z`
     */
    timeCreated?: pulumi.Input<string>;
    /**
     * The OCID of the user.
     */
    userId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a IdentitySwiftPassword resource.
 */
export interface IdentitySwiftPasswordArgs {
    /**
     * (Updatable) The description you assign to the Swift password during creation. Does not have to be unique, and it's changeable.
     */
    description: pulumi.Input<string>;
    /**
     * The OCID of the user.
     */
    userId: pulumi.Input<string>;
}
