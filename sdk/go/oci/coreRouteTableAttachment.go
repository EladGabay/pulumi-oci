// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package oci

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource provides the ability to associate a route table for a subnet in Oracle Cloud Infrastructure Core service.
//
// Attaches the specified `route table` to the specified `subnet`.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-oci/sdk/go/oci"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := oci.NewCoreRouteTableAttachment(ctx, "testRouteTableAttachment", &oci.CoreRouteTableAttachmentArgs{
// 			SubnetId:     pulumi.Any(oci_core_subnet.Test_subnet.Id),
// 			RouteTableId: pulumi.Any(oci_core_route_table.Test_route_table.Id),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// Route Table Attachment can be imported using the `id`, e.g.
//
// ```sh
//  $ pulumi import oci:index/coreRouteTableAttachment:CoreRouteTableAttachment test_route_table_attachment "{subnetId}/{routeTableId}"
// ```
type CoreRouteTableAttachment struct {
	pulumi.CustomResourceState

	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the route table.
	RouteTableId pulumi.StringOutput `pulumi:"routeTableId"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the subnet.
	SubnetId pulumi.StringOutput `pulumi:"subnetId"`
}

// NewCoreRouteTableAttachment registers a new resource with the given unique name, arguments, and options.
func NewCoreRouteTableAttachment(ctx *pulumi.Context,
	name string, args *CoreRouteTableAttachmentArgs, opts ...pulumi.ResourceOption) (*CoreRouteTableAttachment, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.RouteTableId == nil {
		return nil, errors.New("invalid value for required argument 'RouteTableId'")
	}
	if args.SubnetId == nil {
		return nil, errors.New("invalid value for required argument 'SubnetId'")
	}
	var resource CoreRouteTableAttachment
	err := ctx.RegisterResource("oci:index/coreRouteTableAttachment:CoreRouteTableAttachment", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCoreRouteTableAttachment gets an existing CoreRouteTableAttachment resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCoreRouteTableAttachment(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CoreRouteTableAttachmentState, opts ...pulumi.ResourceOption) (*CoreRouteTableAttachment, error) {
	var resource CoreRouteTableAttachment
	err := ctx.ReadResource("oci:index/coreRouteTableAttachment:CoreRouteTableAttachment", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CoreRouteTableAttachment resources.
type coreRouteTableAttachmentState struct {
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the route table.
	RouteTableId *string `pulumi:"routeTableId"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the subnet.
	SubnetId *string `pulumi:"subnetId"`
}

type CoreRouteTableAttachmentState struct {
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the route table.
	RouteTableId pulumi.StringPtrInput
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the subnet.
	SubnetId pulumi.StringPtrInput
}

func (CoreRouteTableAttachmentState) ElementType() reflect.Type {
	return reflect.TypeOf((*coreRouteTableAttachmentState)(nil)).Elem()
}

type coreRouteTableAttachmentArgs struct {
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the route table.
	RouteTableId string `pulumi:"routeTableId"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the subnet.
	SubnetId string `pulumi:"subnetId"`
}

// The set of arguments for constructing a CoreRouteTableAttachment resource.
type CoreRouteTableAttachmentArgs struct {
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the route table.
	RouteTableId pulumi.StringInput
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the subnet.
	SubnetId pulumi.StringInput
}

func (CoreRouteTableAttachmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*coreRouteTableAttachmentArgs)(nil)).Elem()
}

type CoreRouteTableAttachmentInput interface {
	pulumi.Input

	ToCoreRouteTableAttachmentOutput() CoreRouteTableAttachmentOutput
	ToCoreRouteTableAttachmentOutputWithContext(ctx context.Context) CoreRouteTableAttachmentOutput
}

func (*CoreRouteTableAttachment) ElementType() reflect.Type {
	return reflect.TypeOf((*CoreRouteTableAttachment)(nil))
}

func (i *CoreRouteTableAttachment) ToCoreRouteTableAttachmentOutput() CoreRouteTableAttachmentOutput {
	return i.ToCoreRouteTableAttachmentOutputWithContext(context.Background())
}

func (i *CoreRouteTableAttachment) ToCoreRouteTableAttachmentOutputWithContext(ctx context.Context) CoreRouteTableAttachmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CoreRouteTableAttachmentOutput)
}

func (i *CoreRouteTableAttachment) ToCoreRouteTableAttachmentPtrOutput() CoreRouteTableAttachmentPtrOutput {
	return i.ToCoreRouteTableAttachmentPtrOutputWithContext(context.Background())
}

func (i *CoreRouteTableAttachment) ToCoreRouteTableAttachmentPtrOutputWithContext(ctx context.Context) CoreRouteTableAttachmentPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CoreRouteTableAttachmentPtrOutput)
}

type CoreRouteTableAttachmentPtrInput interface {
	pulumi.Input

	ToCoreRouteTableAttachmentPtrOutput() CoreRouteTableAttachmentPtrOutput
	ToCoreRouteTableAttachmentPtrOutputWithContext(ctx context.Context) CoreRouteTableAttachmentPtrOutput
}

type coreRouteTableAttachmentPtrType CoreRouteTableAttachmentArgs

func (*coreRouteTableAttachmentPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CoreRouteTableAttachment)(nil))
}

func (i *coreRouteTableAttachmentPtrType) ToCoreRouteTableAttachmentPtrOutput() CoreRouteTableAttachmentPtrOutput {
	return i.ToCoreRouteTableAttachmentPtrOutputWithContext(context.Background())
}

func (i *coreRouteTableAttachmentPtrType) ToCoreRouteTableAttachmentPtrOutputWithContext(ctx context.Context) CoreRouteTableAttachmentPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CoreRouteTableAttachmentPtrOutput)
}

// CoreRouteTableAttachmentArrayInput is an input type that accepts CoreRouteTableAttachmentArray and CoreRouteTableAttachmentArrayOutput values.
// You can construct a concrete instance of `CoreRouteTableAttachmentArrayInput` via:
//
//          CoreRouteTableAttachmentArray{ CoreRouteTableAttachmentArgs{...} }
type CoreRouteTableAttachmentArrayInput interface {
	pulumi.Input

	ToCoreRouteTableAttachmentArrayOutput() CoreRouteTableAttachmentArrayOutput
	ToCoreRouteTableAttachmentArrayOutputWithContext(context.Context) CoreRouteTableAttachmentArrayOutput
}

type CoreRouteTableAttachmentArray []CoreRouteTableAttachmentInput

func (CoreRouteTableAttachmentArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CoreRouteTableAttachment)(nil)).Elem()
}

func (i CoreRouteTableAttachmentArray) ToCoreRouteTableAttachmentArrayOutput() CoreRouteTableAttachmentArrayOutput {
	return i.ToCoreRouteTableAttachmentArrayOutputWithContext(context.Background())
}

func (i CoreRouteTableAttachmentArray) ToCoreRouteTableAttachmentArrayOutputWithContext(ctx context.Context) CoreRouteTableAttachmentArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CoreRouteTableAttachmentArrayOutput)
}

// CoreRouteTableAttachmentMapInput is an input type that accepts CoreRouteTableAttachmentMap and CoreRouteTableAttachmentMapOutput values.
// You can construct a concrete instance of `CoreRouteTableAttachmentMapInput` via:
//
//          CoreRouteTableAttachmentMap{ "key": CoreRouteTableAttachmentArgs{...} }
type CoreRouteTableAttachmentMapInput interface {
	pulumi.Input

	ToCoreRouteTableAttachmentMapOutput() CoreRouteTableAttachmentMapOutput
	ToCoreRouteTableAttachmentMapOutputWithContext(context.Context) CoreRouteTableAttachmentMapOutput
}

type CoreRouteTableAttachmentMap map[string]CoreRouteTableAttachmentInput

func (CoreRouteTableAttachmentMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CoreRouteTableAttachment)(nil)).Elem()
}

func (i CoreRouteTableAttachmentMap) ToCoreRouteTableAttachmentMapOutput() CoreRouteTableAttachmentMapOutput {
	return i.ToCoreRouteTableAttachmentMapOutputWithContext(context.Background())
}

func (i CoreRouteTableAttachmentMap) ToCoreRouteTableAttachmentMapOutputWithContext(ctx context.Context) CoreRouteTableAttachmentMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CoreRouteTableAttachmentMapOutput)
}

type CoreRouteTableAttachmentOutput struct {
	*pulumi.OutputState
}

func (CoreRouteTableAttachmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CoreRouteTableAttachment)(nil))
}

func (o CoreRouteTableAttachmentOutput) ToCoreRouteTableAttachmentOutput() CoreRouteTableAttachmentOutput {
	return o
}

func (o CoreRouteTableAttachmentOutput) ToCoreRouteTableAttachmentOutputWithContext(ctx context.Context) CoreRouteTableAttachmentOutput {
	return o
}

func (o CoreRouteTableAttachmentOutput) ToCoreRouteTableAttachmentPtrOutput() CoreRouteTableAttachmentPtrOutput {
	return o.ToCoreRouteTableAttachmentPtrOutputWithContext(context.Background())
}

func (o CoreRouteTableAttachmentOutput) ToCoreRouteTableAttachmentPtrOutputWithContext(ctx context.Context) CoreRouteTableAttachmentPtrOutput {
	return o.ApplyT(func(v CoreRouteTableAttachment) *CoreRouteTableAttachment {
		return &v
	}).(CoreRouteTableAttachmentPtrOutput)
}

type CoreRouteTableAttachmentPtrOutput struct {
	*pulumi.OutputState
}

func (CoreRouteTableAttachmentPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CoreRouteTableAttachment)(nil))
}

func (o CoreRouteTableAttachmentPtrOutput) ToCoreRouteTableAttachmentPtrOutput() CoreRouteTableAttachmentPtrOutput {
	return o
}

func (o CoreRouteTableAttachmentPtrOutput) ToCoreRouteTableAttachmentPtrOutputWithContext(ctx context.Context) CoreRouteTableAttachmentPtrOutput {
	return o
}

type CoreRouteTableAttachmentArrayOutput struct{ *pulumi.OutputState }

func (CoreRouteTableAttachmentArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CoreRouteTableAttachment)(nil))
}

func (o CoreRouteTableAttachmentArrayOutput) ToCoreRouteTableAttachmentArrayOutput() CoreRouteTableAttachmentArrayOutput {
	return o
}

func (o CoreRouteTableAttachmentArrayOutput) ToCoreRouteTableAttachmentArrayOutputWithContext(ctx context.Context) CoreRouteTableAttachmentArrayOutput {
	return o
}

func (o CoreRouteTableAttachmentArrayOutput) Index(i pulumi.IntInput) CoreRouteTableAttachmentOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CoreRouteTableAttachment {
		return vs[0].([]CoreRouteTableAttachment)[vs[1].(int)]
	}).(CoreRouteTableAttachmentOutput)
}

type CoreRouteTableAttachmentMapOutput struct{ *pulumi.OutputState }

func (CoreRouteTableAttachmentMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]CoreRouteTableAttachment)(nil))
}

func (o CoreRouteTableAttachmentMapOutput) ToCoreRouteTableAttachmentMapOutput() CoreRouteTableAttachmentMapOutput {
	return o
}

func (o CoreRouteTableAttachmentMapOutput) ToCoreRouteTableAttachmentMapOutputWithContext(ctx context.Context) CoreRouteTableAttachmentMapOutput {
	return o
}

func (o CoreRouteTableAttachmentMapOutput) MapIndex(k pulumi.StringInput) CoreRouteTableAttachmentOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) CoreRouteTableAttachment {
		return vs[0].(map[string]CoreRouteTableAttachment)[vs[1].(string)]
	}).(CoreRouteTableAttachmentOutput)
}

func init() {
	pulumi.RegisterOutputType(CoreRouteTableAttachmentOutput{})
	pulumi.RegisterOutputType(CoreRouteTableAttachmentPtrOutput{})
	pulumi.RegisterOutputType(CoreRouteTableAttachmentArrayOutput{})
	pulumi.RegisterOutputType(CoreRouteTableAttachmentMapOutput{})
}
