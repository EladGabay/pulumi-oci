// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci
{
    /// <summary>
    /// This resource provides the Container Configuration resource in Oracle Cloud Infrastructure Artifacts service.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Oci = Pulumi.Oci;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var testContainerConfiguration = new Oci.ArtifactsContainerConfiguration("testContainerConfiguration", new Oci.ArtifactsContainerConfigurationArgs
    ///         {
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// 
    /// ## Import
    /// 
    /// ContainerConfiguration can be imported using the `id`, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import oci:index/artifactsContainerConfiguration:ArtifactsContainerConfiguration test_container_configuration "container/configuration/compartmentId/{compartmentId}"
    /// ```
    /// </summary>
    [OciResourceType("oci:index/artifactsContainerConfiguration:ArtifactsContainerConfiguration")]
    public partial class ArtifactsContainerConfiguration : Pulumi.CustomResource
    {
        [Output("compartmentId")]
        public Output<string> CompartmentId { get; private set; } = null!;

        /// <summary>
        /// Whether to create a new container repository when a container is pushed to a new repository path. Repositories created in this way belong to the root compartment.
        /// </summary>
        [Output("isRepositoryCreatedOnFirstPush")]
        public Output<bool> IsRepositoryCreatedOnFirstPush { get; private set; } = null!;

        /// <summary>
        /// The tenancy namespace used in the container repository path.
        /// </summary>
        [Output("namespace")]
        public Output<string> Namespace { get; private set; } = null!;


        /// <summary>
        /// Create a ArtifactsContainerConfiguration resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ArtifactsContainerConfiguration(string name, ArtifactsContainerConfigurationArgs args, CustomResourceOptions? options = null)
            : base("oci:index/artifactsContainerConfiguration:ArtifactsContainerConfiguration", name, args ?? new ArtifactsContainerConfigurationArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ArtifactsContainerConfiguration(string name, Input<string> id, ArtifactsContainerConfigurationState? state = null, CustomResourceOptions? options = null)
            : base("oci:index/artifactsContainerConfiguration:ArtifactsContainerConfiguration", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ArtifactsContainerConfiguration resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ArtifactsContainerConfiguration Get(string name, Input<string> id, ArtifactsContainerConfigurationState? state = null, CustomResourceOptions? options = null)
        {
            return new ArtifactsContainerConfiguration(name, id, state, options);
        }
    }

    public sealed class ArtifactsContainerConfigurationArgs : Pulumi.ResourceArgs
    {
        [Input("compartmentId", required: true)]
        public Input<string> CompartmentId { get; set; } = null!;

        /// <summary>
        /// Whether to create a new container repository when a container is pushed to a new repository path. Repositories created in this way belong to the root compartment.
        /// </summary>
        [Input("isRepositoryCreatedOnFirstPush", required: true)]
        public Input<bool> IsRepositoryCreatedOnFirstPush { get; set; } = null!;

        public ArtifactsContainerConfigurationArgs()
        {
        }
    }

    public sealed class ArtifactsContainerConfigurationState : Pulumi.ResourceArgs
    {
        [Input("compartmentId")]
        public Input<string>? CompartmentId { get; set; }

        /// <summary>
        /// Whether to create a new container repository when a container is pushed to a new repository path. Repositories created in this way belong to the root compartment.
        /// </summary>
        [Input("isRepositoryCreatedOnFirstPush")]
        public Input<bool>? IsRepositoryCreatedOnFirstPush { get; set; }

        /// <summary>
        /// The tenancy namespace used in the container repository path.
        /// </summary>
        [Input("namespace")]
        public Input<string>? Namespace { get; set; }

        public ArtifactsContainerConfigurationState()
        {
        }
    }
}
