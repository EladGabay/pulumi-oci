// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package oci

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource provides the External Non Container Database Management resource in Oracle Cloud Infrastructure Database service.
//
// Enable Database Management Service for the external non-container database.
// For more information about the Database Management Service, see
// [Database Management Service](https://docs.cloud.oracle.com/iaas/Content/ExternalDatabase/Concepts/databasemanagementservice.htm).
//
// ## Import
//
// Import is not supported for this resource.
type DatabaseExternalNonContainerDatabaseManagement struct {
	pulumi.CustomResourceState

	EnableManagement pulumi.BoolOutput `pulumi:"enableManagement"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the [external database connector](https://docs.cloud.oracle.com/iaas/api/#/en/database/latest/datatypes/CreateExternalDatabaseConnectorDetails).
	ExternalDatabaseConnectorId pulumi.StringOutput `pulumi:"externalDatabaseConnectorId"`
	// The external non-container database [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
	ExternalNonContainerDatabaseId pulumi.StringOutput `pulumi:"externalNonContainerDatabaseId"`
	// The Oracle license model that applies to the external database. Required only for enabling database management.
	LicenseModel pulumi.StringOutput `pulumi:"licenseModel"`
}

// NewDatabaseExternalNonContainerDatabaseManagement registers a new resource with the given unique name, arguments, and options.
func NewDatabaseExternalNonContainerDatabaseManagement(ctx *pulumi.Context,
	name string, args *DatabaseExternalNonContainerDatabaseManagementArgs, opts ...pulumi.ResourceOption) (*DatabaseExternalNonContainerDatabaseManagement, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.EnableManagement == nil {
		return nil, errors.New("invalid value for required argument 'EnableManagement'")
	}
	if args.ExternalDatabaseConnectorId == nil {
		return nil, errors.New("invalid value for required argument 'ExternalDatabaseConnectorId'")
	}
	if args.ExternalNonContainerDatabaseId == nil {
		return nil, errors.New("invalid value for required argument 'ExternalNonContainerDatabaseId'")
	}
	var resource DatabaseExternalNonContainerDatabaseManagement
	err := ctx.RegisterResource("oci:index/databaseExternalNonContainerDatabaseManagement:DatabaseExternalNonContainerDatabaseManagement", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDatabaseExternalNonContainerDatabaseManagement gets an existing DatabaseExternalNonContainerDatabaseManagement resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDatabaseExternalNonContainerDatabaseManagement(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DatabaseExternalNonContainerDatabaseManagementState, opts ...pulumi.ResourceOption) (*DatabaseExternalNonContainerDatabaseManagement, error) {
	var resource DatabaseExternalNonContainerDatabaseManagement
	err := ctx.ReadResource("oci:index/databaseExternalNonContainerDatabaseManagement:DatabaseExternalNonContainerDatabaseManagement", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DatabaseExternalNonContainerDatabaseManagement resources.
type databaseExternalNonContainerDatabaseManagementState struct {
	EnableManagement *bool `pulumi:"enableManagement"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the [external database connector](https://docs.cloud.oracle.com/iaas/api/#/en/database/latest/datatypes/CreateExternalDatabaseConnectorDetails).
	ExternalDatabaseConnectorId *string `pulumi:"externalDatabaseConnectorId"`
	// The external non-container database [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
	ExternalNonContainerDatabaseId *string `pulumi:"externalNonContainerDatabaseId"`
	// The Oracle license model that applies to the external database. Required only for enabling database management.
	LicenseModel *string `pulumi:"licenseModel"`
}

type DatabaseExternalNonContainerDatabaseManagementState struct {
	EnableManagement pulumi.BoolPtrInput
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the [external database connector](https://docs.cloud.oracle.com/iaas/api/#/en/database/latest/datatypes/CreateExternalDatabaseConnectorDetails).
	ExternalDatabaseConnectorId pulumi.StringPtrInput
	// The external non-container database [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
	ExternalNonContainerDatabaseId pulumi.StringPtrInput
	// The Oracle license model that applies to the external database. Required only for enabling database management.
	LicenseModel pulumi.StringPtrInput
}

func (DatabaseExternalNonContainerDatabaseManagementState) ElementType() reflect.Type {
	return reflect.TypeOf((*databaseExternalNonContainerDatabaseManagementState)(nil)).Elem()
}

type databaseExternalNonContainerDatabaseManagementArgs struct {
	EnableManagement bool `pulumi:"enableManagement"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the [external database connector](https://docs.cloud.oracle.com/iaas/api/#/en/database/latest/datatypes/CreateExternalDatabaseConnectorDetails).
	ExternalDatabaseConnectorId string `pulumi:"externalDatabaseConnectorId"`
	// The external non-container database [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
	ExternalNonContainerDatabaseId string `pulumi:"externalNonContainerDatabaseId"`
	// The Oracle license model that applies to the external database. Required only for enabling database management.
	LicenseModel *string `pulumi:"licenseModel"`
}

// The set of arguments for constructing a DatabaseExternalNonContainerDatabaseManagement resource.
type DatabaseExternalNonContainerDatabaseManagementArgs struct {
	EnableManagement pulumi.BoolInput
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the [external database connector](https://docs.cloud.oracle.com/iaas/api/#/en/database/latest/datatypes/CreateExternalDatabaseConnectorDetails).
	ExternalDatabaseConnectorId pulumi.StringInput
	// The external non-container database [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
	ExternalNonContainerDatabaseId pulumi.StringInput
	// The Oracle license model that applies to the external database. Required only for enabling database management.
	LicenseModel pulumi.StringPtrInput
}

func (DatabaseExternalNonContainerDatabaseManagementArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*databaseExternalNonContainerDatabaseManagementArgs)(nil)).Elem()
}

type DatabaseExternalNonContainerDatabaseManagementInput interface {
	pulumi.Input

	ToDatabaseExternalNonContainerDatabaseManagementOutput() DatabaseExternalNonContainerDatabaseManagementOutput
	ToDatabaseExternalNonContainerDatabaseManagementOutputWithContext(ctx context.Context) DatabaseExternalNonContainerDatabaseManagementOutput
}

func (*DatabaseExternalNonContainerDatabaseManagement) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseExternalNonContainerDatabaseManagement)(nil))
}

func (i *DatabaseExternalNonContainerDatabaseManagement) ToDatabaseExternalNonContainerDatabaseManagementOutput() DatabaseExternalNonContainerDatabaseManagementOutput {
	return i.ToDatabaseExternalNonContainerDatabaseManagementOutputWithContext(context.Background())
}

func (i *DatabaseExternalNonContainerDatabaseManagement) ToDatabaseExternalNonContainerDatabaseManagementOutputWithContext(ctx context.Context) DatabaseExternalNonContainerDatabaseManagementOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseExternalNonContainerDatabaseManagementOutput)
}

func (i *DatabaseExternalNonContainerDatabaseManagement) ToDatabaseExternalNonContainerDatabaseManagementPtrOutput() DatabaseExternalNonContainerDatabaseManagementPtrOutput {
	return i.ToDatabaseExternalNonContainerDatabaseManagementPtrOutputWithContext(context.Background())
}

func (i *DatabaseExternalNonContainerDatabaseManagement) ToDatabaseExternalNonContainerDatabaseManagementPtrOutputWithContext(ctx context.Context) DatabaseExternalNonContainerDatabaseManagementPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseExternalNonContainerDatabaseManagementPtrOutput)
}

type DatabaseExternalNonContainerDatabaseManagementPtrInput interface {
	pulumi.Input

	ToDatabaseExternalNonContainerDatabaseManagementPtrOutput() DatabaseExternalNonContainerDatabaseManagementPtrOutput
	ToDatabaseExternalNonContainerDatabaseManagementPtrOutputWithContext(ctx context.Context) DatabaseExternalNonContainerDatabaseManagementPtrOutput
}

type databaseExternalNonContainerDatabaseManagementPtrType DatabaseExternalNonContainerDatabaseManagementArgs

func (*databaseExternalNonContainerDatabaseManagementPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DatabaseExternalNonContainerDatabaseManagement)(nil))
}

func (i *databaseExternalNonContainerDatabaseManagementPtrType) ToDatabaseExternalNonContainerDatabaseManagementPtrOutput() DatabaseExternalNonContainerDatabaseManagementPtrOutput {
	return i.ToDatabaseExternalNonContainerDatabaseManagementPtrOutputWithContext(context.Background())
}

func (i *databaseExternalNonContainerDatabaseManagementPtrType) ToDatabaseExternalNonContainerDatabaseManagementPtrOutputWithContext(ctx context.Context) DatabaseExternalNonContainerDatabaseManagementPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseExternalNonContainerDatabaseManagementPtrOutput)
}

// DatabaseExternalNonContainerDatabaseManagementArrayInput is an input type that accepts DatabaseExternalNonContainerDatabaseManagementArray and DatabaseExternalNonContainerDatabaseManagementArrayOutput values.
// You can construct a concrete instance of `DatabaseExternalNonContainerDatabaseManagementArrayInput` via:
//
//          DatabaseExternalNonContainerDatabaseManagementArray{ DatabaseExternalNonContainerDatabaseManagementArgs{...} }
type DatabaseExternalNonContainerDatabaseManagementArrayInput interface {
	pulumi.Input

	ToDatabaseExternalNonContainerDatabaseManagementArrayOutput() DatabaseExternalNonContainerDatabaseManagementArrayOutput
	ToDatabaseExternalNonContainerDatabaseManagementArrayOutputWithContext(context.Context) DatabaseExternalNonContainerDatabaseManagementArrayOutput
}

type DatabaseExternalNonContainerDatabaseManagementArray []DatabaseExternalNonContainerDatabaseManagementInput

func (DatabaseExternalNonContainerDatabaseManagementArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DatabaseExternalNonContainerDatabaseManagement)(nil)).Elem()
}

func (i DatabaseExternalNonContainerDatabaseManagementArray) ToDatabaseExternalNonContainerDatabaseManagementArrayOutput() DatabaseExternalNonContainerDatabaseManagementArrayOutput {
	return i.ToDatabaseExternalNonContainerDatabaseManagementArrayOutputWithContext(context.Background())
}

func (i DatabaseExternalNonContainerDatabaseManagementArray) ToDatabaseExternalNonContainerDatabaseManagementArrayOutputWithContext(ctx context.Context) DatabaseExternalNonContainerDatabaseManagementArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseExternalNonContainerDatabaseManagementArrayOutput)
}

// DatabaseExternalNonContainerDatabaseManagementMapInput is an input type that accepts DatabaseExternalNonContainerDatabaseManagementMap and DatabaseExternalNonContainerDatabaseManagementMapOutput values.
// You can construct a concrete instance of `DatabaseExternalNonContainerDatabaseManagementMapInput` via:
//
//          DatabaseExternalNonContainerDatabaseManagementMap{ "key": DatabaseExternalNonContainerDatabaseManagementArgs{...} }
type DatabaseExternalNonContainerDatabaseManagementMapInput interface {
	pulumi.Input

	ToDatabaseExternalNonContainerDatabaseManagementMapOutput() DatabaseExternalNonContainerDatabaseManagementMapOutput
	ToDatabaseExternalNonContainerDatabaseManagementMapOutputWithContext(context.Context) DatabaseExternalNonContainerDatabaseManagementMapOutput
}

type DatabaseExternalNonContainerDatabaseManagementMap map[string]DatabaseExternalNonContainerDatabaseManagementInput

func (DatabaseExternalNonContainerDatabaseManagementMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DatabaseExternalNonContainerDatabaseManagement)(nil)).Elem()
}

func (i DatabaseExternalNonContainerDatabaseManagementMap) ToDatabaseExternalNonContainerDatabaseManagementMapOutput() DatabaseExternalNonContainerDatabaseManagementMapOutput {
	return i.ToDatabaseExternalNonContainerDatabaseManagementMapOutputWithContext(context.Background())
}

func (i DatabaseExternalNonContainerDatabaseManagementMap) ToDatabaseExternalNonContainerDatabaseManagementMapOutputWithContext(ctx context.Context) DatabaseExternalNonContainerDatabaseManagementMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseExternalNonContainerDatabaseManagementMapOutput)
}

type DatabaseExternalNonContainerDatabaseManagementOutput struct {
	*pulumi.OutputState
}

func (DatabaseExternalNonContainerDatabaseManagementOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseExternalNonContainerDatabaseManagement)(nil))
}

func (o DatabaseExternalNonContainerDatabaseManagementOutput) ToDatabaseExternalNonContainerDatabaseManagementOutput() DatabaseExternalNonContainerDatabaseManagementOutput {
	return o
}

func (o DatabaseExternalNonContainerDatabaseManagementOutput) ToDatabaseExternalNonContainerDatabaseManagementOutputWithContext(ctx context.Context) DatabaseExternalNonContainerDatabaseManagementOutput {
	return o
}

func (o DatabaseExternalNonContainerDatabaseManagementOutput) ToDatabaseExternalNonContainerDatabaseManagementPtrOutput() DatabaseExternalNonContainerDatabaseManagementPtrOutput {
	return o.ToDatabaseExternalNonContainerDatabaseManagementPtrOutputWithContext(context.Background())
}

func (o DatabaseExternalNonContainerDatabaseManagementOutput) ToDatabaseExternalNonContainerDatabaseManagementPtrOutputWithContext(ctx context.Context) DatabaseExternalNonContainerDatabaseManagementPtrOutput {
	return o.ApplyT(func(v DatabaseExternalNonContainerDatabaseManagement) *DatabaseExternalNonContainerDatabaseManagement {
		return &v
	}).(DatabaseExternalNonContainerDatabaseManagementPtrOutput)
}

type DatabaseExternalNonContainerDatabaseManagementPtrOutput struct {
	*pulumi.OutputState
}

func (DatabaseExternalNonContainerDatabaseManagementPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DatabaseExternalNonContainerDatabaseManagement)(nil))
}

func (o DatabaseExternalNonContainerDatabaseManagementPtrOutput) ToDatabaseExternalNonContainerDatabaseManagementPtrOutput() DatabaseExternalNonContainerDatabaseManagementPtrOutput {
	return o
}

func (o DatabaseExternalNonContainerDatabaseManagementPtrOutput) ToDatabaseExternalNonContainerDatabaseManagementPtrOutputWithContext(ctx context.Context) DatabaseExternalNonContainerDatabaseManagementPtrOutput {
	return o
}

type DatabaseExternalNonContainerDatabaseManagementArrayOutput struct{ *pulumi.OutputState }

func (DatabaseExternalNonContainerDatabaseManagementArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DatabaseExternalNonContainerDatabaseManagement)(nil))
}

func (o DatabaseExternalNonContainerDatabaseManagementArrayOutput) ToDatabaseExternalNonContainerDatabaseManagementArrayOutput() DatabaseExternalNonContainerDatabaseManagementArrayOutput {
	return o
}

func (o DatabaseExternalNonContainerDatabaseManagementArrayOutput) ToDatabaseExternalNonContainerDatabaseManagementArrayOutputWithContext(ctx context.Context) DatabaseExternalNonContainerDatabaseManagementArrayOutput {
	return o
}

func (o DatabaseExternalNonContainerDatabaseManagementArrayOutput) Index(i pulumi.IntInput) DatabaseExternalNonContainerDatabaseManagementOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DatabaseExternalNonContainerDatabaseManagement {
		return vs[0].([]DatabaseExternalNonContainerDatabaseManagement)[vs[1].(int)]
	}).(DatabaseExternalNonContainerDatabaseManagementOutput)
}

type DatabaseExternalNonContainerDatabaseManagementMapOutput struct{ *pulumi.OutputState }

func (DatabaseExternalNonContainerDatabaseManagementMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]DatabaseExternalNonContainerDatabaseManagement)(nil))
}

func (o DatabaseExternalNonContainerDatabaseManagementMapOutput) ToDatabaseExternalNonContainerDatabaseManagementMapOutput() DatabaseExternalNonContainerDatabaseManagementMapOutput {
	return o
}

func (o DatabaseExternalNonContainerDatabaseManagementMapOutput) ToDatabaseExternalNonContainerDatabaseManagementMapOutputWithContext(ctx context.Context) DatabaseExternalNonContainerDatabaseManagementMapOutput {
	return o
}

func (o DatabaseExternalNonContainerDatabaseManagementMapOutput) MapIndex(k pulumi.StringInput) DatabaseExternalNonContainerDatabaseManagementOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) DatabaseExternalNonContainerDatabaseManagement {
		return vs[0].(map[string]DatabaseExternalNonContainerDatabaseManagement)[vs[1].(string)]
	}).(DatabaseExternalNonContainerDatabaseManagementOutput)
}

func init() {
	pulumi.RegisterOutputType(DatabaseExternalNonContainerDatabaseManagementOutput{})
	pulumi.RegisterOutputType(DatabaseExternalNonContainerDatabaseManagementPtrOutput{})
	pulumi.RegisterOutputType(DatabaseExternalNonContainerDatabaseManagementArrayOutput{})
	pulumi.RegisterOutputType(DatabaseExternalNonContainerDatabaseManagementMapOutput{})
}
