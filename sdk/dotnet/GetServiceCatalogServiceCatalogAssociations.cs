// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci
{
    public static class GetServiceCatalogServiceCatalogAssociations
    {
        /// <summary>
        /// This data source provides the list of Service Catalog Associations in Oracle Cloud Infrastructure Service Catalog service.
        /// 
        /// Lists all the resource associations for a specific service catalog.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var testServiceCatalogAssociations = Output.Create(Oci.GetServiceCatalogServiceCatalogAssociations.InvokeAsync(new Oci.GetServiceCatalogServiceCatalogAssociationsArgs
        ///         {
        ///             EntityId = oci_service_catalog_entity.Test_entity.Id,
        ///             EntityType = @var.Service_catalog_association_entity_type,
        ///             ServiceCatalogAssociationId = oci_service_catalog_service_catalog_association.Test_service_catalog_association.Id,
        ///             ServiceCatalogId = oci_service_catalog_service_catalog.Test_service_catalog.Id,
        ///         }));
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetServiceCatalogServiceCatalogAssociationsResult> InvokeAsync(GetServiceCatalogServiceCatalogAssociationsArgs? args = null, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetServiceCatalogServiceCatalogAssociationsResult>("oci:index/getServiceCatalogServiceCatalogAssociations:GetServiceCatalogServiceCatalogAssociations", args ?? new GetServiceCatalogServiceCatalogAssociationsArgs(), options.WithVersion());
    }


    public sealed class GetServiceCatalogServiceCatalogAssociationsArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The unique identifier of the entity associated with service catalog.
        /// </summary>
        [Input("entityId")]
        public string? EntityId { get; set; }

        /// <summary>
        /// The type of the application in the service catalog.
        /// </summary>
        [Input("entityType")]
        public string? EntityType { get; set; }

        [Input("filters")]
        private List<Inputs.GetServiceCatalogServiceCatalogAssociationsFilterArgs>? _filters;
        public List<Inputs.GetServiceCatalogServiceCatalogAssociationsFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetServiceCatalogServiceCatalogAssociationsFilterArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// The unique identifier for the service catalog association.
        /// </summary>
        [Input("serviceCatalogAssociationId")]
        public string? ServiceCatalogAssociationId { get; set; }

        /// <summary>
        /// The unique identifier for the service catalog.
        /// </summary>
        [Input("serviceCatalogId")]
        public string? ServiceCatalogId { get; set; }

        public GetServiceCatalogServiceCatalogAssociationsArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetServiceCatalogServiceCatalogAssociationsResult
    {
        /// <summary>
        /// Identifier of the entity being associated with service catalog.
        /// </summary>
        public readonly string? EntityId;
        /// <summary>
        /// The type of the entity that is associated with the service catalog.
        /// </summary>
        public readonly string? EntityType;
        public readonly ImmutableArray<Outputs.GetServiceCatalogServiceCatalogAssociationsFilterResult> Filters;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The list of service_catalog_association_collection.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetServiceCatalogServiceCatalogAssociationsServiceCatalogAssociationCollectionResult> ServiceCatalogAssociationCollections;
        public readonly string? ServiceCatalogAssociationId;
        /// <summary>
        /// Identifier of the service catalog.
        /// </summary>
        public readonly string? ServiceCatalogId;

        [OutputConstructor]
        private GetServiceCatalogServiceCatalogAssociationsResult(
            string? entityId,

            string? entityType,

            ImmutableArray<Outputs.GetServiceCatalogServiceCatalogAssociationsFilterResult> filters,

            string id,

            ImmutableArray<Outputs.GetServiceCatalogServiceCatalogAssociationsServiceCatalogAssociationCollectionResult> serviceCatalogAssociationCollections,

            string? serviceCatalogAssociationId,

            string? serviceCatalogId)
        {
            EntityId = entityId;
            EntityType = entityType;
            Filters = filters;
            Id = id;
            ServiceCatalogAssociationCollections = serviceCatalogAssociationCollections;
            ServiceCatalogAssociationId = serviceCatalogAssociationId;
            ServiceCatalogId = serviceCatalogId;
        }
    }
}
