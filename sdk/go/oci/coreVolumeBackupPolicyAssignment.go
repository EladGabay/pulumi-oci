// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package oci

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource provides the Volume Backup Policy Assignment resource in Oracle Cloud Infrastructure Core service.
//
// Assigns a volume backup policy to the specified volume. Note that a given volume can
// only have one backup policy assigned to it. If this operation is used for a volume that already
// has a different backup policy assigned, the prior backup policy will be silently unassigned.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-oci/sdk/go/oci"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := oci.NewCoreVolumeBackupPolicyAssignment(ctx, "testVolumeBackupPolicyAssignment", &oci.CoreVolumeBackupPolicyAssignmentArgs{
// 			AssetId:  pulumi.Any(oci_core_volume.Test_volume.Id),
// 			PolicyId: pulumi.Any(oci_core_volume_backup_policy.Test_volume_backup_policy.Id),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// VolumeBackupPolicyAssignments can be imported using the `id`, e.g.
//
// ```sh
//  $ pulumi import oci:index/coreVolumeBackupPolicyAssignment:CoreVolumeBackupPolicyAssignment test_volume_backup_policy_assignment "id"
// ```
type CoreVolumeBackupPolicyAssignment struct {
	pulumi.CustomResourceState

	// The OCID of the volume to assign the policy to.
	AssetId pulumi.StringOutput `pulumi:"assetId"`
	// The OCID of the volume backup policy to assign to the volume.
	PolicyId pulumi.StringOutput `pulumi:"policyId"`
	// The date and time the volume backup policy was assigned to the volume. The format is defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
	TimeCreated pulumi.StringOutput `pulumi:"timeCreated"`
}

// NewCoreVolumeBackupPolicyAssignment registers a new resource with the given unique name, arguments, and options.
func NewCoreVolumeBackupPolicyAssignment(ctx *pulumi.Context,
	name string, args *CoreVolumeBackupPolicyAssignmentArgs, opts ...pulumi.ResourceOption) (*CoreVolumeBackupPolicyAssignment, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AssetId == nil {
		return nil, errors.New("invalid value for required argument 'AssetId'")
	}
	if args.PolicyId == nil {
		return nil, errors.New("invalid value for required argument 'PolicyId'")
	}
	var resource CoreVolumeBackupPolicyAssignment
	err := ctx.RegisterResource("oci:index/coreVolumeBackupPolicyAssignment:CoreVolumeBackupPolicyAssignment", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCoreVolumeBackupPolicyAssignment gets an existing CoreVolumeBackupPolicyAssignment resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCoreVolumeBackupPolicyAssignment(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CoreVolumeBackupPolicyAssignmentState, opts ...pulumi.ResourceOption) (*CoreVolumeBackupPolicyAssignment, error) {
	var resource CoreVolumeBackupPolicyAssignment
	err := ctx.ReadResource("oci:index/coreVolumeBackupPolicyAssignment:CoreVolumeBackupPolicyAssignment", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CoreVolumeBackupPolicyAssignment resources.
type coreVolumeBackupPolicyAssignmentState struct {
	// The OCID of the volume to assign the policy to.
	AssetId *string `pulumi:"assetId"`
	// The OCID of the volume backup policy to assign to the volume.
	PolicyId *string `pulumi:"policyId"`
	// The date and time the volume backup policy was assigned to the volume. The format is defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
	TimeCreated *string `pulumi:"timeCreated"`
}

type CoreVolumeBackupPolicyAssignmentState struct {
	// The OCID of the volume to assign the policy to.
	AssetId pulumi.StringPtrInput
	// The OCID of the volume backup policy to assign to the volume.
	PolicyId pulumi.StringPtrInput
	// The date and time the volume backup policy was assigned to the volume. The format is defined by [RFC3339](https://tools.ietf.org/html/rfc3339).
	TimeCreated pulumi.StringPtrInput
}

func (CoreVolumeBackupPolicyAssignmentState) ElementType() reflect.Type {
	return reflect.TypeOf((*coreVolumeBackupPolicyAssignmentState)(nil)).Elem()
}

type coreVolumeBackupPolicyAssignmentArgs struct {
	// The OCID of the volume to assign the policy to.
	AssetId string `pulumi:"assetId"`
	// The OCID of the volume backup policy to assign to the volume.
	PolicyId string `pulumi:"policyId"`
}

// The set of arguments for constructing a CoreVolumeBackupPolicyAssignment resource.
type CoreVolumeBackupPolicyAssignmentArgs struct {
	// The OCID of the volume to assign the policy to.
	AssetId pulumi.StringInput
	// The OCID of the volume backup policy to assign to the volume.
	PolicyId pulumi.StringInput
}

func (CoreVolumeBackupPolicyAssignmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*coreVolumeBackupPolicyAssignmentArgs)(nil)).Elem()
}

type CoreVolumeBackupPolicyAssignmentInput interface {
	pulumi.Input

	ToCoreVolumeBackupPolicyAssignmentOutput() CoreVolumeBackupPolicyAssignmentOutput
	ToCoreVolumeBackupPolicyAssignmentOutputWithContext(ctx context.Context) CoreVolumeBackupPolicyAssignmentOutput
}

func (*CoreVolumeBackupPolicyAssignment) ElementType() reflect.Type {
	return reflect.TypeOf((*CoreVolumeBackupPolicyAssignment)(nil))
}

func (i *CoreVolumeBackupPolicyAssignment) ToCoreVolumeBackupPolicyAssignmentOutput() CoreVolumeBackupPolicyAssignmentOutput {
	return i.ToCoreVolumeBackupPolicyAssignmentOutputWithContext(context.Background())
}

func (i *CoreVolumeBackupPolicyAssignment) ToCoreVolumeBackupPolicyAssignmentOutputWithContext(ctx context.Context) CoreVolumeBackupPolicyAssignmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CoreVolumeBackupPolicyAssignmentOutput)
}

func (i *CoreVolumeBackupPolicyAssignment) ToCoreVolumeBackupPolicyAssignmentPtrOutput() CoreVolumeBackupPolicyAssignmentPtrOutput {
	return i.ToCoreVolumeBackupPolicyAssignmentPtrOutputWithContext(context.Background())
}

func (i *CoreVolumeBackupPolicyAssignment) ToCoreVolumeBackupPolicyAssignmentPtrOutputWithContext(ctx context.Context) CoreVolumeBackupPolicyAssignmentPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CoreVolumeBackupPolicyAssignmentPtrOutput)
}

type CoreVolumeBackupPolicyAssignmentPtrInput interface {
	pulumi.Input

	ToCoreVolumeBackupPolicyAssignmentPtrOutput() CoreVolumeBackupPolicyAssignmentPtrOutput
	ToCoreVolumeBackupPolicyAssignmentPtrOutputWithContext(ctx context.Context) CoreVolumeBackupPolicyAssignmentPtrOutput
}

type coreVolumeBackupPolicyAssignmentPtrType CoreVolumeBackupPolicyAssignmentArgs

func (*coreVolumeBackupPolicyAssignmentPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CoreVolumeBackupPolicyAssignment)(nil))
}

func (i *coreVolumeBackupPolicyAssignmentPtrType) ToCoreVolumeBackupPolicyAssignmentPtrOutput() CoreVolumeBackupPolicyAssignmentPtrOutput {
	return i.ToCoreVolumeBackupPolicyAssignmentPtrOutputWithContext(context.Background())
}

func (i *coreVolumeBackupPolicyAssignmentPtrType) ToCoreVolumeBackupPolicyAssignmentPtrOutputWithContext(ctx context.Context) CoreVolumeBackupPolicyAssignmentPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CoreVolumeBackupPolicyAssignmentPtrOutput)
}

// CoreVolumeBackupPolicyAssignmentArrayInput is an input type that accepts CoreVolumeBackupPolicyAssignmentArray and CoreVolumeBackupPolicyAssignmentArrayOutput values.
// You can construct a concrete instance of `CoreVolumeBackupPolicyAssignmentArrayInput` via:
//
//          CoreVolumeBackupPolicyAssignmentArray{ CoreVolumeBackupPolicyAssignmentArgs{...} }
type CoreVolumeBackupPolicyAssignmentArrayInput interface {
	pulumi.Input

	ToCoreVolumeBackupPolicyAssignmentArrayOutput() CoreVolumeBackupPolicyAssignmentArrayOutput
	ToCoreVolumeBackupPolicyAssignmentArrayOutputWithContext(context.Context) CoreVolumeBackupPolicyAssignmentArrayOutput
}

type CoreVolumeBackupPolicyAssignmentArray []CoreVolumeBackupPolicyAssignmentInput

func (CoreVolumeBackupPolicyAssignmentArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CoreVolumeBackupPolicyAssignment)(nil)).Elem()
}

func (i CoreVolumeBackupPolicyAssignmentArray) ToCoreVolumeBackupPolicyAssignmentArrayOutput() CoreVolumeBackupPolicyAssignmentArrayOutput {
	return i.ToCoreVolumeBackupPolicyAssignmentArrayOutputWithContext(context.Background())
}

func (i CoreVolumeBackupPolicyAssignmentArray) ToCoreVolumeBackupPolicyAssignmentArrayOutputWithContext(ctx context.Context) CoreVolumeBackupPolicyAssignmentArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CoreVolumeBackupPolicyAssignmentArrayOutput)
}

// CoreVolumeBackupPolicyAssignmentMapInput is an input type that accepts CoreVolumeBackupPolicyAssignmentMap and CoreVolumeBackupPolicyAssignmentMapOutput values.
// You can construct a concrete instance of `CoreVolumeBackupPolicyAssignmentMapInput` via:
//
//          CoreVolumeBackupPolicyAssignmentMap{ "key": CoreVolumeBackupPolicyAssignmentArgs{...} }
type CoreVolumeBackupPolicyAssignmentMapInput interface {
	pulumi.Input

	ToCoreVolumeBackupPolicyAssignmentMapOutput() CoreVolumeBackupPolicyAssignmentMapOutput
	ToCoreVolumeBackupPolicyAssignmentMapOutputWithContext(context.Context) CoreVolumeBackupPolicyAssignmentMapOutput
}

type CoreVolumeBackupPolicyAssignmentMap map[string]CoreVolumeBackupPolicyAssignmentInput

func (CoreVolumeBackupPolicyAssignmentMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CoreVolumeBackupPolicyAssignment)(nil)).Elem()
}

func (i CoreVolumeBackupPolicyAssignmentMap) ToCoreVolumeBackupPolicyAssignmentMapOutput() CoreVolumeBackupPolicyAssignmentMapOutput {
	return i.ToCoreVolumeBackupPolicyAssignmentMapOutputWithContext(context.Background())
}

func (i CoreVolumeBackupPolicyAssignmentMap) ToCoreVolumeBackupPolicyAssignmentMapOutputWithContext(ctx context.Context) CoreVolumeBackupPolicyAssignmentMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CoreVolumeBackupPolicyAssignmentMapOutput)
}

type CoreVolumeBackupPolicyAssignmentOutput struct {
	*pulumi.OutputState
}

func (CoreVolumeBackupPolicyAssignmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CoreVolumeBackupPolicyAssignment)(nil))
}

func (o CoreVolumeBackupPolicyAssignmentOutput) ToCoreVolumeBackupPolicyAssignmentOutput() CoreVolumeBackupPolicyAssignmentOutput {
	return o
}

func (o CoreVolumeBackupPolicyAssignmentOutput) ToCoreVolumeBackupPolicyAssignmentOutputWithContext(ctx context.Context) CoreVolumeBackupPolicyAssignmentOutput {
	return o
}

func (o CoreVolumeBackupPolicyAssignmentOutput) ToCoreVolumeBackupPolicyAssignmentPtrOutput() CoreVolumeBackupPolicyAssignmentPtrOutput {
	return o.ToCoreVolumeBackupPolicyAssignmentPtrOutputWithContext(context.Background())
}

func (o CoreVolumeBackupPolicyAssignmentOutput) ToCoreVolumeBackupPolicyAssignmentPtrOutputWithContext(ctx context.Context) CoreVolumeBackupPolicyAssignmentPtrOutput {
	return o.ApplyT(func(v CoreVolumeBackupPolicyAssignment) *CoreVolumeBackupPolicyAssignment {
		return &v
	}).(CoreVolumeBackupPolicyAssignmentPtrOutput)
}

type CoreVolumeBackupPolicyAssignmentPtrOutput struct {
	*pulumi.OutputState
}

func (CoreVolumeBackupPolicyAssignmentPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CoreVolumeBackupPolicyAssignment)(nil))
}

func (o CoreVolumeBackupPolicyAssignmentPtrOutput) ToCoreVolumeBackupPolicyAssignmentPtrOutput() CoreVolumeBackupPolicyAssignmentPtrOutput {
	return o
}

func (o CoreVolumeBackupPolicyAssignmentPtrOutput) ToCoreVolumeBackupPolicyAssignmentPtrOutputWithContext(ctx context.Context) CoreVolumeBackupPolicyAssignmentPtrOutput {
	return o
}

type CoreVolumeBackupPolicyAssignmentArrayOutput struct{ *pulumi.OutputState }

func (CoreVolumeBackupPolicyAssignmentArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CoreVolumeBackupPolicyAssignment)(nil))
}

func (o CoreVolumeBackupPolicyAssignmentArrayOutput) ToCoreVolumeBackupPolicyAssignmentArrayOutput() CoreVolumeBackupPolicyAssignmentArrayOutput {
	return o
}

func (o CoreVolumeBackupPolicyAssignmentArrayOutput) ToCoreVolumeBackupPolicyAssignmentArrayOutputWithContext(ctx context.Context) CoreVolumeBackupPolicyAssignmentArrayOutput {
	return o
}

func (o CoreVolumeBackupPolicyAssignmentArrayOutput) Index(i pulumi.IntInput) CoreVolumeBackupPolicyAssignmentOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CoreVolumeBackupPolicyAssignment {
		return vs[0].([]CoreVolumeBackupPolicyAssignment)[vs[1].(int)]
	}).(CoreVolumeBackupPolicyAssignmentOutput)
}

type CoreVolumeBackupPolicyAssignmentMapOutput struct{ *pulumi.OutputState }

func (CoreVolumeBackupPolicyAssignmentMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]CoreVolumeBackupPolicyAssignment)(nil))
}

func (o CoreVolumeBackupPolicyAssignmentMapOutput) ToCoreVolumeBackupPolicyAssignmentMapOutput() CoreVolumeBackupPolicyAssignmentMapOutput {
	return o
}

func (o CoreVolumeBackupPolicyAssignmentMapOutput) ToCoreVolumeBackupPolicyAssignmentMapOutputWithContext(ctx context.Context) CoreVolumeBackupPolicyAssignmentMapOutput {
	return o
}

func (o CoreVolumeBackupPolicyAssignmentMapOutput) MapIndex(k pulumi.StringInput) CoreVolumeBackupPolicyAssignmentOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) CoreVolumeBackupPolicyAssignment {
		return vs[0].(map[string]CoreVolumeBackupPolicyAssignment)[vs[1].(string)]
	}).(CoreVolumeBackupPolicyAssignmentOutput)
}

func init() {
	pulumi.RegisterOutputType(CoreVolumeBackupPolicyAssignmentOutput{})
	pulumi.RegisterOutputType(CoreVolumeBackupPolicyAssignmentPtrOutput{})
	pulumi.RegisterOutputType(CoreVolumeBackupPolicyAssignmentArrayOutput{})
	pulumi.RegisterOutputType(CoreVolumeBackupPolicyAssignmentMapOutput{})
}
