// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package oci

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource provides the View resource in Oracle Cloud Infrastructure DNS service.
//
// Creates a new view in the specified compartment. Requires a `PRIVATE` scope query parameter.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-oci/sdk/go/oci"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := oci.NewDnsView(ctx, "testView", &oci.DnsViewArgs{
// 			CompartmentId: pulumi.Any(_var.Compartment_id),
// 			Scope:         pulumi.String("PRIVATE"),
// 			DefinedTags:   pulumi.Any(_var.View_defined_tags),
// 			DisplayName:   pulumi.Any(_var.View_display_name),
// 			FreeformTags:  pulumi.Any(_var.View_freeform_tags),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// For legacy Views that were created without using `scope`, these Views can be imported using the `id`, e.g.
//
// ```sh
//  $ pulumi import oci:index/dnsView:DnsView test_view "id"
// ```
//
//  For Views created using `scope`, these Views can be imported using the `id`, e.g.
//
// ```sh
//  $ pulumi import oci:index/dnsView:DnsView test_view "viewId/{viewId}/scope/{scope}"
// ```
type DnsView struct {
	pulumi.CustomResourceState

	// (Updatable) The OCID of the owning compartment.
	CompartmentId pulumi.StringOutput `pulumi:"compartmentId"`
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
	DefinedTags pulumi.MapOutput `pulumi:"definedTags"`
	// (Updatable) The display name of the view.
	DisplayName pulumi.StringOutput `pulumi:"displayName"`
	// (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
	FreeformTags pulumi.MapOutput `pulumi:"freeformTags"`
	// A Boolean flag indicating whether or not parts of the resource are unable to be explicitly managed.
	IsProtected pulumi.BoolOutput `pulumi:"isProtected"`
	// Value must be `PRIVATE` when creating a view for private zones.
	Scope pulumi.StringOutput `pulumi:"scope"`
	// The canonical absolute URL of the resource.
	Self pulumi.StringOutput `pulumi:"self"`
	// The current state of the resource.
	State pulumi.StringOutput `pulumi:"state"`
	// The date and time the resource was created in "YYYY-MM-ddThh:mm:ssZ" format with a Z offset, as defined by RFC 3339.
	TimeCreated pulumi.StringOutput `pulumi:"timeCreated"`
	// The date and time the resource was last updated in "YYYY-MM-ddThh:mm:ssZ" format with a Z offset, as defined by RFC 3339.
	TimeUpdated pulumi.StringOutput `pulumi:"timeUpdated"`
}

// NewDnsView registers a new resource with the given unique name, arguments, and options.
func NewDnsView(ctx *pulumi.Context,
	name string, args *DnsViewArgs, opts ...pulumi.ResourceOption) (*DnsView, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CompartmentId == nil {
		return nil, errors.New("invalid value for required argument 'CompartmentId'")
	}
	if args.Scope == nil {
		return nil, errors.New("invalid value for required argument 'Scope'")
	}
	var resource DnsView
	err := ctx.RegisterResource("oci:index/dnsView:DnsView", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDnsView gets an existing DnsView resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDnsView(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DnsViewState, opts ...pulumi.ResourceOption) (*DnsView, error) {
	var resource DnsView
	err := ctx.ReadResource("oci:index/dnsView:DnsView", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DnsView resources.
type dnsViewState struct {
	// (Updatable) The OCID of the owning compartment.
	CompartmentId *string `pulumi:"compartmentId"`
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
	DefinedTags map[string]interface{} `pulumi:"definedTags"`
	// (Updatable) The display name of the view.
	DisplayName *string `pulumi:"displayName"`
	// (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
	FreeformTags map[string]interface{} `pulumi:"freeformTags"`
	// A Boolean flag indicating whether or not parts of the resource are unable to be explicitly managed.
	IsProtected *bool `pulumi:"isProtected"`
	// Value must be `PRIVATE` when creating a view for private zones.
	Scope *string `pulumi:"scope"`
	// The canonical absolute URL of the resource.
	Self *string `pulumi:"self"`
	// The current state of the resource.
	State *string `pulumi:"state"`
	// The date and time the resource was created in "YYYY-MM-ddThh:mm:ssZ" format with a Z offset, as defined by RFC 3339.
	TimeCreated *string `pulumi:"timeCreated"`
	// The date and time the resource was last updated in "YYYY-MM-ddThh:mm:ssZ" format with a Z offset, as defined by RFC 3339.
	TimeUpdated *string `pulumi:"timeUpdated"`
}

type DnsViewState struct {
	// (Updatable) The OCID of the owning compartment.
	CompartmentId pulumi.StringPtrInput
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
	DefinedTags pulumi.MapInput
	// (Updatable) The display name of the view.
	DisplayName pulumi.StringPtrInput
	// (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
	FreeformTags pulumi.MapInput
	// A Boolean flag indicating whether or not parts of the resource are unable to be explicitly managed.
	IsProtected pulumi.BoolPtrInput
	// Value must be `PRIVATE` when creating a view for private zones.
	Scope pulumi.StringPtrInput
	// The canonical absolute URL of the resource.
	Self pulumi.StringPtrInput
	// The current state of the resource.
	State pulumi.StringPtrInput
	// The date and time the resource was created in "YYYY-MM-ddThh:mm:ssZ" format with a Z offset, as defined by RFC 3339.
	TimeCreated pulumi.StringPtrInput
	// The date and time the resource was last updated in "YYYY-MM-ddThh:mm:ssZ" format with a Z offset, as defined by RFC 3339.
	TimeUpdated pulumi.StringPtrInput
}

func (DnsViewState) ElementType() reflect.Type {
	return reflect.TypeOf((*dnsViewState)(nil)).Elem()
}

type dnsViewArgs struct {
	// (Updatable) The OCID of the owning compartment.
	CompartmentId string `pulumi:"compartmentId"`
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
	DefinedTags map[string]interface{} `pulumi:"definedTags"`
	// (Updatable) The display name of the view.
	DisplayName *string `pulumi:"displayName"`
	// (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
	FreeformTags map[string]interface{} `pulumi:"freeformTags"`
	// Value must be `PRIVATE` when creating a view for private zones.
	Scope string `pulumi:"scope"`
}

// The set of arguments for constructing a DnsView resource.
type DnsViewArgs struct {
	// (Updatable) The OCID of the owning compartment.
	CompartmentId pulumi.StringInput
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
	DefinedTags pulumi.MapInput
	// (Updatable) The display name of the view.
	DisplayName pulumi.StringPtrInput
	// (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
	FreeformTags pulumi.MapInput
	// Value must be `PRIVATE` when creating a view for private zones.
	Scope pulumi.StringInput
}

func (DnsViewArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*dnsViewArgs)(nil)).Elem()
}

type DnsViewInput interface {
	pulumi.Input

	ToDnsViewOutput() DnsViewOutput
	ToDnsViewOutputWithContext(ctx context.Context) DnsViewOutput
}

func (*DnsView) ElementType() reflect.Type {
	return reflect.TypeOf((*DnsView)(nil))
}

func (i *DnsView) ToDnsViewOutput() DnsViewOutput {
	return i.ToDnsViewOutputWithContext(context.Background())
}

func (i *DnsView) ToDnsViewOutputWithContext(ctx context.Context) DnsViewOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DnsViewOutput)
}

func (i *DnsView) ToDnsViewPtrOutput() DnsViewPtrOutput {
	return i.ToDnsViewPtrOutputWithContext(context.Background())
}

func (i *DnsView) ToDnsViewPtrOutputWithContext(ctx context.Context) DnsViewPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DnsViewPtrOutput)
}

type DnsViewPtrInput interface {
	pulumi.Input

	ToDnsViewPtrOutput() DnsViewPtrOutput
	ToDnsViewPtrOutputWithContext(ctx context.Context) DnsViewPtrOutput
}

type dnsViewPtrType DnsViewArgs

func (*dnsViewPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DnsView)(nil))
}

func (i *dnsViewPtrType) ToDnsViewPtrOutput() DnsViewPtrOutput {
	return i.ToDnsViewPtrOutputWithContext(context.Background())
}

func (i *dnsViewPtrType) ToDnsViewPtrOutputWithContext(ctx context.Context) DnsViewPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DnsViewPtrOutput)
}

// DnsViewArrayInput is an input type that accepts DnsViewArray and DnsViewArrayOutput values.
// You can construct a concrete instance of `DnsViewArrayInput` via:
//
//          DnsViewArray{ DnsViewArgs{...} }
type DnsViewArrayInput interface {
	pulumi.Input

	ToDnsViewArrayOutput() DnsViewArrayOutput
	ToDnsViewArrayOutputWithContext(context.Context) DnsViewArrayOutput
}

type DnsViewArray []DnsViewInput

func (DnsViewArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DnsView)(nil)).Elem()
}

func (i DnsViewArray) ToDnsViewArrayOutput() DnsViewArrayOutput {
	return i.ToDnsViewArrayOutputWithContext(context.Background())
}

func (i DnsViewArray) ToDnsViewArrayOutputWithContext(ctx context.Context) DnsViewArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DnsViewArrayOutput)
}

// DnsViewMapInput is an input type that accepts DnsViewMap and DnsViewMapOutput values.
// You can construct a concrete instance of `DnsViewMapInput` via:
//
//          DnsViewMap{ "key": DnsViewArgs{...} }
type DnsViewMapInput interface {
	pulumi.Input

	ToDnsViewMapOutput() DnsViewMapOutput
	ToDnsViewMapOutputWithContext(context.Context) DnsViewMapOutput
}

type DnsViewMap map[string]DnsViewInput

func (DnsViewMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DnsView)(nil)).Elem()
}

func (i DnsViewMap) ToDnsViewMapOutput() DnsViewMapOutput {
	return i.ToDnsViewMapOutputWithContext(context.Background())
}

func (i DnsViewMap) ToDnsViewMapOutputWithContext(ctx context.Context) DnsViewMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DnsViewMapOutput)
}

type DnsViewOutput struct {
	*pulumi.OutputState
}

func (DnsViewOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DnsView)(nil))
}

func (o DnsViewOutput) ToDnsViewOutput() DnsViewOutput {
	return o
}

func (o DnsViewOutput) ToDnsViewOutputWithContext(ctx context.Context) DnsViewOutput {
	return o
}

func (o DnsViewOutput) ToDnsViewPtrOutput() DnsViewPtrOutput {
	return o.ToDnsViewPtrOutputWithContext(context.Background())
}

func (o DnsViewOutput) ToDnsViewPtrOutputWithContext(ctx context.Context) DnsViewPtrOutput {
	return o.ApplyT(func(v DnsView) *DnsView {
		return &v
	}).(DnsViewPtrOutput)
}

type DnsViewPtrOutput struct {
	*pulumi.OutputState
}

func (DnsViewPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DnsView)(nil))
}

func (o DnsViewPtrOutput) ToDnsViewPtrOutput() DnsViewPtrOutput {
	return o
}

func (o DnsViewPtrOutput) ToDnsViewPtrOutputWithContext(ctx context.Context) DnsViewPtrOutput {
	return o
}

type DnsViewArrayOutput struct{ *pulumi.OutputState }

func (DnsViewArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DnsView)(nil))
}

func (o DnsViewArrayOutput) ToDnsViewArrayOutput() DnsViewArrayOutput {
	return o
}

func (o DnsViewArrayOutput) ToDnsViewArrayOutputWithContext(ctx context.Context) DnsViewArrayOutput {
	return o
}

func (o DnsViewArrayOutput) Index(i pulumi.IntInput) DnsViewOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DnsView {
		return vs[0].([]DnsView)[vs[1].(int)]
	}).(DnsViewOutput)
}

type DnsViewMapOutput struct{ *pulumi.OutputState }

func (DnsViewMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]DnsView)(nil))
}

func (o DnsViewMapOutput) ToDnsViewMapOutput() DnsViewMapOutput {
	return o
}

func (o DnsViewMapOutput) ToDnsViewMapOutputWithContext(ctx context.Context) DnsViewMapOutput {
	return o
}

func (o DnsViewMapOutput) MapIndex(k pulumi.StringInput) DnsViewOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) DnsView {
		return vs[0].(map[string]DnsView)[vs[1].(string)]
	}).(DnsViewOutput)
}

func init() {
	pulumi.RegisterOutputType(DnsViewOutput{})
	pulumi.RegisterOutputType(DnsViewPtrOutput{})
	pulumi.RegisterOutputType(DnsViewArrayOutput{})
	pulumi.RegisterOutputType(DnsViewMapOutput{})
}
