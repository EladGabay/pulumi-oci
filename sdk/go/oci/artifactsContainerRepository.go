// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package oci

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource provides the Container Repository resource in Oracle Cloud Infrastructure Artifacts service.
//
// Create a new empty container repository. Avoid entering confidential information.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-oci/sdk/go/oci"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := oci.NewArtifactsContainerRepository(ctx, "testContainerRepository", &oci.ArtifactsContainerRepositoryArgs{
// 			CompartmentId: pulumi.Any(_var.Compartment_id),
// 			DisplayName:   pulumi.Any(_var.Container_repository_display_name),
// 			IsImmutable:   pulumi.Any(_var.Container_repository_is_immutable),
// 			IsPublic:      pulumi.Any(_var.Container_repository_is_public),
// 			Readme: &ArtifactsContainerRepositoryReadmeArgs{
// 				Content: pulumi.Any(_var.Container_repository_readme_content),
// 				Format:  pulumi.Any(_var.Container_repository_readme_format),
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// ContainerRepositories can be imported using the `id`, e.g.
//
// ```sh
//  $ pulumi import oci:index/artifactsContainerRepository:ArtifactsContainerRepository test_container_repository "container/repositories/{repositoryId}"
// ```
type ArtifactsContainerRepository struct {
	pulumi.CustomResourceState

	// Total storage size in GBs that will be charged.
	BillableSizeInGbs pulumi.StringOutput `pulumi:"billableSizeInGbs"`
	// (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment in which to create the resource.
	CompartmentId pulumi.StringOutput `pulumi:"compartmentId"`
	// The id of the user or principal that created the resource.
	CreatedBy pulumi.StringOutput `pulumi:"createdBy"`
	// The container repository name.
	DisplayName pulumi.StringOutput `pulumi:"displayName"`
	// Total number of images.
	ImageCount pulumi.IntOutput `pulumi:"imageCount"`
	// (Updatable) Whether the repository is immutable. Images cannot be overwritten in an immutable repository.
	IsImmutable pulumi.BoolOutput `pulumi:"isImmutable"`
	// (Updatable) Whether the repository is public. A public repository allows unauthenticated access.
	IsPublic pulumi.BoolOutput `pulumi:"isPublic"`
	// Total number of layers.
	LayerCount pulumi.IntOutput `pulumi:"layerCount"`
	// Total storage in bytes consumed by layers.
	LayersSizeInBytes pulumi.StringOutput `pulumi:"layersSizeInBytes"`
	// (Updatable) Container repository readme.
	Readme ArtifactsContainerRepositoryReadmeOutput `pulumi:"readme"`
	// The current state of the container repository.
	State pulumi.StringOutput `pulumi:"state"`
	// An RFC 3339 timestamp indicating when the repository was created.
	TimeCreated pulumi.StringOutput `pulumi:"timeCreated"`
	// An RFC 3339 timestamp indicating when an image was last pushed to the repository.
	TimeLastPushed pulumi.StringOutput `pulumi:"timeLastPushed"`
}

// NewArtifactsContainerRepository registers a new resource with the given unique name, arguments, and options.
func NewArtifactsContainerRepository(ctx *pulumi.Context,
	name string, args *ArtifactsContainerRepositoryArgs, opts ...pulumi.ResourceOption) (*ArtifactsContainerRepository, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CompartmentId == nil {
		return nil, errors.New("invalid value for required argument 'CompartmentId'")
	}
	if args.DisplayName == nil {
		return nil, errors.New("invalid value for required argument 'DisplayName'")
	}
	var resource ArtifactsContainerRepository
	err := ctx.RegisterResource("oci:index/artifactsContainerRepository:ArtifactsContainerRepository", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetArtifactsContainerRepository gets an existing ArtifactsContainerRepository resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetArtifactsContainerRepository(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ArtifactsContainerRepositoryState, opts ...pulumi.ResourceOption) (*ArtifactsContainerRepository, error) {
	var resource ArtifactsContainerRepository
	err := ctx.ReadResource("oci:index/artifactsContainerRepository:ArtifactsContainerRepository", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ArtifactsContainerRepository resources.
type artifactsContainerRepositoryState struct {
	// Total storage size in GBs that will be charged.
	BillableSizeInGbs *string `pulumi:"billableSizeInGbs"`
	// (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment in which to create the resource.
	CompartmentId *string `pulumi:"compartmentId"`
	// The id of the user or principal that created the resource.
	CreatedBy *string `pulumi:"createdBy"`
	// The container repository name.
	DisplayName *string `pulumi:"displayName"`
	// Total number of images.
	ImageCount *int `pulumi:"imageCount"`
	// (Updatable) Whether the repository is immutable. Images cannot be overwritten in an immutable repository.
	IsImmutable *bool `pulumi:"isImmutable"`
	// (Updatable) Whether the repository is public. A public repository allows unauthenticated access.
	IsPublic *bool `pulumi:"isPublic"`
	// Total number of layers.
	LayerCount *int `pulumi:"layerCount"`
	// Total storage in bytes consumed by layers.
	LayersSizeInBytes *string `pulumi:"layersSizeInBytes"`
	// (Updatable) Container repository readme.
	Readme *ArtifactsContainerRepositoryReadme `pulumi:"readme"`
	// The current state of the container repository.
	State *string `pulumi:"state"`
	// An RFC 3339 timestamp indicating when the repository was created.
	TimeCreated *string `pulumi:"timeCreated"`
	// An RFC 3339 timestamp indicating when an image was last pushed to the repository.
	TimeLastPushed *string `pulumi:"timeLastPushed"`
}

type ArtifactsContainerRepositoryState struct {
	// Total storage size in GBs that will be charged.
	BillableSizeInGbs pulumi.StringPtrInput
	// (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment in which to create the resource.
	CompartmentId pulumi.StringPtrInput
	// The id of the user or principal that created the resource.
	CreatedBy pulumi.StringPtrInput
	// The container repository name.
	DisplayName pulumi.StringPtrInput
	// Total number of images.
	ImageCount pulumi.IntPtrInput
	// (Updatable) Whether the repository is immutable. Images cannot be overwritten in an immutable repository.
	IsImmutable pulumi.BoolPtrInput
	// (Updatable) Whether the repository is public. A public repository allows unauthenticated access.
	IsPublic pulumi.BoolPtrInput
	// Total number of layers.
	LayerCount pulumi.IntPtrInput
	// Total storage in bytes consumed by layers.
	LayersSizeInBytes pulumi.StringPtrInput
	// (Updatable) Container repository readme.
	Readme ArtifactsContainerRepositoryReadmePtrInput
	// The current state of the container repository.
	State pulumi.StringPtrInput
	// An RFC 3339 timestamp indicating when the repository was created.
	TimeCreated pulumi.StringPtrInput
	// An RFC 3339 timestamp indicating when an image was last pushed to the repository.
	TimeLastPushed pulumi.StringPtrInput
}

func (ArtifactsContainerRepositoryState) ElementType() reflect.Type {
	return reflect.TypeOf((*artifactsContainerRepositoryState)(nil)).Elem()
}

type artifactsContainerRepositoryArgs struct {
	// (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment in which to create the resource.
	CompartmentId string `pulumi:"compartmentId"`
	// The container repository name.
	DisplayName string `pulumi:"displayName"`
	// (Updatable) Whether the repository is immutable. Images cannot be overwritten in an immutable repository.
	IsImmutable *bool `pulumi:"isImmutable"`
	// (Updatable) Whether the repository is public. A public repository allows unauthenticated access.
	IsPublic *bool `pulumi:"isPublic"`
	// (Updatable) Container repository readme.
	Readme *ArtifactsContainerRepositoryReadme `pulumi:"readme"`
}

// The set of arguments for constructing a ArtifactsContainerRepository resource.
type ArtifactsContainerRepositoryArgs struct {
	// (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment in which to create the resource.
	CompartmentId pulumi.StringInput
	// The container repository name.
	DisplayName pulumi.StringInput
	// (Updatable) Whether the repository is immutable. Images cannot be overwritten in an immutable repository.
	IsImmutable pulumi.BoolPtrInput
	// (Updatable) Whether the repository is public. A public repository allows unauthenticated access.
	IsPublic pulumi.BoolPtrInput
	// (Updatable) Container repository readme.
	Readme ArtifactsContainerRepositoryReadmePtrInput
}

func (ArtifactsContainerRepositoryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*artifactsContainerRepositoryArgs)(nil)).Elem()
}

type ArtifactsContainerRepositoryInput interface {
	pulumi.Input

	ToArtifactsContainerRepositoryOutput() ArtifactsContainerRepositoryOutput
	ToArtifactsContainerRepositoryOutputWithContext(ctx context.Context) ArtifactsContainerRepositoryOutput
}

func (*ArtifactsContainerRepository) ElementType() reflect.Type {
	return reflect.TypeOf((*ArtifactsContainerRepository)(nil))
}

func (i *ArtifactsContainerRepository) ToArtifactsContainerRepositoryOutput() ArtifactsContainerRepositoryOutput {
	return i.ToArtifactsContainerRepositoryOutputWithContext(context.Background())
}

func (i *ArtifactsContainerRepository) ToArtifactsContainerRepositoryOutputWithContext(ctx context.Context) ArtifactsContainerRepositoryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArtifactsContainerRepositoryOutput)
}

func (i *ArtifactsContainerRepository) ToArtifactsContainerRepositoryPtrOutput() ArtifactsContainerRepositoryPtrOutput {
	return i.ToArtifactsContainerRepositoryPtrOutputWithContext(context.Background())
}

func (i *ArtifactsContainerRepository) ToArtifactsContainerRepositoryPtrOutputWithContext(ctx context.Context) ArtifactsContainerRepositoryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArtifactsContainerRepositoryPtrOutput)
}

type ArtifactsContainerRepositoryPtrInput interface {
	pulumi.Input

	ToArtifactsContainerRepositoryPtrOutput() ArtifactsContainerRepositoryPtrOutput
	ToArtifactsContainerRepositoryPtrOutputWithContext(ctx context.Context) ArtifactsContainerRepositoryPtrOutput
}

type artifactsContainerRepositoryPtrType ArtifactsContainerRepositoryArgs

func (*artifactsContainerRepositoryPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ArtifactsContainerRepository)(nil))
}

func (i *artifactsContainerRepositoryPtrType) ToArtifactsContainerRepositoryPtrOutput() ArtifactsContainerRepositoryPtrOutput {
	return i.ToArtifactsContainerRepositoryPtrOutputWithContext(context.Background())
}

func (i *artifactsContainerRepositoryPtrType) ToArtifactsContainerRepositoryPtrOutputWithContext(ctx context.Context) ArtifactsContainerRepositoryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArtifactsContainerRepositoryPtrOutput)
}

// ArtifactsContainerRepositoryArrayInput is an input type that accepts ArtifactsContainerRepositoryArray and ArtifactsContainerRepositoryArrayOutput values.
// You can construct a concrete instance of `ArtifactsContainerRepositoryArrayInput` via:
//
//          ArtifactsContainerRepositoryArray{ ArtifactsContainerRepositoryArgs{...} }
type ArtifactsContainerRepositoryArrayInput interface {
	pulumi.Input

	ToArtifactsContainerRepositoryArrayOutput() ArtifactsContainerRepositoryArrayOutput
	ToArtifactsContainerRepositoryArrayOutputWithContext(context.Context) ArtifactsContainerRepositoryArrayOutput
}

type ArtifactsContainerRepositoryArray []ArtifactsContainerRepositoryInput

func (ArtifactsContainerRepositoryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ArtifactsContainerRepository)(nil)).Elem()
}

func (i ArtifactsContainerRepositoryArray) ToArtifactsContainerRepositoryArrayOutput() ArtifactsContainerRepositoryArrayOutput {
	return i.ToArtifactsContainerRepositoryArrayOutputWithContext(context.Background())
}

func (i ArtifactsContainerRepositoryArray) ToArtifactsContainerRepositoryArrayOutputWithContext(ctx context.Context) ArtifactsContainerRepositoryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArtifactsContainerRepositoryArrayOutput)
}

// ArtifactsContainerRepositoryMapInput is an input type that accepts ArtifactsContainerRepositoryMap and ArtifactsContainerRepositoryMapOutput values.
// You can construct a concrete instance of `ArtifactsContainerRepositoryMapInput` via:
//
//          ArtifactsContainerRepositoryMap{ "key": ArtifactsContainerRepositoryArgs{...} }
type ArtifactsContainerRepositoryMapInput interface {
	pulumi.Input

	ToArtifactsContainerRepositoryMapOutput() ArtifactsContainerRepositoryMapOutput
	ToArtifactsContainerRepositoryMapOutputWithContext(context.Context) ArtifactsContainerRepositoryMapOutput
}

type ArtifactsContainerRepositoryMap map[string]ArtifactsContainerRepositoryInput

func (ArtifactsContainerRepositoryMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ArtifactsContainerRepository)(nil)).Elem()
}

func (i ArtifactsContainerRepositoryMap) ToArtifactsContainerRepositoryMapOutput() ArtifactsContainerRepositoryMapOutput {
	return i.ToArtifactsContainerRepositoryMapOutputWithContext(context.Background())
}

func (i ArtifactsContainerRepositoryMap) ToArtifactsContainerRepositoryMapOutputWithContext(ctx context.Context) ArtifactsContainerRepositoryMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArtifactsContainerRepositoryMapOutput)
}

type ArtifactsContainerRepositoryOutput struct {
	*pulumi.OutputState
}

func (ArtifactsContainerRepositoryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ArtifactsContainerRepository)(nil))
}

func (o ArtifactsContainerRepositoryOutput) ToArtifactsContainerRepositoryOutput() ArtifactsContainerRepositoryOutput {
	return o
}

func (o ArtifactsContainerRepositoryOutput) ToArtifactsContainerRepositoryOutputWithContext(ctx context.Context) ArtifactsContainerRepositoryOutput {
	return o
}

func (o ArtifactsContainerRepositoryOutput) ToArtifactsContainerRepositoryPtrOutput() ArtifactsContainerRepositoryPtrOutput {
	return o.ToArtifactsContainerRepositoryPtrOutputWithContext(context.Background())
}

func (o ArtifactsContainerRepositoryOutput) ToArtifactsContainerRepositoryPtrOutputWithContext(ctx context.Context) ArtifactsContainerRepositoryPtrOutput {
	return o.ApplyT(func(v ArtifactsContainerRepository) *ArtifactsContainerRepository {
		return &v
	}).(ArtifactsContainerRepositoryPtrOutput)
}

type ArtifactsContainerRepositoryPtrOutput struct {
	*pulumi.OutputState
}

func (ArtifactsContainerRepositoryPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ArtifactsContainerRepository)(nil))
}

func (o ArtifactsContainerRepositoryPtrOutput) ToArtifactsContainerRepositoryPtrOutput() ArtifactsContainerRepositoryPtrOutput {
	return o
}

func (o ArtifactsContainerRepositoryPtrOutput) ToArtifactsContainerRepositoryPtrOutputWithContext(ctx context.Context) ArtifactsContainerRepositoryPtrOutput {
	return o
}

type ArtifactsContainerRepositoryArrayOutput struct{ *pulumi.OutputState }

func (ArtifactsContainerRepositoryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ArtifactsContainerRepository)(nil))
}

func (o ArtifactsContainerRepositoryArrayOutput) ToArtifactsContainerRepositoryArrayOutput() ArtifactsContainerRepositoryArrayOutput {
	return o
}

func (o ArtifactsContainerRepositoryArrayOutput) ToArtifactsContainerRepositoryArrayOutputWithContext(ctx context.Context) ArtifactsContainerRepositoryArrayOutput {
	return o
}

func (o ArtifactsContainerRepositoryArrayOutput) Index(i pulumi.IntInput) ArtifactsContainerRepositoryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ArtifactsContainerRepository {
		return vs[0].([]ArtifactsContainerRepository)[vs[1].(int)]
	}).(ArtifactsContainerRepositoryOutput)
}

type ArtifactsContainerRepositoryMapOutput struct{ *pulumi.OutputState }

func (ArtifactsContainerRepositoryMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]ArtifactsContainerRepository)(nil))
}

func (o ArtifactsContainerRepositoryMapOutput) ToArtifactsContainerRepositoryMapOutput() ArtifactsContainerRepositoryMapOutput {
	return o
}

func (o ArtifactsContainerRepositoryMapOutput) ToArtifactsContainerRepositoryMapOutputWithContext(ctx context.Context) ArtifactsContainerRepositoryMapOutput {
	return o
}

func (o ArtifactsContainerRepositoryMapOutput) MapIndex(k pulumi.StringInput) ArtifactsContainerRepositoryOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) ArtifactsContainerRepository {
		return vs[0].(map[string]ArtifactsContainerRepository)[vs[1].(string)]
	}).(ArtifactsContainerRepositoryOutput)
}

func init() {
	pulumi.RegisterOutputType(ArtifactsContainerRepositoryOutput{})
	pulumi.RegisterOutputType(ArtifactsContainerRepositoryPtrOutput{})
	pulumi.RegisterOutputType(ArtifactsContainerRepositoryArrayOutput{})
	pulumi.RegisterOutputType(ArtifactsContainerRepositoryMapOutput{})
}
