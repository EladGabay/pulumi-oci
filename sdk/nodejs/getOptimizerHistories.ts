// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "./types";
import * as utilities from "./utilities";

/**
 * This data source provides the list of Histories in Oracle Cloud Infrastructure Optimizer service.
 *
 * Lists changes to the recommendations based on user activity.
 * For example, lists when recommendations have been implemented, dismissed, postponed, or reactivated.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as oci from "@pulumi/oci";
 *
 * const testHistories = oci.GetOptimizerHistories({
 *     compartmentId: _var.compartment_id,
 *     compartmentIdInSubtree: _var.history_compartment_id_in_subtree,
 *     name: _var.history_name,
 *     recommendationId: oci_optimizer_recommendation.test_recommendation.id,
 *     recommendationName: oci_optimizer_recommendation.test_recommendation.name,
 *     resourceType: _var.history_resource_type,
 *     state: _var.history_state,
 *     status: _var.history_status,
 * });
 * ```
 */
export function getOptimizerHistories(args: GetOptimizerHistoriesArgs, opts?: pulumi.InvokeOptions): Promise<GetOptimizerHistoriesResult> {
    if (!opts) {
        opts = {}
    }

    if (!opts.version) {
        opts.version = utilities.getVersion();
    }
    return pulumi.runtime.invoke("oci:index/getOptimizerHistories:GetOptimizerHistories", {
        "compartmentId": args.compartmentId,
        "compartmentIdInSubtree": args.compartmentIdInSubtree,
        "filters": args.filters,
        "name": args.name,
        "recommendationId": args.recommendationId,
        "recommendationName": args.recommendationName,
        "resourceType": args.resourceType,
        "state": args.state,
        "status": args.status,
    }, opts);
}

/**
 * A collection of arguments for invoking GetOptimizerHistories.
 */
export interface GetOptimizerHistoriesArgs {
    /**
     * The OCID of the compartment.
     */
    compartmentId: string;
    /**
     * When set to true, the hierarchy of compartments is traversed and all compartments and subcompartments in the tenancy are returned depending on the the setting of `accessLevel`.
     */
    compartmentIdInSubtree: boolean;
    filters?: inputs.GetOptimizerHistoriesFilter[];
    /**
     * Optional. A filter that returns results that match the name specified.
     */
    name?: string;
    /**
     * The unique OCID associated with the recommendation.
     */
    recommendationId?: string;
    /**
     * Optional. A filter that returns results that match the recommendation name specified.
     */
    recommendationName?: string;
    /**
     * Optional. A filter that returns results that match the resource type specified.
     */
    resourceType?: string;
    /**
     * A filter that returns results that match the lifecycle state specified.
     */
    state?: string;
    /**
     * A filter that returns recommendations that match the status specified.
     */
    status?: string;
}

/**
 * A collection of values returned by GetOptimizerHistories.
 */
export interface GetOptimizerHistoriesResult {
    /**
     * The OCID of the compartment.
     */
    readonly compartmentId: string;
    readonly compartmentIdInSubtree: boolean;
    readonly filters?: outputs.GetOptimizerHistoriesFilter[];
    /**
     * The list of history_collection.
     */
    readonly historyCollections: outputs.GetOptimizerHistoriesHistoryCollection[];
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * The name assigned to the resource.
     */
    readonly name?: string;
    /**
     * The unique OCID associated with the recommendation.
     */
    readonly recommendationId?: string;
    /**
     * The name assigned to the recommendation.
     */
    readonly recommendationName?: string;
    /**
     * The kind of resource.
     */
    readonly resourceType?: string;
    /**
     * The recommendation history's current state.
     */
    readonly state?: string;
    /**
     * The current status of the resource action.
     */
    readonly status?: string;
}
