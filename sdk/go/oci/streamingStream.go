// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package oci

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource provides the Stream resource in Oracle Cloud Infrastructure Streaming service.
//
// Starts the provisioning of a new stream.
// The stream will be created in the given compartment id or stream pool id, depending on which parameter is specified.
// Compartment id and stream pool id cannot be specified at the same time.
// To track the progress of the provisioning, you can periodically call [GetStream](https://docs.cloud.oracle.com/iaas/api/#/en/streaming/20180418/Stream/GetStream).
// In the response, the `lifecycleState` parameter of the [Stream](https://docs.cloud.oracle.com/iaas/api/#/en/streaming/20180418/Stream/) object tells you its current state.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-oci/sdk/go/oci"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := oci.NewStreamingStream(ctx, "testStream", &oci.StreamingStreamArgs{
// 			Partitions:    pulumi.Any(_var.Stream_partitions),
// 			CompartmentId: pulumi.Any(_var.Compartment_id),
// 			DefinedTags:   pulumi.Any(_var.Stream_defined_tags),
// 			FreeformTags: pulumi.AnyMap{
// 				"Department": pulumi.Any("Finance"),
// 			},
// 			RetentionInHours: pulumi.Any(_var.Stream_retention_in_hours),
// 			StreamPoolId:     pulumi.Any(oci_streaming_stream_pool.Test_stream_pool.Id),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// Streams can be imported using the `id`, e.g.
//
// ```sh
//  $ pulumi import oci:index/streamingStream:StreamingStream test_stream "id"
// ```
type StreamingStream struct {
	pulumi.CustomResourceState

	// (Updatable) The OCID of the compartment that contains the stream.
	CompartmentId pulumi.StringOutput `pulumi:"compartmentId"`
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Operations.CostCenter": "42"}`
	DefinedTags pulumi.MapOutput `pulumi:"definedTags"`
	// (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair that is applied with no predefined name, type, or namespace. Exists for cross-compatibility only. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Department": "Finance"}`
	FreeformTags pulumi.MapOutput `pulumi:"freeformTags"`
	// Any additional details about the current state of the stream.
	LifecycleStateDetails pulumi.StringOutput `pulumi:"lifecycleStateDetails"`
	// The endpoint to use when creating the StreamClient to consume or publish messages in the stream. If the associated stream pool is private, the endpoint is also private and can only be accessed from inside the stream pool's associated subnet.
	MessagesEndpoint pulumi.StringOutput `pulumi:"messagesEndpoint"`
	// The name of the stream. Avoid entering confidential information.  Example: `TelemetryEvents`
	Name pulumi.StringOutput `pulumi:"name"`
	// The number of partitions in the stream.
	Partitions pulumi.IntOutput `pulumi:"partitions"`
	// The retention period of the stream, in hours. Accepted values are between 24 and 168 (7 days). If not specified, the stream will have a retention period of 24 hours.
	RetentionInHours pulumi.IntOutput `pulumi:"retentionInHours"`
	// The current state of the stream.
	State pulumi.StringOutput `pulumi:"state"`
	// (Updatable) The OCID of the stream pool that contains the stream.
	StreamPoolId pulumi.StringOutput `pulumi:"streamPoolId"`
	// The date and time the stream was created, expressed in in [RFC 3339](https://tools.ietf.org/rfc/rfc3339) timestamp format.  Example: `2018-04-20T00:00:07.405Z`
	TimeCreated pulumi.StringOutput `pulumi:"timeCreated"`
}

// NewStreamingStream registers a new resource with the given unique name, arguments, and options.
func NewStreamingStream(ctx *pulumi.Context,
	name string, args *StreamingStreamArgs, opts ...pulumi.ResourceOption) (*StreamingStream, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Partitions == nil {
		return nil, errors.New("invalid value for required argument 'Partitions'")
	}
	var resource StreamingStream
	err := ctx.RegisterResource("oci:index/streamingStream:StreamingStream", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetStreamingStream gets an existing StreamingStream resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetStreamingStream(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *StreamingStreamState, opts ...pulumi.ResourceOption) (*StreamingStream, error) {
	var resource StreamingStream
	err := ctx.ReadResource("oci:index/streamingStream:StreamingStream", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering StreamingStream resources.
type streamingStreamState struct {
	// (Updatable) The OCID of the compartment that contains the stream.
	CompartmentId *string `pulumi:"compartmentId"`
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Operations.CostCenter": "42"}`
	DefinedTags map[string]interface{} `pulumi:"definedTags"`
	// (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair that is applied with no predefined name, type, or namespace. Exists for cross-compatibility only. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Department": "Finance"}`
	FreeformTags map[string]interface{} `pulumi:"freeformTags"`
	// Any additional details about the current state of the stream.
	LifecycleStateDetails *string `pulumi:"lifecycleStateDetails"`
	// The endpoint to use when creating the StreamClient to consume or publish messages in the stream. If the associated stream pool is private, the endpoint is also private and can only be accessed from inside the stream pool's associated subnet.
	MessagesEndpoint *string `pulumi:"messagesEndpoint"`
	// The name of the stream. Avoid entering confidential information.  Example: `TelemetryEvents`
	Name *string `pulumi:"name"`
	// The number of partitions in the stream.
	Partitions *int `pulumi:"partitions"`
	// The retention period of the stream, in hours. Accepted values are between 24 and 168 (7 days). If not specified, the stream will have a retention period of 24 hours.
	RetentionInHours *int `pulumi:"retentionInHours"`
	// The current state of the stream.
	State *string `pulumi:"state"`
	// (Updatable) The OCID of the stream pool that contains the stream.
	StreamPoolId *string `pulumi:"streamPoolId"`
	// The date and time the stream was created, expressed in in [RFC 3339](https://tools.ietf.org/rfc/rfc3339) timestamp format.  Example: `2018-04-20T00:00:07.405Z`
	TimeCreated *string `pulumi:"timeCreated"`
}

type StreamingStreamState struct {
	// (Updatable) The OCID of the compartment that contains the stream.
	CompartmentId pulumi.StringPtrInput
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Operations.CostCenter": "42"}`
	DefinedTags pulumi.MapInput
	// (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair that is applied with no predefined name, type, or namespace. Exists for cross-compatibility only. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Department": "Finance"}`
	FreeformTags pulumi.MapInput
	// Any additional details about the current state of the stream.
	LifecycleStateDetails pulumi.StringPtrInput
	// The endpoint to use when creating the StreamClient to consume or publish messages in the stream. If the associated stream pool is private, the endpoint is also private and can only be accessed from inside the stream pool's associated subnet.
	MessagesEndpoint pulumi.StringPtrInput
	// The name of the stream. Avoid entering confidential information.  Example: `TelemetryEvents`
	Name pulumi.StringPtrInput
	// The number of partitions in the stream.
	Partitions pulumi.IntPtrInput
	// The retention period of the stream, in hours. Accepted values are between 24 and 168 (7 days). If not specified, the stream will have a retention period of 24 hours.
	RetentionInHours pulumi.IntPtrInput
	// The current state of the stream.
	State pulumi.StringPtrInput
	// (Updatable) The OCID of the stream pool that contains the stream.
	StreamPoolId pulumi.StringPtrInput
	// The date and time the stream was created, expressed in in [RFC 3339](https://tools.ietf.org/rfc/rfc3339) timestamp format.  Example: `2018-04-20T00:00:07.405Z`
	TimeCreated pulumi.StringPtrInput
}

func (StreamingStreamState) ElementType() reflect.Type {
	return reflect.TypeOf((*streamingStreamState)(nil)).Elem()
}

type streamingStreamArgs struct {
	// (Updatable) The OCID of the compartment that contains the stream.
	CompartmentId *string `pulumi:"compartmentId"`
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Operations.CostCenter": "42"}`
	DefinedTags map[string]interface{} `pulumi:"definedTags"`
	// (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair that is applied with no predefined name, type, or namespace. Exists for cross-compatibility only. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Department": "Finance"}`
	FreeformTags map[string]interface{} `pulumi:"freeformTags"`
	// The name of the stream. Avoid entering confidential information.  Example: `TelemetryEvents`
	Name *string `pulumi:"name"`
	// The number of partitions in the stream.
	Partitions int `pulumi:"partitions"`
	// The retention period of the stream, in hours. Accepted values are between 24 and 168 (7 days). If not specified, the stream will have a retention period of 24 hours.
	RetentionInHours *int `pulumi:"retentionInHours"`
	// (Updatable) The OCID of the stream pool that contains the stream.
	StreamPoolId *string `pulumi:"streamPoolId"`
}

// The set of arguments for constructing a StreamingStream resource.
type StreamingStreamArgs struct {
	// (Updatable) The OCID of the compartment that contains the stream.
	CompartmentId pulumi.StringPtrInput
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Operations.CostCenter": "42"}`
	DefinedTags pulumi.MapInput
	// (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair that is applied with no predefined name, type, or namespace. Exists for cross-compatibility only. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Department": "Finance"}`
	FreeformTags pulumi.MapInput
	// The name of the stream. Avoid entering confidential information.  Example: `TelemetryEvents`
	Name pulumi.StringPtrInput
	// The number of partitions in the stream.
	Partitions pulumi.IntInput
	// The retention period of the stream, in hours. Accepted values are between 24 and 168 (7 days). If not specified, the stream will have a retention period of 24 hours.
	RetentionInHours pulumi.IntPtrInput
	// (Updatable) The OCID of the stream pool that contains the stream.
	StreamPoolId pulumi.StringPtrInput
}

func (StreamingStreamArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*streamingStreamArgs)(nil)).Elem()
}

type StreamingStreamInput interface {
	pulumi.Input

	ToStreamingStreamOutput() StreamingStreamOutput
	ToStreamingStreamOutputWithContext(ctx context.Context) StreamingStreamOutput
}

func (*StreamingStream) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamingStream)(nil))
}

func (i *StreamingStream) ToStreamingStreamOutput() StreamingStreamOutput {
	return i.ToStreamingStreamOutputWithContext(context.Background())
}

func (i *StreamingStream) ToStreamingStreamOutputWithContext(ctx context.Context) StreamingStreamOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamingStreamOutput)
}

func (i *StreamingStream) ToStreamingStreamPtrOutput() StreamingStreamPtrOutput {
	return i.ToStreamingStreamPtrOutputWithContext(context.Background())
}

func (i *StreamingStream) ToStreamingStreamPtrOutputWithContext(ctx context.Context) StreamingStreamPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamingStreamPtrOutput)
}

type StreamingStreamPtrInput interface {
	pulumi.Input

	ToStreamingStreamPtrOutput() StreamingStreamPtrOutput
	ToStreamingStreamPtrOutputWithContext(ctx context.Context) StreamingStreamPtrOutput
}

type streamingStreamPtrType StreamingStreamArgs

func (*streamingStreamPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**StreamingStream)(nil))
}

func (i *streamingStreamPtrType) ToStreamingStreamPtrOutput() StreamingStreamPtrOutput {
	return i.ToStreamingStreamPtrOutputWithContext(context.Background())
}

func (i *streamingStreamPtrType) ToStreamingStreamPtrOutputWithContext(ctx context.Context) StreamingStreamPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamingStreamPtrOutput)
}

// StreamingStreamArrayInput is an input type that accepts StreamingStreamArray and StreamingStreamArrayOutput values.
// You can construct a concrete instance of `StreamingStreamArrayInput` via:
//
//          StreamingStreamArray{ StreamingStreamArgs{...} }
type StreamingStreamArrayInput interface {
	pulumi.Input

	ToStreamingStreamArrayOutput() StreamingStreamArrayOutput
	ToStreamingStreamArrayOutputWithContext(context.Context) StreamingStreamArrayOutput
}

type StreamingStreamArray []StreamingStreamInput

func (StreamingStreamArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*StreamingStream)(nil)).Elem()
}

func (i StreamingStreamArray) ToStreamingStreamArrayOutput() StreamingStreamArrayOutput {
	return i.ToStreamingStreamArrayOutputWithContext(context.Background())
}

func (i StreamingStreamArray) ToStreamingStreamArrayOutputWithContext(ctx context.Context) StreamingStreamArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamingStreamArrayOutput)
}

// StreamingStreamMapInput is an input type that accepts StreamingStreamMap and StreamingStreamMapOutput values.
// You can construct a concrete instance of `StreamingStreamMapInput` via:
//
//          StreamingStreamMap{ "key": StreamingStreamArgs{...} }
type StreamingStreamMapInput interface {
	pulumi.Input

	ToStreamingStreamMapOutput() StreamingStreamMapOutput
	ToStreamingStreamMapOutputWithContext(context.Context) StreamingStreamMapOutput
}

type StreamingStreamMap map[string]StreamingStreamInput

func (StreamingStreamMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*StreamingStream)(nil)).Elem()
}

func (i StreamingStreamMap) ToStreamingStreamMapOutput() StreamingStreamMapOutput {
	return i.ToStreamingStreamMapOutputWithContext(context.Background())
}

func (i StreamingStreamMap) ToStreamingStreamMapOutputWithContext(ctx context.Context) StreamingStreamMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamingStreamMapOutput)
}

type StreamingStreamOutput struct {
	*pulumi.OutputState
}

func (StreamingStreamOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamingStream)(nil))
}

func (o StreamingStreamOutput) ToStreamingStreamOutput() StreamingStreamOutput {
	return o
}

func (o StreamingStreamOutput) ToStreamingStreamOutputWithContext(ctx context.Context) StreamingStreamOutput {
	return o
}

func (o StreamingStreamOutput) ToStreamingStreamPtrOutput() StreamingStreamPtrOutput {
	return o.ToStreamingStreamPtrOutputWithContext(context.Background())
}

func (o StreamingStreamOutput) ToStreamingStreamPtrOutputWithContext(ctx context.Context) StreamingStreamPtrOutput {
	return o.ApplyT(func(v StreamingStream) *StreamingStream {
		return &v
	}).(StreamingStreamPtrOutput)
}

type StreamingStreamPtrOutput struct {
	*pulumi.OutputState
}

func (StreamingStreamPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StreamingStream)(nil))
}

func (o StreamingStreamPtrOutput) ToStreamingStreamPtrOutput() StreamingStreamPtrOutput {
	return o
}

func (o StreamingStreamPtrOutput) ToStreamingStreamPtrOutputWithContext(ctx context.Context) StreamingStreamPtrOutput {
	return o
}

type StreamingStreamArrayOutput struct{ *pulumi.OutputState }

func (StreamingStreamArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StreamingStream)(nil))
}

func (o StreamingStreamArrayOutput) ToStreamingStreamArrayOutput() StreamingStreamArrayOutput {
	return o
}

func (o StreamingStreamArrayOutput) ToStreamingStreamArrayOutputWithContext(ctx context.Context) StreamingStreamArrayOutput {
	return o
}

func (o StreamingStreamArrayOutput) Index(i pulumi.IntInput) StreamingStreamOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) StreamingStream {
		return vs[0].([]StreamingStream)[vs[1].(int)]
	}).(StreamingStreamOutput)
}

type StreamingStreamMapOutput struct{ *pulumi.OutputState }

func (StreamingStreamMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]StreamingStream)(nil))
}

func (o StreamingStreamMapOutput) ToStreamingStreamMapOutput() StreamingStreamMapOutput {
	return o
}

func (o StreamingStreamMapOutput) ToStreamingStreamMapOutputWithContext(ctx context.Context) StreamingStreamMapOutput {
	return o
}

func (o StreamingStreamMapOutput) MapIndex(k pulumi.StringInput) StreamingStreamOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) StreamingStream {
		return vs[0].(map[string]StreamingStream)[vs[1].(string)]
	}).(StreamingStreamOutput)
}

func init() {
	pulumi.RegisterOutputType(StreamingStreamOutput{})
	pulumi.RegisterOutputType(StreamingStreamPtrOutput{})
	pulumi.RegisterOutputType(StreamingStreamArrayOutput{})
	pulumi.RegisterOutputType(StreamingStreamMapOutput{})
}
