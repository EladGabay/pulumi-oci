// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package oci

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource provides the Subnet resource in Oracle Cloud Infrastructure Core service.
//
// Creates a new subnet in the specified VCN. You can't change the size of the subnet after creation,
// so it's important to think about the size of subnets you need before creating them.
// For more information, see [VCNs and Subnets](https://docs.cloud.oracle.com/iaas/Content/Network/Tasks/managingVCNs.htm).
// For information on the number of subnets you can have in a VCN, see
// [Service Limits](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/servicelimits.htm).
//
// For the purposes of access control, you must provide the OCID of the compartment where you want the subnet
// to reside. Notice that the subnet doesn't have to be in the same compartment as the VCN, route tables, or
// other Networking Service components. If you're not sure which compartment to use, put the subnet in
// the same compartment as the VCN. For more information about compartments and access control, see
// [Overview of the IAM Service](https://docs.cloud.oracle.com/iaas/Content/Identity/Concepts/overview.htm). For information about OCIDs,
// see [Resource Identifiers](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
//
// You may optionally associate a route table with the subnet. If you don't, the subnet will use the
// VCN's default route table. For more information about route tables, see
// [Route Tables](https://docs.cloud.oracle.com/iaas/Content/Network/Tasks/managingroutetables.htm).
//
// You may optionally associate a security list with the subnet. If you don't, the subnet will use the
// VCN's default security list. For more information about security lists, see
// [Security Lists](https://docs.cloud.oracle.com/iaas/Content/Network/Concepts/securitylists.htm).
//
// You may optionally associate a set of DHCP options with the subnet. If you don't, the subnet will use the
// VCN's default set. For more information about DHCP options, see
// [DHCP Options](https://docs.cloud.oracle.com/iaas/Content/Network/Tasks/managingDHCP.htm).
//
// You may optionally specify a *display name* for the subnet, otherwise a default is provided.
// It does not have to be unique, and you can change it. Avoid entering confidential information.
//
// You can also add a DNS label for the subnet, which is required if you want the Internet and
// VCN Resolver to resolve hostnames for instances in the subnet. For more information, see
// [DNS in Your Virtual Cloud Network](https://docs.cloud.oracle.com/iaas/Content/Network/Concepts/dns.htm).
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-oci/sdk/go/oci"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := oci.NewCoreSubnet(ctx, "testSubnet", &oci.CoreSubnetArgs{
// 			CidrBlock:          pulumi.Any(_var.Subnet_cidr_block),
// 			CompartmentId:      pulumi.Any(_var.Compartment_id),
// 			VcnId:              pulumi.Any(oci_core_vcn.Test_vcn.Id),
// 			AvailabilityDomain: pulumi.Any(_var.Subnet_availability_domain),
// 			DefinedTags: pulumi.AnyMap{
// 				"Operations.CostCenter": pulumi.Any("42"),
// 			},
// 			DhcpOptionsId: pulumi.Any(oci_core_dhcp_options.Test_dhcp_options.Id),
// 			DisplayName:   pulumi.Any(_var.Subnet_display_name),
// 			DnsLabel:      pulumi.Any(_var.Subnet_dns_label),
// 			FreeformTags: pulumi.AnyMap{
// 				"Department": pulumi.Any("Finance"),
// 			},
// 			Ipv6cidrBlock:           pulumi.Any(_var.Subnet_ipv6cidr_block),
// 			ProhibitInternetIngress: pulumi.Any(_var.Subnet_prohibit_internet_ingress),
// 			ProhibitPublicIpOnVnic:  pulumi.Any(_var.Subnet_prohibit_public_ip_on_vnic),
// 			RouteTableId:            pulumi.Any(oci_core_route_table.Test_route_table.Id),
// 			SecurityListIds:         pulumi.Any(_var.Subnet_security_list_ids),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// Subnets can be imported using the `id`, e.g.
//
// ```sh
//  $ pulumi import oci:index/coreSubnet:CoreSubnet test_subnet "id"
// ```
type CoreSubnet struct {
	pulumi.CustomResourceState

	// Controls whether the subnet is regional or specific to an availability domain. Oracle recommends creating regional subnets because they're more flexible and make it easier to implement failover across availability domains. Originally, AD-specific subnets were the only kind available to use.
	AvailabilityDomain pulumi.StringOutput `pulumi:"availabilityDomain"`
	// (Updatable) The CIDR IP address range of the subnet. The CIDR must maintain the following rules -
	CidrBlock pulumi.StringOutput `pulumi:"cidrBlock"`
	// (Updatable) The OCID of the compartment to contain the subnet.
	CompartmentId pulumi.StringOutput `pulumi:"compartmentId"`
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Operations.CostCenter": "42"}`
	DefinedTags pulumi.MapOutput `pulumi:"definedTags"`
	// (Updatable) The OCID of the set of DHCP options the subnet will use. If you don't provide a value, the subnet uses the VCN's default set of DHCP options.
	DhcpOptionsId pulumi.StringOutput `pulumi:"dhcpOptionsId"`
	// (Updatable) A user-friendly name. Does not have to be unique, and it's changeable. Avoid entering confidential information.
	DisplayName pulumi.StringOutput `pulumi:"displayName"`
	// A DNS label for the subnet, used in conjunction with the VNIC's hostname and VCN's DNS label to form a fully qualified domain name (FQDN) for each VNIC within this subnet (for example, `bminstance-1.subnet123.vcn1.oraclevcn.com`). Must be an alphanumeric string that begins with a letter and is unique within the VCN. The value cannot be changed.
	DnsLabel pulumi.StringOutput `pulumi:"dnsLabel"`
	// (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Department": "Finance"}`
	FreeformTags pulumi.MapOutput `pulumi:"freeformTags"`
	// (Updatable) Use this to enable IPv6 addressing for this subnet. The VCN must be enabled for IPv6. You can't change this subnet characteristic later. All subnets are /64 in size. The subnet portion of the IPv6 address is the fourth hextet from the left (1111 in the following example).
	Ipv6cidrBlock pulumi.StringOutput `pulumi:"ipv6cidrBlock"`
	// For an IPv6-enabled subnet, this is the IPv6 address of the virtual router.  Example: `2001:0db8:0123:1111:89ab:cdef:1234:5678`
	Ipv6virtualRouterIp pulumi.StringOutput `pulumi:"ipv6virtualRouterIp"`
	// Whether to disallow ingress internet traffic to VNICs within this subnet. Defaults to false.
	ProhibitInternetIngress pulumi.BoolOutput `pulumi:"prohibitInternetIngress"`
	// Whether VNICs within this subnet can have public IP addresses. Defaults to false, which means VNICs created in this subnet will automatically be assigned public IP addresses unless specified otherwise during instance launch or VNIC creation (with the `assignPublicIp` flag in [CreateVnicDetails](https://docs.cloud.oracle.com/iaas/api/#/en/iaas/latest/CreateVnicDetails/)). If `prohibitPublicIpOnVnic` is set to true, VNICs created in this subnet cannot have public IP addresses (that is, it's a private subnet).
	ProhibitPublicIpOnVnic pulumi.BoolOutput `pulumi:"prohibitPublicIpOnVnic"`
	// (Updatable) The OCID of the route table the subnet will use. If you don't provide a value, the subnet uses the VCN's default route table.
	RouteTableId pulumi.StringOutput `pulumi:"routeTableId"`
	// (Updatable) The OCIDs of the security list or lists the subnet will use. If you don't provide a value, the subnet uses the VCN's default security list. Remember that security lists are associated *with the subnet*, but the rules are applied to the individual VNICs in the subnet.
	SecurityListIds pulumi.StringArrayOutput `pulumi:"securityListIds"`
	// The subnet's current state.
	State pulumi.StringOutput `pulumi:"state"`
	// The subnet's domain name, which consists of the subnet's DNS label, the VCN's DNS label, and the `oraclevcn.com` domain.
	SubnetDomainName pulumi.StringOutput `pulumi:"subnetDomainName"`
	// The date and time the subnet was created, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).  Example: `2016-08-25T21:10:29.600Z`
	TimeCreated pulumi.StringOutput `pulumi:"timeCreated"`
	// The OCID of the VCN to contain the subnet.
	VcnId pulumi.StringOutput `pulumi:"vcnId"`
	// The IP address of the virtual router.  Example: `10.0.14.1`
	VirtualRouterIp pulumi.StringOutput `pulumi:"virtualRouterIp"`
	// The MAC address of the virtual router.  Example: `00:00:00:00:00:01`
	VirtualRouterMac pulumi.StringOutput `pulumi:"virtualRouterMac"`
}

// NewCoreSubnet registers a new resource with the given unique name, arguments, and options.
func NewCoreSubnet(ctx *pulumi.Context,
	name string, args *CoreSubnetArgs, opts ...pulumi.ResourceOption) (*CoreSubnet, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CidrBlock == nil {
		return nil, errors.New("invalid value for required argument 'CidrBlock'")
	}
	if args.CompartmentId == nil {
		return nil, errors.New("invalid value for required argument 'CompartmentId'")
	}
	if args.VcnId == nil {
		return nil, errors.New("invalid value for required argument 'VcnId'")
	}
	var resource CoreSubnet
	err := ctx.RegisterResource("oci:index/coreSubnet:CoreSubnet", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCoreSubnet gets an existing CoreSubnet resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCoreSubnet(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CoreSubnetState, opts ...pulumi.ResourceOption) (*CoreSubnet, error) {
	var resource CoreSubnet
	err := ctx.ReadResource("oci:index/coreSubnet:CoreSubnet", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CoreSubnet resources.
type coreSubnetState struct {
	// Controls whether the subnet is regional or specific to an availability domain. Oracle recommends creating regional subnets because they're more flexible and make it easier to implement failover across availability domains. Originally, AD-specific subnets were the only kind available to use.
	AvailabilityDomain *string `pulumi:"availabilityDomain"`
	// (Updatable) The CIDR IP address range of the subnet. The CIDR must maintain the following rules -
	CidrBlock *string `pulumi:"cidrBlock"`
	// (Updatable) The OCID of the compartment to contain the subnet.
	CompartmentId *string `pulumi:"compartmentId"`
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Operations.CostCenter": "42"}`
	DefinedTags map[string]interface{} `pulumi:"definedTags"`
	// (Updatable) The OCID of the set of DHCP options the subnet will use. If you don't provide a value, the subnet uses the VCN's default set of DHCP options.
	DhcpOptionsId *string `pulumi:"dhcpOptionsId"`
	// (Updatable) A user-friendly name. Does not have to be unique, and it's changeable. Avoid entering confidential information.
	DisplayName *string `pulumi:"displayName"`
	// A DNS label for the subnet, used in conjunction with the VNIC's hostname and VCN's DNS label to form a fully qualified domain name (FQDN) for each VNIC within this subnet (for example, `bminstance-1.subnet123.vcn1.oraclevcn.com`). Must be an alphanumeric string that begins with a letter and is unique within the VCN. The value cannot be changed.
	DnsLabel *string `pulumi:"dnsLabel"`
	// (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Department": "Finance"}`
	FreeformTags map[string]interface{} `pulumi:"freeformTags"`
	// (Updatable) Use this to enable IPv6 addressing for this subnet. The VCN must be enabled for IPv6. You can't change this subnet characteristic later. All subnets are /64 in size. The subnet portion of the IPv6 address is the fourth hextet from the left (1111 in the following example).
	Ipv6cidrBlock *string `pulumi:"ipv6cidrBlock"`
	// For an IPv6-enabled subnet, this is the IPv6 address of the virtual router.  Example: `2001:0db8:0123:1111:89ab:cdef:1234:5678`
	Ipv6virtualRouterIp *string `pulumi:"ipv6virtualRouterIp"`
	// Whether to disallow ingress internet traffic to VNICs within this subnet. Defaults to false.
	ProhibitInternetIngress *bool `pulumi:"prohibitInternetIngress"`
	// Whether VNICs within this subnet can have public IP addresses. Defaults to false, which means VNICs created in this subnet will automatically be assigned public IP addresses unless specified otherwise during instance launch or VNIC creation (with the `assignPublicIp` flag in [CreateVnicDetails](https://docs.cloud.oracle.com/iaas/api/#/en/iaas/latest/CreateVnicDetails/)). If `prohibitPublicIpOnVnic` is set to true, VNICs created in this subnet cannot have public IP addresses (that is, it's a private subnet).
	ProhibitPublicIpOnVnic *bool `pulumi:"prohibitPublicIpOnVnic"`
	// (Updatable) The OCID of the route table the subnet will use. If you don't provide a value, the subnet uses the VCN's default route table.
	RouteTableId *string `pulumi:"routeTableId"`
	// (Updatable) The OCIDs of the security list or lists the subnet will use. If you don't provide a value, the subnet uses the VCN's default security list. Remember that security lists are associated *with the subnet*, but the rules are applied to the individual VNICs in the subnet.
	SecurityListIds []string `pulumi:"securityListIds"`
	// The subnet's current state.
	State *string `pulumi:"state"`
	// The subnet's domain name, which consists of the subnet's DNS label, the VCN's DNS label, and the `oraclevcn.com` domain.
	SubnetDomainName *string `pulumi:"subnetDomainName"`
	// The date and time the subnet was created, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).  Example: `2016-08-25T21:10:29.600Z`
	TimeCreated *string `pulumi:"timeCreated"`
	// The OCID of the VCN to contain the subnet.
	VcnId *string `pulumi:"vcnId"`
	// The IP address of the virtual router.  Example: `10.0.14.1`
	VirtualRouterIp *string `pulumi:"virtualRouterIp"`
	// The MAC address of the virtual router.  Example: `00:00:00:00:00:01`
	VirtualRouterMac *string `pulumi:"virtualRouterMac"`
}

type CoreSubnetState struct {
	// Controls whether the subnet is regional or specific to an availability domain. Oracle recommends creating regional subnets because they're more flexible and make it easier to implement failover across availability domains. Originally, AD-specific subnets were the only kind available to use.
	AvailabilityDomain pulumi.StringPtrInput
	// (Updatable) The CIDR IP address range of the subnet. The CIDR must maintain the following rules -
	CidrBlock pulumi.StringPtrInput
	// (Updatable) The OCID of the compartment to contain the subnet.
	CompartmentId pulumi.StringPtrInput
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Operations.CostCenter": "42"}`
	DefinedTags pulumi.MapInput
	// (Updatable) The OCID of the set of DHCP options the subnet will use. If you don't provide a value, the subnet uses the VCN's default set of DHCP options.
	DhcpOptionsId pulumi.StringPtrInput
	// (Updatable) A user-friendly name. Does not have to be unique, and it's changeable. Avoid entering confidential information.
	DisplayName pulumi.StringPtrInput
	// A DNS label for the subnet, used in conjunction with the VNIC's hostname and VCN's DNS label to form a fully qualified domain name (FQDN) for each VNIC within this subnet (for example, `bminstance-1.subnet123.vcn1.oraclevcn.com`). Must be an alphanumeric string that begins with a letter and is unique within the VCN. The value cannot be changed.
	DnsLabel pulumi.StringPtrInput
	// (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Department": "Finance"}`
	FreeformTags pulumi.MapInput
	// (Updatable) Use this to enable IPv6 addressing for this subnet. The VCN must be enabled for IPv6. You can't change this subnet characteristic later. All subnets are /64 in size. The subnet portion of the IPv6 address is the fourth hextet from the left (1111 in the following example).
	Ipv6cidrBlock pulumi.StringPtrInput
	// For an IPv6-enabled subnet, this is the IPv6 address of the virtual router.  Example: `2001:0db8:0123:1111:89ab:cdef:1234:5678`
	Ipv6virtualRouterIp pulumi.StringPtrInput
	// Whether to disallow ingress internet traffic to VNICs within this subnet. Defaults to false.
	ProhibitInternetIngress pulumi.BoolPtrInput
	// Whether VNICs within this subnet can have public IP addresses. Defaults to false, which means VNICs created in this subnet will automatically be assigned public IP addresses unless specified otherwise during instance launch or VNIC creation (with the `assignPublicIp` flag in [CreateVnicDetails](https://docs.cloud.oracle.com/iaas/api/#/en/iaas/latest/CreateVnicDetails/)). If `prohibitPublicIpOnVnic` is set to true, VNICs created in this subnet cannot have public IP addresses (that is, it's a private subnet).
	ProhibitPublicIpOnVnic pulumi.BoolPtrInput
	// (Updatable) The OCID of the route table the subnet will use. If you don't provide a value, the subnet uses the VCN's default route table.
	RouteTableId pulumi.StringPtrInput
	// (Updatable) The OCIDs of the security list or lists the subnet will use. If you don't provide a value, the subnet uses the VCN's default security list. Remember that security lists are associated *with the subnet*, but the rules are applied to the individual VNICs in the subnet.
	SecurityListIds pulumi.StringArrayInput
	// The subnet's current state.
	State pulumi.StringPtrInput
	// The subnet's domain name, which consists of the subnet's DNS label, the VCN's DNS label, and the `oraclevcn.com` domain.
	SubnetDomainName pulumi.StringPtrInput
	// The date and time the subnet was created, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).  Example: `2016-08-25T21:10:29.600Z`
	TimeCreated pulumi.StringPtrInput
	// The OCID of the VCN to contain the subnet.
	VcnId pulumi.StringPtrInput
	// The IP address of the virtual router.  Example: `10.0.14.1`
	VirtualRouterIp pulumi.StringPtrInput
	// The MAC address of the virtual router.  Example: `00:00:00:00:00:01`
	VirtualRouterMac pulumi.StringPtrInput
}

func (CoreSubnetState) ElementType() reflect.Type {
	return reflect.TypeOf((*coreSubnetState)(nil)).Elem()
}

type coreSubnetArgs struct {
	// Controls whether the subnet is regional or specific to an availability domain. Oracle recommends creating regional subnets because they're more flexible and make it easier to implement failover across availability domains. Originally, AD-specific subnets were the only kind available to use.
	AvailabilityDomain *string `pulumi:"availabilityDomain"`
	// (Updatable) The CIDR IP address range of the subnet. The CIDR must maintain the following rules -
	CidrBlock string `pulumi:"cidrBlock"`
	// (Updatable) The OCID of the compartment to contain the subnet.
	CompartmentId string `pulumi:"compartmentId"`
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Operations.CostCenter": "42"}`
	DefinedTags map[string]interface{} `pulumi:"definedTags"`
	// (Updatable) The OCID of the set of DHCP options the subnet will use. If you don't provide a value, the subnet uses the VCN's default set of DHCP options.
	DhcpOptionsId *string `pulumi:"dhcpOptionsId"`
	// (Updatable) A user-friendly name. Does not have to be unique, and it's changeable. Avoid entering confidential information.
	DisplayName *string `pulumi:"displayName"`
	// A DNS label for the subnet, used in conjunction with the VNIC's hostname and VCN's DNS label to form a fully qualified domain name (FQDN) for each VNIC within this subnet (for example, `bminstance-1.subnet123.vcn1.oraclevcn.com`). Must be an alphanumeric string that begins with a letter and is unique within the VCN. The value cannot be changed.
	DnsLabel *string `pulumi:"dnsLabel"`
	// (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Department": "Finance"}`
	FreeformTags map[string]interface{} `pulumi:"freeformTags"`
	// (Updatable) Use this to enable IPv6 addressing for this subnet. The VCN must be enabled for IPv6. You can't change this subnet characteristic later. All subnets are /64 in size. The subnet portion of the IPv6 address is the fourth hextet from the left (1111 in the following example).
	Ipv6cidrBlock *string `pulumi:"ipv6cidrBlock"`
	// Whether to disallow ingress internet traffic to VNICs within this subnet. Defaults to false.
	ProhibitInternetIngress *bool `pulumi:"prohibitInternetIngress"`
	// Whether VNICs within this subnet can have public IP addresses. Defaults to false, which means VNICs created in this subnet will automatically be assigned public IP addresses unless specified otherwise during instance launch or VNIC creation (with the `assignPublicIp` flag in [CreateVnicDetails](https://docs.cloud.oracle.com/iaas/api/#/en/iaas/latest/CreateVnicDetails/)). If `prohibitPublicIpOnVnic` is set to true, VNICs created in this subnet cannot have public IP addresses (that is, it's a private subnet).
	ProhibitPublicIpOnVnic *bool `pulumi:"prohibitPublicIpOnVnic"`
	// (Updatable) The OCID of the route table the subnet will use. If you don't provide a value, the subnet uses the VCN's default route table.
	RouteTableId *string `pulumi:"routeTableId"`
	// (Updatable) The OCIDs of the security list or lists the subnet will use. If you don't provide a value, the subnet uses the VCN's default security list. Remember that security lists are associated *with the subnet*, but the rules are applied to the individual VNICs in the subnet.
	SecurityListIds []string `pulumi:"securityListIds"`
	// The OCID of the VCN to contain the subnet.
	VcnId string `pulumi:"vcnId"`
}

// The set of arguments for constructing a CoreSubnet resource.
type CoreSubnetArgs struct {
	// Controls whether the subnet is regional or specific to an availability domain. Oracle recommends creating regional subnets because they're more flexible and make it easier to implement failover across availability domains. Originally, AD-specific subnets were the only kind available to use.
	AvailabilityDomain pulumi.StringPtrInput
	// (Updatable) The CIDR IP address range of the subnet. The CIDR must maintain the following rules -
	CidrBlock pulumi.StringInput
	// (Updatable) The OCID of the compartment to contain the subnet.
	CompartmentId pulumi.StringInput
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Operations.CostCenter": "42"}`
	DefinedTags pulumi.MapInput
	// (Updatable) The OCID of the set of DHCP options the subnet will use. If you don't provide a value, the subnet uses the VCN's default set of DHCP options.
	DhcpOptionsId pulumi.StringPtrInput
	// (Updatable) A user-friendly name. Does not have to be unique, and it's changeable. Avoid entering confidential information.
	DisplayName pulumi.StringPtrInput
	// A DNS label for the subnet, used in conjunction with the VNIC's hostname and VCN's DNS label to form a fully qualified domain name (FQDN) for each VNIC within this subnet (for example, `bminstance-1.subnet123.vcn1.oraclevcn.com`). Must be an alphanumeric string that begins with a letter and is unique within the VCN. The value cannot be changed.
	DnsLabel pulumi.StringPtrInput
	// (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Department": "Finance"}`
	FreeformTags pulumi.MapInput
	// (Updatable) Use this to enable IPv6 addressing for this subnet. The VCN must be enabled for IPv6. You can't change this subnet characteristic later. All subnets are /64 in size. The subnet portion of the IPv6 address is the fourth hextet from the left (1111 in the following example).
	Ipv6cidrBlock pulumi.StringPtrInput
	// Whether to disallow ingress internet traffic to VNICs within this subnet. Defaults to false.
	ProhibitInternetIngress pulumi.BoolPtrInput
	// Whether VNICs within this subnet can have public IP addresses. Defaults to false, which means VNICs created in this subnet will automatically be assigned public IP addresses unless specified otherwise during instance launch or VNIC creation (with the `assignPublicIp` flag in [CreateVnicDetails](https://docs.cloud.oracle.com/iaas/api/#/en/iaas/latest/CreateVnicDetails/)). If `prohibitPublicIpOnVnic` is set to true, VNICs created in this subnet cannot have public IP addresses (that is, it's a private subnet).
	ProhibitPublicIpOnVnic pulumi.BoolPtrInput
	// (Updatable) The OCID of the route table the subnet will use. If you don't provide a value, the subnet uses the VCN's default route table.
	RouteTableId pulumi.StringPtrInput
	// (Updatable) The OCIDs of the security list or lists the subnet will use. If you don't provide a value, the subnet uses the VCN's default security list. Remember that security lists are associated *with the subnet*, but the rules are applied to the individual VNICs in the subnet.
	SecurityListIds pulumi.StringArrayInput
	// The OCID of the VCN to contain the subnet.
	VcnId pulumi.StringInput
}

func (CoreSubnetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*coreSubnetArgs)(nil)).Elem()
}

type CoreSubnetInput interface {
	pulumi.Input

	ToCoreSubnetOutput() CoreSubnetOutput
	ToCoreSubnetOutputWithContext(ctx context.Context) CoreSubnetOutput
}

func (*CoreSubnet) ElementType() reflect.Type {
	return reflect.TypeOf((*CoreSubnet)(nil))
}

func (i *CoreSubnet) ToCoreSubnetOutput() CoreSubnetOutput {
	return i.ToCoreSubnetOutputWithContext(context.Background())
}

func (i *CoreSubnet) ToCoreSubnetOutputWithContext(ctx context.Context) CoreSubnetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CoreSubnetOutput)
}

func (i *CoreSubnet) ToCoreSubnetPtrOutput() CoreSubnetPtrOutput {
	return i.ToCoreSubnetPtrOutputWithContext(context.Background())
}

func (i *CoreSubnet) ToCoreSubnetPtrOutputWithContext(ctx context.Context) CoreSubnetPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CoreSubnetPtrOutput)
}

type CoreSubnetPtrInput interface {
	pulumi.Input

	ToCoreSubnetPtrOutput() CoreSubnetPtrOutput
	ToCoreSubnetPtrOutputWithContext(ctx context.Context) CoreSubnetPtrOutput
}

type coreSubnetPtrType CoreSubnetArgs

func (*coreSubnetPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CoreSubnet)(nil))
}

func (i *coreSubnetPtrType) ToCoreSubnetPtrOutput() CoreSubnetPtrOutput {
	return i.ToCoreSubnetPtrOutputWithContext(context.Background())
}

func (i *coreSubnetPtrType) ToCoreSubnetPtrOutputWithContext(ctx context.Context) CoreSubnetPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CoreSubnetPtrOutput)
}

// CoreSubnetArrayInput is an input type that accepts CoreSubnetArray and CoreSubnetArrayOutput values.
// You can construct a concrete instance of `CoreSubnetArrayInput` via:
//
//          CoreSubnetArray{ CoreSubnetArgs{...} }
type CoreSubnetArrayInput interface {
	pulumi.Input

	ToCoreSubnetArrayOutput() CoreSubnetArrayOutput
	ToCoreSubnetArrayOutputWithContext(context.Context) CoreSubnetArrayOutput
}

type CoreSubnetArray []CoreSubnetInput

func (CoreSubnetArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CoreSubnet)(nil)).Elem()
}

func (i CoreSubnetArray) ToCoreSubnetArrayOutput() CoreSubnetArrayOutput {
	return i.ToCoreSubnetArrayOutputWithContext(context.Background())
}

func (i CoreSubnetArray) ToCoreSubnetArrayOutputWithContext(ctx context.Context) CoreSubnetArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CoreSubnetArrayOutput)
}

// CoreSubnetMapInput is an input type that accepts CoreSubnetMap and CoreSubnetMapOutput values.
// You can construct a concrete instance of `CoreSubnetMapInput` via:
//
//          CoreSubnetMap{ "key": CoreSubnetArgs{...} }
type CoreSubnetMapInput interface {
	pulumi.Input

	ToCoreSubnetMapOutput() CoreSubnetMapOutput
	ToCoreSubnetMapOutputWithContext(context.Context) CoreSubnetMapOutput
}

type CoreSubnetMap map[string]CoreSubnetInput

func (CoreSubnetMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CoreSubnet)(nil)).Elem()
}

func (i CoreSubnetMap) ToCoreSubnetMapOutput() CoreSubnetMapOutput {
	return i.ToCoreSubnetMapOutputWithContext(context.Background())
}

func (i CoreSubnetMap) ToCoreSubnetMapOutputWithContext(ctx context.Context) CoreSubnetMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CoreSubnetMapOutput)
}

type CoreSubnetOutput struct {
	*pulumi.OutputState
}

func (CoreSubnetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CoreSubnet)(nil))
}

func (o CoreSubnetOutput) ToCoreSubnetOutput() CoreSubnetOutput {
	return o
}

func (o CoreSubnetOutput) ToCoreSubnetOutputWithContext(ctx context.Context) CoreSubnetOutput {
	return o
}

func (o CoreSubnetOutput) ToCoreSubnetPtrOutput() CoreSubnetPtrOutput {
	return o.ToCoreSubnetPtrOutputWithContext(context.Background())
}

func (o CoreSubnetOutput) ToCoreSubnetPtrOutputWithContext(ctx context.Context) CoreSubnetPtrOutput {
	return o.ApplyT(func(v CoreSubnet) *CoreSubnet {
		return &v
	}).(CoreSubnetPtrOutput)
}

type CoreSubnetPtrOutput struct {
	*pulumi.OutputState
}

func (CoreSubnetPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CoreSubnet)(nil))
}

func (o CoreSubnetPtrOutput) ToCoreSubnetPtrOutput() CoreSubnetPtrOutput {
	return o
}

func (o CoreSubnetPtrOutput) ToCoreSubnetPtrOutputWithContext(ctx context.Context) CoreSubnetPtrOutput {
	return o
}

type CoreSubnetArrayOutput struct{ *pulumi.OutputState }

func (CoreSubnetArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CoreSubnet)(nil))
}

func (o CoreSubnetArrayOutput) ToCoreSubnetArrayOutput() CoreSubnetArrayOutput {
	return o
}

func (o CoreSubnetArrayOutput) ToCoreSubnetArrayOutputWithContext(ctx context.Context) CoreSubnetArrayOutput {
	return o
}

func (o CoreSubnetArrayOutput) Index(i pulumi.IntInput) CoreSubnetOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CoreSubnet {
		return vs[0].([]CoreSubnet)[vs[1].(int)]
	}).(CoreSubnetOutput)
}

type CoreSubnetMapOutput struct{ *pulumi.OutputState }

func (CoreSubnetMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]CoreSubnet)(nil))
}

func (o CoreSubnetMapOutput) ToCoreSubnetMapOutput() CoreSubnetMapOutput {
	return o
}

func (o CoreSubnetMapOutput) ToCoreSubnetMapOutputWithContext(ctx context.Context) CoreSubnetMapOutput {
	return o
}

func (o CoreSubnetMapOutput) MapIndex(k pulumi.StringInput) CoreSubnetOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) CoreSubnet {
		return vs[0].(map[string]CoreSubnet)[vs[1].(string)]
	}).(CoreSubnetOutput)
}

func init() {
	pulumi.RegisterOutputType(CoreSubnetOutput{})
	pulumi.RegisterOutputType(CoreSubnetPtrOutput{})
	pulumi.RegisterOutputType(CoreSubnetArrayOutput{})
	pulumi.RegisterOutputType(CoreSubnetMapOutput{})
}
