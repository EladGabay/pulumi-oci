// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package oci

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource provides the Repository resource in Oracle Cloud Infrastructure Artifacts service.
//
// Creates a new repository for storing artifacts.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-oci/sdk/go/oci"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := oci.NewArtifactsRepository(ctx, "testRepository", &oci.ArtifactsRepositoryArgs{
// 			CompartmentId:  pulumi.Any(_var.Compartment_id),
// 			IsImmutable:    pulumi.Any(_var.Repository_is_immutable),
// 			RepositoryType: pulumi.Any(_var.Repository_repository_type),
// 			DefinedTags: pulumi.AnyMap{
// 				"Operations.CostCenter": pulumi.Any("42"),
// 			},
// 			Description: pulumi.Any(_var.Repository_description),
// 			DisplayName: pulumi.Any(_var.Repository_display_name),
// 			FreeformTags: pulumi.AnyMap{
// 				"Department": pulumi.Any("Finance"),
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// Repositories can be imported using the `id`, e.g.
//
// ```sh
//  $ pulumi import oci:index/artifactsRepository:ArtifactsRepository test_repository "id"
// ```
type ArtifactsRepository struct {
	pulumi.CustomResourceState

	// (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the repository's compartment.
	CompartmentId pulumi.StringOutput `pulumi:"compartmentId"`
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Operations.CostCenter": "42"}`
	DefinedTags pulumi.MapOutput `pulumi:"definedTags"`
	// (Updatable) A short description of the repository. It can be updated later.
	Description pulumi.StringOutput `pulumi:"description"`
	// (Updatable) A user-friendly display name for the repository. If not present, will be auto-generated. It can be modified later. Avoid entering confidential information.
	DisplayName pulumi.StringOutput `pulumi:"displayName"`
	// (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Department": "Finance"}`
	FreeformTags pulumi.MapOutput `pulumi:"freeformTags"`
	// Whether to make the repository immutable. The artifacts of an immutable repository cannot be overwritten.
	IsImmutable pulumi.BoolOutput `pulumi:"isImmutable"`
	// (Updatable) The repository's supported artifact type.
	RepositoryType pulumi.StringOutput `pulumi:"repositoryType"`
	// The current state of the repository.
	State pulumi.StringOutput `pulumi:"state"`
	// An RFC 3339 timestamp indicating when the repository was created.
	TimeCreated pulumi.StringOutput `pulumi:"timeCreated"`
}

// NewArtifactsRepository registers a new resource with the given unique name, arguments, and options.
func NewArtifactsRepository(ctx *pulumi.Context,
	name string, args *ArtifactsRepositoryArgs, opts ...pulumi.ResourceOption) (*ArtifactsRepository, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CompartmentId == nil {
		return nil, errors.New("invalid value for required argument 'CompartmentId'")
	}
	if args.IsImmutable == nil {
		return nil, errors.New("invalid value for required argument 'IsImmutable'")
	}
	if args.RepositoryType == nil {
		return nil, errors.New("invalid value for required argument 'RepositoryType'")
	}
	var resource ArtifactsRepository
	err := ctx.RegisterResource("oci:index/artifactsRepository:ArtifactsRepository", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetArtifactsRepository gets an existing ArtifactsRepository resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetArtifactsRepository(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ArtifactsRepositoryState, opts ...pulumi.ResourceOption) (*ArtifactsRepository, error) {
	var resource ArtifactsRepository
	err := ctx.ReadResource("oci:index/artifactsRepository:ArtifactsRepository", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ArtifactsRepository resources.
type artifactsRepositoryState struct {
	// (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the repository's compartment.
	CompartmentId *string `pulumi:"compartmentId"`
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Operations.CostCenter": "42"}`
	DefinedTags map[string]interface{} `pulumi:"definedTags"`
	// (Updatable) A short description of the repository. It can be updated later.
	Description *string `pulumi:"description"`
	// (Updatable) A user-friendly display name for the repository. If not present, will be auto-generated. It can be modified later. Avoid entering confidential information.
	DisplayName *string `pulumi:"displayName"`
	// (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Department": "Finance"}`
	FreeformTags map[string]interface{} `pulumi:"freeformTags"`
	// Whether to make the repository immutable. The artifacts of an immutable repository cannot be overwritten.
	IsImmutable *bool `pulumi:"isImmutable"`
	// (Updatable) The repository's supported artifact type.
	RepositoryType *string `pulumi:"repositoryType"`
	// The current state of the repository.
	State *string `pulumi:"state"`
	// An RFC 3339 timestamp indicating when the repository was created.
	TimeCreated *string `pulumi:"timeCreated"`
}

type ArtifactsRepositoryState struct {
	// (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the repository's compartment.
	CompartmentId pulumi.StringPtrInput
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Operations.CostCenter": "42"}`
	DefinedTags pulumi.MapInput
	// (Updatable) A short description of the repository. It can be updated later.
	Description pulumi.StringPtrInput
	// (Updatable) A user-friendly display name for the repository. If not present, will be auto-generated. It can be modified later. Avoid entering confidential information.
	DisplayName pulumi.StringPtrInput
	// (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Department": "Finance"}`
	FreeformTags pulumi.MapInput
	// Whether to make the repository immutable. The artifacts of an immutable repository cannot be overwritten.
	IsImmutable pulumi.BoolPtrInput
	// (Updatable) The repository's supported artifact type.
	RepositoryType pulumi.StringPtrInput
	// The current state of the repository.
	State pulumi.StringPtrInput
	// An RFC 3339 timestamp indicating when the repository was created.
	TimeCreated pulumi.StringPtrInput
}

func (ArtifactsRepositoryState) ElementType() reflect.Type {
	return reflect.TypeOf((*artifactsRepositoryState)(nil)).Elem()
}

type artifactsRepositoryArgs struct {
	// (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the repository's compartment.
	CompartmentId string `pulumi:"compartmentId"`
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Operations.CostCenter": "42"}`
	DefinedTags map[string]interface{} `pulumi:"definedTags"`
	// (Updatable) A short description of the repository. It can be updated later.
	Description *string `pulumi:"description"`
	// (Updatable) A user-friendly display name for the repository. If not present, will be auto-generated. It can be modified later. Avoid entering confidential information.
	DisplayName *string `pulumi:"displayName"`
	// (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Department": "Finance"}`
	FreeformTags map[string]interface{} `pulumi:"freeformTags"`
	// Whether to make the repository immutable. The artifacts of an immutable repository cannot be overwritten.
	IsImmutable bool `pulumi:"isImmutable"`
	// (Updatable) The repository's supported artifact type.
	RepositoryType string `pulumi:"repositoryType"`
}

// The set of arguments for constructing a ArtifactsRepository resource.
type ArtifactsRepositoryArgs struct {
	// (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the repository's compartment.
	CompartmentId pulumi.StringInput
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Operations.CostCenter": "42"}`
	DefinedTags pulumi.MapInput
	// (Updatable) A short description of the repository. It can be updated later.
	Description pulumi.StringPtrInput
	// (Updatable) A user-friendly display name for the repository. If not present, will be auto-generated. It can be modified later. Avoid entering confidential information.
	DisplayName pulumi.StringPtrInput
	// (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Department": "Finance"}`
	FreeformTags pulumi.MapInput
	// Whether to make the repository immutable. The artifacts of an immutable repository cannot be overwritten.
	IsImmutable pulumi.BoolInput
	// (Updatable) The repository's supported artifact type.
	RepositoryType pulumi.StringInput
}

func (ArtifactsRepositoryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*artifactsRepositoryArgs)(nil)).Elem()
}

type ArtifactsRepositoryInput interface {
	pulumi.Input

	ToArtifactsRepositoryOutput() ArtifactsRepositoryOutput
	ToArtifactsRepositoryOutputWithContext(ctx context.Context) ArtifactsRepositoryOutput
}

func (*ArtifactsRepository) ElementType() reflect.Type {
	return reflect.TypeOf((*ArtifactsRepository)(nil))
}

func (i *ArtifactsRepository) ToArtifactsRepositoryOutput() ArtifactsRepositoryOutput {
	return i.ToArtifactsRepositoryOutputWithContext(context.Background())
}

func (i *ArtifactsRepository) ToArtifactsRepositoryOutputWithContext(ctx context.Context) ArtifactsRepositoryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArtifactsRepositoryOutput)
}

func (i *ArtifactsRepository) ToArtifactsRepositoryPtrOutput() ArtifactsRepositoryPtrOutput {
	return i.ToArtifactsRepositoryPtrOutputWithContext(context.Background())
}

func (i *ArtifactsRepository) ToArtifactsRepositoryPtrOutputWithContext(ctx context.Context) ArtifactsRepositoryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArtifactsRepositoryPtrOutput)
}

type ArtifactsRepositoryPtrInput interface {
	pulumi.Input

	ToArtifactsRepositoryPtrOutput() ArtifactsRepositoryPtrOutput
	ToArtifactsRepositoryPtrOutputWithContext(ctx context.Context) ArtifactsRepositoryPtrOutput
}

type artifactsRepositoryPtrType ArtifactsRepositoryArgs

func (*artifactsRepositoryPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ArtifactsRepository)(nil))
}

func (i *artifactsRepositoryPtrType) ToArtifactsRepositoryPtrOutput() ArtifactsRepositoryPtrOutput {
	return i.ToArtifactsRepositoryPtrOutputWithContext(context.Background())
}

func (i *artifactsRepositoryPtrType) ToArtifactsRepositoryPtrOutputWithContext(ctx context.Context) ArtifactsRepositoryPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArtifactsRepositoryPtrOutput)
}

// ArtifactsRepositoryArrayInput is an input type that accepts ArtifactsRepositoryArray and ArtifactsRepositoryArrayOutput values.
// You can construct a concrete instance of `ArtifactsRepositoryArrayInput` via:
//
//          ArtifactsRepositoryArray{ ArtifactsRepositoryArgs{...} }
type ArtifactsRepositoryArrayInput interface {
	pulumi.Input

	ToArtifactsRepositoryArrayOutput() ArtifactsRepositoryArrayOutput
	ToArtifactsRepositoryArrayOutputWithContext(context.Context) ArtifactsRepositoryArrayOutput
}

type ArtifactsRepositoryArray []ArtifactsRepositoryInput

func (ArtifactsRepositoryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ArtifactsRepository)(nil)).Elem()
}

func (i ArtifactsRepositoryArray) ToArtifactsRepositoryArrayOutput() ArtifactsRepositoryArrayOutput {
	return i.ToArtifactsRepositoryArrayOutputWithContext(context.Background())
}

func (i ArtifactsRepositoryArray) ToArtifactsRepositoryArrayOutputWithContext(ctx context.Context) ArtifactsRepositoryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArtifactsRepositoryArrayOutput)
}

// ArtifactsRepositoryMapInput is an input type that accepts ArtifactsRepositoryMap and ArtifactsRepositoryMapOutput values.
// You can construct a concrete instance of `ArtifactsRepositoryMapInput` via:
//
//          ArtifactsRepositoryMap{ "key": ArtifactsRepositoryArgs{...} }
type ArtifactsRepositoryMapInput interface {
	pulumi.Input

	ToArtifactsRepositoryMapOutput() ArtifactsRepositoryMapOutput
	ToArtifactsRepositoryMapOutputWithContext(context.Context) ArtifactsRepositoryMapOutput
}

type ArtifactsRepositoryMap map[string]ArtifactsRepositoryInput

func (ArtifactsRepositoryMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ArtifactsRepository)(nil)).Elem()
}

func (i ArtifactsRepositoryMap) ToArtifactsRepositoryMapOutput() ArtifactsRepositoryMapOutput {
	return i.ToArtifactsRepositoryMapOutputWithContext(context.Background())
}

func (i ArtifactsRepositoryMap) ToArtifactsRepositoryMapOutputWithContext(ctx context.Context) ArtifactsRepositoryMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArtifactsRepositoryMapOutput)
}

type ArtifactsRepositoryOutput struct {
	*pulumi.OutputState
}

func (ArtifactsRepositoryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ArtifactsRepository)(nil))
}

func (o ArtifactsRepositoryOutput) ToArtifactsRepositoryOutput() ArtifactsRepositoryOutput {
	return o
}

func (o ArtifactsRepositoryOutput) ToArtifactsRepositoryOutputWithContext(ctx context.Context) ArtifactsRepositoryOutput {
	return o
}

func (o ArtifactsRepositoryOutput) ToArtifactsRepositoryPtrOutput() ArtifactsRepositoryPtrOutput {
	return o.ToArtifactsRepositoryPtrOutputWithContext(context.Background())
}

func (o ArtifactsRepositoryOutput) ToArtifactsRepositoryPtrOutputWithContext(ctx context.Context) ArtifactsRepositoryPtrOutput {
	return o.ApplyT(func(v ArtifactsRepository) *ArtifactsRepository {
		return &v
	}).(ArtifactsRepositoryPtrOutput)
}

type ArtifactsRepositoryPtrOutput struct {
	*pulumi.OutputState
}

func (ArtifactsRepositoryPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ArtifactsRepository)(nil))
}

func (o ArtifactsRepositoryPtrOutput) ToArtifactsRepositoryPtrOutput() ArtifactsRepositoryPtrOutput {
	return o
}

func (o ArtifactsRepositoryPtrOutput) ToArtifactsRepositoryPtrOutputWithContext(ctx context.Context) ArtifactsRepositoryPtrOutput {
	return o
}

type ArtifactsRepositoryArrayOutput struct{ *pulumi.OutputState }

func (ArtifactsRepositoryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ArtifactsRepository)(nil))
}

func (o ArtifactsRepositoryArrayOutput) ToArtifactsRepositoryArrayOutput() ArtifactsRepositoryArrayOutput {
	return o
}

func (o ArtifactsRepositoryArrayOutput) ToArtifactsRepositoryArrayOutputWithContext(ctx context.Context) ArtifactsRepositoryArrayOutput {
	return o
}

func (o ArtifactsRepositoryArrayOutput) Index(i pulumi.IntInput) ArtifactsRepositoryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ArtifactsRepository {
		return vs[0].([]ArtifactsRepository)[vs[1].(int)]
	}).(ArtifactsRepositoryOutput)
}

type ArtifactsRepositoryMapOutput struct{ *pulumi.OutputState }

func (ArtifactsRepositoryMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]ArtifactsRepository)(nil))
}

func (o ArtifactsRepositoryMapOutput) ToArtifactsRepositoryMapOutput() ArtifactsRepositoryMapOutput {
	return o
}

func (o ArtifactsRepositoryMapOutput) ToArtifactsRepositoryMapOutputWithContext(ctx context.Context) ArtifactsRepositoryMapOutput {
	return o
}

func (o ArtifactsRepositoryMapOutput) MapIndex(k pulumi.StringInput) ArtifactsRepositoryOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) ArtifactsRepository {
		return vs[0].(map[string]ArtifactsRepository)[vs[1].(string)]
	}).(ArtifactsRepositoryOutput)
}

func init() {
	pulumi.RegisterOutputType(ArtifactsRepositoryOutput{})
	pulumi.RegisterOutputType(ArtifactsRepositoryPtrOutput{})
	pulumi.RegisterOutputType(ArtifactsRepositoryArrayOutput{})
	pulumi.RegisterOutputType(ArtifactsRepositoryMapOutput{})
}
