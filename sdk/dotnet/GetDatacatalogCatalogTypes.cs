// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci
{
    public static class GetDatacatalogCatalogTypes
    {
        /// <summary>
        /// This data source provides the list of Catalog Types in Oracle Cloud Infrastructure Data Catalog service.
        /// 
        /// Returns a list of all types within a data catalog.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var testCatalogTypes = Output.Create(Oci.GetDatacatalogCatalogTypes.InvokeAsync(new Oci.GetDatacatalogCatalogTypesArgs
        ///         {
        ///             CatalogId = oci_datacatalog_catalog.Test_catalog.Id,
        ///             ExternalTypeName = @var.Catalog_type_external_type_name,
        ///             Fields = @var.Catalog_type_fields,
        ///             IsApproved = @var.Catalog_type_is_approved,
        ///             IsInternal = @var.Catalog_type_is_internal,
        ///             IsTag = @var.Catalog_type_is_tag,
        ///             Name = @var.Catalog_type_name,
        ///             State = @var.Catalog_type_state,
        ///             TypeCategory = @var.Catalog_type_type_category,
        ///         }));
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetDatacatalogCatalogTypesResult> InvokeAsync(GetDatacatalogCatalogTypesArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetDatacatalogCatalogTypesResult>("oci:index/getDatacatalogCatalogTypes:GetDatacatalogCatalogTypes", args ?? new GetDatacatalogCatalogTypesArgs(), options.WithVersion());
    }


    public sealed class GetDatacatalogCatalogTypesArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// Unique catalog identifier.
        /// </summary>
        [Input("catalogId", required: true)]
        public string CatalogId { get; set; } = null!;

        /// <summary>
        /// Data type as defined in an external system.
        /// </summary>
        [Input("externalTypeName")]
        public string? ExternalTypeName { get; set; }

        [Input("fields")]
        private List<string>? _fields;

        /// <summary>
        /// Specifies the fields to return in a type summary response.
        /// </summary>
        public List<string> Fields
        {
            get => _fields ?? (_fields = new List<string>());
            set => _fields = value;
        }

        [Input("filters")]
        private List<Inputs.GetDatacatalogCatalogTypesFilterArgs>? _filters;
        public List<Inputs.GetDatacatalogCatalogTypesFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetDatacatalogCatalogTypesFilterArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// Indicates whether the type is approved for use as a classifying object.
        /// </summary>
        [Input("isApproved")]
        public string? IsApproved { get; set; }

        /// <summary>
        /// Indicates whether the type is internal, making it unavailable for use by metadata elements.
        /// </summary>
        [Input("isInternal")]
        public string? IsInternal { get; set; }

        /// <summary>
        /// Indicates whether the type can be used for tagging metadata elements.
        /// </summary>
        [Input("isTag")]
        public string? IsTag { get; set; }

        /// <summary>
        /// Immutable resource name.
        /// </summary>
        [Input("name")]
        public string? Name { get; set; }

        /// <summary>
        /// A filter to return only resources that match the specified lifecycle state. The value is case insensitive.
        /// </summary>
        [Input("state")]
        public string? State { get; set; }

        /// <summary>
        /// Indicates the category of this type . For example, data assets or connections.
        /// </summary>
        [Input("typeCategory")]
        public string? TypeCategory { get; set; }

        public GetDatacatalogCatalogTypesArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetDatacatalogCatalogTypesResult
    {
        /// <summary>
        /// The data catalog's OCID.
        /// </summary>
        public readonly string CatalogId;
        /// <summary>
        /// Mapping type equivalence in the external system.
        /// </summary>
        public readonly string? ExternalTypeName;
        public readonly ImmutableArray<string> Fields;
        public readonly ImmutableArray<Outputs.GetDatacatalogCatalogTypesFilterResult> Filters;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Indicates whether the type is approved for use as a classifying object.
        /// </summary>
        public readonly string? IsApproved;
        /// <summary>
        /// Indicates whether the type is internal, making it unavailable for use by metadata elements.
        /// </summary>
        public readonly string? IsInternal;
        /// <summary>
        /// Indicates whether the type can be used for tagging metadata elements.
        /// </summary>
        public readonly string? IsTag;
        /// <summary>
        /// The immutable name of the type.
        /// </summary>
        public readonly string? Name;
        /// <summary>
        /// The current state of the type.
        /// </summary>
        public readonly string? State;
        /// <summary>
        /// Indicates the category this type belongs to. For instance, data assets, connections.
        /// </summary>
        public readonly string? TypeCategory;
        /// <summary>
        /// The list of type_collection.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetDatacatalogCatalogTypesTypeCollectionResult> TypeCollections;

        [OutputConstructor]
        private GetDatacatalogCatalogTypesResult(
            string catalogId,

            string? externalTypeName,

            ImmutableArray<string> fields,

            ImmutableArray<Outputs.GetDatacatalogCatalogTypesFilterResult> filters,

            string id,

            string? isApproved,

            string? isInternal,

            string? isTag,

            string? name,

            string? state,

            string? typeCategory,

            ImmutableArray<Outputs.GetDatacatalogCatalogTypesTypeCollectionResult> typeCollections)
        {
            CatalogId = catalogId;
            ExternalTypeName = externalTypeName;
            Fields = fields;
            Filters = filters;
            Id = id;
            IsApproved = isApproved;
            IsInternal = isInternal;
            IsTag = isTag;
            Name = name;
            State = state;
            TypeCategory = typeCategory;
            TypeCollections = typeCollections;
        }
    }
}
