// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package oci

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource provides the Steering Policy Attachment resource in Oracle Cloud Infrastructure DNS service.
//
// Creates a new attachment between a steering policy and a domain, giving the
// policy permission to answer queries for the specified domain. A steering policy must
// be attached to a domain for the policy to answer DNS queries for that domain.
//
// For the purposes of access control, the attachment is automatically placed
// into the same compartment as the domain's zone.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-oci/sdk/go/oci"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := oci.NewDnsSteeringPolicyAttachment(ctx, "testSteeringPolicyAttachment", &oci.DnsSteeringPolicyAttachmentArgs{
// 			DomainName:       pulumi.Any(_var.Steering_policy_attachment_domain_name),
// 			SteeringPolicyId: pulumi.Any(oci_dns_steering_policy.Test_steering_policy.Id),
// 			ZoneId:           pulumi.Any(oci_dns_zone.Test_zone.Id),
// 			DisplayName:      pulumi.Any(_var.Steering_policy_attachment_display_name),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// SteeringPolicyAttachments can be imported using the `id`, e.g.
//
// ```sh
//  $ pulumi import oci:index/dnsSteeringPolicyAttachment:DnsSteeringPolicyAttachment test_steering_policy_attachment "id"
// ```
type DnsSteeringPolicyAttachment struct {
	pulumi.CustomResourceState

	// The OCID of the compartment containing the steering policy attachment.
	CompartmentId pulumi.StringOutput `pulumi:"compartmentId"`
	// (Updatable) A user-friendly name for the steering policy attachment. Does not have to be unique and can be changed. Avoid entering confidential information.
	DisplayName pulumi.StringOutput `pulumi:"displayName"`
	// The attached domain within the attached zone. `domainName` is case insensitive.
	DomainName pulumi.StringOutput `pulumi:"domainName"`
	// The record types covered by the attachment at the domain. The set of record types is determined by aggregating the record types from the answers defined in the steering policy.
	Rtypes pulumi.StringArrayOutput `pulumi:"rtypes"`
	// The canonical absolute URL of the resource.
	Self pulumi.StringOutput `pulumi:"self"`
	// The current state of the resource.
	State pulumi.StringOutput `pulumi:"state"`
	// The OCID of the attached steering policy.
	SteeringPolicyId pulumi.StringOutput `pulumi:"steeringPolicyId"`
	// The date and time the resource was created, expressed in RFC 3339 timestamp format.
	TimeCreated pulumi.StringOutput `pulumi:"timeCreated"`
	// The OCID of the attached zone.
	ZoneId pulumi.StringOutput `pulumi:"zoneId"`
}

// NewDnsSteeringPolicyAttachment registers a new resource with the given unique name, arguments, and options.
func NewDnsSteeringPolicyAttachment(ctx *pulumi.Context,
	name string, args *DnsSteeringPolicyAttachmentArgs, opts ...pulumi.ResourceOption) (*DnsSteeringPolicyAttachment, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DomainName == nil {
		return nil, errors.New("invalid value for required argument 'DomainName'")
	}
	if args.SteeringPolicyId == nil {
		return nil, errors.New("invalid value for required argument 'SteeringPolicyId'")
	}
	if args.ZoneId == nil {
		return nil, errors.New("invalid value for required argument 'ZoneId'")
	}
	var resource DnsSteeringPolicyAttachment
	err := ctx.RegisterResource("oci:index/dnsSteeringPolicyAttachment:DnsSteeringPolicyAttachment", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDnsSteeringPolicyAttachment gets an existing DnsSteeringPolicyAttachment resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDnsSteeringPolicyAttachment(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DnsSteeringPolicyAttachmentState, opts ...pulumi.ResourceOption) (*DnsSteeringPolicyAttachment, error) {
	var resource DnsSteeringPolicyAttachment
	err := ctx.ReadResource("oci:index/dnsSteeringPolicyAttachment:DnsSteeringPolicyAttachment", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DnsSteeringPolicyAttachment resources.
type dnsSteeringPolicyAttachmentState struct {
	// The OCID of the compartment containing the steering policy attachment.
	CompartmentId *string `pulumi:"compartmentId"`
	// (Updatable) A user-friendly name for the steering policy attachment. Does not have to be unique and can be changed. Avoid entering confidential information.
	DisplayName *string `pulumi:"displayName"`
	// The attached domain within the attached zone. `domainName` is case insensitive.
	DomainName *string `pulumi:"domainName"`
	// The record types covered by the attachment at the domain. The set of record types is determined by aggregating the record types from the answers defined in the steering policy.
	Rtypes []string `pulumi:"rtypes"`
	// The canonical absolute URL of the resource.
	Self *string `pulumi:"self"`
	// The current state of the resource.
	State *string `pulumi:"state"`
	// The OCID of the attached steering policy.
	SteeringPolicyId *string `pulumi:"steeringPolicyId"`
	// The date and time the resource was created, expressed in RFC 3339 timestamp format.
	TimeCreated *string `pulumi:"timeCreated"`
	// The OCID of the attached zone.
	ZoneId *string `pulumi:"zoneId"`
}

type DnsSteeringPolicyAttachmentState struct {
	// The OCID of the compartment containing the steering policy attachment.
	CompartmentId pulumi.StringPtrInput
	// (Updatable) A user-friendly name for the steering policy attachment. Does not have to be unique and can be changed. Avoid entering confidential information.
	DisplayName pulumi.StringPtrInput
	// The attached domain within the attached zone. `domainName` is case insensitive.
	DomainName pulumi.StringPtrInput
	// The record types covered by the attachment at the domain. The set of record types is determined by aggregating the record types from the answers defined in the steering policy.
	Rtypes pulumi.StringArrayInput
	// The canonical absolute URL of the resource.
	Self pulumi.StringPtrInput
	// The current state of the resource.
	State pulumi.StringPtrInput
	// The OCID of the attached steering policy.
	SteeringPolicyId pulumi.StringPtrInput
	// The date and time the resource was created, expressed in RFC 3339 timestamp format.
	TimeCreated pulumi.StringPtrInput
	// The OCID of the attached zone.
	ZoneId pulumi.StringPtrInput
}

func (DnsSteeringPolicyAttachmentState) ElementType() reflect.Type {
	return reflect.TypeOf((*dnsSteeringPolicyAttachmentState)(nil)).Elem()
}

type dnsSteeringPolicyAttachmentArgs struct {
	// (Updatable) A user-friendly name for the steering policy attachment. Does not have to be unique and can be changed. Avoid entering confidential information.
	DisplayName *string `pulumi:"displayName"`
	// The attached domain within the attached zone. `domainName` is case insensitive.
	DomainName string `pulumi:"domainName"`
	// The OCID of the attached steering policy.
	SteeringPolicyId string `pulumi:"steeringPolicyId"`
	// The OCID of the attached zone.
	ZoneId string `pulumi:"zoneId"`
}

// The set of arguments for constructing a DnsSteeringPolicyAttachment resource.
type DnsSteeringPolicyAttachmentArgs struct {
	// (Updatable) A user-friendly name for the steering policy attachment. Does not have to be unique and can be changed. Avoid entering confidential information.
	DisplayName pulumi.StringPtrInput
	// The attached domain within the attached zone. `domainName` is case insensitive.
	DomainName pulumi.StringInput
	// The OCID of the attached steering policy.
	SteeringPolicyId pulumi.StringInput
	// The OCID of the attached zone.
	ZoneId pulumi.StringInput
}

func (DnsSteeringPolicyAttachmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*dnsSteeringPolicyAttachmentArgs)(nil)).Elem()
}

type DnsSteeringPolicyAttachmentInput interface {
	pulumi.Input

	ToDnsSteeringPolicyAttachmentOutput() DnsSteeringPolicyAttachmentOutput
	ToDnsSteeringPolicyAttachmentOutputWithContext(ctx context.Context) DnsSteeringPolicyAttachmentOutput
}

func (*DnsSteeringPolicyAttachment) ElementType() reflect.Type {
	return reflect.TypeOf((*DnsSteeringPolicyAttachment)(nil))
}

func (i *DnsSteeringPolicyAttachment) ToDnsSteeringPolicyAttachmentOutput() DnsSteeringPolicyAttachmentOutput {
	return i.ToDnsSteeringPolicyAttachmentOutputWithContext(context.Background())
}

func (i *DnsSteeringPolicyAttachment) ToDnsSteeringPolicyAttachmentOutputWithContext(ctx context.Context) DnsSteeringPolicyAttachmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DnsSteeringPolicyAttachmentOutput)
}

func (i *DnsSteeringPolicyAttachment) ToDnsSteeringPolicyAttachmentPtrOutput() DnsSteeringPolicyAttachmentPtrOutput {
	return i.ToDnsSteeringPolicyAttachmentPtrOutputWithContext(context.Background())
}

func (i *DnsSteeringPolicyAttachment) ToDnsSteeringPolicyAttachmentPtrOutputWithContext(ctx context.Context) DnsSteeringPolicyAttachmentPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DnsSteeringPolicyAttachmentPtrOutput)
}

type DnsSteeringPolicyAttachmentPtrInput interface {
	pulumi.Input

	ToDnsSteeringPolicyAttachmentPtrOutput() DnsSteeringPolicyAttachmentPtrOutput
	ToDnsSteeringPolicyAttachmentPtrOutputWithContext(ctx context.Context) DnsSteeringPolicyAttachmentPtrOutput
}

type dnsSteeringPolicyAttachmentPtrType DnsSteeringPolicyAttachmentArgs

func (*dnsSteeringPolicyAttachmentPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DnsSteeringPolicyAttachment)(nil))
}

func (i *dnsSteeringPolicyAttachmentPtrType) ToDnsSteeringPolicyAttachmentPtrOutput() DnsSteeringPolicyAttachmentPtrOutput {
	return i.ToDnsSteeringPolicyAttachmentPtrOutputWithContext(context.Background())
}

func (i *dnsSteeringPolicyAttachmentPtrType) ToDnsSteeringPolicyAttachmentPtrOutputWithContext(ctx context.Context) DnsSteeringPolicyAttachmentPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DnsSteeringPolicyAttachmentPtrOutput)
}

// DnsSteeringPolicyAttachmentArrayInput is an input type that accepts DnsSteeringPolicyAttachmentArray and DnsSteeringPolicyAttachmentArrayOutput values.
// You can construct a concrete instance of `DnsSteeringPolicyAttachmentArrayInput` via:
//
//          DnsSteeringPolicyAttachmentArray{ DnsSteeringPolicyAttachmentArgs{...} }
type DnsSteeringPolicyAttachmentArrayInput interface {
	pulumi.Input

	ToDnsSteeringPolicyAttachmentArrayOutput() DnsSteeringPolicyAttachmentArrayOutput
	ToDnsSteeringPolicyAttachmentArrayOutputWithContext(context.Context) DnsSteeringPolicyAttachmentArrayOutput
}

type DnsSteeringPolicyAttachmentArray []DnsSteeringPolicyAttachmentInput

func (DnsSteeringPolicyAttachmentArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DnsSteeringPolicyAttachment)(nil)).Elem()
}

func (i DnsSteeringPolicyAttachmentArray) ToDnsSteeringPolicyAttachmentArrayOutput() DnsSteeringPolicyAttachmentArrayOutput {
	return i.ToDnsSteeringPolicyAttachmentArrayOutputWithContext(context.Background())
}

func (i DnsSteeringPolicyAttachmentArray) ToDnsSteeringPolicyAttachmentArrayOutputWithContext(ctx context.Context) DnsSteeringPolicyAttachmentArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DnsSteeringPolicyAttachmentArrayOutput)
}

// DnsSteeringPolicyAttachmentMapInput is an input type that accepts DnsSteeringPolicyAttachmentMap and DnsSteeringPolicyAttachmentMapOutput values.
// You can construct a concrete instance of `DnsSteeringPolicyAttachmentMapInput` via:
//
//          DnsSteeringPolicyAttachmentMap{ "key": DnsSteeringPolicyAttachmentArgs{...} }
type DnsSteeringPolicyAttachmentMapInput interface {
	pulumi.Input

	ToDnsSteeringPolicyAttachmentMapOutput() DnsSteeringPolicyAttachmentMapOutput
	ToDnsSteeringPolicyAttachmentMapOutputWithContext(context.Context) DnsSteeringPolicyAttachmentMapOutput
}

type DnsSteeringPolicyAttachmentMap map[string]DnsSteeringPolicyAttachmentInput

func (DnsSteeringPolicyAttachmentMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DnsSteeringPolicyAttachment)(nil)).Elem()
}

func (i DnsSteeringPolicyAttachmentMap) ToDnsSteeringPolicyAttachmentMapOutput() DnsSteeringPolicyAttachmentMapOutput {
	return i.ToDnsSteeringPolicyAttachmentMapOutputWithContext(context.Background())
}

func (i DnsSteeringPolicyAttachmentMap) ToDnsSteeringPolicyAttachmentMapOutputWithContext(ctx context.Context) DnsSteeringPolicyAttachmentMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DnsSteeringPolicyAttachmentMapOutput)
}

type DnsSteeringPolicyAttachmentOutput struct {
	*pulumi.OutputState
}

func (DnsSteeringPolicyAttachmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DnsSteeringPolicyAttachment)(nil))
}

func (o DnsSteeringPolicyAttachmentOutput) ToDnsSteeringPolicyAttachmentOutput() DnsSteeringPolicyAttachmentOutput {
	return o
}

func (o DnsSteeringPolicyAttachmentOutput) ToDnsSteeringPolicyAttachmentOutputWithContext(ctx context.Context) DnsSteeringPolicyAttachmentOutput {
	return o
}

func (o DnsSteeringPolicyAttachmentOutput) ToDnsSteeringPolicyAttachmentPtrOutput() DnsSteeringPolicyAttachmentPtrOutput {
	return o.ToDnsSteeringPolicyAttachmentPtrOutputWithContext(context.Background())
}

func (o DnsSteeringPolicyAttachmentOutput) ToDnsSteeringPolicyAttachmentPtrOutputWithContext(ctx context.Context) DnsSteeringPolicyAttachmentPtrOutput {
	return o.ApplyT(func(v DnsSteeringPolicyAttachment) *DnsSteeringPolicyAttachment {
		return &v
	}).(DnsSteeringPolicyAttachmentPtrOutput)
}

type DnsSteeringPolicyAttachmentPtrOutput struct {
	*pulumi.OutputState
}

func (DnsSteeringPolicyAttachmentPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DnsSteeringPolicyAttachment)(nil))
}

func (o DnsSteeringPolicyAttachmentPtrOutput) ToDnsSteeringPolicyAttachmentPtrOutput() DnsSteeringPolicyAttachmentPtrOutput {
	return o
}

func (o DnsSteeringPolicyAttachmentPtrOutput) ToDnsSteeringPolicyAttachmentPtrOutputWithContext(ctx context.Context) DnsSteeringPolicyAttachmentPtrOutput {
	return o
}

type DnsSteeringPolicyAttachmentArrayOutput struct{ *pulumi.OutputState }

func (DnsSteeringPolicyAttachmentArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DnsSteeringPolicyAttachment)(nil))
}

func (o DnsSteeringPolicyAttachmentArrayOutput) ToDnsSteeringPolicyAttachmentArrayOutput() DnsSteeringPolicyAttachmentArrayOutput {
	return o
}

func (o DnsSteeringPolicyAttachmentArrayOutput) ToDnsSteeringPolicyAttachmentArrayOutputWithContext(ctx context.Context) DnsSteeringPolicyAttachmentArrayOutput {
	return o
}

func (o DnsSteeringPolicyAttachmentArrayOutput) Index(i pulumi.IntInput) DnsSteeringPolicyAttachmentOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DnsSteeringPolicyAttachment {
		return vs[0].([]DnsSteeringPolicyAttachment)[vs[1].(int)]
	}).(DnsSteeringPolicyAttachmentOutput)
}

type DnsSteeringPolicyAttachmentMapOutput struct{ *pulumi.OutputState }

func (DnsSteeringPolicyAttachmentMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]DnsSteeringPolicyAttachment)(nil))
}

func (o DnsSteeringPolicyAttachmentMapOutput) ToDnsSteeringPolicyAttachmentMapOutput() DnsSteeringPolicyAttachmentMapOutput {
	return o
}

func (o DnsSteeringPolicyAttachmentMapOutput) ToDnsSteeringPolicyAttachmentMapOutputWithContext(ctx context.Context) DnsSteeringPolicyAttachmentMapOutput {
	return o
}

func (o DnsSteeringPolicyAttachmentMapOutput) MapIndex(k pulumi.StringInput) DnsSteeringPolicyAttachmentOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) DnsSteeringPolicyAttachment {
		return vs[0].(map[string]DnsSteeringPolicyAttachment)[vs[1].(string)]
	}).(DnsSteeringPolicyAttachmentOutput)
}

func init() {
	pulumi.RegisterOutputType(DnsSteeringPolicyAttachmentOutput{})
	pulumi.RegisterOutputType(DnsSteeringPolicyAttachmentPtrOutput{})
	pulumi.RegisterOutputType(DnsSteeringPolicyAttachmentArrayOutput{})
	pulumi.RegisterOutputType(DnsSteeringPolicyAttachmentMapOutput{})
}
