// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package oci

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource provides the Dynamic Group resource in Oracle Cloud Infrastructure Identity service.
//
// Creates a new dynamic group in your tenancy.
//
// You must specify your tenancy's OCID as the compartment ID in the request object (remember that the tenancy
// is simply the root compartment). Notice that IAM resources (users, groups, compartments, and some policies)
// reside within the tenancy itself, unlike cloud resources such as compute instances, which typically
// reside within compartments inside the tenancy. For information about OCIDs, see
// [Resource Identifiers](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
//
// You must also specify a *name* for the dynamic group, which must be unique across all dynamic groups in your
// tenancy, and cannot be changed. Note that this name has to be also unique across all groups in your tenancy.
// You can use this name or the OCID when writing policies that apply to the dynamic group. For more information
// about policies, see [How Policies Work](https://docs.cloud.oracle.com/iaas/Content/Identity/Concepts/policies.htm).
//
// You must also specify a *description* for the dynamic group (although it can be an empty string). It does not
// have to be unique, and you can change it anytime with [UpdateDynamicGroup](https://docs.cloud.oracle.com/iaas/api/#/en/identity/20160918/DynamicGroup/UpdateDynamicGroup).
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-oci/sdk/go/oci"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := oci.NewIdentityDynamicGroup(ctx, "testDynamicGroup", &oci.IdentityDynamicGroupArgs{
// 			CompartmentId: pulumi.Any(_var.Tenancy_ocid),
// 			Description:   pulumi.Any(_var.Dynamic_group_description),
// 			MatchingRule:  pulumi.Any(_var.Dynamic_group_matching_rule),
// 			DefinedTags: pulumi.AnyMap{
// 				"Operations.CostCenter": pulumi.Any("42"),
// 			},
// 			FreeformTags: pulumi.AnyMap{
// 				"Department": pulumi.Any("Finance"),
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// DynamicGroups can be imported using the `id`, e.g.
//
// ```sh
//  $ pulumi import oci:index/identityDynamicGroup:IdentityDynamicGroup test_dynamic_group "id"
// ```
type IdentityDynamicGroup struct {
	pulumi.CustomResourceState

	// The OCID of the tenancy containing the group.
	CompartmentId pulumi.StringOutput `pulumi:"compartmentId"`
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Operations.CostCenter": "42"}`
	DefinedTags pulumi.MapOutput `pulumi:"definedTags"`
	// (Updatable) The description you assign to the group during creation. Does not have to be unique, and it's changeable.
	Description pulumi.StringOutput `pulumi:"description"`
	// (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Department": "Finance"}`
	FreeformTags pulumi.MapOutput `pulumi:"freeformTags"`
	// The detailed status of INACTIVE lifecycleState.
	InactiveState pulumi.StringOutput `pulumi:"inactiveState"`
	// (Updatable) The matching rule to dynamically match an instance certificate to this dynamic group. For rule syntax, see [Managing Dynamic Groups](https://docs.cloud.oracle.com/iaas/Content/Identity/Tasks/managingdynamicgroups.htm).
	MatchingRule pulumi.StringOutput `pulumi:"matchingRule"`
	// The name you assign to the group during creation. The name must be unique across all groups in the tenancy and cannot be changed.
	Name pulumi.StringOutput `pulumi:"name"`
	// The group's current state.
	State pulumi.StringOutput `pulumi:"state"`
	// Date and time the group was created, in the format defined by RFC3339.  Example: `2016-08-25T21:10:29.600Z`
	TimeCreated pulumi.StringOutput `pulumi:"timeCreated"`
}

// NewIdentityDynamicGroup registers a new resource with the given unique name, arguments, and options.
func NewIdentityDynamicGroup(ctx *pulumi.Context,
	name string, args *IdentityDynamicGroupArgs, opts ...pulumi.ResourceOption) (*IdentityDynamicGroup, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CompartmentId == nil {
		return nil, errors.New("invalid value for required argument 'CompartmentId'")
	}
	if args.Description == nil {
		return nil, errors.New("invalid value for required argument 'Description'")
	}
	if args.MatchingRule == nil {
		return nil, errors.New("invalid value for required argument 'MatchingRule'")
	}
	var resource IdentityDynamicGroup
	err := ctx.RegisterResource("oci:index/identityDynamicGroup:IdentityDynamicGroup", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIdentityDynamicGroup gets an existing IdentityDynamicGroup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIdentityDynamicGroup(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *IdentityDynamicGroupState, opts ...pulumi.ResourceOption) (*IdentityDynamicGroup, error) {
	var resource IdentityDynamicGroup
	err := ctx.ReadResource("oci:index/identityDynamicGroup:IdentityDynamicGroup", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering IdentityDynamicGroup resources.
type identityDynamicGroupState struct {
	// The OCID of the tenancy containing the group.
	CompartmentId *string `pulumi:"compartmentId"`
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Operations.CostCenter": "42"}`
	DefinedTags map[string]interface{} `pulumi:"definedTags"`
	// (Updatable) The description you assign to the group during creation. Does not have to be unique, and it's changeable.
	Description *string `pulumi:"description"`
	// (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Department": "Finance"}`
	FreeformTags map[string]interface{} `pulumi:"freeformTags"`
	// The detailed status of INACTIVE lifecycleState.
	InactiveState *string `pulumi:"inactiveState"`
	// (Updatable) The matching rule to dynamically match an instance certificate to this dynamic group. For rule syntax, see [Managing Dynamic Groups](https://docs.cloud.oracle.com/iaas/Content/Identity/Tasks/managingdynamicgroups.htm).
	MatchingRule *string `pulumi:"matchingRule"`
	// The name you assign to the group during creation. The name must be unique across all groups in the tenancy and cannot be changed.
	Name *string `pulumi:"name"`
	// The group's current state.
	State *string `pulumi:"state"`
	// Date and time the group was created, in the format defined by RFC3339.  Example: `2016-08-25T21:10:29.600Z`
	TimeCreated *string `pulumi:"timeCreated"`
}

type IdentityDynamicGroupState struct {
	// The OCID of the tenancy containing the group.
	CompartmentId pulumi.StringPtrInput
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Operations.CostCenter": "42"}`
	DefinedTags pulumi.MapInput
	// (Updatable) The description you assign to the group during creation. Does not have to be unique, and it's changeable.
	Description pulumi.StringPtrInput
	// (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Department": "Finance"}`
	FreeformTags pulumi.MapInput
	// The detailed status of INACTIVE lifecycleState.
	InactiveState pulumi.StringPtrInput
	// (Updatable) The matching rule to dynamically match an instance certificate to this dynamic group. For rule syntax, see [Managing Dynamic Groups](https://docs.cloud.oracle.com/iaas/Content/Identity/Tasks/managingdynamicgroups.htm).
	MatchingRule pulumi.StringPtrInput
	// The name you assign to the group during creation. The name must be unique across all groups in the tenancy and cannot be changed.
	Name pulumi.StringPtrInput
	// The group's current state.
	State pulumi.StringPtrInput
	// Date and time the group was created, in the format defined by RFC3339.  Example: `2016-08-25T21:10:29.600Z`
	TimeCreated pulumi.StringPtrInput
}

func (IdentityDynamicGroupState) ElementType() reflect.Type {
	return reflect.TypeOf((*identityDynamicGroupState)(nil)).Elem()
}

type identityDynamicGroupArgs struct {
	// The OCID of the tenancy containing the group.
	CompartmentId string `pulumi:"compartmentId"`
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Operations.CostCenter": "42"}`
	DefinedTags map[string]interface{} `pulumi:"definedTags"`
	// (Updatable) The description you assign to the group during creation. Does not have to be unique, and it's changeable.
	Description string `pulumi:"description"`
	// (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Department": "Finance"}`
	FreeformTags map[string]interface{} `pulumi:"freeformTags"`
	// (Updatable) The matching rule to dynamically match an instance certificate to this dynamic group. For rule syntax, see [Managing Dynamic Groups](https://docs.cloud.oracle.com/iaas/Content/Identity/Tasks/managingdynamicgroups.htm).
	MatchingRule string `pulumi:"matchingRule"`
	// The name you assign to the group during creation. The name must be unique across all groups in the tenancy and cannot be changed.
	Name *string `pulumi:"name"`
}

// The set of arguments for constructing a IdentityDynamicGroup resource.
type IdentityDynamicGroupArgs struct {
	// The OCID of the tenancy containing the group.
	CompartmentId pulumi.StringInput
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Operations.CostCenter": "42"}`
	DefinedTags pulumi.MapInput
	// (Updatable) The description you assign to the group during creation. Does not have to be unique, and it's changeable.
	Description pulumi.StringInput
	// (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Department": "Finance"}`
	FreeformTags pulumi.MapInput
	// (Updatable) The matching rule to dynamically match an instance certificate to this dynamic group. For rule syntax, see [Managing Dynamic Groups](https://docs.cloud.oracle.com/iaas/Content/Identity/Tasks/managingdynamicgroups.htm).
	MatchingRule pulumi.StringInput
	// The name you assign to the group during creation. The name must be unique across all groups in the tenancy and cannot be changed.
	Name pulumi.StringPtrInput
}

func (IdentityDynamicGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*identityDynamicGroupArgs)(nil)).Elem()
}

type IdentityDynamicGroupInput interface {
	pulumi.Input

	ToIdentityDynamicGroupOutput() IdentityDynamicGroupOutput
	ToIdentityDynamicGroupOutputWithContext(ctx context.Context) IdentityDynamicGroupOutput
}

func (*IdentityDynamicGroup) ElementType() reflect.Type {
	return reflect.TypeOf((*IdentityDynamicGroup)(nil))
}

func (i *IdentityDynamicGroup) ToIdentityDynamicGroupOutput() IdentityDynamicGroupOutput {
	return i.ToIdentityDynamicGroupOutputWithContext(context.Background())
}

func (i *IdentityDynamicGroup) ToIdentityDynamicGroupOutputWithContext(ctx context.Context) IdentityDynamicGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdentityDynamicGroupOutput)
}

func (i *IdentityDynamicGroup) ToIdentityDynamicGroupPtrOutput() IdentityDynamicGroupPtrOutput {
	return i.ToIdentityDynamicGroupPtrOutputWithContext(context.Background())
}

func (i *IdentityDynamicGroup) ToIdentityDynamicGroupPtrOutputWithContext(ctx context.Context) IdentityDynamicGroupPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdentityDynamicGroupPtrOutput)
}

type IdentityDynamicGroupPtrInput interface {
	pulumi.Input

	ToIdentityDynamicGroupPtrOutput() IdentityDynamicGroupPtrOutput
	ToIdentityDynamicGroupPtrOutputWithContext(ctx context.Context) IdentityDynamicGroupPtrOutput
}

type identityDynamicGroupPtrType IdentityDynamicGroupArgs

func (*identityDynamicGroupPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**IdentityDynamicGroup)(nil))
}

func (i *identityDynamicGroupPtrType) ToIdentityDynamicGroupPtrOutput() IdentityDynamicGroupPtrOutput {
	return i.ToIdentityDynamicGroupPtrOutputWithContext(context.Background())
}

func (i *identityDynamicGroupPtrType) ToIdentityDynamicGroupPtrOutputWithContext(ctx context.Context) IdentityDynamicGroupPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdentityDynamicGroupPtrOutput)
}

// IdentityDynamicGroupArrayInput is an input type that accepts IdentityDynamicGroupArray and IdentityDynamicGroupArrayOutput values.
// You can construct a concrete instance of `IdentityDynamicGroupArrayInput` via:
//
//          IdentityDynamicGroupArray{ IdentityDynamicGroupArgs{...} }
type IdentityDynamicGroupArrayInput interface {
	pulumi.Input

	ToIdentityDynamicGroupArrayOutput() IdentityDynamicGroupArrayOutput
	ToIdentityDynamicGroupArrayOutputWithContext(context.Context) IdentityDynamicGroupArrayOutput
}

type IdentityDynamicGroupArray []IdentityDynamicGroupInput

func (IdentityDynamicGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IdentityDynamicGroup)(nil)).Elem()
}

func (i IdentityDynamicGroupArray) ToIdentityDynamicGroupArrayOutput() IdentityDynamicGroupArrayOutput {
	return i.ToIdentityDynamicGroupArrayOutputWithContext(context.Background())
}

func (i IdentityDynamicGroupArray) ToIdentityDynamicGroupArrayOutputWithContext(ctx context.Context) IdentityDynamicGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdentityDynamicGroupArrayOutput)
}

// IdentityDynamicGroupMapInput is an input type that accepts IdentityDynamicGroupMap and IdentityDynamicGroupMapOutput values.
// You can construct a concrete instance of `IdentityDynamicGroupMapInput` via:
//
//          IdentityDynamicGroupMap{ "key": IdentityDynamicGroupArgs{...} }
type IdentityDynamicGroupMapInput interface {
	pulumi.Input

	ToIdentityDynamicGroupMapOutput() IdentityDynamicGroupMapOutput
	ToIdentityDynamicGroupMapOutputWithContext(context.Context) IdentityDynamicGroupMapOutput
}

type IdentityDynamicGroupMap map[string]IdentityDynamicGroupInput

func (IdentityDynamicGroupMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IdentityDynamicGroup)(nil)).Elem()
}

func (i IdentityDynamicGroupMap) ToIdentityDynamicGroupMapOutput() IdentityDynamicGroupMapOutput {
	return i.ToIdentityDynamicGroupMapOutputWithContext(context.Background())
}

func (i IdentityDynamicGroupMap) ToIdentityDynamicGroupMapOutputWithContext(ctx context.Context) IdentityDynamicGroupMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdentityDynamicGroupMapOutput)
}

type IdentityDynamicGroupOutput struct {
	*pulumi.OutputState
}

func (IdentityDynamicGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IdentityDynamicGroup)(nil))
}

func (o IdentityDynamicGroupOutput) ToIdentityDynamicGroupOutput() IdentityDynamicGroupOutput {
	return o
}

func (o IdentityDynamicGroupOutput) ToIdentityDynamicGroupOutputWithContext(ctx context.Context) IdentityDynamicGroupOutput {
	return o
}

func (o IdentityDynamicGroupOutput) ToIdentityDynamicGroupPtrOutput() IdentityDynamicGroupPtrOutput {
	return o.ToIdentityDynamicGroupPtrOutputWithContext(context.Background())
}

func (o IdentityDynamicGroupOutput) ToIdentityDynamicGroupPtrOutputWithContext(ctx context.Context) IdentityDynamicGroupPtrOutput {
	return o.ApplyT(func(v IdentityDynamicGroup) *IdentityDynamicGroup {
		return &v
	}).(IdentityDynamicGroupPtrOutput)
}

type IdentityDynamicGroupPtrOutput struct {
	*pulumi.OutputState
}

func (IdentityDynamicGroupPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IdentityDynamicGroup)(nil))
}

func (o IdentityDynamicGroupPtrOutput) ToIdentityDynamicGroupPtrOutput() IdentityDynamicGroupPtrOutput {
	return o
}

func (o IdentityDynamicGroupPtrOutput) ToIdentityDynamicGroupPtrOutputWithContext(ctx context.Context) IdentityDynamicGroupPtrOutput {
	return o
}

type IdentityDynamicGroupArrayOutput struct{ *pulumi.OutputState }

func (IdentityDynamicGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]IdentityDynamicGroup)(nil))
}

func (o IdentityDynamicGroupArrayOutput) ToIdentityDynamicGroupArrayOutput() IdentityDynamicGroupArrayOutput {
	return o
}

func (o IdentityDynamicGroupArrayOutput) ToIdentityDynamicGroupArrayOutputWithContext(ctx context.Context) IdentityDynamicGroupArrayOutput {
	return o
}

func (o IdentityDynamicGroupArrayOutput) Index(i pulumi.IntInput) IdentityDynamicGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) IdentityDynamicGroup {
		return vs[0].([]IdentityDynamicGroup)[vs[1].(int)]
	}).(IdentityDynamicGroupOutput)
}

type IdentityDynamicGroupMapOutput struct{ *pulumi.OutputState }

func (IdentityDynamicGroupMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]IdentityDynamicGroup)(nil))
}

func (o IdentityDynamicGroupMapOutput) ToIdentityDynamicGroupMapOutput() IdentityDynamicGroupMapOutput {
	return o
}

func (o IdentityDynamicGroupMapOutput) ToIdentityDynamicGroupMapOutputWithContext(ctx context.Context) IdentityDynamicGroupMapOutput {
	return o
}

func (o IdentityDynamicGroupMapOutput) MapIndex(k pulumi.StringInput) IdentityDynamicGroupOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) IdentityDynamicGroup {
		return vs[0].(map[string]IdentityDynamicGroup)[vs[1].(string)]
	}).(IdentityDynamicGroupOutput)
}

func init() {
	pulumi.RegisterOutputType(IdentityDynamicGroupOutput{})
	pulumi.RegisterOutputType(IdentityDynamicGroupPtrOutput{})
	pulumi.RegisterOutputType(IdentityDynamicGroupArrayOutput{})
	pulumi.RegisterOutputType(IdentityDynamicGroupMapOutput{})
}
