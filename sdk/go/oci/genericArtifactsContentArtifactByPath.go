// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package oci

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Provides the Artifact By Path resource in Oracle Cloud Infrastructure Generic Artifacts Content service. This resource supports upload/download the content of a generic artifact by specifying the repository id, artifact path, and artifact version
//
// ## Note
//
// This resource is not supported to delete generic artifact.
// In order to delete generic artifact, you can use `ArtifactsGenericArtifact`
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-oci/sdk/go/oci"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := oci.NewGenericArtifactsContentArtifactByPath(ctx, "testArtifactByPath", &oci.GenericArtifactsContentArtifactByPathArgs{
// 			ArtifactPath: pulumi.Any(_var.Artifact_path),
// 			RepositoryId: pulumi.Any(oci_artifacts_repository.Test_repository.Id),
// 			Version:      pulumi.Any(_var.Version),
// 			Content:      pulumi.Any(_var.Content),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
type GenericArtifactsContentArtifactByPath struct {
	pulumi.CustomResourceState

	ArtifactId pulumi.StringOutput `pulumi:"artifactId"`
	// A user-defined path to describe the location of an artifact. You can use slashes to organize the repository, but slashes do not create a directory structure. An artifact path does not include an artifact version.
	ArtifactPath pulumi.StringOutput `pulumi:"artifactPath"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the repository's compartment.
	CompartmentId pulumi.StringOutput `pulumi:"compartmentId"`
	// The content of the artifact
	Content pulumi.StringOutput `pulumi:"content"`
	// Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Operations.CostCenter": "42"}`
	DefinedTags pulumi.MapOutput `pulumi:"definedTags"`
	// The artifact name with the format of `<artifact-path>:<artifact-version>`. The artifact name is truncated to a maximum length of 255.  Example: `project01/my-web-app/artifact-abc:1.0.0`
	DisplayName pulumi.StringOutput `pulumi:"displayName"`
	// Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Department": "Finance"}`
	FreeformTags pulumi.MapOutput `pulumi:"freeformTags"`
	// The [OCID](https://www.terraform.io/iaas/Content/General/Concepts/identifiers.htm) of the repository.
	RepositoryId pulumi.StringOutput `pulumi:"repositoryId"`
	// The SHA256 digest for the artifact. When you upload an artifact to the repository, a SHA256 digest is calculated and added to the artifact properties.
	Sha256 pulumi.StringOutput `pulumi:"sha256"`
	// The size of the artifact in bytes.
	SizeInBytes pulumi.IntOutput `pulumi:"sizeInBytes"`
	// The current state of the artifact.
	State pulumi.StringOutput `pulumi:"state"`
	// An RFC 3339 timestamp indicating when the repository was created.
	TimeCreated pulumi.StringOutput `pulumi:"timeCreated"`
	// A user-defined string to describe the artifact version. Example: `1.1.0` or `1.2-beta-2`
	Version pulumi.StringOutput `pulumi:"version"`
}

// NewGenericArtifactsContentArtifactByPath registers a new resource with the given unique name, arguments, and options.
func NewGenericArtifactsContentArtifactByPath(ctx *pulumi.Context,
	name string, args *GenericArtifactsContentArtifactByPathArgs, opts ...pulumi.ResourceOption) (*GenericArtifactsContentArtifactByPath, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ArtifactPath == nil {
		return nil, errors.New("invalid value for required argument 'ArtifactPath'")
	}
	if args.Content == nil {
		return nil, errors.New("invalid value for required argument 'Content'")
	}
	if args.RepositoryId == nil {
		return nil, errors.New("invalid value for required argument 'RepositoryId'")
	}
	if args.Version == nil {
		return nil, errors.New("invalid value for required argument 'Version'")
	}
	var resource GenericArtifactsContentArtifactByPath
	err := ctx.RegisterResource("oci:index/genericArtifactsContentArtifactByPath:GenericArtifactsContentArtifactByPath", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGenericArtifactsContentArtifactByPath gets an existing GenericArtifactsContentArtifactByPath resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGenericArtifactsContentArtifactByPath(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GenericArtifactsContentArtifactByPathState, opts ...pulumi.ResourceOption) (*GenericArtifactsContentArtifactByPath, error) {
	var resource GenericArtifactsContentArtifactByPath
	err := ctx.ReadResource("oci:index/genericArtifactsContentArtifactByPath:GenericArtifactsContentArtifactByPath", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering GenericArtifactsContentArtifactByPath resources.
type genericArtifactsContentArtifactByPathState struct {
	ArtifactId *string `pulumi:"artifactId"`
	// A user-defined path to describe the location of an artifact. You can use slashes to organize the repository, but slashes do not create a directory structure. An artifact path does not include an artifact version.
	ArtifactPath *string `pulumi:"artifactPath"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the repository's compartment.
	CompartmentId *string `pulumi:"compartmentId"`
	// The content of the artifact
	Content *string `pulumi:"content"`
	// Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Operations.CostCenter": "42"}`
	DefinedTags map[string]interface{} `pulumi:"definedTags"`
	// The artifact name with the format of `<artifact-path>:<artifact-version>`. The artifact name is truncated to a maximum length of 255.  Example: `project01/my-web-app/artifact-abc:1.0.0`
	DisplayName *string `pulumi:"displayName"`
	// Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Department": "Finance"}`
	FreeformTags map[string]interface{} `pulumi:"freeformTags"`
	// The [OCID](https://www.terraform.io/iaas/Content/General/Concepts/identifiers.htm) of the repository.
	RepositoryId *string `pulumi:"repositoryId"`
	// The SHA256 digest for the artifact. When you upload an artifact to the repository, a SHA256 digest is calculated and added to the artifact properties.
	Sha256 *string `pulumi:"sha256"`
	// The size of the artifact in bytes.
	SizeInBytes *int `pulumi:"sizeInBytes"`
	// The current state of the artifact.
	State *string `pulumi:"state"`
	// An RFC 3339 timestamp indicating when the repository was created.
	TimeCreated *string `pulumi:"timeCreated"`
	// A user-defined string to describe the artifact version. Example: `1.1.0` or `1.2-beta-2`
	Version *string `pulumi:"version"`
}

type GenericArtifactsContentArtifactByPathState struct {
	ArtifactId pulumi.StringPtrInput
	// A user-defined path to describe the location of an artifact. You can use slashes to organize the repository, but slashes do not create a directory structure. An artifact path does not include an artifact version.
	ArtifactPath pulumi.StringPtrInput
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the repository's compartment.
	CompartmentId pulumi.StringPtrInput
	// The content of the artifact
	Content pulumi.StringPtrInput
	// Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Operations.CostCenter": "42"}`
	DefinedTags pulumi.MapInput
	// The artifact name with the format of `<artifact-path>:<artifact-version>`. The artifact name is truncated to a maximum length of 255.  Example: `project01/my-web-app/artifact-abc:1.0.0`
	DisplayName pulumi.StringPtrInput
	// Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Department": "Finance"}`
	FreeformTags pulumi.MapInput
	// The [OCID](https://www.terraform.io/iaas/Content/General/Concepts/identifiers.htm) of the repository.
	RepositoryId pulumi.StringPtrInput
	// The SHA256 digest for the artifact. When you upload an artifact to the repository, a SHA256 digest is calculated and added to the artifact properties.
	Sha256 pulumi.StringPtrInput
	// The size of the artifact in bytes.
	SizeInBytes pulumi.IntPtrInput
	// The current state of the artifact.
	State pulumi.StringPtrInput
	// An RFC 3339 timestamp indicating when the repository was created.
	TimeCreated pulumi.StringPtrInput
	// A user-defined string to describe the artifact version. Example: `1.1.0` or `1.2-beta-2`
	Version pulumi.StringPtrInput
}

func (GenericArtifactsContentArtifactByPathState) ElementType() reflect.Type {
	return reflect.TypeOf((*genericArtifactsContentArtifactByPathState)(nil)).Elem()
}

type genericArtifactsContentArtifactByPathArgs struct {
	// A user-defined path to describe the location of an artifact. You can use slashes to organize the repository, but slashes do not create a directory structure. An artifact path does not include an artifact version.
	ArtifactPath string `pulumi:"artifactPath"`
	// The content of the artifact
	Content string `pulumi:"content"`
	// The [OCID](https://www.terraform.io/iaas/Content/General/Concepts/identifiers.htm) of the repository.
	RepositoryId string `pulumi:"repositoryId"`
	// A user-defined string to describe the artifact version. Example: `1.1.0` or `1.2-beta-2`
	Version string `pulumi:"version"`
}

// The set of arguments for constructing a GenericArtifactsContentArtifactByPath resource.
type GenericArtifactsContentArtifactByPathArgs struct {
	// A user-defined path to describe the location of an artifact. You can use slashes to organize the repository, but slashes do not create a directory structure. An artifact path does not include an artifact version.
	ArtifactPath pulumi.StringInput
	// The content of the artifact
	Content pulumi.StringInput
	// The [OCID](https://www.terraform.io/iaas/Content/General/Concepts/identifiers.htm) of the repository.
	RepositoryId pulumi.StringInput
	// A user-defined string to describe the artifact version. Example: `1.1.0` or `1.2-beta-2`
	Version pulumi.StringInput
}

func (GenericArtifactsContentArtifactByPathArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*genericArtifactsContentArtifactByPathArgs)(nil)).Elem()
}

type GenericArtifactsContentArtifactByPathInput interface {
	pulumi.Input

	ToGenericArtifactsContentArtifactByPathOutput() GenericArtifactsContentArtifactByPathOutput
	ToGenericArtifactsContentArtifactByPathOutputWithContext(ctx context.Context) GenericArtifactsContentArtifactByPathOutput
}

func (*GenericArtifactsContentArtifactByPath) ElementType() reflect.Type {
	return reflect.TypeOf((*GenericArtifactsContentArtifactByPath)(nil))
}

func (i *GenericArtifactsContentArtifactByPath) ToGenericArtifactsContentArtifactByPathOutput() GenericArtifactsContentArtifactByPathOutput {
	return i.ToGenericArtifactsContentArtifactByPathOutputWithContext(context.Background())
}

func (i *GenericArtifactsContentArtifactByPath) ToGenericArtifactsContentArtifactByPathOutputWithContext(ctx context.Context) GenericArtifactsContentArtifactByPathOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GenericArtifactsContentArtifactByPathOutput)
}

func (i *GenericArtifactsContentArtifactByPath) ToGenericArtifactsContentArtifactByPathPtrOutput() GenericArtifactsContentArtifactByPathPtrOutput {
	return i.ToGenericArtifactsContentArtifactByPathPtrOutputWithContext(context.Background())
}

func (i *GenericArtifactsContentArtifactByPath) ToGenericArtifactsContentArtifactByPathPtrOutputWithContext(ctx context.Context) GenericArtifactsContentArtifactByPathPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GenericArtifactsContentArtifactByPathPtrOutput)
}

type GenericArtifactsContentArtifactByPathPtrInput interface {
	pulumi.Input

	ToGenericArtifactsContentArtifactByPathPtrOutput() GenericArtifactsContentArtifactByPathPtrOutput
	ToGenericArtifactsContentArtifactByPathPtrOutputWithContext(ctx context.Context) GenericArtifactsContentArtifactByPathPtrOutput
}

type genericArtifactsContentArtifactByPathPtrType GenericArtifactsContentArtifactByPathArgs

func (*genericArtifactsContentArtifactByPathPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GenericArtifactsContentArtifactByPath)(nil))
}

func (i *genericArtifactsContentArtifactByPathPtrType) ToGenericArtifactsContentArtifactByPathPtrOutput() GenericArtifactsContentArtifactByPathPtrOutput {
	return i.ToGenericArtifactsContentArtifactByPathPtrOutputWithContext(context.Background())
}

func (i *genericArtifactsContentArtifactByPathPtrType) ToGenericArtifactsContentArtifactByPathPtrOutputWithContext(ctx context.Context) GenericArtifactsContentArtifactByPathPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GenericArtifactsContentArtifactByPathPtrOutput)
}

// GenericArtifactsContentArtifactByPathArrayInput is an input type that accepts GenericArtifactsContentArtifactByPathArray and GenericArtifactsContentArtifactByPathArrayOutput values.
// You can construct a concrete instance of `GenericArtifactsContentArtifactByPathArrayInput` via:
//
//          GenericArtifactsContentArtifactByPathArray{ GenericArtifactsContentArtifactByPathArgs{...} }
type GenericArtifactsContentArtifactByPathArrayInput interface {
	pulumi.Input

	ToGenericArtifactsContentArtifactByPathArrayOutput() GenericArtifactsContentArtifactByPathArrayOutput
	ToGenericArtifactsContentArtifactByPathArrayOutputWithContext(context.Context) GenericArtifactsContentArtifactByPathArrayOutput
}

type GenericArtifactsContentArtifactByPathArray []GenericArtifactsContentArtifactByPathInput

func (GenericArtifactsContentArtifactByPathArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GenericArtifactsContentArtifactByPath)(nil)).Elem()
}

func (i GenericArtifactsContentArtifactByPathArray) ToGenericArtifactsContentArtifactByPathArrayOutput() GenericArtifactsContentArtifactByPathArrayOutput {
	return i.ToGenericArtifactsContentArtifactByPathArrayOutputWithContext(context.Background())
}

func (i GenericArtifactsContentArtifactByPathArray) ToGenericArtifactsContentArtifactByPathArrayOutputWithContext(ctx context.Context) GenericArtifactsContentArtifactByPathArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GenericArtifactsContentArtifactByPathArrayOutput)
}

// GenericArtifactsContentArtifactByPathMapInput is an input type that accepts GenericArtifactsContentArtifactByPathMap and GenericArtifactsContentArtifactByPathMapOutput values.
// You can construct a concrete instance of `GenericArtifactsContentArtifactByPathMapInput` via:
//
//          GenericArtifactsContentArtifactByPathMap{ "key": GenericArtifactsContentArtifactByPathArgs{...} }
type GenericArtifactsContentArtifactByPathMapInput interface {
	pulumi.Input

	ToGenericArtifactsContentArtifactByPathMapOutput() GenericArtifactsContentArtifactByPathMapOutput
	ToGenericArtifactsContentArtifactByPathMapOutputWithContext(context.Context) GenericArtifactsContentArtifactByPathMapOutput
}

type GenericArtifactsContentArtifactByPathMap map[string]GenericArtifactsContentArtifactByPathInput

func (GenericArtifactsContentArtifactByPathMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GenericArtifactsContentArtifactByPath)(nil)).Elem()
}

func (i GenericArtifactsContentArtifactByPathMap) ToGenericArtifactsContentArtifactByPathMapOutput() GenericArtifactsContentArtifactByPathMapOutput {
	return i.ToGenericArtifactsContentArtifactByPathMapOutputWithContext(context.Background())
}

func (i GenericArtifactsContentArtifactByPathMap) ToGenericArtifactsContentArtifactByPathMapOutputWithContext(ctx context.Context) GenericArtifactsContentArtifactByPathMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GenericArtifactsContentArtifactByPathMapOutput)
}

type GenericArtifactsContentArtifactByPathOutput struct {
	*pulumi.OutputState
}

func (GenericArtifactsContentArtifactByPathOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GenericArtifactsContentArtifactByPath)(nil))
}

func (o GenericArtifactsContentArtifactByPathOutput) ToGenericArtifactsContentArtifactByPathOutput() GenericArtifactsContentArtifactByPathOutput {
	return o
}

func (o GenericArtifactsContentArtifactByPathOutput) ToGenericArtifactsContentArtifactByPathOutputWithContext(ctx context.Context) GenericArtifactsContentArtifactByPathOutput {
	return o
}

func (o GenericArtifactsContentArtifactByPathOutput) ToGenericArtifactsContentArtifactByPathPtrOutput() GenericArtifactsContentArtifactByPathPtrOutput {
	return o.ToGenericArtifactsContentArtifactByPathPtrOutputWithContext(context.Background())
}

func (o GenericArtifactsContentArtifactByPathOutput) ToGenericArtifactsContentArtifactByPathPtrOutputWithContext(ctx context.Context) GenericArtifactsContentArtifactByPathPtrOutput {
	return o.ApplyT(func(v GenericArtifactsContentArtifactByPath) *GenericArtifactsContentArtifactByPath {
		return &v
	}).(GenericArtifactsContentArtifactByPathPtrOutput)
}

type GenericArtifactsContentArtifactByPathPtrOutput struct {
	*pulumi.OutputState
}

func (GenericArtifactsContentArtifactByPathPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GenericArtifactsContentArtifactByPath)(nil))
}

func (o GenericArtifactsContentArtifactByPathPtrOutput) ToGenericArtifactsContentArtifactByPathPtrOutput() GenericArtifactsContentArtifactByPathPtrOutput {
	return o
}

func (o GenericArtifactsContentArtifactByPathPtrOutput) ToGenericArtifactsContentArtifactByPathPtrOutputWithContext(ctx context.Context) GenericArtifactsContentArtifactByPathPtrOutput {
	return o
}

type GenericArtifactsContentArtifactByPathArrayOutput struct{ *pulumi.OutputState }

func (GenericArtifactsContentArtifactByPathArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GenericArtifactsContentArtifactByPath)(nil))
}

func (o GenericArtifactsContentArtifactByPathArrayOutput) ToGenericArtifactsContentArtifactByPathArrayOutput() GenericArtifactsContentArtifactByPathArrayOutput {
	return o
}

func (o GenericArtifactsContentArtifactByPathArrayOutput) ToGenericArtifactsContentArtifactByPathArrayOutputWithContext(ctx context.Context) GenericArtifactsContentArtifactByPathArrayOutput {
	return o
}

func (o GenericArtifactsContentArtifactByPathArrayOutput) Index(i pulumi.IntInput) GenericArtifactsContentArtifactByPathOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GenericArtifactsContentArtifactByPath {
		return vs[0].([]GenericArtifactsContentArtifactByPath)[vs[1].(int)]
	}).(GenericArtifactsContentArtifactByPathOutput)
}

type GenericArtifactsContentArtifactByPathMapOutput struct{ *pulumi.OutputState }

func (GenericArtifactsContentArtifactByPathMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]GenericArtifactsContentArtifactByPath)(nil))
}

func (o GenericArtifactsContentArtifactByPathMapOutput) ToGenericArtifactsContentArtifactByPathMapOutput() GenericArtifactsContentArtifactByPathMapOutput {
	return o
}

func (o GenericArtifactsContentArtifactByPathMapOutput) ToGenericArtifactsContentArtifactByPathMapOutputWithContext(ctx context.Context) GenericArtifactsContentArtifactByPathMapOutput {
	return o
}

func (o GenericArtifactsContentArtifactByPathMapOutput) MapIndex(k pulumi.StringInput) GenericArtifactsContentArtifactByPathOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) GenericArtifactsContentArtifactByPath {
		return vs[0].(map[string]GenericArtifactsContentArtifactByPath)[vs[1].(string)]
	}).(GenericArtifactsContentArtifactByPathOutput)
}

func init() {
	pulumi.RegisterOutputType(GenericArtifactsContentArtifactByPathOutput{})
	pulumi.RegisterOutputType(GenericArtifactsContentArtifactByPathPtrOutput{})
	pulumi.RegisterOutputType(GenericArtifactsContentArtifactByPathArrayOutput{})
	pulumi.RegisterOutputType(GenericArtifactsContentArtifactByPathMapOutput{})
}
