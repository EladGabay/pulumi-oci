// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package oci

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource provides details about a specific Listing Package Agreement resource in Oracle Cloud Infrastructure Marketplace service.
//
// This resource can be used to retrieve the time-based signature of terms of use agreement for a package that can be used to
// accept the agreement.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-oci/sdk/go/oci"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := oci.NewMarketplaceListingPackageAgreement(ctx, "testListingPackageAgreement", &oci.MarketplaceListingPackageAgreementArgs{
// 			AgreementId:    pulumi.Any(oci_marketplace_agreement.Test_agreement.Id),
// 			ListingId:      pulumi.Any(oci_marketplace_listing.Test_listing.Id),
// 			PackageVersion: pulumi.Any(_var.Listing_package_agreement_package_version),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// Import is not supported for this resource.
type MarketplaceListingPackageAgreement struct {
	pulumi.CustomResourceState

	// The unique identifier for the agreement.
	AgreementId pulumi.StringOutput `pulumi:"agreementId"`
	// Who authored the agreement.
	Author pulumi.StringOutput `pulumi:"author"`
	// The unique identifier for the compartment.
	CompartmentId pulumi.StringOutput `pulumi:"compartmentId"`
	// The content URL of the agreement.
	ContentUrl pulumi.StringOutput `pulumi:"contentUrl"`
	// The unique identifier for the listing.
	ListingId pulumi.StringOutput `pulumi:"listingId"`
	// The version of the package. Package versions are unique within a listing.
	PackageVersion pulumi.StringOutput `pulumi:"packageVersion"`
	// Textual prompt to read and accept the agreement.
	Prompt pulumi.StringOutput `pulumi:"prompt"`
	// A time-based signature that can be used to accept an agreement or remove a previously accepted agreement from the list that Marketplace checks before a deployment.
	Signature pulumi.StringOutput `pulumi:"signature"`
}

// NewMarketplaceListingPackageAgreement registers a new resource with the given unique name, arguments, and options.
func NewMarketplaceListingPackageAgreement(ctx *pulumi.Context,
	name string, args *MarketplaceListingPackageAgreementArgs, opts ...pulumi.ResourceOption) (*MarketplaceListingPackageAgreement, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AgreementId == nil {
		return nil, errors.New("invalid value for required argument 'AgreementId'")
	}
	if args.ListingId == nil {
		return nil, errors.New("invalid value for required argument 'ListingId'")
	}
	if args.PackageVersion == nil {
		return nil, errors.New("invalid value for required argument 'PackageVersion'")
	}
	var resource MarketplaceListingPackageAgreement
	err := ctx.RegisterResource("oci:index/marketplaceListingPackageAgreement:MarketplaceListingPackageAgreement", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMarketplaceListingPackageAgreement gets an existing MarketplaceListingPackageAgreement resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMarketplaceListingPackageAgreement(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MarketplaceListingPackageAgreementState, opts ...pulumi.ResourceOption) (*MarketplaceListingPackageAgreement, error) {
	var resource MarketplaceListingPackageAgreement
	err := ctx.ReadResource("oci:index/marketplaceListingPackageAgreement:MarketplaceListingPackageAgreement", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering MarketplaceListingPackageAgreement resources.
type marketplaceListingPackageAgreementState struct {
	// The unique identifier for the agreement.
	AgreementId *string `pulumi:"agreementId"`
	// Who authored the agreement.
	Author *string `pulumi:"author"`
	// The unique identifier for the compartment.
	CompartmentId *string `pulumi:"compartmentId"`
	// The content URL of the agreement.
	ContentUrl *string `pulumi:"contentUrl"`
	// The unique identifier for the listing.
	ListingId *string `pulumi:"listingId"`
	// The version of the package. Package versions are unique within a listing.
	PackageVersion *string `pulumi:"packageVersion"`
	// Textual prompt to read and accept the agreement.
	Prompt *string `pulumi:"prompt"`
	// A time-based signature that can be used to accept an agreement or remove a previously accepted agreement from the list that Marketplace checks before a deployment.
	Signature *string `pulumi:"signature"`
}

type MarketplaceListingPackageAgreementState struct {
	// The unique identifier for the agreement.
	AgreementId pulumi.StringPtrInput
	// Who authored the agreement.
	Author pulumi.StringPtrInput
	// The unique identifier for the compartment.
	CompartmentId pulumi.StringPtrInput
	// The content URL of the agreement.
	ContentUrl pulumi.StringPtrInput
	// The unique identifier for the listing.
	ListingId pulumi.StringPtrInput
	// The version of the package. Package versions are unique within a listing.
	PackageVersion pulumi.StringPtrInput
	// Textual prompt to read and accept the agreement.
	Prompt pulumi.StringPtrInput
	// A time-based signature that can be used to accept an agreement or remove a previously accepted agreement from the list that Marketplace checks before a deployment.
	Signature pulumi.StringPtrInput
}

func (MarketplaceListingPackageAgreementState) ElementType() reflect.Type {
	return reflect.TypeOf((*marketplaceListingPackageAgreementState)(nil)).Elem()
}

type marketplaceListingPackageAgreementArgs struct {
	// The unique identifier for the agreement.
	AgreementId string `pulumi:"agreementId"`
	// The unique identifier for the listing.
	ListingId string `pulumi:"listingId"`
	// The version of the package. Package versions are unique within a listing.
	PackageVersion string `pulumi:"packageVersion"`
}

// The set of arguments for constructing a MarketplaceListingPackageAgreement resource.
type MarketplaceListingPackageAgreementArgs struct {
	// The unique identifier for the agreement.
	AgreementId pulumi.StringInput
	// The unique identifier for the listing.
	ListingId pulumi.StringInput
	// The version of the package. Package versions are unique within a listing.
	PackageVersion pulumi.StringInput
}

func (MarketplaceListingPackageAgreementArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*marketplaceListingPackageAgreementArgs)(nil)).Elem()
}

type MarketplaceListingPackageAgreementInput interface {
	pulumi.Input

	ToMarketplaceListingPackageAgreementOutput() MarketplaceListingPackageAgreementOutput
	ToMarketplaceListingPackageAgreementOutputWithContext(ctx context.Context) MarketplaceListingPackageAgreementOutput
}

func (*MarketplaceListingPackageAgreement) ElementType() reflect.Type {
	return reflect.TypeOf((*MarketplaceListingPackageAgreement)(nil))
}

func (i *MarketplaceListingPackageAgreement) ToMarketplaceListingPackageAgreementOutput() MarketplaceListingPackageAgreementOutput {
	return i.ToMarketplaceListingPackageAgreementOutputWithContext(context.Background())
}

func (i *MarketplaceListingPackageAgreement) ToMarketplaceListingPackageAgreementOutputWithContext(ctx context.Context) MarketplaceListingPackageAgreementOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MarketplaceListingPackageAgreementOutput)
}

func (i *MarketplaceListingPackageAgreement) ToMarketplaceListingPackageAgreementPtrOutput() MarketplaceListingPackageAgreementPtrOutput {
	return i.ToMarketplaceListingPackageAgreementPtrOutputWithContext(context.Background())
}

func (i *MarketplaceListingPackageAgreement) ToMarketplaceListingPackageAgreementPtrOutputWithContext(ctx context.Context) MarketplaceListingPackageAgreementPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MarketplaceListingPackageAgreementPtrOutput)
}

type MarketplaceListingPackageAgreementPtrInput interface {
	pulumi.Input

	ToMarketplaceListingPackageAgreementPtrOutput() MarketplaceListingPackageAgreementPtrOutput
	ToMarketplaceListingPackageAgreementPtrOutputWithContext(ctx context.Context) MarketplaceListingPackageAgreementPtrOutput
}

type marketplaceListingPackageAgreementPtrType MarketplaceListingPackageAgreementArgs

func (*marketplaceListingPackageAgreementPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MarketplaceListingPackageAgreement)(nil))
}

func (i *marketplaceListingPackageAgreementPtrType) ToMarketplaceListingPackageAgreementPtrOutput() MarketplaceListingPackageAgreementPtrOutput {
	return i.ToMarketplaceListingPackageAgreementPtrOutputWithContext(context.Background())
}

func (i *marketplaceListingPackageAgreementPtrType) ToMarketplaceListingPackageAgreementPtrOutputWithContext(ctx context.Context) MarketplaceListingPackageAgreementPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MarketplaceListingPackageAgreementPtrOutput)
}

// MarketplaceListingPackageAgreementArrayInput is an input type that accepts MarketplaceListingPackageAgreementArray and MarketplaceListingPackageAgreementArrayOutput values.
// You can construct a concrete instance of `MarketplaceListingPackageAgreementArrayInput` via:
//
//          MarketplaceListingPackageAgreementArray{ MarketplaceListingPackageAgreementArgs{...} }
type MarketplaceListingPackageAgreementArrayInput interface {
	pulumi.Input

	ToMarketplaceListingPackageAgreementArrayOutput() MarketplaceListingPackageAgreementArrayOutput
	ToMarketplaceListingPackageAgreementArrayOutputWithContext(context.Context) MarketplaceListingPackageAgreementArrayOutput
}

type MarketplaceListingPackageAgreementArray []MarketplaceListingPackageAgreementInput

func (MarketplaceListingPackageAgreementArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MarketplaceListingPackageAgreement)(nil)).Elem()
}

func (i MarketplaceListingPackageAgreementArray) ToMarketplaceListingPackageAgreementArrayOutput() MarketplaceListingPackageAgreementArrayOutput {
	return i.ToMarketplaceListingPackageAgreementArrayOutputWithContext(context.Background())
}

func (i MarketplaceListingPackageAgreementArray) ToMarketplaceListingPackageAgreementArrayOutputWithContext(ctx context.Context) MarketplaceListingPackageAgreementArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MarketplaceListingPackageAgreementArrayOutput)
}

// MarketplaceListingPackageAgreementMapInput is an input type that accepts MarketplaceListingPackageAgreementMap and MarketplaceListingPackageAgreementMapOutput values.
// You can construct a concrete instance of `MarketplaceListingPackageAgreementMapInput` via:
//
//          MarketplaceListingPackageAgreementMap{ "key": MarketplaceListingPackageAgreementArgs{...} }
type MarketplaceListingPackageAgreementMapInput interface {
	pulumi.Input

	ToMarketplaceListingPackageAgreementMapOutput() MarketplaceListingPackageAgreementMapOutput
	ToMarketplaceListingPackageAgreementMapOutputWithContext(context.Context) MarketplaceListingPackageAgreementMapOutput
}

type MarketplaceListingPackageAgreementMap map[string]MarketplaceListingPackageAgreementInput

func (MarketplaceListingPackageAgreementMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MarketplaceListingPackageAgreement)(nil)).Elem()
}

func (i MarketplaceListingPackageAgreementMap) ToMarketplaceListingPackageAgreementMapOutput() MarketplaceListingPackageAgreementMapOutput {
	return i.ToMarketplaceListingPackageAgreementMapOutputWithContext(context.Background())
}

func (i MarketplaceListingPackageAgreementMap) ToMarketplaceListingPackageAgreementMapOutputWithContext(ctx context.Context) MarketplaceListingPackageAgreementMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MarketplaceListingPackageAgreementMapOutput)
}

type MarketplaceListingPackageAgreementOutput struct {
	*pulumi.OutputState
}

func (MarketplaceListingPackageAgreementOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MarketplaceListingPackageAgreement)(nil))
}

func (o MarketplaceListingPackageAgreementOutput) ToMarketplaceListingPackageAgreementOutput() MarketplaceListingPackageAgreementOutput {
	return o
}

func (o MarketplaceListingPackageAgreementOutput) ToMarketplaceListingPackageAgreementOutputWithContext(ctx context.Context) MarketplaceListingPackageAgreementOutput {
	return o
}

func (o MarketplaceListingPackageAgreementOutput) ToMarketplaceListingPackageAgreementPtrOutput() MarketplaceListingPackageAgreementPtrOutput {
	return o.ToMarketplaceListingPackageAgreementPtrOutputWithContext(context.Background())
}

func (o MarketplaceListingPackageAgreementOutput) ToMarketplaceListingPackageAgreementPtrOutputWithContext(ctx context.Context) MarketplaceListingPackageAgreementPtrOutput {
	return o.ApplyT(func(v MarketplaceListingPackageAgreement) *MarketplaceListingPackageAgreement {
		return &v
	}).(MarketplaceListingPackageAgreementPtrOutput)
}

type MarketplaceListingPackageAgreementPtrOutput struct {
	*pulumi.OutputState
}

func (MarketplaceListingPackageAgreementPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MarketplaceListingPackageAgreement)(nil))
}

func (o MarketplaceListingPackageAgreementPtrOutput) ToMarketplaceListingPackageAgreementPtrOutput() MarketplaceListingPackageAgreementPtrOutput {
	return o
}

func (o MarketplaceListingPackageAgreementPtrOutput) ToMarketplaceListingPackageAgreementPtrOutputWithContext(ctx context.Context) MarketplaceListingPackageAgreementPtrOutput {
	return o
}

type MarketplaceListingPackageAgreementArrayOutput struct{ *pulumi.OutputState }

func (MarketplaceListingPackageAgreementArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MarketplaceListingPackageAgreement)(nil))
}

func (o MarketplaceListingPackageAgreementArrayOutput) ToMarketplaceListingPackageAgreementArrayOutput() MarketplaceListingPackageAgreementArrayOutput {
	return o
}

func (o MarketplaceListingPackageAgreementArrayOutput) ToMarketplaceListingPackageAgreementArrayOutputWithContext(ctx context.Context) MarketplaceListingPackageAgreementArrayOutput {
	return o
}

func (o MarketplaceListingPackageAgreementArrayOutput) Index(i pulumi.IntInput) MarketplaceListingPackageAgreementOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MarketplaceListingPackageAgreement {
		return vs[0].([]MarketplaceListingPackageAgreement)[vs[1].(int)]
	}).(MarketplaceListingPackageAgreementOutput)
}

type MarketplaceListingPackageAgreementMapOutput struct{ *pulumi.OutputState }

func (MarketplaceListingPackageAgreementMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]MarketplaceListingPackageAgreement)(nil))
}

func (o MarketplaceListingPackageAgreementMapOutput) ToMarketplaceListingPackageAgreementMapOutput() MarketplaceListingPackageAgreementMapOutput {
	return o
}

func (o MarketplaceListingPackageAgreementMapOutput) ToMarketplaceListingPackageAgreementMapOutputWithContext(ctx context.Context) MarketplaceListingPackageAgreementMapOutput {
	return o
}

func (o MarketplaceListingPackageAgreementMapOutput) MapIndex(k pulumi.StringInput) MarketplaceListingPackageAgreementOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) MarketplaceListingPackageAgreement {
		return vs[0].(map[string]MarketplaceListingPackageAgreement)[vs[1].(string)]
	}).(MarketplaceListingPackageAgreementOutput)
}

func init() {
	pulumi.RegisterOutputType(MarketplaceListingPackageAgreementOutput{})
	pulumi.RegisterOutputType(MarketplaceListingPackageAgreementPtrOutput{})
	pulumi.RegisterOutputType(MarketplaceListingPackageAgreementArrayOutput{})
	pulumi.RegisterOutputType(MarketplaceListingPackageAgreementMapOutput{})
}
