// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package oci

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource provides the Connect Harness resource in Oracle Cloud Infrastructure Streaming service.
//
// Starts the provisioning of a new connect harness.
// To track the progress of the provisioning, you can periodically call [GetConnectHarness].
// In the response, the `lifecycleState` parameter of the [ConnectHarness](https://docs.cloud.oracle.com/iaas/api/#/en/streaming/20180418/ConnectHarness/) object tells you its current state.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-oci/sdk/go/oci"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := oci.NewStreamingConnectHarness(ctx, "testConnectHarness", &oci.StreamingConnectHarnessArgs{
// 			CompartmentId: pulumi.Any(_var.Compartment_id),
// 			DefinedTags:   pulumi.Any(_var.Connect_harness_defined_tags),
// 			FreeformTags: pulumi.AnyMap{
// 				"Department": pulumi.Any("Finance"),
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// ConnectHarnesses can be imported using the `id`, e.g.
//
// ```sh
//  $ pulumi import oci:index/streamingConnectHarness:StreamingConnectHarness test_connect_harness "id"
// ```
type StreamingConnectHarness struct {
	pulumi.CustomResourceState

	// (Updatable) The OCID of the compartment that contains the connect harness.
	CompartmentId pulumi.StringOutput `pulumi:"compartmentId"`
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Operations.CostCenter": "42"}`
	DefinedTags pulumi.MapOutput `pulumi:"definedTags"`
	// (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair that is applied with no predefined name, type, or namespace. Exists for cross-compatibility only. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Department": "Finance"}`
	FreeformTags pulumi.MapOutput `pulumi:"freeformTags"`
	// Any additional details about the current state of the connect harness.
	LifecycleStateDetails pulumi.StringOutput `pulumi:"lifecycleStateDetails"`
	// The name of the connect harness. Avoid entering confidential information.  Example: `JDBCConnector`
	Name pulumi.StringOutput `pulumi:"name"`
	// The current state of the connect harness.
	State pulumi.StringOutput `pulumi:"state"`
	// The date and time the connect harness was created, expressed in in [RFC 3339](https://tools.ietf.org/rfc/rfc3339) timestamp format.  Example: `2018-04-20T00:00:07.405Z`
	TimeCreated pulumi.StringOutput `pulumi:"timeCreated"`
}

// NewStreamingConnectHarness registers a new resource with the given unique name, arguments, and options.
func NewStreamingConnectHarness(ctx *pulumi.Context,
	name string, args *StreamingConnectHarnessArgs, opts ...pulumi.ResourceOption) (*StreamingConnectHarness, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CompartmentId == nil {
		return nil, errors.New("invalid value for required argument 'CompartmentId'")
	}
	var resource StreamingConnectHarness
	err := ctx.RegisterResource("oci:index/streamingConnectHarness:StreamingConnectHarness", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetStreamingConnectHarness gets an existing StreamingConnectHarness resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetStreamingConnectHarness(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *StreamingConnectHarnessState, opts ...pulumi.ResourceOption) (*StreamingConnectHarness, error) {
	var resource StreamingConnectHarness
	err := ctx.ReadResource("oci:index/streamingConnectHarness:StreamingConnectHarness", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering StreamingConnectHarness resources.
type streamingConnectHarnessState struct {
	// (Updatable) The OCID of the compartment that contains the connect harness.
	CompartmentId *string `pulumi:"compartmentId"`
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Operations.CostCenter": "42"}`
	DefinedTags map[string]interface{} `pulumi:"definedTags"`
	// (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair that is applied with no predefined name, type, or namespace. Exists for cross-compatibility only. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Department": "Finance"}`
	FreeformTags map[string]interface{} `pulumi:"freeformTags"`
	// Any additional details about the current state of the connect harness.
	LifecycleStateDetails *string `pulumi:"lifecycleStateDetails"`
	// The name of the connect harness. Avoid entering confidential information.  Example: `JDBCConnector`
	Name *string `pulumi:"name"`
	// The current state of the connect harness.
	State *string `pulumi:"state"`
	// The date and time the connect harness was created, expressed in in [RFC 3339](https://tools.ietf.org/rfc/rfc3339) timestamp format.  Example: `2018-04-20T00:00:07.405Z`
	TimeCreated *string `pulumi:"timeCreated"`
}

type StreamingConnectHarnessState struct {
	// (Updatable) The OCID of the compartment that contains the connect harness.
	CompartmentId pulumi.StringPtrInput
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Operations.CostCenter": "42"}`
	DefinedTags pulumi.MapInput
	// (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair that is applied with no predefined name, type, or namespace. Exists for cross-compatibility only. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Department": "Finance"}`
	FreeformTags pulumi.MapInput
	// Any additional details about the current state of the connect harness.
	LifecycleStateDetails pulumi.StringPtrInput
	// The name of the connect harness. Avoid entering confidential information.  Example: `JDBCConnector`
	Name pulumi.StringPtrInput
	// The current state of the connect harness.
	State pulumi.StringPtrInput
	// The date and time the connect harness was created, expressed in in [RFC 3339](https://tools.ietf.org/rfc/rfc3339) timestamp format.  Example: `2018-04-20T00:00:07.405Z`
	TimeCreated pulumi.StringPtrInput
}

func (StreamingConnectHarnessState) ElementType() reflect.Type {
	return reflect.TypeOf((*streamingConnectHarnessState)(nil)).Elem()
}

type streamingConnectHarnessArgs struct {
	// (Updatable) The OCID of the compartment that contains the connect harness.
	CompartmentId string `pulumi:"compartmentId"`
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Operations.CostCenter": "42"}`
	DefinedTags map[string]interface{} `pulumi:"definedTags"`
	// (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair that is applied with no predefined name, type, or namespace. Exists for cross-compatibility only. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Department": "Finance"}`
	FreeformTags map[string]interface{} `pulumi:"freeformTags"`
	// The name of the connect harness. Avoid entering confidential information.  Example: `JDBCConnector`
	Name *string `pulumi:"name"`
}

// The set of arguments for constructing a StreamingConnectHarness resource.
type StreamingConnectHarnessArgs struct {
	// (Updatable) The OCID of the compartment that contains the connect harness.
	CompartmentId pulumi.StringInput
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Operations.CostCenter": "42"}`
	DefinedTags pulumi.MapInput
	// (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair that is applied with no predefined name, type, or namespace. Exists for cross-compatibility only. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Department": "Finance"}`
	FreeformTags pulumi.MapInput
	// The name of the connect harness. Avoid entering confidential information.  Example: `JDBCConnector`
	Name pulumi.StringPtrInput
}

func (StreamingConnectHarnessArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*streamingConnectHarnessArgs)(nil)).Elem()
}

type StreamingConnectHarnessInput interface {
	pulumi.Input

	ToStreamingConnectHarnessOutput() StreamingConnectHarnessOutput
	ToStreamingConnectHarnessOutputWithContext(ctx context.Context) StreamingConnectHarnessOutput
}

func (*StreamingConnectHarness) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamingConnectHarness)(nil))
}

func (i *StreamingConnectHarness) ToStreamingConnectHarnessOutput() StreamingConnectHarnessOutput {
	return i.ToStreamingConnectHarnessOutputWithContext(context.Background())
}

func (i *StreamingConnectHarness) ToStreamingConnectHarnessOutputWithContext(ctx context.Context) StreamingConnectHarnessOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamingConnectHarnessOutput)
}

func (i *StreamingConnectHarness) ToStreamingConnectHarnessPtrOutput() StreamingConnectHarnessPtrOutput {
	return i.ToStreamingConnectHarnessPtrOutputWithContext(context.Background())
}

func (i *StreamingConnectHarness) ToStreamingConnectHarnessPtrOutputWithContext(ctx context.Context) StreamingConnectHarnessPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamingConnectHarnessPtrOutput)
}

type StreamingConnectHarnessPtrInput interface {
	pulumi.Input

	ToStreamingConnectHarnessPtrOutput() StreamingConnectHarnessPtrOutput
	ToStreamingConnectHarnessPtrOutputWithContext(ctx context.Context) StreamingConnectHarnessPtrOutput
}

type streamingConnectHarnessPtrType StreamingConnectHarnessArgs

func (*streamingConnectHarnessPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**StreamingConnectHarness)(nil))
}

func (i *streamingConnectHarnessPtrType) ToStreamingConnectHarnessPtrOutput() StreamingConnectHarnessPtrOutput {
	return i.ToStreamingConnectHarnessPtrOutputWithContext(context.Background())
}

func (i *streamingConnectHarnessPtrType) ToStreamingConnectHarnessPtrOutputWithContext(ctx context.Context) StreamingConnectHarnessPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamingConnectHarnessPtrOutput)
}

// StreamingConnectHarnessArrayInput is an input type that accepts StreamingConnectHarnessArray and StreamingConnectHarnessArrayOutput values.
// You can construct a concrete instance of `StreamingConnectHarnessArrayInput` via:
//
//          StreamingConnectHarnessArray{ StreamingConnectHarnessArgs{...} }
type StreamingConnectHarnessArrayInput interface {
	pulumi.Input

	ToStreamingConnectHarnessArrayOutput() StreamingConnectHarnessArrayOutput
	ToStreamingConnectHarnessArrayOutputWithContext(context.Context) StreamingConnectHarnessArrayOutput
}

type StreamingConnectHarnessArray []StreamingConnectHarnessInput

func (StreamingConnectHarnessArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*StreamingConnectHarness)(nil)).Elem()
}

func (i StreamingConnectHarnessArray) ToStreamingConnectHarnessArrayOutput() StreamingConnectHarnessArrayOutput {
	return i.ToStreamingConnectHarnessArrayOutputWithContext(context.Background())
}

func (i StreamingConnectHarnessArray) ToStreamingConnectHarnessArrayOutputWithContext(ctx context.Context) StreamingConnectHarnessArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamingConnectHarnessArrayOutput)
}

// StreamingConnectHarnessMapInput is an input type that accepts StreamingConnectHarnessMap and StreamingConnectHarnessMapOutput values.
// You can construct a concrete instance of `StreamingConnectHarnessMapInput` via:
//
//          StreamingConnectHarnessMap{ "key": StreamingConnectHarnessArgs{...} }
type StreamingConnectHarnessMapInput interface {
	pulumi.Input

	ToStreamingConnectHarnessMapOutput() StreamingConnectHarnessMapOutput
	ToStreamingConnectHarnessMapOutputWithContext(context.Context) StreamingConnectHarnessMapOutput
}

type StreamingConnectHarnessMap map[string]StreamingConnectHarnessInput

func (StreamingConnectHarnessMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*StreamingConnectHarness)(nil)).Elem()
}

func (i StreamingConnectHarnessMap) ToStreamingConnectHarnessMapOutput() StreamingConnectHarnessMapOutput {
	return i.ToStreamingConnectHarnessMapOutputWithContext(context.Background())
}

func (i StreamingConnectHarnessMap) ToStreamingConnectHarnessMapOutputWithContext(ctx context.Context) StreamingConnectHarnessMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamingConnectHarnessMapOutput)
}

type StreamingConnectHarnessOutput struct {
	*pulumi.OutputState
}

func (StreamingConnectHarnessOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*StreamingConnectHarness)(nil))
}

func (o StreamingConnectHarnessOutput) ToStreamingConnectHarnessOutput() StreamingConnectHarnessOutput {
	return o
}

func (o StreamingConnectHarnessOutput) ToStreamingConnectHarnessOutputWithContext(ctx context.Context) StreamingConnectHarnessOutput {
	return o
}

func (o StreamingConnectHarnessOutput) ToStreamingConnectHarnessPtrOutput() StreamingConnectHarnessPtrOutput {
	return o.ToStreamingConnectHarnessPtrOutputWithContext(context.Background())
}

func (o StreamingConnectHarnessOutput) ToStreamingConnectHarnessPtrOutputWithContext(ctx context.Context) StreamingConnectHarnessPtrOutput {
	return o.ApplyT(func(v StreamingConnectHarness) *StreamingConnectHarness {
		return &v
	}).(StreamingConnectHarnessPtrOutput)
}

type StreamingConnectHarnessPtrOutput struct {
	*pulumi.OutputState
}

func (StreamingConnectHarnessPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StreamingConnectHarness)(nil))
}

func (o StreamingConnectHarnessPtrOutput) ToStreamingConnectHarnessPtrOutput() StreamingConnectHarnessPtrOutput {
	return o
}

func (o StreamingConnectHarnessPtrOutput) ToStreamingConnectHarnessPtrOutputWithContext(ctx context.Context) StreamingConnectHarnessPtrOutput {
	return o
}

type StreamingConnectHarnessArrayOutput struct{ *pulumi.OutputState }

func (StreamingConnectHarnessArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]StreamingConnectHarness)(nil))
}

func (o StreamingConnectHarnessArrayOutput) ToStreamingConnectHarnessArrayOutput() StreamingConnectHarnessArrayOutput {
	return o
}

func (o StreamingConnectHarnessArrayOutput) ToStreamingConnectHarnessArrayOutputWithContext(ctx context.Context) StreamingConnectHarnessArrayOutput {
	return o
}

func (o StreamingConnectHarnessArrayOutput) Index(i pulumi.IntInput) StreamingConnectHarnessOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) StreamingConnectHarness {
		return vs[0].([]StreamingConnectHarness)[vs[1].(int)]
	}).(StreamingConnectHarnessOutput)
}

type StreamingConnectHarnessMapOutput struct{ *pulumi.OutputState }

func (StreamingConnectHarnessMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]StreamingConnectHarness)(nil))
}

func (o StreamingConnectHarnessMapOutput) ToStreamingConnectHarnessMapOutput() StreamingConnectHarnessMapOutput {
	return o
}

func (o StreamingConnectHarnessMapOutput) ToStreamingConnectHarnessMapOutputWithContext(ctx context.Context) StreamingConnectHarnessMapOutput {
	return o
}

func (o StreamingConnectHarnessMapOutput) MapIndex(k pulumi.StringInput) StreamingConnectHarnessOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) StreamingConnectHarness {
		return vs[0].(map[string]StreamingConnectHarness)[vs[1].(string)]
	}).(StreamingConnectHarnessOutput)
}

func init() {
	pulumi.RegisterOutputType(StreamingConnectHarnessOutput{})
	pulumi.RegisterOutputType(StreamingConnectHarnessPtrOutput{})
	pulumi.RegisterOutputType(StreamingConnectHarnessArrayOutput{})
	pulumi.RegisterOutputType(StreamingConnectHarnessMapOutput{})
}
