// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci
{
    public static class GetCorePeerRegionForRemotePeerings
    {
        /// <summary>
        /// This data source provides the list of Peer Region For Remote Peerings in Oracle Cloud Infrastructure Core service.
        /// 
        /// Lists the regions that support remote VCN peering (which is peering across regions).
        /// For more information, see [VCN Peering](https://docs.cloud.oracle.com/iaas/Content/Network/Tasks/VCNpeering.htm).
        /// 
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var testPeerRegionForRemotePeerings = Output.Create(Oci.GetCorePeerRegionForRemotePeerings.InvokeAsync());
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetCorePeerRegionForRemotePeeringsResult> InvokeAsync(GetCorePeerRegionForRemotePeeringsArgs? args = null, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetCorePeerRegionForRemotePeeringsResult>("oci:index/getCorePeerRegionForRemotePeerings:GetCorePeerRegionForRemotePeerings", args ?? new GetCorePeerRegionForRemotePeeringsArgs(), options.WithVersion());
    }


    public sealed class GetCorePeerRegionForRemotePeeringsArgs : Pulumi.InvokeArgs
    {
        [Input("filters")]
        private List<Inputs.GetCorePeerRegionForRemotePeeringsFilterArgs>? _filters;
        public List<Inputs.GetCorePeerRegionForRemotePeeringsFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetCorePeerRegionForRemotePeeringsFilterArgs>());
            set => _filters = value;
        }

        public GetCorePeerRegionForRemotePeeringsArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetCorePeerRegionForRemotePeeringsResult
    {
        public readonly ImmutableArray<Outputs.GetCorePeerRegionForRemotePeeringsFilterResult> Filters;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The list of peer_region_for_remote_peerings.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetCorePeerRegionForRemotePeeringsPeerRegionForRemotePeeringResult> PeerRegionForRemotePeerings;

        [OutputConstructor]
        private GetCorePeerRegionForRemotePeeringsResult(
            ImmutableArray<Outputs.GetCorePeerRegionForRemotePeeringsFilterResult> filters,

            string id,

            ImmutableArray<Outputs.GetCorePeerRegionForRemotePeeringsPeerRegionForRemotePeeringResult> peerRegionForRemotePeerings)
        {
            Filters = filters;
            Id = id;
            PeerRegionForRemotePeerings = peerRegionForRemotePeerings;
        }
    }
}
