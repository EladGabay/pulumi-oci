// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package oci

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource provides the HeatWave cluster resource in Oracle Cloud Infrastructure MySQL Database service.
//
// Updates the HeatWave cluster.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-oci/sdk/go/oci"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := oci.NewMysqlHeatWaveCluster(ctx, "testHeatWaveCluster", &oci.MysqlHeatWaveClusterArgs{
// 			DbSystemId:  pulumi.Any(oci_database_db_system.Test_db_system.Id),
// 			ClusterSize: pulumi.Any(_var.Heat_wave_cluster_cluster_size),
// 			ShapeName:   pulumi.Any(oci_mysql_shape.Test_shape.Name),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// HeatWaveCluster can be imported using the `id`, e.g.
//
// ```sh
//  $ pulumi import oci:index/mysqlHeatWaveCluster:MysqlHeatWaveCluster test_heat_wave_cluster "dbSystem/{dbSystemId}/heatWaveCluster"
// ```
type MysqlHeatWaveCluster struct {
	pulumi.CustomResourceState

	// A HeatWave node is a compute host that is part of a HeatWave cluster.
	ClusterNodes MysqlHeatWaveClusterClusterNodeArrayOutput `pulumi:"clusterNodes"`
	// (Updatable) A change to the number of nodes in the HeatWave cluster will result in the entire cluster being torn down and re-created with the new cluster of nodes. This may result in a significant downtime for the analytics capability while the HeatWave cluster is re-provisioned.
	ClusterSize pulumi.IntOutput `pulumi:"clusterSize"`
	// The DB System [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
	DbSystemId pulumi.StringOutput `pulumi:"dbSystemId"`
	// Additional information about the current lifecycleState.
	LifecycleDetails pulumi.StringOutput `pulumi:"lifecycleDetails"`
	// (Updatable) A change to the shape of the nodes in the HeatWave cluster will result in the entire cluster being torn down and re-created with Compute instances of the new Shape. This may result in significant downtime for the analytics capability while the HeatWave cluster is re-provisioned.
	ShapeName pulumi.StringOutput `pulumi:"shapeName"`
	// (Updatable) The target state for the HeatWave cluster. Could be set to `ACTIVE` or `INACTIVE`.
	State pulumi.StringOutput `pulumi:"state"`
	// The date and time the HeatWave cluster was created, as described by [RFC 3339](https://tools.ietf.org/rfc/rfc3339).
	TimeCreated pulumi.StringOutput `pulumi:"timeCreated"`
	// The time the HeatWave cluster was last updated, as described by [RFC 3339](https://tools.ietf.org/rfc/rfc3339).
	TimeUpdated pulumi.StringOutput `pulumi:"timeUpdated"`
}

// NewMysqlHeatWaveCluster registers a new resource with the given unique name, arguments, and options.
func NewMysqlHeatWaveCluster(ctx *pulumi.Context,
	name string, args *MysqlHeatWaveClusterArgs, opts ...pulumi.ResourceOption) (*MysqlHeatWaveCluster, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ClusterSize == nil {
		return nil, errors.New("invalid value for required argument 'ClusterSize'")
	}
	if args.DbSystemId == nil {
		return nil, errors.New("invalid value for required argument 'DbSystemId'")
	}
	if args.ShapeName == nil {
		return nil, errors.New("invalid value for required argument 'ShapeName'")
	}
	var resource MysqlHeatWaveCluster
	err := ctx.RegisterResource("oci:index/mysqlHeatWaveCluster:MysqlHeatWaveCluster", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMysqlHeatWaveCluster gets an existing MysqlHeatWaveCluster resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMysqlHeatWaveCluster(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MysqlHeatWaveClusterState, opts ...pulumi.ResourceOption) (*MysqlHeatWaveCluster, error) {
	var resource MysqlHeatWaveCluster
	err := ctx.ReadResource("oci:index/mysqlHeatWaveCluster:MysqlHeatWaveCluster", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering MysqlHeatWaveCluster resources.
type mysqlHeatWaveClusterState struct {
	// A HeatWave node is a compute host that is part of a HeatWave cluster.
	ClusterNodes []MysqlHeatWaveClusterClusterNode `pulumi:"clusterNodes"`
	// (Updatable) A change to the number of nodes in the HeatWave cluster will result in the entire cluster being torn down and re-created with the new cluster of nodes. This may result in a significant downtime for the analytics capability while the HeatWave cluster is re-provisioned.
	ClusterSize *int `pulumi:"clusterSize"`
	// The DB System [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
	DbSystemId *string `pulumi:"dbSystemId"`
	// Additional information about the current lifecycleState.
	LifecycleDetails *string `pulumi:"lifecycleDetails"`
	// (Updatable) A change to the shape of the nodes in the HeatWave cluster will result in the entire cluster being torn down and re-created with Compute instances of the new Shape. This may result in significant downtime for the analytics capability while the HeatWave cluster is re-provisioned.
	ShapeName *string `pulumi:"shapeName"`
	// (Updatable) The target state for the HeatWave cluster. Could be set to `ACTIVE` or `INACTIVE`.
	State *string `pulumi:"state"`
	// The date and time the HeatWave cluster was created, as described by [RFC 3339](https://tools.ietf.org/rfc/rfc3339).
	TimeCreated *string `pulumi:"timeCreated"`
	// The time the HeatWave cluster was last updated, as described by [RFC 3339](https://tools.ietf.org/rfc/rfc3339).
	TimeUpdated *string `pulumi:"timeUpdated"`
}

type MysqlHeatWaveClusterState struct {
	// A HeatWave node is a compute host that is part of a HeatWave cluster.
	ClusterNodes MysqlHeatWaveClusterClusterNodeArrayInput
	// (Updatable) A change to the number of nodes in the HeatWave cluster will result in the entire cluster being torn down and re-created with the new cluster of nodes. This may result in a significant downtime for the analytics capability while the HeatWave cluster is re-provisioned.
	ClusterSize pulumi.IntPtrInput
	// The DB System [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
	DbSystemId pulumi.StringPtrInput
	// Additional information about the current lifecycleState.
	LifecycleDetails pulumi.StringPtrInput
	// (Updatable) A change to the shape of the nodes in the HeatWave cluster will result in the entire cluster being torn down and re-created with Compute instances of the new Shape. This may result in significant downtime for the analytics capability while the HeatWave cluster is re-provisioned.
	ShapeName pulumi.StringPtrInput
	// (Updatable) The target state for the HeatWave cluster. Could be set to `ACTIVE` or `INACTIVE`.
	State pulumi.StringPtrInput
	// The date and time the HeatWave cluster was created, as described by [RFC 3339](https://tools.ietf.org/rfc/rfc3339).
	TimeCreated pulumi.StringPtrInput
	// The time the HeatWave cluster was last updated, as described by [RFC 3339](https://tools.ietf.org/rfc/rfc3339).
	TimeUpdated pulumi.StringPtrInput
}

func (MysqlHeatWaveClusterState) ElementType() reflect.Type {
	return reflect.TypeOf((*mysqlHeatWaveClusterState)(nil)).Elem()
}

type mysqlHeatWaveClusterArgs struct {
	// (Updatable) A change to the number of nodes in the HeatWave cluster will result in the entire cluster being torn down and re-created with the new cluster of nodes. This may result in a significant downtime for the analytics capability while the HeatWave cluster is re-provisioned.
	ClusterSize int `pulumi:"clusterSize"`
	// The DB System [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
	DbSystemId string `pulumi:"dbSystemId"`
	// (Updatable) A change to the shape of the nodes in the HeatWave cluster will result in the entire cluster being torn down and re-created with Compute instances of the new Shape. This may result in significant downtime for the analytics capability while the HeatWave cluster is re-provisioned.
	ShapeName string `pulumi:"shapeName"`
	// (Updatable) The target state for the HeatWave cluster. Could be set to `ACTIVE` or `INACTIVE`.
	State *string `pulumi:"state"`
}

// The set of arguments for constructing a MysqlHeatWaveCluster resource.
type MysqlHeatWaveClusterArgs struct {
	// (Updatable) A change to the number of nodes in the HeatWave cluster will result in the entire cluster being torn down and re-created with the new cluster of nodes. This may result in a significant downtime for the analytics capability while the HeatWave cluster is re-provisioned.
	ClusterSize pulumi.IntInput
	// The DB System [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
	DbSystemId pulumi.StringInput
	// (Updatable) A change to the shape of the nodes in the HeatWave cluster will result in the entire cluster being torn down and re-created with Compute instances of the new Shape. This may result in significant downtime for the analytics capability while the HeatWave cluster is re-provisioned.
	ShapeName pulumi.StringInput
	// (Updatable) The target state for the HeatWave cluster. Could be set to `ACTIVE` or `INACTIVE`.
	State pulumi.StringPtrInput
}

func (MysqlHeatWaveClusterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*mysqlHeatWaveClusterArgs)(nil)).Elem()
}

type MysqlHeatWaveClusterInput interface {
	pulumi.Input

	ToMysqlHeatWaveClusterOutput() MysqlHeatWaveClusterOutput
	ToMysqlHeatWaveClusterOutputWithContext(ctx context.Context) MysqlHeatWaveClusterOutput
}

func (*MysqlHeatWaveCluster) ElementType() reflect.Type {
	return reflect.TypeOf((*MysqlHeatWaveCluster)(nil))
}

func (i *MysqlHeatWaveCluster) ToMysqlHeatWaveClusterOutput() MysqlHeatWaveClusterOutput {
	return i.ToMysqlHeatWaveClusterOutputWithContext(context.Background())
}

func (i *MysqlHeatWaveCluster) ToMysqlHeatWaveClusterOutputWithContext(ctx context.Context) MysqlHeatWaveClusterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MysqlHeatWaveClusterOutput)
}

func (i *MysqlHeatWaveCluster) ToMysqlHeatWaveClusterPtrOutput() MysqlHeatWaveClusterPtrOutput {
	return i.ToMysqlHeatWaveClusterPtrOutputWithContext(context.Background())
}

func (i *MysqlHeatWaveCluster) ToMysqlHeatWaveClusterPtrOutputWithContext(ctx context.Context) MysqlHeatWaveClusterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MysqlHeatWaveClusterPtrOutput)
}

type MysqlHeatWaveClusterPtrInput interface {
	pulumi.Input

	ToMysqlHeatWaveClusterPtrOutput() MysqlHeatWaveClusterPtrOutput
	ToMysqlHeatWaveClusterPtrOutputWithContext(ctx context.Context) MysqlHeatWaveClusterPtrOutput
}

type mysqlHeatWaveClusterPtrType MysqlHeatWaveClusterArgs

func (*mysqlHeatWaveClusterPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MysqlHeatWaveCluster)(nil))
}

func (i *mysqlHeatWaveClusterPtrType) ToMysqlHeatWaveClusterPtrOutput() MysqlHeatWaveClusterPtrOutput {
	return i.ToMysqlHeatWaveClusterPtrOutputWithContext(context.Background())
}

func (i *mysqlHeatWaveClusterPtrType) ToMysqlHeatWaveClusterPtrOutputWithContext(ctx context.Context) MysqlHeatWaveClusterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MysqlHeatWaveClusterPtrOutput)
}

// MysqlHeatWaveClusterArrayInput is an input type that accepts MysqlHeatWaveClusterArray and MysqlHeatWaveClusterArrayOutput values.
// You can construct a concrete instance of `MysqlHeatWaveClusterArrayInput` via:
//
//          MysqlHeatWaveClusterArray{ MysqlHeatWaveClusterArgs{...} }
type MysqlHeatWaveClusterArrayInput interface {
	pulumi.Input

	ToMysqlHeatWaveClusterArrayOutput() MysqlHeatWaveClusterArrayOutput
	ToMysqlHeatWaveClusterArrayOutputWithContext(context.Context) MysqlHeatWaveClusterArrayOutput
}

type MysqlHeatWaveClusterArray []MysqlHeatWaveClusterInput

func (MysqlHeatWaveClusterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MysqlHeatWaveCluster)(nil)).Elem()
}

func (i MysqlHeatWaveClusterArray) ToMysqlHeatWaveClusterArrayOutput() MysqlHeatWaveClusterArrayOutput {
	return i.ToMysqlHeatWaveClusterArrayOutputWithContext(context.Background())
}

func (i MysqlHeatWaveClusterArray) ToMysqlHeatWaveClusterArrayOutputWithContext(ctx context.Context) MysqlHeatWaveClusterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MysqlHeatWaveClusterArrayOutput)
}

// MysqlHeatWaveClusterMapInput is an input type that accepts MysqlHeatWaveClusterMap and MysqlHeatWaveClusterMapOutput values.
// You can construct a concrete instance of `MysqlHeatWaveClusterMapInput` via:
//
//          MysqlHeatWaveClusterMap{ "key": MysqlHeatWaveClusterArgs{...} }
type MysqlHeatWaveClusterMapInput interface {
	pulumi.Input

	ToMysqlHeatWaveClusterMapOutput() MysqlHeatWaveClusterMapOutput
	ToMysqlHeatWaveClusterMapOutputWithContext(context.Context) MysqlHeatWaveClusterMapOutput
}

type MysqlHeatWaveClusterMap map[string]MysqlHeatWaveClusterInput

func (MysqlHeatWaveClusterMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MysqlHeatWaveCluster)(nil)).Elem()
}

func (i MysqlHeatWaveClusterMap) ToMysqlHeatWaveClusterMapOutput() MysqlHeatWaveClusterMapOutput {
	return i.ToMysqlHeatWaveClusterMapOutputWithContext(context.Background())
}

func (i MysqlHeatWaveClusterMap) ToMysqlHeatWaveClusterMapOutputWithContext(ctx context.Context) MysqlHeatWaveClusterMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MysqlHeatWaveClusterMapOutput)
}

type MysqlHeatWaveClusterOutput struct {
	*pulumi.OutputState
}

func (MysqlHeatWaveClusterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MysqlHeatWaveCluster)(nil))
}

func (o MysqlHeatWaveClusterOutput) ToMysqlHeatWaveClusterOutput() MysqlHeatWaveClusterOutput {
	return o
}

func (o MysqlHeatWaveClusterOutput) ToMysqlHeatWaveClusterOutputWithContext(ctx context.Context) MysqlHeatWaveClusterOutput {
	return o
}

func (o MysqlHeatWaveClusterOutput) ToMysqlHeatWaveClusterPtrOutput() MysqlHeatWaveClusterPtrOutput {
	return o.ToMysqlHeatWaveClusterPtrOutputWithContext(context.Background())
}

func (o MysqlHeatWaveClusterOutput) ToMysqlHeatWaveClusterPtrOutputWithContext(ctx context.Context) MysqlHeatWaveClusterPtrOutput {
	return o.ApplyT(func(v MysqlHeatWaveCluster) *MysqlHeatWaveCluster {
		return &v
	}).(MysqlHeatWaveClusterPtrOutput)
}

type MysqlHeatWaveClusterPtrOutput struct {
	*pulumi.OutputState
}

func (MysqlHeatWaveClusterPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MysqlHeatWaveCluster)(nil))
}

func (o MysqlHeatWaveClusterPtrOutput) ToMysqlHeatWaveClusterPtrOutput() MysqlHeatWaveClusterPtrOutput {
	return o
}

func (o MysqlHeatWaveClusterPtrOutput) ToMysqlHeatWaveClusterPtrOutputWithContext(ctx context.Context) MysqlHeatWaveClusterPtrOutput {
	return o
}

type MysqlHeatWaveClusterArrayOutput struct{ *pulumi.OutputState }

func (MysqlHeatWaveClusterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MysqlHeatWaveCluster)(nil))
}

func (o MysqlHeatWaveClusterArrayOutput) ToMysqlHeatWaveClusterArrayOutput() MysqlHeatWaveClusterArrayOutput {
	return o
}

func (o MysqlHeatWaveClusterArrayOutput) ToMysqlHeatWaveClusterArrayOutputWithContext(ctx context.Context) MysqlHeatWaveClusterArrayOutput {
	return o
}

func (o MysqlHeatWaveClusterArrayOutput) Index(i pulumi.IntInput) MysqlHeatWaveClusterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MysqlHeatWaveCluster {
		return vs[0].([]MysqlHeatWaveCluster)[vs[1].(int)]
	}).(MysqlHeatWaveClusterOutput)
}

type MysqlHeatWaveClusterMapOutput struct{ *pulumi.OutputState }

func (MysqlHeatWaveClusterMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]MysqlHeatWaveCluster)(nil))
}

func (o MysqlHeatWaveClusterMapOutput) ToMysqlHeatWaveClusterMapOutput() MysqlHeatWaveClusterMapOutput {
	return o
}

func (o MysqlHeatWaveClusterMapOutput) ToMysqlHeatWaveClusterMapOutputWithContext(ctx context.Context) MysqlHeatWaveClusterMapOutput {
	return o
}

func (o MysqlHeatWaveClusterMapOutput) MapIndex(k pulumi.StringInput) MysqlHeatWaveClusterOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) MysqlHeatWaveCluster {
		return vs[0].(map[string]MysqlHeatWaveCluster)[vs[1].(string)]
	}).(MysqlHeatWaveClusterOutput)
}

func init() {
	pulumi.RegisterOutputType(MysqlHeatWaveClusterOutput{})
	pulumi.RegisterOutputType(MysqlHeatWaveClusterPtrOutput{})
	pulumi.RegisterOutputType(MysqlHeatWaveClusterArrayOutput{})
	pulumi.RegisterOutputType(MysqlHeatWaveClusterMapOutput{})
}
