# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetIdentityRegionSubscriptionsResult',
    'AwaitableGetIdentityRegionSubscriptionsResult',
    'get_identity_region_subscriptions',
]

@pulumi.output_type
class GetIdentityRegionSubscriptionsResult:
    """
    A collection of values returned by GetIdentityRegionSubscriptions.
    """
    def __init__(__self__, filters=None, id=None, region_subscriptions=None, tenancy_id=None):
        if filters and not isinstance(filters, list):
            raise TypeError("Expected argument 'filters' to be a list")
        pulumi.set(__self__, "filters", filters)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if region_subscriptions and not isinstance(region_subscriptions, list):
            raise TypeError("Expected argument 'region_subscriptions' to be a list")
        pulumi.set(__self__, "region_subscriptions", region_subscriptions)
        if tenancy_id and not isinstance(tenancy_id, str):
            raise TypeError("Expected argument 'tenancy_id' to be a str")
        pulumi.set(__self__, "tenancy_id", tenancy_id)

    @property
    @pulumi.getter
    def filters(self) -> Optional[Sequence['outputs.GetIdentityRegionSubscriptionsFilterResult']]:
        return pulumi.get(self, "filters")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="regionSubscriptions")
    def region_subscriptions(self) -> Sequence['outputs.GetIdentityRegionSubscriptionsRegionSubscriptionResult']:
        """
        The list of region_subscriptions.
        """
        return pulumi.get(self, "region_subscriptions")

    @property
    @pulumi.getter(name="tenancyId")
    def tenancy_id(self) -> str:
        return pulumi.get(self, "tenancy_id")


class AwaitableGetIdentityRegionSubscriptionsResult(GetIdentityRegionSubscriptionsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetIdentityRegionSubscriptionsResult(
            filters=self.filters,
            id=self.id,
            region_subscriptions=self.region_subscriptions,
            tenancy_id=self.tenancy_id)


def get_identity_region_subscriptions(filters: Optional[Sequence[pulumi.InputType['GetIdentityRegionSubscriptionsFilterArgs']]] = None,
                                      tenancy_id: Optional[str] = None,
                                      opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetIdentityRegionSubscriptionsResult:
    """
    This data source provides the list of Region Subscriptions in Oracle Cloud Infrastructure Identity service.

    Lists the region subscriptions for the specified tenancy.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_oci as oci

    test_region_subscriptions = oci.get_identity_region_subscriptions(tenancy_id=oci_identity_tenancy["test_tenancy"]["id"])
    ```


    :param str tenancy_id: The OCID of the tenancy.
    """
    __args__ = dict()
    __args__['filters'] = filters
    __args__['tenancyId'] = tenancy_id
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = _utilities.get_version()
    __ret__ = pulumi.runtime.invoke('oci:index/getIdentityRegionSubscriptions:GetIdentityRegionSubscriptions', __args__, opts=opts, typ=GetIdentityRegionSubscriptionsResult).value

    return AwaitableGetIdentityRegionSubscriptionsResult(
        filters=__ret__.filters,
        id=__ret__.id,
        region_subscriptions=__ret__.region_subscriptions,
        tenancy_id=__ret__.tenancy_id)
