// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package oci

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource provides the Ip Sec Connection Tunnel Management resource in Oracle Cloud Infrastructure Core service.
//
// Updates the specified tunnel. This operation lets you change tunnel attributes such as the
// routing type (BGP dynamic routing or static routing). Here are some important notes:
//
//     * If you change the tunnel's routing type or BGP session configuration, the tunnel will go
//     down while it's reprovisioned.
//
//     * If you want to switch the tunnel's `routing` from `STATIC` to `BGP`, make sure the tunnel's
//     BGP session configuration attributes have been set (bgpSessionConfig).
//
//     * If you want to switch the tunnel's `routing` from `BGP` to `STATIC`, make sure the
//     IPSecConnection already has at least one valid CIDR
//     static route.
//
// ** IMPORTANT **
// Destroying `the CoreIpsecConnectionTunnelManagement` leaves the resource in its existing state. It will not destroy the tunnel and it will not return the tunnel to its default values.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-oci/sdk/go/oci"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := oci.NewCoreIpsecConnectionTunnelManagement(ctx, "testIpSecConnectionTunnel", &oci.CoreIpsecConnectionTunnelManagementArgs{
// 			IpsecId:  pulumi.Any(oci_core_ipsec.Test_ipsec.Id),
// 			TunnelId: pulumi.Any(data.Oci_core_ipsec_connection_tunnels.Test_ip_sec_connection_tunnels.Ip_sec_connection_tunnels[0].Id),
// 			Routing:  pulumi.Any(_var.Ip_sec_connection_tunnel_management_routing),
// 			BgpSessionInfos: CoreIpsecConnectionTunnelManagementBgpSessionInfoArray{
// 				&CoreIpsecConnectionTunnelManagementBgpSessionInfoArgs{
// 					CustomerBgpAsn:      pulumi.Any(_var.Ip_sec_connection_tunnel_management_bgp_session_info_customer_bgp_asn),
// 					CustomerInterfaceIp: pulumi.Any(_var.Ip_sec_connection_tunnel_management_bgp_session_info_customer_interface_ip),
// 					OracleInterfaceIp:   pulumi.Any(_var.Ip_sec_connection_tunnel_management_bgp_session_info_oracle_interface_ip),
// 				},
// 			},
// 			DisplayName: pulumi.Any(_var.Ip_sec_connection_tunnel_management_display_name),
// 			EncryptionDomainConfig: &CoreIpsecConnectionTunnelManagementEncryptionDomainConfigArgs{
// 				CpeTrafficSelectors:    pulumi.Any(_var.Ip_sec_connection_tunnel_management_encryption_domain_config_cpe_traffic_selector),
// 				OracleTrafficSelectors: pulumi.Any(_var.Ip_sec_connection_tunnel_management_encryption_domain_config_oracle_traffic_selector),
// 			},
// 			SharedSecret: pulumi.Any(_var.Ip_sec_connection_tunnel_management_shared_secret),
// 			IkeVersion:   pulumi.String("V1"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
type CoreIpsecConnectionTunnelManagement struct {
	pulumi.CustomResourceState

	// Information for establishing a BGP session for the IPSec tunnel. Required if the tunnel uses BGP dynamic routing.
	BgpSessionInfos CoreIpsecConnectionTunnelManagementBgpSessionInfoArrayOutput `pulumi:"bgpSessionInfos"`
	// The OCID of the compartment containing the tunnel.
	CompartmentId pulumi.StringOutput `pulumi:"compartmentId"`
	// The IP address of Cpe headend.  Example: `129.146.17.50`
	CpeIp pulumi.StringOutput `pulumi:"cpeIp"`
	// A user-friendly name. Does not have to be unique, and it's changeable. Avoid entering confidential information.
	DisplayName pulumi.StringOutput `pulumi:"displayName"`
	// Configuration information used by the encryption domain policy. Required if the tunnel uses POLICY routing.
	EncryptionDomainConfig CoreIpsecConnectionTunnelManagementEncryptionDomainConfigOutput `pulumi:"encryptionDomainConfig"`
	// Internet Key Exchange protocol version.
	IkeVersion pulumi.StringOutput `pulumi:"ikeVersion"`
	// The OCID of the IPSec connection.
	IpsecId pulumi.StringOutput `pulumi:"ipsecId"`
	// The type of routing to use for this tunnel (either BGP dynamic routing, STATIC routing or POLICY routing).
	Routing pulumi.StringOutput `pulumi:"routing"`
	// The shared secret (pre-shared key) to use for the IPSec tunnel. If you don't provide a value, Oracle generates a value for you. You can specify your own shared secret later if you like with [UpdateIPSecConnectionTunnelSharedSecret](https://docs.cloud.oracle.com/iaas/api/#/en/iaas/20160918/IPSecConnectionTunnelSharedSecret/UpdateIPSecConnectionTunnelSharedSecret).  Example: `EXAMPLEToUis6j1c.p8G.dVQxcmdfMO0yXMLi.lZTbYCMDGu4V8o`
	SharedSecret pulumi.StringOutput `pulumi:"sharedSecret"`
	// The IPSec connection's tunnel's lifecycle state.
	State pulumi.StringOutput `pulumi:"state"`
	// The tunnel's current state.
	Status pulumi.StringOutput `pulumi:"status"`
	// The date and time the IPSec connection tunnel was created, in the format defined by RFC3339.  Example: `2016-08-25T21:10:29.600Z`
	TimeCreated pulumi.StringOutput `pulumi:"timeCreated"`
	// When the status of the tunnel last changed, in the format defined by RFC3339.  Example: `2016-08-25T21:10:29.600Z`
	TimeStatusUpdated pulumi.StringOutput `pulumi:"timeStatusUpdated"`
	// The OCID of the IPSec connection's tunnel.
	TunnelId pulumi.StringOutput `pulumi:"tunnelId"`
	// The IP address of Oracle's VPN headend.  Example: `129.146.17.50`
	VpnIp pulumi.StringOutput `pulumi:"vpnIp"`
}

// NewCoreIpsecConnectionTunnelManagement registers a new resource with the given unique name, arguments, and options.
func NewCoreIpsecConnectionTunnelManagement(ctx *pulumi.Context,
	name string, args *CoreIpsecConnectionTunnelManagementArgs, opts ...pulumi.ResourceOption) (*CoreIpsecConnectionTunnelManagement, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.IpsecId == nil {
		return nil, errors.New("invalid value for required argument 'IpsecId'")
	}
	if args.Routing == nil {
		return nil, errors.New("invalid value for required argument 'Routing'")
	}
	if args.TunnelId == nil {
		return nil, errors.New("invalid value for required argument 'TunnelId'")
	}
	var resource CoreIpsecConnectionTunnelManagement
	err := ctx.RegisterResource("oci:index/coreIpsecConnectionTunnelManagement:CoreIpsecConnectionTunnelManagement", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCoreIpsecConnectionTunnelManagement gets an existing CoreIpsecConnectionTunnelManagement resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCoreIpsecConnectionTunnelManagement(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CoreIpsecConnectionTunnelManagementState, opts ...pulumi.ResourceOption) (*CoreIpsecConnectionTunnelManagement, error) {
	var resource CoreIpsecConnectionTunnelManagement
	err := ctx.ReadResource("oci:index/coreIpsecConnectionTunnelManagement:CoreIpsecConnectionTunnelManagement", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CoreIpsecConnectionTunnelManagement resources.
type coreIpsecConnectionTunnelManagementState struct {
	// Information for establishing a BGP session for the IPSec tunnel. Required if the tunnel uses BGP dynamic routing.
	BgpSessionInfos []CoreIpsecConnectionTunnelManagementBgpSessionInfo `pulumi:"bgpSessionInfos"`
	// The OCID of the compartment containing the tunnel.
	CompartmentId *string `pulumi:"compartmentId"`
	// The IP address of Cpe headend.  Example: `129.146.17.50`
	CpeIp *string `pulumi:"cpeIp"`
	// A user-friendly name. Does not have to be unique, and it's changeable. Avoid entering confidential information.
	DisplayName *string `pulumi:"displayName"`
	// Configuration information used by the encryption domain policy. Required if the tunnel uses POLICY routing.
	EncryptionDomainConfig *CoreIpsecConnectionTunnelManagementEncryptionDomainConfig `pulumi:"encryptionDomainConfig"`
	// Internet Key Exchange protocol version.
	IkeVersion *string `pulumi:"ikeVersion"`
	// The OCID of the IPSec connection.
	IpsecId *string `pulumi:"ipsecId"`
	// The type of routing to use for this tunnel (either BGP dynamic routing, STATIC routing or POLICY routing).
	Routing *string `pulumi:"routing"`
	// The shared secret (pre-shared key) to use for the IPSec tunnel. If you don't provide a value, Oracle generates a value for you. You can specify your own shared secret later if you like with [UpdateIPSecConnectionTunnelSharedSecret](https://docs.cloud.oracle.com/iaas/api/#/en/iaas/20160918/IPSecConnectionTunnelSharedSecret/UpdateIPSecConnectionTunnelSharedSecret).  Example: `EXAMPLEToUis6j1c.p8G.dVQxcmdfMO0yXMLi.lZTbYCMDGu4V8o`
	SharedSecret *string `pulumi:"sharedSecret"`
	// The IPSec connection's tunnel's lifecycle state.
	State *string `pulumi:"state"`
	// The tunnel's current state.
	Status *string `pulumi:"status"`
	// The date and time the IPSec connection tunnel was created, in the format defined by RFC3339.  Example: `2016-08-25T21:10:29.600Z`
	TimeCreated *string `pulumi:"timeCreated"`
	// When the status of the tunnel last changed, in the format defined by RFC3339.  Example: `2016-08-25T21:10:29.600Z`
	TimeStatusUpdated *string `pulumi:"timeStatusUpdated"`
	// The OCID of the IPSec connection's tunnel.
	TunnelId *string `pulumi:"tunnelId"`
	// The IP address of Oracle's VPN headend.  Example: `129.146.17.50`
	VpnIp *string `pulumi:"vpnIp"`
}

type CoreIpsecConnectionTunnelManagementState struct {
	// Information for establishing a BGP session for the IPSec tunnel. Required if the tunnel uses BGP dynamic routing.
	BgpSessionInfos CoreIpsecConnectionTunnelManagementBgpSessionInfoArrayInput
	// The OCID of the compartment containing the tunnel.
	CompartmentId pulumi.StringPtrInput
	// The IP address of Cpe headend.  Example: `129.146.17.50`
	CpeIp pulumi.StringPtrInput
	// A user-friendly name. Does not have to be unique, and it's changeable. Avoid entering confidential information.
	DisplayName pulumi.StringPtrInput
	// Configuration information used by the encryption domain policy. Required if the tunnel uses POLICY routing.
	EncryptionDomainConfig CoreIpsecConnectionTunnelManagementEncryptionDomainConfigPtrInput
	// Internet Key Exchange protocol version.
	IkeVersion pulumi.StringPtrInput
	// The OCID of the IPSec connection.
	IpsecId pulumi.StringPtrInput
	// The type of routing to use for this tunnel (either BGP dynamic routing, STATIC routing or POLICY routing).
	Routing pulumi.StringPtrInput
	// The shared secret (pre-shared key) to use for the IPSec tunnel. If you don't provide a value, Oracle generates a value for you. You can specify your own shared secret later if you like with [UpdateIPSecConnectionTunnelSharedSecret](https://docs.cloud.oracle.com/iaas/api/#/en/iaas/20160918/IPSecConnectionTunnelSharedSecret/UpdateIPSecConnectionTunnelSharedSecret).  Example: `EXAMPLEToUis6j1c.p8G.dVQxcmdfMO0yXMLi.lZTbYCMDGu4V8o`
	SharedSecret pulumi.StringPtrInput
	// The IPSec connection's tunnel's lifecycle state.
	State pulumi.StringPtrInput
	// The tunnel's current state.
	Status pulumi.StringPtrInput
	// The date and time the IPSec connection tunnel was created, in the format defined by RFC3339.  Example: `2016-08-25T21:10:29.600Z`
	TimeCreated pulumi.StringPtrInput
	// When the status of the tunnel last changed, in the format defined by RFC3339.  Example: `2016-08-25T21:10:29.600Z`
	TimeStatusUpdated pulumi.StringPtrInput
	// The OCID of the IPSec connection's tunnel.
	TunnelId pulumi.StringPtrInput
	// The IP address of Oracle's VPN headend.  Example: `129.146.17.50`
	VpnIp pulumi.StringPtrInput
}

func (CoreIpsecConnectionTunnelManagementState) ElementType() reflect.Type {
	return reflect.TypeOf((*coreIpsecConnectionTunnelManagementState)(nil)).Elem()
}

type coreIpsecConnectionTunnelManagementArgs struct {
	// Information for establishing a BGP session for the IPSec tunnel. Required if the tunnel uses BGP dynamic routing.
	BgpSessionInfos []CoreIpsecConnectionTunnelManagementBgpSessionInfo `pulumi:"bgpSessionInfos"`
	// A user-friendly name. Does not have to be unique, and it's changeable. Avoid entering confidential information.
	DisplayName *string `pulumi:"displayName"`
	// Configuration information used by the encryption domain policy. Required if the tunnel uses POLICY routing.
	EncryptionDomainConfig *CoreIpsecConnectionTunnelManagementEncryptionDomainConfig `pulumi:"encryptionDomainConfig"`
	// Internet Key Exchange protocol version.
	IkeVersion *string `pulumi:"ikeVersion"`
	// The OCID of the IPSec connection.
	IpsecId string `pulumi:"ipsecId"`
	// The type of routing to use for this tunnel (either BGP dynamic routing, STATIC routing or POLICY routing).
	Routing string `pulumi:"routing"`
	// The shared secret (pre-shared key) to use for the IPSec tunnel. If you don't provide a value, Oracle generates a value for you. You can specify your own shared secret later if you like with [UpdateIPSecConnectionTunnelSharedSecret](https://docs.cloud.oracle.com/iaas/api/#/en/iaas/20160918/IPSecConnectionTunnelSharedSecret/UpdateIPSecConnectionTunnelSharedSecret).  Example: `EXAMPLEToUis6j1c.p8G.dVQxcmdfMO0yXMLi.lZTbYCMDGu4V8o`
	SharedSecret *string `pulumi:"sharedSecret"`
	// The OCID of the IPSec connection's tunnel.
	TunnelId string `pulumi:"tunnelId"`
}

// The set of arguments for constructing a CoreIpsecConnectionTunnelManagement resource.
type CoreIpsecConnectionTunnelManagementArgs struct {
	// Information for establishing a BGP session for the IPSec tunnel. Required if the tunnel uses BGP dynamic routing.
	BgpSessionInfos CoreIpsecConnectionTunnelManagementBgpSessionInfoArrayInput
	// A user-friendly name. Does not have to be unique, and it's changeable. Avoid entering confidential information.
	DisplayName pulumi.StringPtrInput
	// Configuration information used by the encryption domain policy. Required if the tunnel uses POLICY routing.
	EncryptionDomainConfig CoreIpsecConnectionTunnelManagementEncryptionDomainConfigPtrInput
	// Internet Key Exchange protocol version.
	IkeVersion pulumi.StringPtrInput
	// The OCID of the IPSec connection.
	IpsecId pulumi.StringInput
	// The type of routing to use for this tunnel (either BGP dynamic routing, STATIC routing or POLICY routing).
	Routing pulumi.StringInput
	// The shared secret (pre-shared key) to use for the IPSec tunnel. If you don't provide a value, Oracle generates a value for you. You can specify your own shared secret later if you like with [UpdateIPSecConnectionTunnelSharedSecret](https://docs.cloud.oracle.com/iaas/api/#/en/iaas/20160918/IPSecConnectionTunnelSharedSecret/UpdateIPSecConnectionTunnelSharedSecret).  Example: `EXAMPLEToUis6j1c.p8G.dVQxcmdfMO0yXMLi.lZTbYCMDGu4V8o`
	SharedSecret pulumi.StringPtrInput
	// The OCID of the IPSec connection's tunnel.
	TunnelId pulumi.StringInput
}

func (CoreIpsecConnectionTunnelManagementArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*coreIpsecConnectionTunnelManagementArgs)(nil)).Elem()
}

type CoreIpsecConnectionTunnelManagementInput interface {
	pulumi.Input

	ToCoreIpsecConnectionTunnelManagementOutput() CoreIpsecConnectionTunnelManagementOutput
	ToCoreIpsecConnectionTunnelManagementOutputWithContext(ctx context.Context) CoreIpsecConnectionTunnelManagementOutput
}

func (*CoreIpsecConnectionTunnelManagement) ElementType() reflect.Type {
	return reflect.TypeOf((*CoreIpsecConnectionTunnelManagement)(nil))
}

func (i *CoreIpsecConnectionTunnelManagement) ToCoreIpsecConnectionTunnelManagementOutput() CoreIpsecConnectionTunnelManagementOutput {
	return i.ToCoreIpsecConnectionTunnelManagementOutputWithContext(context.Background())
}

func (i *CoreIpsecConnectionTunnelManagement) ToCoreIpsecConnectionTunnelManagementOutputWithContext(ctx context.Context) CoreIpsecConnectionTunnelManagementOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CoreIpsecConnectionTunnelManagementOutput)
}

func (i *CoreIpsecConnectionTunnelManagement) ToCoreIpsecConnectionTunnelManagementPtrOutput() CoreIpsecConnectionTunnelManagementPtrOutput {
	return i.ToCoreIpsecConnectionTunnelManagementPtrOutputWithContext(context.Background())
}

func (i *CoreIpsecConnectionTunnelManagement) ToCoreIpsecConnectionTunnelManagementPtrOutputWithContext(ctx context.Context) CoreIpsecConnectionTunnelManagementPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CoreIpsecConnectionTunnelManagementPtrOutput)
}

type CoreIpsecConnectionTunnelManagementPtrInput interface {
	pulumi.Input

	ToCoreIpsecConnectionTunnelManagementPtrOutput() CoreIpsecConnectionTunnelManagementPtrOutput
	ToCoreIpsecConnectionTunnelManagementPtrOutputWithContext(ctx context.Context) CoreIpsecConnectionTunnelManagementPtrOutput
}

type coreIpsecConnectionTunnelManagementPtrType CoreIpsecConnectionTunnelManagementArgs

func (*coreIpsecConnectionTunnelManagementPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CoreIpsecConnectionTunnelManagement)(nil))
}

func (i *coreIpsecConnectionTunnelManagementPtrType) ToCoreIpsecConnectionTunnelManagementPtrOutput() CoreIpsecConnectionTunnelManagementPtrOutput {
	return i.ToCoreIpsecConnectionTunnelManagementPtrOutputWithContext(context.Background())
}

func (i *coreIpsecConnectionTunnelManagementPtrType) ToCoreIpsecConnectionTunnelManagementPtrOutputWithContext(ctx context.Context) CoreIpsecConnectionTunnelManagementPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CoreIpsecConnectionTunnelManagementPtrOutput)
}

// CoreIpsecConnectionTunnelManagementArrayInput is an input type that accepts CoreIpsecConnectionTunnelManagementArray and CoreIpsecConnectionTunnelManagementArrayOutput values.
// You can construct a concrete instance of `CoreIpsecConnectionTunnelManagementArrayInput` via:
//
//          CoreIpsecConnectionTunnelManagementArray{ CoreIpsecConnectionTunnelManagementArgs{...} }
type CoreIpsecConnectionTunnelManagementArrayInput interface {
	pulumi.Input

	ToCoreIpsecConnectionTunnelManagementArrayOutput() CoreIpsecConnectionTunnelManagementArrayOutput
	ToCoreIpsecConnectionTunnelManagementArrayOutputWithContext(context.Context) CoreIpsecConnectionTunnelManagementArrayOutput
}

type CoreIpsecConnectionTunnelManagementArray []CoreIpsecConnectionTunnelManagementInput

func (CoreIpsecConnectionTunnelManagementArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CoreIpsecConnectionTunnelManagement)(nil)).Elem()
}

func (i CoreIpsecConnectionTunnelManagementArray) ToCoreIpsecConnectionTunnelManagementArrayOutput() CoreIpsecConnectionTunnelManagementArrayOutput {
	return i.ToCoreIpsecConnectionTunnelManagementArrayOutputWithContext(context.Background())
}

func (i CoreIpsecConnectionTunnelManagementArray) ToCoreIpsecConnectionTunnelManagementArrayOutputWithContext(ctx context.Context) CoreIpsecConnectionTunnelManagementArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CoreIpsecConnectionTunnelManagementArrayOutput)
}

// CoreIpsecConnectionTunnelManagementMapInput is an input type that accepts CoreIpsecConnectionTunnelManagementMap and CoreIpsecConnectionTunnelManagementMapOutput values.
// You can construct a concrete instance of `CoreIpsecConnectionTunnelManagementMapInput` via:
//
//          CoreIpsecConnectionTunnelManagementMap{ "key": CoreIpsecConnectionTunnelManagementArgs{...} }
type CoreIpsecConnectionTunnelManagementMapInput interface {
	pulumi.Input

	ToCoreIpsecConnectionTunnelManagementMapOutput() CoreIpsecConnectionTunnelManagementMapOutput
	ToCoreIpsecConnectionTunnelManagementMapOutputWithContext(context.Context) CoreIpsecConnectionTunnelManagementMapOutput
}

type CoreIpsecConnectionTunnelManagementMap map[string]CoreIpsecConnectionTunnelManagementInput

func (CoreIpsecConnectionTunnelManagementMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CoreIpsecConnectionTunnelManagement)(nil)).Elem()
}

func (i CoreIpsecConnectionTunnelManagementMap) ToCoreIpsecConnectionTunnelManagementMapOutput() CoreIpsecConnectionTunnelManagementMapOutput {
	return i.ToCoreIpsecConnectionTunnelManagementMapOutputWithContext(context.Background())
}

func (i CoreIpsecConnectionTunnelManagementMap) ToCoreIpsecConnectionTunnelManagementMapOutputWithContext(ctx context.Context) CoreIpsecConnectionTunnelManagementMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CoreIpsecConnectionTunnelManagementMapOutput)
}

type CoreIpsecConnectionTunnelManagementOutput struct {
	*pulumi.OutputState
}

func (CoreIpsecConnectionTunnelManagementOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CoreIpsecConnectionTunnelManagement)(nil))
}

func (o CoreIpsecConnectionTunnelManagementOutput) ToCoreIpsecConnectionTunnelManagementOutput() CoreIpsecConnectionTunnelManagementOutput {
	return o
}

func (o CoreIpsecConnectionTunnelManagementOutput) ToCoreIpsecConnectionTunnelManagementOutputWithContext(ctx context.Context) CoreIpsecConnectionTunnelManagementOutput {
	return o
}

func (o CoreIpsecConnectionTunnelManagementOutput) ToCoreIpsecConnectionTunnelManagementPtrOutput() CoreIpsecConnectionTunnelManagementPtrOutput {
	return o.ToCoreIpsecConnectionTunnelManagementPtrOutputWithContext(context.Background())
}

func (o CoreIpsecConnectionTunnelManagementOutput) ToCoreIpsecConnectionTunnelManagementPtrOutputWithContext(ctx context.Context) CoreIpsecConnectionTunnelManagementPtrOutput {
	return o.ApplyT(func(v CoreIpsecConnectionTunnelManagement) *CoreIpsecConnectionTunnelManagement {
		return &v
	}).(CoreIpsecConnectionTunnelManagementPtrOutput)
}

type CoreIpsecConnectionTunnelManagementPtrOutput struct {
	*pulumi.OutputState
}

func (CoreIpsecConnectionTunnelManagementPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CoreIpsecConnectionTunnelManagement)(nil))
}

func (o CoreIpsecConnectionTunnelManagementPtrOutput) ToCoreIpsecConnectionTunnelManagementPtrOutput() CoreIpsecConnectionTunnelManagementPtrOutput {
	return o
}

func (o CoreIpsecConnectionTunnelManagementPtrOutput) ToCoreIpsecConnectionTunnelManagementPtrOutputWithContext(ctx context.Context) CoreIpsecConnectionTunnelManagementPtrOutput {
	return o
}

type CoreIpsecConnectionTunnelManagementArrayOutput struct{ *pulumi.OutputState }

func (CoreIpsecConnectionTunnelManagementArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CoreIpsecConnectionTunnelManagement)(nil))
}

func (o CoreIpsecConnectionTunnelManagementArrayOutput) ToCoreIpsecConnectionTunnelManagementArrayOutput() CoreIpsecConnectionTunnelManagementArrayOutput {
	return o
}

func (o CoreIpsecConnectionTunnelManagementArrayOutput) ToCoreIpsecConnectionTunnelManagementArrayOutputWithContext(ctx context.Context) CoreIpsecConnectionTunnelManagementArrayOutput {
	return o
}

func (o CoreIpsecConnectionTunnelManagementArrayOutput) Index(i pulumi.IntInput) CoreIpsecConnectionTunnelManagementOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CoreIpsecConnectionTunnelManagement {
		return vs[0].([]CoreIpsecConnectionTunnelManagement)[vs[1].(int)]
	}).(CoreIpsecConnectionTunnelManagementOutput)
}

type CoreIpsecConnectionTunnelManagementMapOutput struct{ *pulumi.OutputState }

func (CoreIpsecConnectionTunnelManagementMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]CoreIpsecConnectionTunnelManagement)(nil))
}

func (o CoreIpsecConnectionTunnelManagementMapOutput) ToCoreIpsecConnectionTunnelManagementMapOutput() CoreIpsecConnectionTunnelManagementMapOutput {
	return o
}

func (o CoreIpsecConnectionTunnelManagementMapOutput) ToCoreIpsecConnectionTunnelManagementMapOutputWithContext(ctx context.Context) CoreIpsecConnectionTunnelManagementMapOutput {
	return o
}

func (o CoreIpsecConnectionTunnelManagementMapOutput) MapIndex(k pulumi.StringInput) CoreIpsecConnectionTunnelManagementOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) CoreIpsecConnectionTunnelManagement {
		return vs[0].(map[string]CoreIpsecConnectionTunnelManagement)[vs[1].(string)]
	}).(CoreIpsecConnectionTunnelManagementOutput)
}

func init() {
	pulumi.RegisterOutputType(CoreIpsecConnectionTunnelManagementOutput{})
	pulumi.RegisterOutputType(CoreIpsecConnectionTunnelManagementPtrOutput{})
	pulumi.RegisterOutputType(CoreIpsecConnectionTunnelManagementArrayOutput{})
	pulumi.RegisterOutputType(CoreIpsecConnectionTunnelManagementMapOutput{})
}
