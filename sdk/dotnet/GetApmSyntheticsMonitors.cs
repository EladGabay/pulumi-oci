// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci
{
    public static class GetApmSyntheticsMonitors
    {
        /// <summary>
        /// This data source provides the list of Monitors in Oracle Cloud Infrastructure Apm Synthetics service.
        /// 
        /// Returns a list of monitors.
        /// 
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var testMonitors = Output.Create(Oci.GetApmSyntheticsMonitors.InvokeAsync(new Oci.GetApmSyntheticsMonitorsArgs
        ///         {
        ///             ApmDomainId = oci_apm_synthetics_apm_domain.Test_apm_domain.Id,
        ///             DisplayName = @var.Monitor_display_name,
        ///             MonitorType = @var.Monitor_monitor_type,
        ///             ScriptId = oci_apm_synthetics_script.Test_script.Id,
        ///             Status = @var.Monitor_status,
        ///         }));
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetApmSyntheticsMonitorsResult> InvokeAsync(GetApmSyntheticsMonitorsArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetApmSyntheticsMonitorsResult>("oci:index/getApmSyntheticsMonitors:GetApmSyntheticsMonitors", args ?? new GetApmSyntheticsMonitorsArgs(), options.WithVersion());
    }


    public sealed class GetApmSyntheticsMonitorsArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The APM domain ID the request is intended for.
        /// </summary>
        [Input("apmDomainId", required: true)]
        public string ApmDomainId { get; set; } = null!;

        /// <summary>
        /// A filter to return only resources that match the entire display name given.
        /// </summary>
        [Input("displayName")]
        public string? DisplayName { get; set; }

        [Input("filters")]
        private List<Inputs.GetApmSyntheticsMonitorsFilterArgs>? _filters;
        public List<Inputs.GetApmSyntheticsMonitorsFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetApmSyntheticsMonitorsFilterArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// A filter to return only monitors that match the given monitor type. Supported values are SCRIPTED_BROWSER, BROWSER, SCRIPTED_REST and REST.
        /// </summary>
        [Input("monitorType")]
        public string? MonitorType { get; set; }

        /// <summary>
        /// A filter to return only monitors using scriptId.
        /// </summary>
        [Input("scriptId")]
        public string? ScriptId { get; set; }

        /// <summary>
        /// A filter to return only monitors that match the status given.
        /// </summary>
        [Input("status")]
        public string? Status { get; set; }

        public GetApmSyntheticsMonitorsArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetApmSyntheticsMonitorsResult
    {
        public readonly string ApmDomainId;
        /// <summary>
        /// Unique name that can be edited. The name should not contain any confidential information.
        /// </summary>
        public readonly string? DisplayName;
        public readonly ImmutableArray<Outputs.GetApmSyntheticsMonitorsFilterResult> Filters;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The list of monitor_collection.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetApmSyntheticsMonitorsMonitorCollectionResult> MonitorCollections;
        /// <summary>
        /// Type of the monitor.
        /// </summary>
        public readonly string? MonitorType;
        /// <summary>
        /// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the script. scriptId is mandatory for creation of SCRIPTED_BROWSER and SCRIPTED_REST monitor types. For other monitor types, it should be set to null.
        /// </summary>
        public readonly string? ScriptId;
        /// <summary>
        /// Enables or disables the monitor.
        /// </summary>
        public readonly string? Status;

        [OutputConstructor]
        private GetApmSyntheticsMonitorsResult(
            string apmDomainId,

            string? displayName,

            ImmutableArray<Outputs.GetApmSyntheticsMonitorsFilterResult> filters,

            string id,

            ImmutableArray<Outputs.GetApmSyntheticsMonitorsMonitorCollectionResult> monitorCollections,

            string? monitorType,

            string? scriptId,

            string? status)
        {
            ApmDomainId = apmDomainId;
            DisplayName = displayName;
            Filters = filters;
            Id = id;
            MonitorCollections = monitorCollections;
            MonitorType = monitorType;
            ScriptId = scriptId;
            Status = status;
        }
    }
}
