// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci
{
    public static class GetFileStorageSnapshots
    {
        /// <summary>
        /// This data source provides the list of Snapshots in Oracle Cloud Infrastructure File Storage service.
        /// 
        /// Lists snapshots of the specified file system.
        /// 
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var testSnapshots = Output.Create(Oci.GetFileStorageSnapshots.InvokeAsync(new Oci.GetFileStorageSnapshotsArgs
        ///         {
        ///             FileSystemId = oci_file_storage_file_system.Test_file_system.Id,
        ///             Id = @var.Snapshot_id,
        ///             State = @var.Snapshot_state,
        ///         }));
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetFileStorageSnapshotsResult> InvokeAsync(GetFileStorageSnapshotsArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetFileStorageSnapshotsResult>("oci:index/getFileStorageSnapshots:GetFileStorageSnapshots", args ?? new GetFileStorageSnapshotsArgs(), options.WithVersion());
    }


    public sealed class GetFileStorageSnapshotsArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the file system.
        /// </summary>
        [Input("fileSystemId", required: true)]
        public string FileSystemId { get; set; } = null!;

        [Input("filters")]
        private List<Inputs.GetFileStorageSnapshotsFilterArgs>? _filters;
        public List<Inputs.GetFileStorageSnapshotsFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetFileStorageSnapshotsFilterArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// Filter results by [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm). Must be an OCID of the correct type for the resouce type.
        /// </summary>
        [Input("id")]
        public string? Id { get; set; }

        /// <summary>
        /// Filter results by the specified lifecycle state. Must be a valid state for the resource type.
        /// </summary>
        [Input("state")]
        public string? State { get; set; }

        public GetFileStorageSnapshotsArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetFileStorageSnapshotsResult
    {
        /// <summary>
        /// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the file system from which the snapshot was created.
        /// </summary>
        public readonly string FileSystemId;
        public readonly ImmutableArray<Outputs.GetFileStorageSnapshotsFilterResult> Filters;
        /// <summary>
        /// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the snapshot.
        /// </summary>
        public readonly string? Id;
        /// <summary>
        /// The list of snapshots.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetFileStorageSnapshotsSnapshotResult> Snapshots;
        /// <summary>
        /// The current state of the snapshot.
        /// </summary>
        public readonly string? State;

        [OutputConstructor]
        private GetFileStorageSnapshotsResult(
            string fileSystemId,

            ImmutableArray<Outputs.GetFileStorageSnapshotsFilterResult> filters,

            string? id,

            ImmutableArray<Outputs.GetFileStorageSnapshotsSnapshotResult> snapshots,

            string? state)
        {
            FileSystemId = fileSystemId;
            Filters = filters;
            Id = id;
            Snapshots = snapshots;
            State = state;
        }
    }
}
