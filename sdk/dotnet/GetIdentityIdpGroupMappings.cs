// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci
{
    public static class GetIdentityIdpGroupMappings
    {
        /// <summary>
        /// This data source provides the list of Idp Group Mappings in Oracle Cloud Infrastructure Identity service.
        /// 
        /// Lists the group mappings for the specified identity provider.
        /// 
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var testIdpGroupMappings = Output.Create(Oci.GetIdentityIdpGroupMappings.InvokeAsync(new Oci.GetIdentityIdpGroupMappingsArgs
        ///         {
        ///             IdentityProviderId = oci_identity_identity_provider.Test_identity_provider.Id,
        ///         }));
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetIdentityIdpGroupMappingsResult> InvokeAsync(GetIdentityIdpGroupMappingsArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetIdentityIdpGroupMappingsResult>("oci:index/getIdentityIdpGroupMappings:GetIdentityIdpGroupMappings", args ?? new GetIdentityIdpGroupMappingsArgs(), options.WithVersion());
    }


    public sealed class GetIdentityIdpGroupMappingsArgs : Pulumi.InvokeArgs
    {
        [Input("filters")]
        private List<Inputs.GetIdentityIdpGroupMappingsFilterArgs>? _filters;
        public List<Inputs.GetIdentityIdpGroupMappingsFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetIdentityIdpGroupMappingsFilterArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// The OCID of the identity provider.
        /// </summary>
        [Input("identityProviderId", required: true)]
        public string IdentityProviderId { get; set; } = null!;

        public GetIdentityIdpGroupMappingsArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetIdentityIdpGroupMappingsResult
    {
        public readonly ImmutableArray<Outputs.GetIdentityIdpGroupMappingsFilterResult> Filters;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The OCID of the `IdentityProvider` this mapping belongs to.
        /// </summary>
        public readonly string IdentityProviderId;
        /// <summary>
        /// The list of idp_group_mappings.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetIdentityIdpGroupMappingsIdpGroupMappingResult> IdpGroupMappings;

        [OutputConstructor]
        private GetIdentityIdpGroupMappingsResult(
            ImmutableArray<Outputs.GetIdentityIdpGroupMappingsFilterResult> filters,

            string id,

            string identityProviderId,

            ImmutableArray<Outputs.GetIdentityIdpGroupMappingsIdpGroupMappingResult> idpGroupMappings)
        {
            Filters = filters;
            Id = id;
            IdentityProviderId = identityProviderId;
            IdpGroupMappings = idpGroupMappings;
        }
    }
}
