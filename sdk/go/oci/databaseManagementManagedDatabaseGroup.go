// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package oci

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource provides the Managed Database Group resource in Oracle Cloud Infrastructure Database Management service.
//
// Creates a Managed Database Group. The group does not contain any
// Managed Databases when it is created, and they must be added later.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-oci/sdk/go/oci"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := oci.NewDatabaseManagementManagedDatabaseGroup(ctx, "testManagedDatabaseGroup", &oci.DatabaseManagementManagedDatabaseGroupArgs{
// 			CompartmentId: pulumi.Any(_var.Compartment_id),
// 			Description:   pulumi.Any(_var.Managed_database_group_description),
// 			ManagedDatabases: DatabaseManagementManagedDatabaseGroupManagedDatabaseArray{
// 				&DatabaseManagementManagedDatabaseGroupManagedDatabaseArgs{
// 					Id: pulumi.Any(_var.Managed_database_id),
// 				},
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// ManagedDatabaseGroups can be imported using the `id`, e.g.
//
// ```sh
//  $ pulumi import oci:index/databaseManagementManagedDatabaseGroup:DatabaseManagementManagedDatabaseGroup test_managed_database_group "id"
// ```
type DatabaseManagementManagedDatabaseGroup struct {
	pulumi.CustomResourceState

	// (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment in which the Managed Database Group resides.
	CompartmentId pulumi.StringOutput `pulumi:"compartmentId"`
	// (Updatable) The information specified by the user about the Managed Database Group.
	Description pulumi.StringOutput `pulumi:"description"`
	// (Updatable) Set of Managed Databases that the user wants to add to the Managed Database Group. Specifying a block will add the Managed Database to Managed Database Group and removing the block will remove Managed Database from the Managed Database Group.
	ManagedDatabases DatabaseManagementManagedDatabaseGroupManagedDatabaseArrayOutput `pulumi:"managedDatabases"`
	// The name of the Managed Database Group. Valid characters are uppercase or lowercase letters, numbers, and "_". The name of the Managed Database Group cannot be modified. It must be unique in the compartment and must begin with an alphabetic character.
	Name pulumi.StringOutput `pulumi:"name"`
	// The current lifecycle state of the Managed Database Group.
	State pulumi.StringOutput `pulumi:"state"`
	// The date and time the Managed Database Group was created.
	TimeCreated pulumi.StringOutput `pulumi:"timeCreated"`
	// The date and time the Managed Database Group was last updated.
	TimeUpdated pulumi.StringOutput `pulumi:"timeUpdated"`
}

// NewDatabaseManagementManagedDatabaseGroup registers a new resource with the given unique name, arguments, and options.
func NewDatabaseManagementManagedDatabaseGroup(ctx *pulumi.Context,
	name string, args *DatabaseManagementManagedDatabaseGroupArgs, opts ...pulumi.ResourceOption) (*DatabaseManagementManagedDatabaseGroup, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CompartmentId == nil {
		return nil, errors.New("invalid value for required argument 'CompartmentId'")
	}
	var resource DatabaseManagementManagedDatabaseGroup
	err := ctx.RegisterResource("oci:index/databaseManagementManagedDatabaseGroup:DatabaseManagementManagedDatabaseGroup", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDatabaseManagementManagedDatabaseGroup gets an existing DatabaseManagementManagedDatabaseGroup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDatabaseManagementManagedDatabaseGroup(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DatabaseManagementManagedDatabaseGroupState, opts ...pulumi.ResourceOption) (*DatabaseManagementManagedDatabaseGroup, error) {
	var resource DatabaseManagementManagedDatabaseGroup
	err := ctx.ReadResource("oci:index/databaseManagementManagedDatabaseGroup:DatabaseManagementManagedDatabaseGroup", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DatabaseManagementManagedDatabaseGroup resources.
type databaseManagementManagedDatabaseGroupState struct {
	// (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment in which the Managed Database Group resides.
	CompartmentId *string `pulumi:"compartmentId"`
	// (Updatable) The information specified by the user about the Managed Database Group.
	Description *string `pulumi:"description"`
	// (Updatable) Set of Managed Databases that the user wants to add to the Managed Database Group. Specifying a block will add the Managed Database to Managed Database Group and removing the block will remove Managed Database from the Managed Database Group.
	ManagedDatabases []DatabaseManagementManagedDatabaseGroupManagedDatabase `pulumi:"managedDatabases"`
	// The name of the Managed Database Group. Valid characters are uppercase or lowercase letters, numbers, and "_". The name of the Managed Database Group cannot be modified. It must be unique in the compartment and must begin with an alphabetic character.
	Name *string `pulumi:"name"`
	// The current lifecycle state of the Managed Database Group.
	State *string `pulumi:"state"`
	// The date and time the Managed Database Group was created.
	TimeCreated *string `pulumi:"timeCreated"`
	// The date and time the Managed Database Group was last updated.
	TimeUpdated *string `pulumi:"timeUpdated"`
}

type DatabaseManagementManagedDatabaseGroupState struct {
	// (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment in which the Managed Database Group resides.
	CompartmentId pulumi.StringPtrInput
	// (Updatable) The information specified by the user about the Managed Database Group.
	Description pulumi.StringPtrInput
	// (Updatable) Set of Managed Databases that the user wants to add to the Managed Database Group. Specifying a block will add the Managed Database to Managed Database Group and removing the block will remove Managed Database from the Managed Database Group.
	ManagedDatabases DatabaseManagementManagedDatabaseGroupManagedDatabaseArrayInput
	// The name of the Managed Database Group. Valid characters are uppercase or lowercase letters, numbers, and "_". The name of the Managed Database Group cannot be modified. It must be unique in the compartment and must begin with an alphabetic character.
	Name pulumi.StringPtrInput
	// The current lifecycle state of the Managed Database Group.
	State pulumi.StringPtrInput
	// The date and time the Managed Database Group was created.
	TimeCreated pulumi.StringPtrInput
	// The date and time the Managed Database Group was last updated.
	TimeUpdated pulumi.StringPtrInput
}

func (DatabaseManagementManagedDatabaseGroupState) ElementType() reflect.Type {
	return reflect.TypeOf((*databaseManagementManagedDatabaseGroupState)(nil)).Elem()
}

type databaseManagementManagedDatabaseGroupArgs struct {
	// (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment in which the Managed Database Group resides.
	CompartmentId string `pulumi:"compartmentId"`
	// (Updatable) The information specified by the user about the Managed Database Group.
	Description *string `pulumi:"description"`
	// (Updatable) Set of Managed Databases that the user wants to add to the Managed Database Group. Specifying a block will add the Managed Database to Managed Database Group and removing the block will remove Managed Database from the Managed Database Group.
	ManagedDatabases []DatabaseManagementManagedDatabaseGroupManagedDatabase `pulumi:"managedDatabases"`
	// The name of the Managed Database Group. Valid characters are uppercase or lowercase letters, numbers, and "_". The name of the Managed Database Group cannot be modified. It must be unique in the compartment and must begin with an alphabetic character.
	Name *string `pulumi:"name"`
}

// The set of arguments for constructing a DatabaseManagementManagedDatabaseGroup resource.
type DatabaseManagementManagedDatabaseGroupArgs struct {
	// (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment in which the Managed Database Group resides.
	CompartmentId pulumi.StringInput
	// (Updatable) The information specified by the user about the Managed Database Group.
	Description pulumi.StringPtrInput
	// (Updatable) Set of Managed Databases that the user wants to add to the Managed Database Group. Specifying a block will add the Managed Database to Managed Database Group and removing the block will remove Managed Database from the Managed Database Group.
	ManagedDatabases DatabaseManagementManagedDatabaseGroupManagedDatabaseArrayInput
	// The name of the Managed Database Group. Valid characters are uppercase or lowercase letters, numbers, and "_". The name of the Managed Database Group cannot be modified. It must be unique in the compartment and must begin with an alphabetic character.
	Name pulumi.StringPtrInput
}

func (DatabaseManagementManagedDatabaseGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*databaseManagementManagedDatabaseGroupArgs)(nil)).Elem()
}

type DatabaseManagementManagedDatabaseGroupInput interface {
	pulumi.Input

	ToDatabaseManagementManagedDatabaseGroupOutput() DatabaseManagementManagedDatabaseGroupOutput
	ToDatabaseManagementManagedDatabaseGroupOutputWithContext(ctx context.Context) DatabaseManagementManagedDatabaseGroupOutput
}

func (*DatabaseManagementManagedDatabaseGroup) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseManagementManagedDatabaseGroup)(nil))
}

func (i *DatabaseManagementManagedDatabaseGroup) ToDatabaseManagementManagedDatabaseGroupOutput() DatabaseManagementManagedDatabaseGroupOutput {
	return i.ToDatabaseManagementManagedDatabaseGroupOutputWithContext(context.Background())
}

func (i *DatabaseManagementManagedDatabaseGroup) ToDatabaseManagementManagedDatabaseGroupOutputWithContext(ctx context.Context) DatabaseManagementManagedDatabaseGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseManagementManagedDatabaseGroupOutput)
}

func (i *DatabaseManagementManagedDatabaseGroup) ToDatabaseManagementManagedDatabaseGroupPtrOutput() DatabaseManagementManagedDatabaseGroupPtrOutput {
	return i.ToDatabaseManagementManagedDatabaseGroupPtrOutputWithContext(context.Background())
}

func (i *DatabaseManagementManagedDatabaseGroup) ToDatabaseManagementManagedDatabaseGroupPtrOutputWithContext(ctx context.Context) DatabaseManagementManagedDatabaseGroupPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseManagementManagedDatabaseGroupPtrOutput)
}

type DatabaseManagementManagedDatabaseGroupPtrInput interface {
	pulumi.Input

	ToDatabaseManagementManagedDatabaseGroupPtrOutput() DatabaseManagementManagedDatabaseGroupPtrOutput
	ToDatabaseManagementManagedDatabaseGroupPtrOutputWithContext(ctx context.Context) DatabaseManagementManagedDatabaseGroupPtrOutput
}

type databaseManagementManagedDatabaseGroupPtrType DatabaseManagementManagedDatabaseGroupArgs

func (*databaseManagementManagedDatabaseGroupPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DatabaseManagementManagedDatabaseGroup)(nil))
}

func (i *databaseManagementManagedDatabaseGroupPtrType) ToDatabaseManagementManagedDatabaseGroupPtrOutput() DatabaseManagementManagedDatabaseGroupPtrOutput {
	return i.ToDatabaseManagementManagedDatabaseGroupPtrOutputWithContext(context.Background())
}

func (i *databaseManagementManagedDatabaseGroupPtrType) ToDatabaseManagementManagedDatabaseGroupPtrOutputWithContext(ctx context.Context) DatabaseManagementManagedDatabaseGroupPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseManagementManagedDatabaseGroupPtrOutput)
}

// DatabaseManagementManagedDatabaseGroupArrayInput is an input type that accepts DatabaseManagementManagedDatabaseGroupArray and DatabaseManagementManagedDatabaseGroupArrayOutput values.
// You can construct a concrete instance of `DatabaseManagementManagedDatabaseGroupArrayInput` via:
//
//          DatabaseManagementManagedDatabaseGroupArray{ DatabaseManagementManagedDatabaseGroupArgs{...} }
type DatabaseManagementManagedDatabaseGroupArrayInput interface {
	pulumi.Input

	ToDatabaseManagementManagedDatabaseGroupArrayOutput() DatabaseManagementManagedDatabaseGroupArrayOutput
	ToDatabaseManagementManagedDatabaseGroupArrayOutputWithContext(context.Context) DatabaseManagementManagedDatabaseGroupArrayOutput
}

type DatabaseManagementManagedDatabaseGroupArray []DatabaseManagementManagedDatabaseGroupInput

func (DatabaseManagementManagedDatabaseGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DatabaseManagementManagedDatabaseGroup)(nil)).Elem()
}

func (i DatabaseManagementManagedDatabaseGroupArray) ToDatabaseManagementManagedDatabaseGroupArrayOutput() DatabaseManagementManagedDatabaseGroupArrayOutput {
	return i.ToDatabaseManagementManagedDatabaseGroupArrayOutputWithContext(context.Background())
}

func (i DatabaseManagementManagedDatabaseGroupArray) ToDatabaseManagementManagedDatabaseGroupArrayOutputWithContext(ctx context.Context) DatabaseManagementManagedDatabaseGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseManagementManagedDatabaseGroupArrayOutput)
}

// DatabaseManagementManagedDatabaseGroupMapInput is an input type that accepts DatabaseManagementManagedDatabaseGroupMap and DatabaseManagementManagedDatabaseGroupMapOutput values.
// You can construct a concrete instance of `DatabaseManagementManagedDatabaseGroupMapInput` via:
//
//          DatabaseManagementManagedDatabaseGroupMap{ "key": DatabaseManagementManagedDatabaseGroupArgs{...} }
type DatabaseManagementManagedDatabaseGroupMapInput interface {
	pulumi.Input

	ToDatabaseManagementManagedDatabaseGroupMapOutput() DatabaseManagementManagedDatabaseGroupMapOutput
	ToDatabaseManagementManagedDatabaseGroupMapOutputWithContext(context.Context) DatabaseManagementManagedDatabaseGroupMapOutput
}

type DatabaseManagementManagedDatabaseGroupMap map[string]DatabaseManagementManagedDatabaseGroupInput

func (DatabaseManagementManagedDatabaseGroupMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DatabaseManagementManagedDatabaseGroup)(nil)).Elem()
}

func (i DatabaseManagementManagedDatabaseGroupMap) ToDatabaseManagementManagedDatabaseGroupMapOutput() DatabaseManagementManagedDatabaseGroupMapOutput {
	return i.ToDatabaseManagementManagedDatabaseGroupMapOutputWithContext(context.Background())
}

func (i DatabaseManagementManagedDatabaseGroupMap) ToDatabaseManagementManagedDatabaseGroupMapOutputWithContext(ctx context.Context) DatabaseManagementManagedDatabaseGroupMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseManagementManagedDatabaseGroupMapOutput)
}

type DatabaseManagementManagedDatabaseGroupOutput struct {
	*pulumi.OutputState
}

func (DatabaseManagementManagedDatabaseGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseManagementManagedDatabaseGroup)(nil))
}

func (o DatabaseManagementManagedDatabaseGroupOutput) ToDatabaseManagementManagedDatabaseGroupOutput() DatabaseManagementManagedDatabaseGroupOutput {
	return o
}

func (o DatabaseManagementManagedDatabaseGroupOutput) ToDatabaseManagementManagedDatabaseGroupOutputWithContext(ctx context.Context) DatabaseManagementManagedDatabaseGroupOutput {
	return o
}

func (o DatabaseManagementManagedDatabaseGroupOutput) ToDatabaseManagementManagedDatabaseGroupPtrOutput() DatabaseManagementManagedDatabaseGroupPtrOutput {
	return o.ToDatabaseManagementManagedDatabaseGroupPtrOutputWithContext(context.Background())
}

func (o DatabaseManagementManagedDatabaseGroupOutput) ToDatabaseManagementManagedDatabaseGroupPtrOutputWithContext(ctx context.Context) DatabaseManagementManagedDatabaseGroupPtrOutput {
	return o.ApplyT(func(v DatabaseManagementManagedDatabaseGroup) *DatabaseManagementManagedDatabaseGroup {
		return &v
	}).(DatabaseManagementManagedDatabaseGroupPtrOutput)
}

type DatabaseManagementManagedDatabaseGroupPtrOutput struct {
	*pulumi.OutputState
}

func (DatabaseManagementManagedDatabaseGroupPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DatabaseManagementManagedDatabaseGroup)(nil))
}

func (o DatabaseManagementManagedDatabaseGroupPtrOutput) ToDatabaseManagementManagedDatabaseGroupPtrOutput() DatabaseManagementManagedDatabaseGroupPtrOutput {
	return o
}

func (o DatabaseManagementManagedDatabaseGroupPtrOutput) ToDatabaseManagementManagedDatabaseGroupPtrOutputWithContext(ctx context.Context) DatabaseManagementManagedDatabaseGroupPtrOutput {
	return o
}

type DatabaseManagementManagedDatabaseGroupArrayOutput struct{ *pulumi.OutputState }

func (DatabaseManagementManagedDatabaseGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DatabaseManagementManagedDatabaseGroup)(nil))
}

func (o DatabaseManagementManagedDatabaseGroupArrayOutput) ToDatabaseManagementManagedDatabaseGroupArrayOutput() DatabaseManagementManagedDatabaseGroupArrayOutput {
	return o
}

func (o DatabaseManagementManagedDatabaseGroupArrayOutput) ToDatabaseManagementManagedDatabaseGroupArrayOutputWithContext(ctx context.Context) DatabaseManagementManagedDatabaseGroupArrayOutput {
	return o
}

func (o DatabaseManagementManagedDatabaseGroupArrayOutput) Index(i pulumi.IntInput) DatabaseManagementManagedDatabaseGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DatabaseManagementManagedDatabaseGroup {
		return vs[0].([]DatabaseManagementManagedDatabaseGroup)[vs[1].(int)]
	}).(DatabaseManagementManagedDatabaseGroupOutput)
}

type DatabaseManagementManagedDatabaseGroupMapOutput struct{ *pulumi.OutputState }

func (DatabaseManagementManagedDatabaseGroupMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]DatabaseManagementManagedDatabaseGroup)(nil))
}

func (o DatabaseManagementManagedDatabaseGroupMapOutput) ToDatabaseManagementManagedDatabaseGroupMapOutput() DatabaseManagementManagedDatabaseGroupMapOutput {
	return o
}

func (o DatabaseManagementManagedDatabaseGroupMapOutput) ToDatabaseManagementManagedDatabaseGroupMapOutputWithContext(ctx context.Context) DatabaseManagementManagedDatabaseGroupMapOutput {
	return o
}

func (o DatabaseManagementManagedDatabaseGroupMapOutput) MapIndex(k pulumi.StringInput) DatabaseManagementManagedDatabaseGroupOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) DatabaseManagementManagedDatabaseGroup {
		return vs[0].(map[string]DatabaseManagementManagedDatabaseGroup)[vs[1].(string)]
	}).(DatabaseManagementManagedDatabaseGroupOutput)
}

func init() {
	pulumi.RegisterOutputType(DatabaseManagementManagedDatabaseGroupOutput{})
	pulumi.RegisterOutputType(DatabaseManagementManagedDatabaseGroupPtrOutput{})
	pulumi.RegisterOutputType(DatabaseManagementManagedDatabaseGroupArrayOutput{})
	pulumi.RegisterOutputType(DatabaseManagementManagedDatabaseGroupMapOutput{})
}
