// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package oci

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource provides the Script resource in Oracle Cloud Infrastructure Apm Synthetics service.
//
// Creates a new script.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-oci/sdk/go/oci"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := oci.NewApmSyntheticsScript(ctx, "testScript", &oci.ApmSyntheticsScriptArgs{
// 			ApmDomainId:     pulumi.Any(oci_apm_synthetics_apm_domain.Test_apm_domain.Id),
// 			Content:         pulumi.Any(_var.Script_content),
// 			ContentType:     pulumi.Any(_var.Script_content_type),
// 			DisplayName:     pulumi.Any(_var.Script_display_name),
// 			ContentFileName: pulumi.Any(_var.Script_content_file_name),
// 			DefinedTags: pulumi.AnyMap{
// 				"foo-namespace.bar-key": pulumi.Any("value"),
// 			},
// 			FreeformTags: pulumi.AnyMap{
// 				"bar-key": pulumi.Any("value"),
// 			},
// 			Parameters: ApmSyntheticsScriptParameterArray{
// 				&ApmSyntheticsScriptParameterArgs{
// 					ParamName:  pulumi.Any(_var.Script_parameters_param_name),
// 					IsSecret:   pulumi.Any(_var.Script_parameters_is_secret),
// 					ParamValue: pulumi.Any(_var.Script_parameters_param_value),
// 				},
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// Scripts can be imported using the `id`, e.g.
//
// ```sh
//  $ pulumi import oci:index/apmSyntheticsScript:ApmSyntheticsScript test_script "scripts/{scriptId}/apmDomainId/{apmDomainId}"
// ```
type ApmSyntheticsScript struct {
	pulumi.CustomResourceState

	// (Updatable) The APM domain ID the request is intended for.
	ApmDomainId pulumi.StringOutput `pulumi:"apmDomainId"`
	// (Updatable) The content of the script. It may contain custom-defined tags that can be used for setting dynamic parameters. The format to set dynamic parameters is: `<ORAP><ON>param name</ON><OV>param value</OV><OS>isParamValueSecret(true/false)</OS></ORAP>`. Param value and isParamValueSecret are optional, the default value for isParamValueSecret is false. Examples: With mandatory param name : `<ORAP><ON>param name</ON></ORAP>` With parameter name and value : `<ORAP><ON>param name</ON><OV>param value</OV></ORAP>` Note that the content is valid if it matches the given content type. For example, if the content type is SIDE, then the content should be in Side script format. If the content type is JS, then the content should be in JavaScript format.
	Content pulumi.StringOutput `pulumi:"content"`
	// (Updatable) File name of uploaded script content.
	ContentFileName pulumi.StringOutput `pulumi:"contentFileName"`
	// Size of the script content.
	ContentSizeInBytes pulumi.IntOutput `pulumi:"contentSizeInBytes"`
	// (Updatable) Content type of script.
	ContentType pulumi.StringOutput `pulumi:"contentType"`
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
	DefinedTags pulumi.MapOutput `pulumi:"definedTags"`
	// (Updatable) Unique name that can be edited. The name should not contain any confidential information.
	DisplayName pulumi.StringOutput `pulumi:"displayName"`
	// (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
	FreeformTags pulumi.MapOutput `pulumi:"freeformTags"`
	// Details of the monitor count per state. Example: `{ "total" : 5, "enabled" : 3 , "disabled" : 2, "invalid" : 0 }`
	MonitorStatusCountMap ApmSyntheticsScriptMonitorStatusCountMapOutput `pulumi:"monitorStatusCountMap"`
	// (Updatable) List of script parameters. Example: `[{"paramName": "userid", "paramValue":"testuser", "isSecret": false}]`
	Parameters ApmSyntheticsScriptParameterArrayOutput `pulumi:"parameters"`
	// The time the resource was created, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: `2020-02-12T22:47:12.613Z`
	TimeCreated pulumi.StringOutput `pulumi:"timeCreated"`
	// The time the resource was updated, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: `2020-02-13T22:47:12.613Z`
	TimeUpdated pulumi.StringOutput `pulumi:"timeUpdated"`
	// The time when the script was uploaded.
	TimeUploaded pulumi.StringOutput `pulumi:"timeUploaded"`
}

// NewApmSyntheticsScript registers a new resource with the given unique name, arguments, and options.
func NewApmSyntheticsScript(ctx *pulumi.Context,
	name string, args *ApmSyntheticsScriptArgs, opts ...pulumi.ResourceOption) (*ApmSyntheticsScript, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ApmDomainId == nil {
		return nil, errors.New("invalid value for required argument 'ApmDomainId'")
	}
	if args.Content == nil {
		return nil, errors.New("invalid value for required argument 'Content'")
	}
	if args.ContentType == nil {
		return nil, errors.New("invalid value for required argument 'ContentType'")
	}
	if args.DisplayName == nil {
		return nil, errors.New("invalid value for required argument 'DisplayName'")
	}
	var resource ApmSyntheticsScript
	err := ctx.RegisterResource("oci:index/apmSyntheticsScript:ApmSyntheticsScript", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetApmSyntheticsScript gets an existing ApmSyntheticsScript resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetApmSyntheticsScript(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ApmSyntheticsScriptState, opts ...pulumi.ResourceOption) (*ApmSyntheticsScript, error) {
	var resource ApmSyntheticsScript
	err := ctx.ReadResource("oci:index/apmSyntheticsScript:ApmSyntheticsScript", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ApmSyntheticsScript resources.
type apmSyntheticsScriptState struct {
	// (Updatable) The APM domain ID the request is intended for.
	ApmDomainId *string `pulumi:"apmDomainId"`
	// (Updatable) The content of the script. It may contain custom-defined tags that can be used for setting dynamic parameters. The format to set dynamic parameters is: `<ORAP><ON>param name</ON><OV>param value</OV><OS>isParamValueSecret(true/false)</OS></ORAP>`. Param value and isParamValueSecret are optional, the default value for isParamValueSecret is false. Examples: With mandatory param name : `<ORAP><ON>param name</ON></ORAP>` With parameter name and value : `<ORAP><ON>param name</ON><OV>param value</OV></ORAP>` Note that the content is valid if it matches the given content type. For example, if the content type is SIDE, then the content should be in Side script format. If the content type is JS, then the content should be in JavaScript format.
	Content *string `pulumi:"content"`
	// (Updatable) File name of uploaded script content.
	ContentFileName *string `pulumi:"contentFileName"`
	// Size of the script content.
	ContentSizeInBytes *int `pulumi:"contentSizeInBytes"`
	// (Updatable) Content type of script.
	ContentType *string `pulumi:"contentType"`
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
	DefinedTags map[string]interface{} `pulumi:"definedTags"`
	// (Updatable) Unique name that can be edited. The name should not contain any confidential information.
	DisplayName *string `pulumi:"displayName"`
	// (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
	FreeformTags map[string]interface{} `pulumi:"freeformTags"`
	// Details of the monitor count per state. Example: `{ "total" : 5, "enabled" : 3 , "disabled" : 2, "invalid" : 0 }`
	MonitorStatusCountMap *ApmSyntheticsScriptMonitorStatusCountMap `pulumi:"monitorStatusCountMap"`
	// (Updatable) List of script parameters. Example: `[{"paramName": "userid", "paramValue":"testuser", "isSecret": false}]`
	Parameters []ApmSyntheticsScriptParameter `pulumi:"parameters"`
	// The time the resource was created, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: `2020-02-12T22:47:12.613Z`
	TimeCreated *string `pulumi:"timeCreated"`
	// The time the resource was updated, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: `2020-02-13T22:47:12.613Z`
	TimeUpdated *string `pulumi:"timeUpdated"`
	// The time when the script was uploaded.
	TimeUploaded *string `pulumi:"timeUploaded"`
}

type ApmSyntheticsScriptState struct {
	// (Updatable) The APM domain ID the request is intended for.
	ApmDomainId pulumi.StringPtrInput
	// (Updatable) The content of the script. It may contain custom-defined tags that can be used for setting dynamic parameters. The format to set dynamic parameters is: `<ORAP><ON>param name</ON><OV>param value</OV><OS>isParamValueSecret(true/false)</OS></ORAP>`. Param value and isParamValueSecret are optional, the default value for isParamValueSecret is false. Examples: With mandatory param name : `<ORAP><ON>param name</ON></ORAP>` With parameter name and value : `<ORAP><ON>param name</ON><OV>param value</OV></ORAP>` Note that the content is valid if it matches the given content type. For example, if the content type is SIDE, then the content should be in Side script format. If the content type is JS, then the content should be in JavaScript format.
	Content pulumi.StringPtrInput
	// (Updatable) File name of uploaded script content.
	ContentFileName pulumi.StringPtrInput
	// Size of the script content.
	ContentSizeInBytes pulumi.IntPtrInput
	// (Updatable) Content type of script.
	ContentType pulumi.StringPtrInput
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
	DefinedTags pulumi.MapInput
	// (Updatable) Unique name that can be edited. The name should not contain any confidential information.
	DisplayName pulumi.StringPtrInput
	// (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
	FreeformTags pulumi.MapInput
	// Details of the monitor count per state. Example: `{ "total" : 5, "enabled" : 3 , "disabled" : 2, "invalid" : 0 }`
	MonitorStatusCountMap ApmSyntheticsScriptMonitorStatusCountMapPtrInput
	// (Updatable) List of script parameters. Example: `[{"paramName": "userid", "paramValue":"testuser", "isSecret": false}]`
	Parameters ApmSyntheticsScriptParameterArrayInput
	// The time the resource was created, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: `2020-02-12T22:47:12.613Z`
	TimeCreated pulumi.StringPtrInput
	// The time the resource was updated, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: `2020-02-13T22:47:12.613Z`
	TimeUpdated pulumi.StringPtrInput
	// The time when the script was uploaded.
	TimeUploaded pulumi.StringPtrInput
}

func (ApmSyntheticsScriptState) ElementType() reflect.Type {
	return reflect.TypeOf((*apmSyntheticsScriptState)(nil)).Elem()
}

type apmSyntheticsScriptArgs struct {
	// (Updatable) The APM domain ID the request is intended for.
	ApmDomainId string `pulumi:"apmDomainId"`
	// (Updatable) The content of the script. It may contain custom-defined tags that can be used for setting dynamic parameters. The format to set dynamic parameters is: `<ORAP><ON>param name</ON><OV>param value</OV><OS>isParamValueSecret(true/false)</OS></ORAP>`. Param value and isParamValueSecret are optional, the default value for isParamValueSecret is false. Examples: With mandatory param name : `<ORAP><ON>param name</ON></ORAP>` With parameter name and value : `<ORAP><ON>param name</ON><OV>param value</OV></ORAP>` Note that the content is valid if it matches the given content type. For example, if the content type is SIDE, then the content should be in Side script format. If the content type is JS, then the content should be in JavaScript format.
	Content string `pulumi:"content"`
	// (Updatable) File name of uploaded script content.
	ContentFileName *string `pulumi:"contentFileName"`
	// (Updatable) Content type of script.
	ContentType string `pulumi:"contentType"`
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
	DefinedTags map[string]interface{} `pulumi:"definedTags"`
	// (Updatable) Unique name that can be edited. The name should not contain any confidential information.
	DisplayName string `pulumi:"displayName"`
	// (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
	FreeformTags map[string]interface{} `pulumi:"freeformTags"`
	// (Updatable) List of script parameters. Example: `[{"paramName": "userid", "paramValue":"testuser", "isSecret": false}]`
	Parameters []ApmSyntheticsScriptParameter `pulumi:"parameters"`
}

// The set of arguments for constructing a ApmSyntheticsScript resource.
type ApmSyntheticsScriptArgs struct {
	// (Updatable) The APM domain ID the request is intended for.
	ApmDomainId pulumi.StringInput
	// (Updatable) The content of the script. It may contain custom-defined tags that can be used for setting dynamic parameters. The format to set dynamic parameters is: `<ORAP><ON>param name</ON><OV>param value</OV><OS>isParamValueSecret(true/false)</OS></ORAP>`. Param value and isParamValueSecret are optional, the default value for isParamValueSecret is false. Examples: With mandatory param name : `<ORAP><ON>param name</ON></ORAP>` With parameter name and value : `<ORAP><ON>param name</ON><OV>param value</OV></ORAP>` Note that the content is valid if it matches the given content type. For example, if the content type is SIDE, then the content should be in Side script format. If the content type is JS, then the content should be in JavaScript format.
	Content pulumi.StringInput
	// (Updatable) File name of uploaded script content.
	ContentFileName pulumi.StringPtrInput
	// (Updatable) Content type of script.
	ContentType pulumi.StringInput
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
	DefinedTags pulumi.MapInput
	// (Updatable) Unique name that can be edited. The name should not contain any confidential information.
	DisplayName pulumi.StringInput
	// (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
	FreeformTags pulumi.MapInput
	// (Updatable) List of script parameters. Example: `[{"paramName": "userid", "paramValue":"testuser", "isSecret": false}]`
	Parameters ApmSyntheticsScriptParameterArrayInput
}

func (ApmSyntheticsScriptArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*apmSyntheticsScriptArgs)(nil)).Elem()
}

type ApmSyntheticsScriptInput interface {
	pulumi.Input

	ToApmSyntheticsScriptOutput() ApmSyntheticsScriptOutput
	ToApmSyntheticsScriptOutputWithContext(ctx context.Context) ApmSyntheticsScriptOutput
}

func (*ApmSyntheticsScript) ElementType() reflect.Type {
	return reflect.TypeOf((*ApmSyntheticsScript)(nil))
}

func (i *ApmSyntheticsScript) ToApmSyntheticsScriptOutput() ApmSyntheticsScriptOutput {
	return i.ToApmSyntheticsScriptOutputWithContext(context.Background())
}

func (i *ApmSyntheticsScript) ToApmSyntheticsScriptOutputWithContext(ctx context.Context) ApmSyntheticsScriptOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApmSyntheticsScriptOutput)
}

func (i *ApmSyntheticsScript) ToApmSyntheticsScriptPtrOutput() ApmSyntheticsScriptPtrOutput {
	return i.ToApmSyntheticsScriptPtrOutputWithContext(context.Background())
}

func (i *ApmSyntheticsScript) ToApmSyntheticsScriptPtrOutputWithContext(ctx context.Context) ApmSyntheticsScriptPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApmSyntheticsScriptPtrOutput)
}

type ApmSyntheticsScriptPtrInput interface {
	pulumi.Input

	ToApmSyntheticsScriptPtrOutput() ApmSyntheticsScriptPtrOutput
	ToApmSyntheticsScriptPtrOutputWithContext(ctx context.Context) ApmSyntheticsScriptPtrOutput
}

type apmSyntheticsScriptPtrType ApmSyntheticsScriptArgs

func (*apmSyntheticsScriptPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ApmSyntheticsScript)(nil))
}

func (i *apmSyntheticsScriptPtrType) ToApmSyntheticsScriptPtrOutput() ApmSyntheticsScriptPtrOutput {
	return i.ToApmSyntheticsScriptPtrOutputWithContext(context.Background())
}

func (i *apmSyntheticsScriptPtrType) ToApmSyntheticsScriptPtrOutputWithContext(ctx context.Context) ApmSyntheticsScriptPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApmSyntheticsScriptPtrOutput)
}

// ApmSyntheticsScriptArrayInput is an input type that accepts ApmSyntheticsScriptArray and ApmSyntheticsScriptArrayOutput values.
// You can construct a concrete instance of `ApmSyntheticsScriptArrayInput` via:
//
//          ApmSyntheticsScriptArray{ ApmSyntheticsScriptArgs{...} }
type ApmSyntheticsScriptArrayInput interface {
	pulumi.Input

	ToApmSyntheticsScriptArrayOutput() ApmSyntheticsScriptArrayOutput
	ToApmSyntheticsScriptArrayOutputWithContext(context.Context) ApmSyntheticsScriptArrayOutput
}

type ApmSyntheticsScriptArray []ApmSyntheticsScriptInput

func (ApmSyntheticsScriptArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ApmSyntheticsScript)(nil)).Elem()
}

func (i ApmSyntheticsScriptArray) ToApmSyntheticsScriptArrayOutput() ApmSyntheticsScriptArrayOutput {
	return i.ToApmSyntheticsScriptArrayOutputWithContext(context.Background())
}

func (i ApmSyntheticsScriptArray) ToApmSyntheticsScriptArrayOutputWithContext(ctx context.Context) ApmSyntheticsScriptArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApmSyntheticsScriptArrayOutput)
}

// ApmSyntheticsScriptMapInput is an input type that accepts ApmSyntheticsScriptMap and ApmSyntheticsScriptMapOutput values.
// You can construct a concrete instance of `ApmSyntheticsScriptMapInput` via:
//
//          ApmSyntheticsScriptMap{ "key": ApmSyntheticsScriptArgs{...} }
type ApmSyntheticsScriptMapInput interface {
	pulumi.Input

	ToApmSyntheticsScriptMapOutput() ApmSyntheticsScriptMapOutput
	ToApmSyntheticsScriptMapOutputWithContext(context.Context) ApmSyntheticsScriptMapOutput
}

type ApmSyntheticsScriptMap map[string]ApmSyntheticsScriptInput

func (ApmSyntheticsScriptMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ApmSyntheticsScript)(nil)).Elem()
}

func (i ApmSyntheticsScriptMap) ToApmSyntheticsScriptMapOutput() ApmSyntheticsScriptMapOutput {
	return i.ToApmSyntheticsScriptMapOutputWithContext(context.Background())
}

func (i ApmSyntheticsScriptMap) ToApmSyntheticsScriptMapOutputWithContext(ctx context.Context) ApmSyntheticsScriptMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApmSyntheticsScriptMapOutput)
}

type ApmSyntheticsScriptOutput struct {
	*pulumi.OutputState
}

func (ApmSyntheticsScriptOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApmSyntheticsScript)(nil))
}

func (o ApmSyntheticsScriptOutput) ToApmSyntheticsScriptOutput() ApmSyntheticsScriptOutput {
	return o
}

func (o ApmSyntheticsScriptOutput) ToApmSyntheticsScriptOutputWithContext(ctx context.Context) ApmSyntheticsScriptOutput {
	return o
}

func (o ApmSyntheticsScriptOutput) ToApmSyntheticsScriptPtrOutput() ApmSyntheticsScriptPtrOutput {
	return o.ToApmSyntheticsScriptPtrOutputWithContext(context.Background())
}

func (o ApmSyntheticsScriptOutput) ToApmSyntheticsScriptPtrOutputWithContext(ctx context.Context) ApmSyntheticsScriptPtrOutput {
	return o.ApplyT(func(v ApmSyntheticsScript) *ApmSyntheticsScript {
		return &v
	}).(ApmSyntheticsScriptPtrOutput)
}

type ApmSyntheticsScriptPtrOutput struct {
	*pulumi.OutputState
}

func (ApmSyntheticsScriptPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApmSyntheticsScript)(nil))
}

func (o ApmSyntheticsScriptPtrOutput) ToApmSyntheticsScriptPtrOutput() ApmSyntheticsScriptPtrOutput {
	return o
}

func (o ApmSyntheticsScriptPtrOutput) ToApmSyntheticsScriptPtrOutputWithContext(ctx context.Context) ApmSyntheticsScriptPtrOutput {
	return o
}

type ApmSyntheticsScriptArrayOutput struct{ *pulumi.OutputState }

func (ApmSyntheticsScriptArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApmSyntheticsScript)(nil))
}

func (o ApmSyntheticsScriptArrayOutput) ToApmSyntheticsScriptArrayOutput() ApmSyntheticsScriptArrayOutput {
	return o
}

func (o ApmSyntheticsScriptArrayOutput) ToApmSyntheticsScriptArrayOutputWithContext(ctx context.Context) ApmSyntheticsScriptArrayOutput {
	return o
}

func (o ApmSyntheticsScriptArrayOutput) Index(i pulumi.IntInput) ApmSyntheticsScriptOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ApmSyntheticsScript {
		return vs[0].([]ApmSyntheticsScript)[vs[1].(int)]
	}).(ApmSyntheticsScriptOutput)
}

type ApmSyntheticsScriptMapOutput struct{ *pulumi.OutputState }

func (ApmSyntheticsScriptMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]ApmSyntheticsScript)(nil))
}

func (o ApmSyntheticsScriptMapOutput) ToApmSyntheticsScriptMapOutput() ApmSyntheticsScriptMapOutput {
	return o
}

func (o ApmSyntheticsScriptMapOutput) ToApmSyntheticsScriptMapOutputWithContext(ctx context.Context) ApmSyntheticsScriptMapOutput {
	return o
}

func (o ApmSyntheticsScriptMapOutput) MapIndex(k pulumi.StringInput) ApmSyntheticsScriptOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) ApmSyntheticsScript {
		return vs[0].(map[string]ApmSyntheticsScript)[vs[1].(string)]
	}).(ApmSyntheticsScriptOutput)
}

func init() {
	pulumi.RegisterOutputType(ApmSyntheticsScriptOutput{})
	pulumi.RegisterOutputType(ApmSyntheticsScriptPtrOutput{})
	pulumi.RegisterOutputType(ApmSyntheticsScriptArrayOutput{})
	pulumi.RegisterOutputType(ApmSyntheticsScriptMapOutput{})
}
