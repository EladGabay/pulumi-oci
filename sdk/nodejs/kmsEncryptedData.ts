// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * This resource provides the Encrypted Data resource in Oracle Cloud Infrastructure Kms service.
 *
 * Encrypts data using the given [EncryptDataDetails](https://docs.cloud.oracle.com/iaas/api/#/en/key/latest/datatypes/EncryptDataDetails) resource.
 * Plaintext included in the example request is a base64-encoded value of a UTF-8 string.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as oci from "@pulumi/oci";
 *
 * const testEncryptedData = new oci.KmsEncryptedData("testEncryptedData", {
 *     cryptoEndpoint: _var.encrypted_data_crypto_endpoint,
 *     keyId: oci_kms_key.test_key.id,
 *     plaintext: _var.encrypted_data_plaintext,
 *     associatedData: _var.encrypted_data_associated_data,
 *     encryptionAlgorithm: _var.encrypted_data_encryption_algorithm,
 *     keyVersionId: oci_kms_key_version.test_key_version.id,
 *     loggingContext: _var.encrypted_data_logging_context,
 * });
 * ```
 *
 * ## Import
 *
 * Import is not supported for this resource.
 */
export class KmsEncryptedData extends pulumi.CustomResource {
    /**
     * Get an existing KmsEncryptedData resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: KmsEncryptedDataState, opts?: pulumi.CustomResourceOptions): KmsEncryptedData {
        return new KmsEncryptedData(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'oci:index/kmsEncryptedData:KmsEncryptedData';

    /**
     * Returns true if the given object is an instance of KmsEncryptedData.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is KmsEncryptedData {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === KmsEncryptedData.__pulumiType;
    }

    /**
     * Information that can be used to provide an encryption context for the encrypted data. The length of the string representation of the associated data must be fewer than 4096 characters.
     */
    public readonly associatedData!: pulumi.Output<{[key: string]: any} | undefined>;
    /**
     * The encrypted data.
     */
    public /*out*/ readonly ciphertext!: pulumi.Output<string>;
    /**
     * The service endpoint to perform cryptographic operations against. Cryptographic operations include 'Encrypt,' 'Decrypt,' and 'GenerateDataEncryptionKey' operations. see Vault Crypto endpoint.
     */
    public readonly cryptoEndpoint!: pulumi.Output<string>;
    /**
     * The encryption algorithm to use to encrypt and decrypt data with a customer-managed key. `AES_256_GCM` indicates that the key is a symmetric key that uses the Advanced Encryption Standard (AES) algorithm and  that the mode of encryption is the Galois/Counter Mode (GCM). `RSA_OAEP_SHA_1` indicates that the  key is an asymmetric key that uses the RSA encryption algorithm and uses Optimal Asymmetric Encryption Padding (OAEP).  `RSA_OAEP_SHA_256` indicates that the key is an asymmetric key that uses the RSA encryption algorithm with a SHA-256 hash  and uses OAEP.
     */
    public readonly encryptionAlgorithm!: pulumi.Output<string>;
    /**
     * The OCID of the key to encrypt with.
     */
    public readonly keyId!: pulumi.Output<string>;
    /**
     * The OCID of the key version used to encrypt the ciphertext.
     */
    public readonly keyVersionId!: pulumi.Output<string>;
    /**
     * Information that provides context for audit logging. You can provide this additional data as key-value pairs to include in the audit logs when audit logging is enabled.
     */
    public readonly loggingContext!: pulumi.Output<{[key: string]: any} | undefined>;
    /**
     * The plaintext data to encrypt.
     */
    public readonly plaintext!: pulumi.Output<string>;

    /**
     * Create a KmsEncryptedData resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: KmsEncryptedDataArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: KmsEncryptedDataArgs | KmsEncryptedDataState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as KmsEncryptedDataState | undefined;
            inputs["associatedData"] = state ? state.associatedData : undefined;
            inputs["ciphertext"] = state ? state.ciphertext : undefined;
            inputs["cryptoEndpoint"] = state ? state.cryptoEndpoint : undefined;
            inputs["encryptionAlgorithm"] = state ? state.encryptionAlgorithm : undefined;
            inputs["keyId"] = state ? state.keyId : undefined;
            inputs["keyVersionId"] = state ? state.keyVersionId : undefined;
            inputs["loggingContext"] = state ? state.loggingContext : undefined;
            inputs["plaintext"] = state ? state.plaintext : undefined;
        } else {
            const args = argsOrState as KmsEncryptedDataArgs | undefined;
            if ((!args || args.cryptoEndpoint === undefined) && !opts.urn) {
                throw new Error("Missing required property 'cryptoEndpoint'");
            }
            if ((!args || args.keyId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'keyId'");
            }
            if ((!args || args.plaintext === undefined) && !opts.urn) {
                throw new Error("Missing required property 'plaintext'");
            }
            inputs["associatedData"] = args ? args.associatedData : undefined;
            inputs["cryptoEndpoint"] = args ? args.cryptoEndpoint : undefined;
            inputs["encryptionAlgorithm"] = args ? args.encryptionAlgorithm : undefined;
            inputs["keyId"] = args ? args.keyId : undefined;
            inputs["keyVersionId"] = args ? args.keyVersionId : undefined;
            inputs["loggingContext"] = args ? args.loggingContext : undefined;
            inputs["plaintext"] = args ? args.plaintext : undefined;
            inputs["ciphertext"] = undefined /*out*/;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion()});
        }
        super(KmsEncryptedData.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering KmsEncryptedData resources.
 */
export interface KmsEncryptedDataState {
    /**
     * Information that can be used to provide an encryption context for the encrypted data. The length of the string representation of the associated data must be fewer than 4096 characters.
     */
    associatedData?: pulumi.Input<{[key: string]: any}>;
    /**
     * The encrypted data.
     */
    ciphertext?: pulumi.Input<string>;
    /**
     * The service endpoint to perform cryptographic operations against. Cryptographic operations include 'Encrypt,' 'Decrypt,' and 'GenerateDataEncryptionKey' operations. see Vault Crypto endpoint.
     */
    cryptoEndpoint?: pulumi.Input<string>;
    /**
     * The encryption algorithm to use to encrypt and decrypt data with a customer-managed key. `AES_256_GCM` indicates that the key is a symmetric key that uses the Advanced Encryption Standard (AES) algorithm and  that the mode of encryption is the Galois/Counter Mode (GCM). `RSA_OAEP_SHA_1` indicates that the  key is an asymmetric key that uses the RSA encryption algorithm and uses Optimal Asymmetric Encryption Padding (OAEP).  `RSA_OAEP_SHA_256` indicates that the key is an asymmetric key that uses the RSA encryption algorithm with a SHA-256 hash  and uses OAEP.
     */
    encryptionAlgorithm?: pulumi.Input<string>;
    /**
     * The OCID of the key to encrypt with.
     */
    keyId?: pulumi.Input<string>;
    /**
     * The OCID of the key version used to encrypt the ciphertext.
     */
    keyVersionId?: pulumi.Input<string>;
    /**
     * Information that provides context for audit logging. You can provide this additional data as key-value pairs to include in the audit logs when audit logging is enabled.
     */
    loggingContext?: pulumi.Input<{[key: string]: any}>;
    /**
     * The plaintext data to encrypt.
     */
    plaintext?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a KmsEncryptedData resource.
 */
export interface KmsEncryptedDataArgs {
    /**
     * Information that can be used to provide an encryption context for the encrypted data. The length of the string representation of the associated data must be fewer than 4096 characters.
     */
    associatedData?: pulumi.Input<{[key: string]: any}>;
    /**
     * The service endpoint to perform cryptographic operations against. Cryptographic operations include 'Encrypt,' 'Decrypt,' and 'GenerateDataEncryptionKey' operations. see Vault Crypto endpoint.
     */
    cryptoEndpoint: pulumi.Input<string>;
    /**
     * The encryption algorithm to use to encrypt and decrypt data with a customer-managed key. `AES_256_GCM` indicates that the key is a symmetric key that uses the Advanced Encryption Standard (AES) algorithm and  that the mode of encryption is the Galois/Counter Mode (GCM). `RSA_OAEP_SHA_1` indicates that the  key is an asymmetric key that uses the RSA encryption algorithm and uses Optimal Asymmetric Encryption Padding (OAEP).  `RSA_OAEP_SHA_256` indicates that the key is an asymmetric key that uses the RSA encryption algorithm with a SHA-256 hash  and uses OAEP.
     */
    encryptionAlgorithm?: pulumi.Input<string>;
    /**
     * The OCID of the key to encrypt with.
     */
    keyId: pulumi.Input<string>;
    /**
     * The OCID of the key version used to encrypt the ciphertext.
     */
    keyVersionId?: pulumi.Input<string>;
    /**
     * Information that provides context for audit logging. You can provide this additional data as key-value pairs to include in the audit logs when audit logging is enabled.
     */
    loggingContext?: pulumi.Input<{[key: string]: any}>;
    /**
     * The plaintext data to encrypt.
     */
    plaintext: pulumi.Input<string>;
}
