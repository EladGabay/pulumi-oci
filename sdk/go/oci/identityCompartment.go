// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package oci

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Import
//
// Compartments can be imported using the `id`, e.g.
//
// ```sh
//  $ pulumi import oci:index/identityCompartment:IdentityCompartment test_compartment "id"
// ```
type IdentityCompartment struct {
	pulumi.CustomResourceState

	// (Updatable) The OCID of the parent compartment containing the compartment.
	CompartmentId pulumi.StringOutput `pulumi:"compartmentId"`
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Operations.CostCenter": "42"}`
	DefinedTags pulumi.MapOutput `pulumi:"definedTags"`
	// (Updatable) The description you assign to the compartment during creation. Does not have to be unique, and it's changeable.
	Description pulumi.StringOutput `pulumi:"description"`
	// Defaults to false. If omitted or set to false the provider will implicitly import the compartment if there is a name collision, and will not actually delete the compartment on destroy or removal of the resource declaration. If set to true, the provider will throw an error on a name collision with another compartment, and will attempt to delete the compartment on destroy or removal of the resource declaration.
	EnableDelete pulumi.BoolPtrOutput `pulumi:"enableDelete"`
	// (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Department": "Finance"}`
	FreeformTags pulumi.MapOutput `pulumi:"freeformTags"`
	// The detailed status of INACTIVE lifecycleState.
	InactiveState pulumi.StringOutput `pulumi:"inactiveState"`
	// Indicates whether or not the compartment is accessible for the user making the request. Returns true when the user has INSPECT permissions directly on a resource in the compartment or indirectly (permissions can be on a resource in a subcompartment).
	IsAccessible pulumi.BoolOutput `pulumi:"isAccessible"`
	// (Updatable) The name you assign to the compartment during creation. The name must be unique across all compartments in the parent compartment. Avoid entering confidential information.
	Name pulumi.StringOutput `pulumi:"name"`
	// The compartment's current state.
	State pulumi.StringOutput `pulumi:"state"`
	// Date and time the compartment was created, in the format defined by RFC3339.  Example: `2016-08-25T21:10:29.600Z`
	TimeCreated pulumi.StringOutput `pulumi:"timeCreated"`
}

// NewIdentityCompartment registers a new resource with the given unique name, arguments, and options.
func NewIdentityCompartment(ctx *pulumi.Context,
	name string, args *IdentityCompartmentArgs, opts ...pulumi.ResourceOption) (*IdentityCompartment, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Description == nil {
		return nil, errors.New("invalid value for required argument 'Description'")
	}
	var resource IdentityCompartment
	err := ctx.RegisterResource("oci:index/identityCompartment:IdentityCompartment", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIdentityCompartment gets an existing IdentityCompartment resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIdentityCompartment(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *IdentityCompartmentState, opts ...pulumi.ResourceOption) (*IdentityCompartment, error) {
	var resource IdentityCompartment
	err := ctx.ReadResource("oci:index/identityCompartment:IdentityCompartment", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering IdentityCompartment resources.
type identityCompartmentState struct {
	// (Updatable) The OCID of the parent compartment containing the compartment.
	CompartmentId *string `pulumi:"compartmentId"`
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Operations.CostCenter": "42"}`
	DefinedTags map[string]interface{} `pulumi:"definedTags"`
	// (Updatable) The description you assign to the compartment during creation. Does not have to be unique, and it's changeable.
	Description *string `pulumi:"description"`
	// Defaults to false. If omitted or set to false the provider will implicitly import the compartment if there is a name collision, and will not actually delete the compartment on destroy or removal of the resource declaration. If set to true, the provider will throw an error on a name collision with another compartment, and will attempt to delete the compartment on destroy or removal of the resource declaration.
	EnableDelete *bool `pulumi:"enableDelete"`
	// (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Department": "Finance"}`
	FreeformTags map[string]interface{} `pulumi:"freeformTags"`
	// The detailed status of INACTIVE lifecycleState.
	InactiveState *string `pulumi:"inactiveState"`
	// Indicates whether or not the compartment is accessible for the user making the request. Returns true when the user has INSPECT permissions directly on a resource in the compartment or indirectly (permissions can be on a resource in a subcompartment).
	IsAccessible *bool `pulumi:"isAccessible"`
	// (Updatable) The name you assign to the compartment during creation. The name must be unique across all compartments in the parent compartment. Avoid entering confidential information.
	Name *string `pulumi:"name"`
	// The compartment's current state.
	State *string `pulumi:"state"`
	// Date and time the compartment was created, in the format defined by RFC3339.  Example: `2016-08-25T21:10:29.600Z`
	TimeCreated *string `pulumi:"timeCreated"`
}

type IdentityCompartmentState struct {
	// (Updatable) The OCID of the parent compartment containing the compartment.
	CompartmentId pulumi.StringPtrInput
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Operations.CostCenter": "42"}`
	DefinedTags pulumi.MapInput
	// (Updatable) The description you assign to the compartment during creation. Does not have to be unique, and it's changeable.
	Description pulumi.StringPtrInput
	// Defaults to false. If omitted or set to false the provider will implicitly import the compartment if there is a name collision, and will not actually delete the compartment on destroy or removal of the resource declaration. If set to true, the provider will throw an error on a name collision with another compartment, and will attempt to delete the compartment on destroy or removal of the resource declaration.
	EnableDelete pulumi.BoolPtrInput
	// (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Department": "Finance"}`
	FreeformTags pulumi.MapInput
	// The detailed status of INACTIVE lifecycleState.
	InactiveState pulumi.StringPtrInput
	// Indicates whether or not the compartment is accessible for the user making the request. Returns true when the user has INSPECT permissions directly on a resource in the compartment or indirectly (permissions can be on a resource in a subcompartment).
	IsAccessible pulumi.BoolPtrInput
	// (Updatable) The name you assign to the compartment during creation. The name must be unique across all compartments in the parent compartment. Avoid entering confidential information.
	Name pulumi.StringPtrInput
	// The compartment's current state.
	State pulumi.StringPtrInput
	// Date and time the compartment was created, in the format defined by RFC3339.  Example: `2016-08-25T21:10:29.600Z`
	TimeCreated pulumi.StringPtrInput
}

func (IdentityCompartmentState) ElementType() reflect.Type {
	return reflect.TypeOf((*identityCompartmentState)(nil)).Elem()
}

type identityCompartmentArgs struct {
	// (Updatable) The OCID of the parent compartment containing the compartment.
	CompartmentId *string `pulumi:"compartmentId"`
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Operations.CostCenter": "42"}`
	DefinedTags map[string]interface{} `pulumi:"definedTags"`
	// (Updatable) The description you assign to the compartment during creation. Does not have to be unique, and it's changeable.
	Description string `pulumi:"description"`
	// Defaults to false. If omitted or set to false the provider will implicitly import the compartment if there is a name collision, and will not actually delete the compartment on destroy or removal of the resource declaration. If set to true, the provider will throw an error on a name collision with another compartment, and will attempt to delete the compartment on destroy or removal of the resource declaration.
	EnableDelete *bool `pulumi:"enableDelete"`
	// (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Department": "Finance"}`
	FreeformTags map[string]interface{} `pulumi:"freeformTags"`
	// (Updatable) The name you assign to the compartment during creation. The name must be unique across all compartments in the parent compartment. Avoid entering confidential information.
	Name *string `pulumi:"name"`
}

// The set of arguments for constructing a IdentityCompartment resource.
type IdentityCompartmentArgs struct {
	// (Updatable) The OCID of the parent compartment containing the compartment.
	CompartmentId pulumi.StringPtrInput
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Operations.CostCenter": "42"}`
	DefinedTags pulumi.MapInput
	// (Updatable) The description you assign to the compartment during creation. Does not have to be unique, and it's changeable.
	Description pulumi.StringInput
	// Defaults to false. If omitted or set to false the provider will implicitly import the compartment if there is a name collision, and will not actually delete the compartment on destroy or removal of the resource declaration. If set to true, the provider will throw an error on a name collision with another compartment, and will attempt to delete the compartment on destroy or removal of the resource declaration.
	EnableDelete pulumi.BoolPtrInput
	// (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Department": "Finance"}`
	FreeformTags pulumi.MapInput
	// (Updatable) The name you assign to the compartment during creation. The name must be unique across all compartments in the parent compartment. Avoid entering confidential information.
	Name pulumi.StringPtrInput
}

func (IdentityCompartmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*identityCompartmentArgs)(nil)).Elem()
}

type IdentityCompartmentInput interface {
	pulumi.Input

	ToIdentityCompartmentOutput() IdentityCompartmentOutput
	ToIdentityCompartmentOutputWithContext(ctx context.Context) IdentityCompartmentOutput
}

func (*IdentityCompartment) ElementType() reflect.Type {
	return reflect.TypeOf((*IdentityCompartment)(nil))
}

func (i *IdentityCompartment) ToIdentityCompartmentOutput() IdentityCompartmentOutput {
	return i.ToIdentityCompartmentOutputWithContext(context.Background())
}

func (i *IdentityCompartment) ToIdentityCompartmentOutputWithContext(ctx context.Context) IdentityCompartmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdentityCompartmentOutput)
}

func (i *IdentityCompartment) ToIdentityCompartmentPtrOutput() IdentityCompartmentPtrOutput {
	return i.ToIdentityCompartmentPtrOutputWithContext(context.Background())
}

func (i *IdentityCompartment) ToIdentityCompartmentPtrOutputWithContext(ctx context.Context) IdentityCompartmentPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdentityCompartmentPtrOutput)
}

type IdentityCompartmentPtrInput interface {
	pulumi.Input

	ToIdentityCompartmentPtrOutput() IdentityCompartmentPtrOutput
	ToIdentityCompartmentPtrOutputWithContext(ctx context.Context) IdentityCompartmentPtrOutput
}

type identityCompartmentPtrType IdentityCompartmentArgs

func (*identityCompartmentPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**IdentityCompartment)(nil))
}

func (i *identityCompartmentPtrType) ToIdentityCompartmentPtrOutput() IdentityCompartmentPtrOutput {
	return i.ToIdentityCompartmentPtrOutputWithContext(context.Background())
}

func (i *identityCompartmentPtrType) ToIdentityCompartmentPtrOutputWithContext(ctx context.Context) IdentityCompartmentPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdentityCompartmentPtrOutput)
}

// IdentityCompartmentArrayInput is an input type that accepts IdentityCompartmentArray and IdentityCompartmentArrayOutput values.
// You can construct a concrete instance of `IdentityCompartmentArrayInput` via:
//
//          IdentityCompartmentArray{ IdentityCompartmentArgs{...} }
type IdentityCompartmentArrayInput interface {
	pulumi.Input

	ToIdentityCompartmentArrayOutput() IdentityCompartmentArrayOutput
	ToIdentityCompartmentArrayOutputWithContext(context.Context) IdentityCompartmentArrayOutput
}

type IdentityCompartmentArray []IdentityCompartmentInput

func (IdentityCompartmentArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IdentityCompartment)(nil)).Elem()
}

func (i IdentityCompartmentArray) ToIdentityCompartmentArrayOutput() IdentityCompartmentArrayOutput {
	return i.ToIdentityCompartmentArrayOutputWithContext(context.Background())
}

func (i IdentityCompartmentArray) ToIdentityCompartmentArrayOutputWithContext(ctx context.Context) IdentityCompartmentArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdentityCompartmentArrayOutput)
}

// IdentityCompartmentMapInput is an input type that accepts IdentityCompartmentMap and IdentityCompartmentMapOutput values.
// You can construct a concrete instance of `IdentityCompartmentMapInput` via:
//
//          IdentityCompartmentMap{ "key": IdentityCompartmentArgs{...} }
type IdentityCompartmentMapInput interface {
	pulumi.Input

	ToIdentityCompartmentMapOutput() IdentityCompartmentMapOutput
	ToIdentityCompartmentMapOutputWithContext(context.Context) IdentityCompartmentMapOutput
}

type IdentityCompartmentMap map[string]IdentityCompartmentInput

func (IdentityCompartmentMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IdentityCompartment)(nil)).Elem()
}

func (i IdentityCompartmentMap) ToIdentityCompartmentMapOutput() IdentityCompartmentMapOutput {
	return i.ToIdentityCompartmentMapOutputWithContext(context.Background())
}

func (i IdentityCompartmentMap) ToIdentityCompartmentMapOutputWithContext(ctx context.Context) IdentityCompartmentMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdentityCompartmentMapOutput)
}

type IdentityCompartmentOutput struct {
	*pulumi.OutputState
}

func (IdentityCompartmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IdentityCompartment)(nil))
}

func (o IdentityCompartmentOutput) ToIdentityCompartmentOutput() IdentityCompartmentOutput {
	return o
}

func (o IdentityCompartmentOutput) ToIdentityCompartmentOutputWithContext(ctx context.Context) IdentityCompartmentOutput {
	return o
}

func (o IdentityCompartmentOutput) ToIdentityCompartmentPtrOutput() IdentityCompartmentPtrOutput {
	return o.ToIdentityCompartmentPtrOutputWithContext(context.Background())
}

func (o IdentityCompartmentOutput) ToIdentityCompartmentPtrOutputWithContext(ctx context.Context) IdentityCompartmentPtrOutput {
	return o.ApplyT(func(v IdentityCompartment) *IdentityCompartment {
		return &v
	}).(IdentityCompartmentPtrOutput)
}

type IdentityCompartmentPtrOutput struct {
	*pulumi.OutputState
}

func (IdentityCompartmentPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IdentityCompartment)(nil))
}

func (o IdentityCompartmentPtrOutput) ToIdentityCompartmentPtrOutput() IdentityCompartmentPtrOutput {
	return o
}

func (o IdentityCompartmentPtrOutput) ToIdentityCompartmentPtrOutputWithContext(ctx context.Context) IdentityCompartmentPtrOutput {
	return o
}

type IdentityCompartmentArrayOutput struct{ *pulumi.OutputState }

func (IdentityCompartmentArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]IdentityCompartment)(nil))
}

func (o IdentityCompartmentArrayOutput) ToIdentityCompartmentArrayOutput() IdentityCompartmentArrayOutput {
	return o
}

func (o IdentityCompartmentArrayOutput) ToIdentityCompartmentArrayOutputWithContext(ctx context.Context) IdentityCompartmentArrayOutput {
	return o
}

func (o IdentityCompartmentArrayOutput) Index(i pulumi.IntInput) IdentityCompartmentOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) IdentityCompartment {
		return vs[0].([]IdentityCompartment)[vs[1].(int)]
	}).(IdentityCompartmentOutput)
}

type IdentityCompartmentMapOutput struct{ *pulumi.OutputState }

func (IdentityCompartmentMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]IdentityCompartment)(nil))
}

func (o IdentityCompartmentMapOutput) ToIdentityCompartmentMapOutput() IdentityCompartmentMapOutput {
	return o
}

func (o IdentityCompartmentMapOutput) ToIdentityCompartmentMapOutputWithContext(ctx context.Context) IdentityCompartmentMapOutput {
	return o
}

func (o IdentityCompartmentMapOutput) MapIndex(k pulumi.StringInput) IdentityCompartmentOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) IdentityCompartment {
		return vs[0].(map[string]IdentityCompartment)[vs[1].(string)]
	}).(IdentityCompartmentOutput)
}

func init() {
	pulumi.RegisterOutputType(IdentityCompartmentOutput{})
	pulumi.RegisterOutputType(IdentityCompartmentPtrOutput{})
	pulumi.RegisterOutputType(IdentityCompartmentArrayOutput{})
	pulumi.RegisterOutputType(IdentityCompartmentMapOutput{})
}
