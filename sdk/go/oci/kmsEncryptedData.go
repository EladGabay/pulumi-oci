// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package oci

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource provides the Encrypted Data resource in Oracle Cloud Infrastructure Kms service.
//
// Encrypts data using the given [EncryptDataDetails](https://docs.cloud.oracle.com/iaas/api/#/en/key/latest/datatypes/EncryptDataDetails) resource.
// Plaintext included in the example request is a base64-encoded value of a UTF-8 string.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-oci/sdk/go/oci"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := oci.NewKmsEncryptedData(ctx, "testEncryptedData", &oci.KmsEncryptedDataArgs{
// 			CryptoEndpoint:      pulumi.Any(_var.Encrypted_data_crypto_endpoint),
// 			KeyId:               pulumi.Any(oci_kms_key.Test_key.Id),
// 			Plaintext:           pulumi.Any(_var.Encrypted_data_plaintext),
// 			AssociatedData:      pulumi.Any(_var.Encrypted_data_associated_data),
// 			EncryptionAlgorithm: pulumi.Any(_var.Encrypted_data_encryption_algorithm),
// 			KeyVersionId:        pulumi.Any(oci_kms_key_version.Test_key_version.Id),
// 			LoggingContext:      pulumi.Any(_var.Encrypted_data_logging_context),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// Import is not supported for this resource.
type KmsEncryptedData struct {
	pulumi.CustomResourceState

	// Information that can be used to provide an encryption context for the encrypted data. The length of the string representation of the associated data must be fewer than 4096 characters.
	AssociatedData pulumi.MapOutput `pulumi:"associatedData"`
	// The encrypted data.
	Ciphertext pulumi.StringOutput `pulumi:"ciphertext"`
	// The service endpoint to perform cryptographic operations against. Cryptographic operations include 'Encrypt,' 'Decrypt,' and 'GenerateDataEncryptionKey' operations. see Vault Crypto endpoint.
	CryptoEndpoint pulumi.StringOutput `pulumi:"cryptoEndpoint"`
	// The encryption algorithm to use to encrypt and decrypt data with a customer-managed key. `AES_256_GCM` indicates that the key is a symmetric key that uses the Advanced Encryption Standard (AES) algorithm and  that the mode of encryption is the Galois/Counter Mode (GCM). `RSA_OAEP_SHA_1` indicates that the  key is an asymmetric key that uses the RSA encryption algorithm and uses Optimal Asymmetric Encryption Padding (OAEP).  `RSA_OAEP_SHA_256` indicates that the key is an asymmetric key that uses the RSA encryption algorithm with a SHA-256 hash  and uses OAEP.
	EncryptionAlgorithm pulumi.StringOutput `pulumi:"encryptionAlgorithm"`
	// The OCID of the key to encrypt with.
	KeyId pulumi.StringOutput `pulumi:"keyId"`
	// The OCID of the key version used to encrypt the ciphertext.
	KeyVersionId pulumi.StringOutput `pulumi:"keyVersionId"`
	// Information that provides context for audit logging. You can provide this additional data as key-value pairs to include in the audit logs when audit logging is enabled.
	LoggingContext pulumi.MapOutput `pulumi:"loggingContext"`
	// The plaintext data to encrypt.
	Plaintext pulumi.StringOutput `pulumi:"plaintext"`
}

// NewKmsEncryptedData registers a new resource with the given unique name, arguments, and options.
func NewKmsEncryptedData(ctx *pulumi.Context,
	name string, args *KmsEncryptedDataArgs, opts ...pulumi.ResourceOption) (*KmsEncryptedData, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CryptoEndpoint == nil {
		return nil, errors.New("invalid value for required argument 'CryptoEndpoint'")
	}
	if args.KeyId == nil {
		return nil, errors.New("invalid value for required argument 'KeyId'")
	}
	if args.Plaintext == nil {
		return nil, errors.New("invalid value for required argument 'Plaintext'")
	}
	var resource KmsEncryptedData
	err := ctx.RegisterResource("oci:index/kmsEncryptedData:KmsEncryptedData", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetKmsEncryptedData gets an existing KmsEncryptedData resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetKmsEncryptedData(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *KmsEncryptedDataState, opts ...pulumi.ResourceOption) (*KmsEncryptedData, error) {
	var resource KmsEncryptedData
	err := ctx.ReadResource("oci:index/kmsEncryptedData:KmsEncryptedData", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering KmsEncryptedData resources.
type kmsEncryptedDataState struct {
	// Information that can be used to provide an encryption context for the encrypted data. The length of the string representation of the associated data must be fewer than 4096 characters.
	AssociatedData map[string]interface{} `pulumi:"associatedData"`
	// The encrypted data.
	Ciphertext *string `pulumi:"ciphertext"`
	// The service endpoint to perform cryptographic operations against. Cryptographic operations include 'Encrypt,' 'Decrypt,' and 'GenerateDataEncryptionKey' operations. see Vault Crypto endpoint.
	CryptoEndpoint *string `pulumi:"cryptoEndpoint"`
	// The encryption algorithm to use to encrypt and decrypt data with a customer-managed key. `AES_256_GCM` indicates that the key is a symmetric key that uses the Advanced Encryption Standard (AES) algorithm and  that the mode of encryption is the Galois/Counter Mode (GCM). `RSA_OAEP_SHA_1` indicates that the  key is an asymmetric key that uses the RSA encryption algorithm and uses Optimal Asymmetric Encryption Padding (OAEP).  `RSA_OAEP_SHA_256` indicates that the key is an asymmetric key that uses the RSA encryption algorithm with a SHA-256 hash  and uses OAEP.
	EncryptionAlgorithm *string `pulumi:"encryptionAlgorithm"`
	// The OCID of the key to encrypt with.
	KeyId *string `pulumi:"keyId"`
	// The OCID of the key version used to encrypt the ciphertext.
	KeyVersionId *string `pulumi:"keyVersionId"`
	// Information that provides context for audit logging. You can provide this additional data as key-value pairs to include in the audit logs when audit logging is enabled.
	LoggingContext map[string]interface{} `pulumi:"loggingContext"`
	// The plaintext data to encrypt.
	Plaintext *string `pulumi:"plaintext"`
}

type KmsEncryptedDataState struct {
	// Information that can be used to provide an encryption context for the encrypted data. The length of the string representation of the associated data must be fewer than 4096 characters.
	AssociatedData pulumi.MapInput
	// The encrypted data.
	Ciphertext pulumi.StringPtrInput
	// The service endpoint to perform cryptographic operations against. Cryptographic operations include 'Encrypt,' 'Decrypt,' and 'GenerateDataEncryptionKey' operations. see Vault Crypto endpoint.
	CryptoEndpoint pulumi.StringPtrInput
	// The encryption algorithm to use to encrypt and decrypt data with a customer-managed key. `AES_256_GCM` indicates that the key is a symmetric key that uses the Advanced Encryption Standard (AES) algorithm and  that the mode of encryption is the Galois/Counter Mode (GCM). `RSA_OAEP_SHA_1` indicates that the  key is an asymmetric key that uses the RSA encryption algorithm and uses Optimal Asymmetric Encryption Padding (OAEP).  `RSA_OAEP_SHA_256` indicates that the key is an asymmetric key that uses the RSA encryption algorithm with a SHA-256 hash  and uses OAEP.
	EncryptionAlgorithm pulumi.StringPtrInput
	// The OCID of the key to encrypt with.
	KeyId pulumi.StringPtrInput
	// The OCID of the key version used to encrypt the ciphertext.
	KeyVersionId pulumi.StringPtrInput
	// Information that provides context for audit logging. You can provide this additional data as key-value pairs to include in the audit logs when audit logging is enabled.
	LoggingContext pulumi.MapInput
	// The plaintext data to encrypt.
	Plaintext pulumi.StringPtrInput
}

func (KmsEncryptedDataState) ElementType() reflect.Type {
	return reflect.TypeOf((*kmsEncryptedDataState)(nil)).Elem()
}

type kmsEncryptedDataArgs struct {
	// Information that can be used to provide an encryption context for the encrypted data. The length of the string representation of the associated data must be fewer than 4096 characters.
	AssociatedData map[string]interface{} `pulumi:"associatedData"`
	// The service endpoint to perform cryptographic operations against. Cryptographic operations include 'Encrypt,' 'Decrypt,' and 'GenerateDataEncryptionKey' operations. see Vault Crypto endpoint.
	CryptoEndpoint string `pulumi:"cryptoEndpoint"`
	// The encryption algorithm to use to encrypt and decrypt data with a customer-managed key. `AES_256_GCM` indicates that the key is a symmetric key that uses the Advanced Encryption Standard (AES) algorithm and  that the mode of encryption is the Galois/Counter Mode (GCM). `RSA_OAEP_SHA_1` indicates that the  key is an asymmetric key that uses the RSA encryption algorithm and uses Optimal Asymmetric Encryption Padding (OAEP).  `RSA_OAEP_SHA_256` indicates that the key is an asymmetric key that uses the RSA encryption algorithm with a SHA-256 hash  and uses OAEP.
	EncryptionAlgorithm *string `pulumi:"encryptionAlgorithm"`
	// The OCID of the key to encrypt with.
	KeyId string `pulumi:"keyId"`
	// The OCID of the key version used to encrypt the ciphertext.
	KeyVersionId *string `pulumi:"keyVersionId"`
	// Information that provides context for audit logging. You can provide this additional data as key-value pairs to include in the audit logs when audit logging is enabled.
	LoggingContext map[string]interface{} `pulumi:"loggingContext"`
	// The plaintext data to encrypt.
	Plaintext string `pulumi:"plaintext"`
}

// The set of arguments for constructing a KmsEncryptedData resource.
type KmsEncryptedDataArgs struct {
	// Information that can be used to provide an encryption context for the encrypted data. The length of the string representation of the associated data must be fewer than 4096 characters.
	AssociatedData pulumi.MapInput
	// The service endpoint to perform cryptographic operations against. Cryptographic operations include 'Encrypt,' 'Decrypt,' and 'GenerateDataEncryptionKey' operations. see Vault Crypto endpoint.
	CryptoEndpoint pulumi.StringInput
	// The encryption algorithm to use to encrypt and decrypt data with a customer-managed key. `AES_256_GCM` indicates that the key is a symmetric key that uses the Advanced Encryption Standard (AES) algorithm and  that the mode of encryption is the Galois/Counter Mode (GCM). `RSA_OAEP_SHA_1` indicates that the  key is an asymmetric key that uses the RSA encryption algorithm and uses Optimal Asymmetric Encryption Padding (OAEP).  `RSA_OAEP_SHA_256` indicates that the key is an asymmetric key that uses the RSA encryption algorithm with a SHA-256 hash  and uses OAEP.
	EncryptionAlgorithm pulumi.StringPtrInput
	// The OCID of the key to encrypt with.
	KeyId pulumi.StringInput
	// The OCID of the key version used to encrypt the ciphertext.
	KeyVersionId pulumi.StringPtrInput
	// Information that provides context for audit logging. You can provide this additional data as key-value pairs to include in the audit logs when audit logging is enabled.
	LoggingContext pulumi.MapInput
	// The plaintext data to encrypt.
	Plaintext pulumi.StringInput
}

func (KmsEncryptedDataArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*kmsEncryptedDataArgs)(nil)).Elem()
}

type KmsEncryptedDataInput interface {
	pulumi.Input

	ToKmsEncryptedDataOutput() KmsEncryptedDataOutput
	ToKmsEncryptedDataOutputWithContext(ctx context.Context) KmsEncryptedDataOutput
}

func (*KmsEncryptedData) ElementType() reflect.Type {
	return reflect.TypeOf((*KmsEncryptedData)(nil))
}

func (i *KmsEncryptedData) ToKmsEncryptedDataOutput() KmsEncryptedDataOutput {
	return i.ToKmsEncryptedDataOutputWithContext(context.Background())
}

func (i *KmsEncryptedData) ToKmsEncryptedDataOutputWithContext(ctx context.Context) KmsEncryptedDataOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KmsEncryptedDataOutput)
}

func (i *KmsEncryptedData) ToKmsEncryptedDataPtrOutput() KmsEncryptedDataPtrOutput {
	return i.ToKmsEncryptedDataPtrOutputWithContext(context.Background())
}

func (i *KmsEncryptedData) ToKmsEncryptedDataPtrOutputWithContext(ctx context.Context) KmsEncryptedDataPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KmsEncryptedDataPtrOutput)
}

type KmsEncryptedDataPtrInput interface {
	pulumi.Input

	ToKmsEncryptedDataPtrOutput() KmsEncryptedDataPtrOutput
	ToKmsEncryptedDataPtrOutputWithContext(ctx context.Context) KmsEncryptedDataPtrOutput
}

type kmsEncryptedDataPtrType KmsEncryptedDataArgs

func (*kmsEncryptedDataPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KmsEncryptedData)(nil))
}

func (i *kmsEncryptedDataPtrType) ToKmsEncryptedDataPtrOutput() KmsEncryptedDataPtrOutput {
	return i.ToKmsEncryptedDataPtrOutputWithContext(context.Background())
}

func (i *kmsEncryptedDataPtrType) ToKmsEncryptedDataPtrOutputWithContext(ctx context.Context) KmsEncryptedDataPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KmsEncryptedDataPtrOutput)
}

// KmsEncryptedDataArrayInput is an input type that accepts KmsEncryptedDataArray and KmsEncryptedDataArrayOutput values.
// You can construct a concrete instance of `KmsEncryptedDataArrayInput` via:
//
//          KmsEncryptedDataArray{ KmsEncryptedDataArgs{...} }
type KmsEncryptedDataArrayInput interface {
	pulumi.Input

	ToKmsEncryptedDataArrayOutput() KmsEncryptedDataArrayOutput
	ToKmsEncryptedDataArrayOutputWithContext(context.Context) KmsEncryptedDataArrayOutput
}

type KmsEncryptedDataArray []KmsEncryptedDataInput

func (KmsEncryptedDataArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*KmsEncryptedData)(nil)).Elem()
}

func (i KmsEncryptedDataArray) ToKmsEncryptedDataArrayOutput() KmsEncryptedDataArrayOutput {
	return i.ToKmsEncryptedDataArrayOutputWithContext(context.Background())
}

func (i KmsEncryptedDataArray) ToKmsEncryptedDataArrayOutputWithContext(ctx context.Context) KmsEncryptedDataArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KmsEncryptedDataArrayOutput)
}

// KmsEncryptedDataMapInput is an input type that accepts KmsEncryptedDataMap and KmsEncryptedDataMapOutput values.
// You can construct a concrete instance of `KmsEncryptedDataMapInput` via:
//
//          KmsEncryptedDataMap{ "key": KmsEncryptedDataArgs{...} }
type KmsEncryptedDataMapInput interface {
	pulumi.Input

	ToKmsEncryptedDataMapOutput() KmsEncryptedDataMapOutput
	ToKmsEncryptedDataMapOutputWithContext(context.Context) KmsEncryptedDataMapOutput
}

type KmsEncryptedDataMap map[string]KmsEncryptedDataInput

func (KmsEncryptedDataMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*KmsEncryptedData)(nil)).Elem()
}

func (i KmsEncryptedDataMap) ToKmsEncryptedDataMapOutput() KmsEncryptedDataMapOutput {
	return i.ToKmsEncryptedDataMapOutputWithContext(context.Background())
}

func (i KmsEncryptedDataMap) ToKmsEncryptedDataMapOutputWithContext(ctx context.Context) KmsEncryptedDataMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KmsEncryptedDataMapOutput)
}

type KmsEncryptedDataOutput struct {
	*pulumi.OutputState
}

func (KmsEncryptedDataOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KmsEncryptedData)(nil))
}

func (o KmsEncryptedDataOutput) ToKmsEncryptedDataOutput() KmsEncryptedDataOutput {
	return o
}

func (o KmsEncryptedDataOutput) ToKmsEncryptedDataOutputWithContext(ctx context.Context) KmsEncryptedDataOutput {
	return o
}

func (o KmsEncryptedDataOutput) ToKmsEncryptedDataPtrOutput() KmsEncryptedDataPtrOutput {
	return o.ToKmsEncryptedDataPtrOutputWithContext(context.Background())
}

func (o KmsEncryptedDataOutput) ToKmsEncryptedDataPtrOutputWithContext(ctx context.Context) KmsEncryptedDataPtrOutput {
	return o.ApplyT(func(v KmsEncryptedData) *KmsEncryptedData {
		return &v
	}).(KmsEncryptedDataPtrOutput)
}

type KmsEncryptedDataPtrOutput struct {
	*pulumi.OutputState
}

func (KmsEncryptedDataPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KmsEncryptedData)(nil))
}

func (o KmsEncryptedDataPtrOutput) ToKmsEncryptedDataPtrOutput() KmsEncryptedDataPtrOutput {
	return o
}

func (o KmsEncryptedDataPtrOutput) ToKmsEncryptedDataPtrOutputWithContext(ctx context.Context) KmsEncryptedDataPtrOutput {
	return o
}

type KmsEncryptedDataArrayOutput struct{ *pulumi.OutputState }

func (KmsEncryptedDataArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]KmsEncryptedData)(nil))
}

func (o KmsEncryptedDataArrayOutput) ToKmsEncryptedDataArrayOutput() KmsEncryptedDataArrayOutput {
	return o
}

func (o KmsEncryptedDataArrayOutput) ToKmsEncryptedDataArrayOutputWithContext(ctx context.Context) KmsEncryptedDataArrayOutput {
	return o
}

func (o KmsEncryptedDataArrayOutput) Index(i pulumi.IntInput) KmsEncryptedDataOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) KmsEncryptedData {
		return vs[0].([]KmsEncryptedData)[vs[1].(int)]
	}).(KmsEncryptedDataOutput)
}

type KmsEncryptedDataMapOutput struct{ *pulumi.OutputState }

func (KmsEncryptedDataMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]KmsEncryptedData)(nil))
}

func (o KmsEncryptedDataMapOutput) ToKmsEncryptedDataMapOutput() KmsEncryptedDataMapOutput {
	return o
}

func (o KmsEncryptedDataMapOutput) ToKmsEncryptedDataMapOutputWithContext(ctx context.Context) KmsEncryptedDataMapOutput {
	return o
}

func (o KmsEncryptedDataMapOutput) MapIndex(k pulumi.StringInput) KmsEncryptedDataOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) KmsEncryptedData {
		return vs[0].(map[string]KmsEncryptedData)[vs[1].(string)]
	}).(KmsEncryptedDataOutput)
}

func init() {
	pulumi.RegisterOutputType(KmsEncryptedDataOutput{})
	pulumi.RegisterOutputType(KmsEncryptedDataPtrOutput{})
	pulumi.RegisterOutputType(KmsEncryptedDataArrayOutput{})
	pulumi.RegisterOutputType(KmsEncryptedDataMapOutput{})
}
