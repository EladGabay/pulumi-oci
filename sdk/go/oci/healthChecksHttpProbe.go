// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package oci

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource provides the Http Probe resource in Oracle Cloud Infrastructure Health Checks service.
//
// Creates an on-demand HTTP probe. The location response header contains the URL for
// fetching the probe results.
//
// *Note:* On-demand probe configurations are not saved.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-oci/sdk/go/oci"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := oci.NewHealthChecksHttpProbe(ctx, "testHttpProbe", &oci.HealthChecksHttpProbeArgs{
// 			CompartmentId:     pulumi.Any(_var.Compartment_id),
// 			Protocol:          pulumi.Any(_var.Http_probe_protocol),
// 			Targets:           pulumi.Any(_var.Http_probe_targets),
// 			Headers:           pulumi.Any(_var.Http_probe_headers),
// 			Method:            pulumi.Any(_var.Http_probe_method),
// 			Path:              pulumi.Any(_var.Http_probe_path),
// 			Port:              pulumi.Any(_var.Http_probe_port),
// 			TimeoutInSeconds:  pulumi.Any(_var.Http_probe_timeout_in_seconds),
// 			VantagePointNames: pulumi.Any(_var.Http_probe_vantage_point_names),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// HttpProbes can be imported using the `id`, e.g.
//
// ```sh
//  $ pulumi import oci:index/healthChecksHttpProbe:HealthChecksHttpProbe test_http_probe "id"
// ```
type HealthChecksHttpProbe struct {
	pulumi.CustomResourceState

	// The OCID of the compartment.
	CompartmentId pulumi.StringOutput `pulumi:"compartmentId"`
	// A dictionary of HTTP request headers.
	Headers pulumi.MapOutput `pulumi:"headers"`
	// The region where updates must be made and where results must be fetched from.
	HomeRegion pulumi.StringOutput `pulumi:"homeRegion"`
	// The supported HTTP methods available for probes.
	Method pulumi.StringOutput `pulumi:"method"`
	// The optional URL path to probe, including query parameters.
	Path pulumi.StringOutput `pulumi:"path"`
	// The port on which to probe endpoints. If unspecified, probes will use the default port of their protocol.
	Port pulumi.IntOutput `pulumi:"port"`
	// The supported protocols available for HTTP probes.
	Protocol pulumi.StringOutput `pulumi:"protocol"`
	// A URL for fetching the probe results.
	ResultsUrl pulumi.StringOutput `pulumi:"resultsUrl"`
	// A list of targets (hostnames or IP addresses) of the probe.
	Targets pulumi.StringArrayOutput `pulumi:"targets"`
	// The RFC 3339-formatted creation date and time of the probe.
	TimeCreated pulumi.StringOutput `pulumi:"timeCreated"`
	// The probe timeout in seconds. Valid values: 10, 20, 30, and 60. The probe timeout must be less than or equal to `intervalInSeconds` for monitors.
	TimeoutInSeconds pulumi.IntOutput `pulumi:"timeoutInSeconds"`
	// A list of names of vantage points from which to execute the probe.
	VantagePointNames pulumi.StringArrayOutput `pulumi:"vantagePointNames"`
}

// NewHealthChecksHttpProbe registers a new resource with the given unique name, arguments, and options.
func NewHealthChecksHttpProbe(ctx *pulumi.Context,
	name string, args *HealthChecksHttpProbeArgs, opts ...pulumi.ResourceOption) (*HealthChecksHttpProbe, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CompartmentId == nil {
		return nil, errors.New("invalid value for required argument 'CompartmentId'")
	}
	if args.Protocol == nil {
		return nil, errors.New("invalid value for required argument 'Protocol'")
	}
	if args.Targets == nil {
		return nil, errors.New("invalid value for required argument 'Targets'")
	}
	var resource HealthChecksHttpProbe
	err := ctx.RegisterResource("oci:index/healthChecksHttpProbe:HealthChecksHttpProbe", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetHealthChecksHttpProbe gets an existing HealthChecksHttpProbe resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetHealthChecksHttpProbe(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *HealthChecksHttpProbeState, opts ...pulumi.ResourceOption) (*HealthChecksHttpProbe, error) {
	var resource HealthChecksHttpProbe
	err := ctx.ReadResource("oci:index/healthChecksHttpProbe:HealthChecksHttpProbe", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering HealthChecksHttpProbe resources.
type healthChecksHttpProbeState struct {
	// The OCID of the compartment.
	CompartmentId *string `pulumi:"compartmentId"`
	// A dictionary of HTTP request headers.
	Headers map[string]interface{} `pulumi:"headers"`
	// The region where updates must be made and where results must be fetched from.
	HomeRegion *string `pulumi:"homeRegion"`
	// The supported HTTP methods available for probes.
	Method *string `pulumi:"method"`
	// The optional URL path to probe, including query parameters.
	Path *string `pulumi:"path"`
	// The port on which to probe endpoints. If unspecified, probes will use the default port of their protocol.
	Port *int `pulumi:"port"`
	// The supported protocols available for HTTP probes.
	Protocol *string `pulumi:"protocol"`
	// A URL for fetching the probe results.
	ResultsUrl *string `pulumi:"resultsUrl"`
	// A list of targets (hostnames or IP addresses) of the probe.
	Targets []string `pulumi:"targets"`
	// The RFC 3339-formatted creation date and time of the probe.
	TimeCreated *string `pulumi:"timeCreated"`
	// The probe timeout in seconds. Valid values: 10, 20, 30, and 60. The probe timeout must be less than or equal to `intervalInSeconds` for monitors.
	TimeoutInSeconds *int `pulumi:"timeoutInSeconds"`
	// A list of names of vantage points from which to execute the probe.
	VantagePointNames []string `pulumi:"vantagePointNames"`
}

type HealthChecksHttpProbeState struct {
	// The OCID of the compartment.
	CompartmentId pulumi.StringPtrInput
	// A dictionary of HTTP request headers.
	Headers pulumi.MapInput
	// The region where updates must be made and where results must be fetched from.
	HomeRegion pulumi.StringPtrInput
	// The supported HTTP methods available for probes.
	Method pulumi.StringPtrInput
	// The optional URL path to probe, including query parameters.
	Path pulumi.StringPtrInput
	// The port on which to probe endpoints. If unspecified, probes will use the default port of their protocol.
	Port pulumi.IntPtrInput
	// The supported protocols available for HTTP probes.
	Protocol pulumi.StringPtrInput
	// A URL for fetching the probe results.
	ResultsUrl pulumi.StringPtrInput
	// A list of targets (hostnames or IP addresses) of the probe.
	Targets pulumi.StringArrayInput
	// The RFC 3339-formatted creation date and time of the probe.
	TimeCreated pulumi.StringPtrInput
	// The probe timeout in seconds. Valid values: 10, 20, 30, and 60. The probe timeout must be less than or equal to `intervalInSeconds` for monitors.
	TimeoutInSeconds pulumi.IntPtrInput
	// A list of names of vantage points from which to execute the probe.
	VantagePointNames pulumi.StringArrayInput
}

func (HealthChecksHttpProbeState) ElementType() reflect.Type {
	return reflect.TypeOf((*healthChecksHttpProbeState)(nil)).Elem()
}

type healthChecksHttpProbeArgs struct {
	// The OCID of the compartment.
	CompartmentId string `pulumi:"compartmentId"`
	// A dictionary of HTTP request headers.
	Headers map[string]interface{} `pulumi:"headers"`
	// The supported HTTP methods available for probes.
	Method *string `pulumi:"method"`
	// The optional URL path to probe, including query parameters.
	Path *string `pulumi:"path"`
	// The port on which to probe endpoints. If unspecified, probes will use the default port of their protocol.
	Port *int `pulumi:"port"`
	// The supported protocols available for HTTP probes.
	Protocol string `pulumi:"protocol"`
	// A list of targets (hostnames or IP addresses) of the probe.
	Targets []string `pulumi:"targets"`
	// The probe timeout in seconds. Valid values: 10, 20, 30, and 60. The probe timeout must be less than or equal to `intervalInSeconds` for monitors.
	TimeoutInSeconds *int `pulumi:"timeoutInSeconds"`
	// A list of names of vantage points from which to execute the probe.
	VantagePointNames []string `pulumi:"vantagePointNames"`
}

// The set of arguments for constructing a HealthChecksHttpProbe resource.
type HealthChecksHttpProbeArgs struct {
	// The OCID of the compartment.
	CompartmentId pulumi.StringInput
	// A dictionary of HTTP request headers.
	Headers pulumi.MapInput
	// The supported HTTP methods available for probes.
	Method pulumi.StringPtrInput
	// The optional URL path to probe, including query parameters.
	Path pulumi.StringPtrInput
	// The port on which to probe endpoints. If unspecified, probes will use the default port of their protocol.
	Port pulumi.IntPtrInput
	// The supported protocols available for HTTP probes.
	Protocol pulumi.StringInput
	// A list of targets (hostnames or IP addresses) of the probe.
	Targets pulumi.StringArrayInput
	// The probe timeout in seconds. Valid values: 10, 20, 30, and 60. The probe timeout must be less than or equal to `intervalInSeconds` for monitors.
	TimeoutInSeconds pulumi.IntPtrInput
	// A list of names of vantage points from which to execute the probe.
	VantagePointNames pulumi.StringArrayInput
}

func (HealthChecksHttpProbeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*healthChecksHttpProbeArgs)(nil)).Elem()
}

type HealthChecksHttpProbeInput interface {
	pulumi.Input

	ToHealthChecksHttpProbeOutput() HealthChecksHttpProbeOutput
	ToHealthChecksHttpProbeOutputWithContext(ctx context.Context) HealthChecksHttpProbeOutput
}

func (*HealthChecksHttpProbe) ElementType() reflect.Type {
	return reflect.TypeOf((*HealthChecksHttpProbe)(nil))
}

func (i *HealthChecksHttpProbe) ToHealthChecksHttpProbeOutput() HealthChecksHttpProbeOutput {
	return i.ToHealthChecksHttpProbeOutputWithContext(context.Background())
}

func (i *HealthChecksHttpProbe) ToHealthChecksHttpProbeOutputWithContext(ctx context.Context) HealthChecksHttpProbeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HealthChecksHttpProbeOutput)
}

func (i *HealthChecksHttpProbe) ToHealthChecksHttpProbePtrOutput() HealthChecksHttpProbePtrOutput {
	return i.ToHealthChecksHttpProbePtrOutputWithContext(context.Background())
}

func (i *HealthChecksHttpProbe) ToHealthChecksHttpProbePtrOutputWithContext(ctx context.Context) HealthChecksHttpProbePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HealthChecksHttpProbePtrOutput)
}

type HealthChecksHttpProbePtrInput interface {
	pulumi.Input

	ToHealthChecksHttpProbePtrOutput() HealthChecksHttpProbePtrOutput
	ToHealthChecksHttpProbePtrOutputWithContext(ctx context.Context) HealthChecksHttpProbePtrOutput
}

type healthChecksHttpProbePtrType HealthChecksHttpProbeArgs

func (*healthChecksHttpProbePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HealthChecksHttpProbe)(nil))
}

func (i *healthChecksHttpProbePtrType) ToHealthChecksHttpProbePtrOutput() HealthChecksHttpProbePtrOutput {
	return i.ToHealthChecksHttpProbePtrOutputWithContext(context.Background())
}

func (i *healthChecksHttpProbePtrType) ToHealthChecksHttpProbePtrOutputWithContext(ctx context.Context) HealthChecksHttpProbePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HealthChecksHttpProbePtrOutput)
}

// HealthChecksHttpProbeArrayInput is an input type that accepts HealthChecksHttpProbeArray and HealthChecksHttpProbeArrayOutput values.
// You can construct a concrete instance of `HealthChecksHttpProbeArrayInput` via:
//
//          HealthChecksHttpProbeArray{ HealthChecksHttpProbeArgs{...} }
type HealthChecksHttpProbeArrayInput interface {
	pulumi.Input

	ToHealthChecksHttpProbeArrayOutput() HealthChecksHttpProbeArrayOutput
	ToHealthChecksHttpProbeArrayOutputWithContext(context.Context) HealthChecksHttpProbeArrayOutput
}

type HealthChecksHttpProbeArray []HealthChecksHttpProbeInput

func (HealthChecksHttpProbeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*HealthChecksHttpProbe)(nil)).Elem()
}

func (i HealthChecksHttpProbeArray) ToHealthChecksHttpProbeArrayOutput() HealthChecksHttpProbeArrayOutput {
	return i.ToHealthChecksHttpProbeArrayOutputWithContext(context.Background())
}

func (i HealthChecksHttpProbeArray) ToHealthChecksHttpProbeArrayOutputWithContext(ctx context.Context) HealthChecksHttpProbeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HealthChecksHttpProbeArrayOutput)
}

// HealthChecksHttpProbeMapInput is an input type that accepts HealthChecksHttpProbeMap and HealthChecksHttpProbeMapOutput values.
// You can construct a concrete instance of `HealthChecksHttpProbeMapInput` via:
//
//          HealthChecksHttpProbeMap{ "key": HealthChecksHttpProbeArgs{...} }
type HealthChecksHttpProbeMapInput interface {
	pulumi.Input

	ToHealthChecksHttpProbeMapOutput() HealthChecksHttpProbeMapOutput
	ToHealthChecksHttpProbeMapOutputWithContext(context.Context) HealthChecksHttpProbeMapOutput
}

type HealthChecksHttpProbeMap map[string]HealthChecksHttpProbeInput

func (HealthChecksHttpProbeMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*HealthChecksHttpProbe)(nil)).Elem()
}

func (i HealthChecksHttpProbeMap) ToHealthChecksHttpProbeMapOutput() HealthChecksHttpProbeMapOutput {
	return i.ToHealthChecksHttpProbeMapOutputWithContext(context.Background())
}

func (i HealthChecksHttpProbeMap) ToHealthChecksHttpProbeMapOutputWithContext(ctx context.Context) HealthChecksHttpProbeMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HealthChecksHttpProbeMapOutput)
}

type HealthChecksHttpProbeOutput struct {
	*pulumi.OutputState
}

func (HealthChecksHttpProbeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HealthChecksHttpProbe)(nil))
}

func (o HealthChecksHttpProbeOutput) ToHealthChecksHttpProbeOutput() HealthChecksHttpProbeOutput {
	return o
}

func (o HealthChecksHttpProbeOutput) ToHealthChecksHttpProbeOutputWithContext(ctx context.Context) HealthChecksHttpProbeOutput {
	return o
}

func (o HealthChecksHttpProbeOutput) ToHealthChecksHttpProbePtrOutput() HealthChecksHttpProbePtrOutput {
	return o.ToHealthChecksHttpProbePtrOutputWithContext(context.Background())
}

func (o HealthChecksHttpProbeOutput) ToHealthChecksHttpProbePtrOutputWithContext(ctx context.Context) HealthChecksHttpProbePtrOutput {
	return o.ApplyT(func(v HealthChecksHttpProbe) *HealthChecksHttpProbe {
		return &v
	}).(HealthChecksHttpProbePtrOutput)
}

type HealthChecksHttpProbePtrOutput struct {
	*pulumi.OutputState
}

func (HealthChecksHttpProbePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HealthChecksHttpProbe)(nil))
}

func (o HealthChecksHttpProbePtrOutput) ToHealthChecksHttpProbePtrOutput() HealthChecksHttpProbePtrOutput {
	return o
}

func (o HealthChecksHttpProbePtrOutput) ToHealthChecksHttpProbePtrOutputWithContext(ctx context.Context) HealthChecksHttpProbePtrOutput {
	return o
}

type HealthChecksHttpProbeArrayOutput struct{ *pulumi.OutputState }

func (HealthChecksHttpProbeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HealthChecksHttpProbe)(nil))
}

func (o HealthChecksHttpProbeArrayOutput) ToHealthChecksHttpProbeArrayOutput() HealthChecksHttpProbeArrayOutput {
	return o
}

func (o HealthChecksHttpProbeArrayOutput) ToHealthChecksHttpProbeArrayOutputWithContext(ctx context.Context) HealthChecksHttpProbeArrayOutput {
	return o
}

func (o HealthChecksHttpProbeArrayOutput) Index(i pulumi.IntInput) HealthChecksHttpProbeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) HealthChecksHttpProbe {
		return vs[0].([]HealthChecksHttpProbe)[vs[1].(int)]
	}).(HealthChecksHttpProbeOutput)
}

type HealthChecksHttpProbeMapOutput struct{ *pulumi.OutputState }

func (HealthChecksHttpProbeMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]HealthChecksHttpProbe)(nil))
}

func (o HealthChecksHttpProbeMapOutput) ToHealthChecksHttpProbeMapOutput() HealthChecksHttpProbeMapOutput {
	return o
}

func (o HealthChecksHttpProbeMapOutput) ToHealthChecksHttpProbeMapOutputWithContext(ctx context.Context) HealthChecksHttpProbeMapOutput {
	return o
}

func (o HealthChecksHttpProbeMapOutput) MapIndex(k pulumi.StringInput) HealthChecksHttpProbeOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) HealthChecksHttpProbe {
		return vs[0].(map[string]HealthChecksHttpProbe)[vs[1].(string)]
	}).(HealthChecksHttpProbeOutput)
}

func init() {
	pulumi.RegisterOutputType(HealthChecksHttpProbeOutput{})
	pulumi.RegisterOutputType(HealthChecksHttpProbePtrOutput{})
	pulumi.RegisterOutputType(HealthChecksHttpProbeArrayOutput{})
	pulumi.RegisterOutputType(HealthChecksHttpProbeMapOutput{})
}
