// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci
{
    public static class GetBdsBdsInstances
    {
        /// <summary>
        /// This data source provides the list of Bds Instances in Oracle Cloud Infrastructure Big Data Service service.
        /// 
        /// Returns a list of all Big Data Service clusters in a compartment.
        /// 
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var testBdsInstances = Output.Create(Oci.GetBdsBdsInstances.InvokeAsync(new Oci.GetBdsBdsInstancesArgs
        ///         {
        ///             CompartmentId = @var.Compartment_id,
        ///             DisplayName = @var.Bds_instance_display_name,
        ///             State = @var.Bds_instance_state,
        ///         }));
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetBdsBdsInstancesResult> InvokeAsync(GetBdsBdsInstancesArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetBdsBdsInstancesResult>("oci:index/getBdsBdsInstances:GetBdsBdsInstances", args ?? new GetBdsBdsInstancesArgs(), options.WithVersion());
    }


    public sealed class GetBdsBdsInstancesArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The OCID of the compartment.
        /// </summary>
        [Input("compartmentId", required: true)]
        public string CompartmentId { get; set; } = null!;

        /// <summary>
        /// A filter to return only resources that match the entire display name given.
        /// </summary>
        [Input("displayName")]
        public string? DisplayName { get; set; }

        [Input("filters")]
        private List<Inputs.GetBdsBdsInstancesFilterArgs>? _filters;
        public List<Inputs.GetBdsBdsInstancesFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetBdsBdsInstancesFilterArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// The state of the cluster.
        /// </summary>
        [Input("state")]
        public string? State { get; set; }

        public GetBdsBdsInstancesArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetBdsBdsInstancesResult
    {
        /// <summary>
        /// The list of bds_instances.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetBdsBdsInstancesBdsInstanceResult> BdsInstances;
        /// <summary>
        /// The OCID of the compartment.
        /// </summary>
        public readonly string CompartmentId;
        /// <summary>
        /// The name of the node.
        /// </summary>
        public readonly string? DisplayName;
        public readonly ImmutableArray<Outputs.GetBdsBdsInstancesFilterResult> Filters;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The state of the cluster.
        /// </summary>
        public readonly string? State;

        [OutputConstructor]
        private GetBdsBdsInstancesResult(
            ImmutableArray<Outputs.GetBdsBdsInstancesBdsInstanceResult> bdsInstances,

            string compartmentId,

            string? displayName,

            ImmutableArray<Outputs.GetBdsBdsInstancesFilterResult> filters,

            string id,

            string? state)
        {
            BdsInstances = bdsInstances;
            CompartmentId = compartmentId;
            DisplayName = displayName;
            Filters = filters;
            Id = id;
            State = state;
        }
    }
}
