// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package oci

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource provides the Connection resource in Oracle Cloud Infrastructure Data Catalog service.
//
// Creates a new connection.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-oci/sdk/go/oci"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := oci.NewDatacatalogConnection(ctx, "testConnection", &oci.DatacatalogConnectionArgs{
// 			CatalogId:     pulumi.Any(oci_datacatalog_catalog.Test_catalog.Id),
// 			DataAssetKey:  pulumi.Any(_var.Connection_data_asset_key),
// 			DisplayName:   pulumi.Any(_var.Connection_display_name),
// 			Properties:    pulumi.Any(_var.Connection_properties),
// 			TypeKey:       pulumi.Any(_var.Connection_type_key),
// 			Description:   pulumi.Any(_var.Connection_description),
// 			EncProperties: pulumi.Any(_var.Connection_enc_properties),
// 			IsDefault:     pulumi.Any(_var.Connection_is_default),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// Connections can be imported using the `id`, e.g.
//
// ```sh
//  $ pulumi import oci:index/datacatalogConnection:DatacatalogConnection test_connection "catalogs/{catalogId}/dataAssets/{dataAssetKey}/connections/{connectionKey}"
// ```
type DatacatalogConnection struct {
	pulumi.CustomResourceState

	// Unique catalog identifier.
	CatalogId pulumi.StringOutput `pulumi:"catalogId"`
	// OCID of the user who created the connection.
	CreatedById pulumi.StringOutput `pulumi:"createdById"`
	// Unique data asset key.
	DataAssetKey pulumi.StringOutput `pulumi:"dataAssetKey"`
	// (Updatable) A description of the connection.
	Description pulumi.StringOutput `pulumi:"description"`
	// (Updatable) A user-friendly display name. Does not have to be unique, and it's changeable. Avoid entering confidential information.
	DisplayName pulumi.StringOutput `pulumi:"displayName"`
	// (Updatable) A map of maps that contains the encrypted values for sensitive properties which are specific to the connection type. Each connection type definition defines it's set of required and optional properties. The map keys are category names and the values are maps of property name to property value. Every property is contained inside of a category. Most connections have required properties within the "default" category. To determine the set of optional and required properties for a connection type, a query can be done on '/types?type=connection' that returns a collection of all connection types. The appropriate connection type, which will include definitions of all of it's properties, can be identified from this collection. Example: `{"encProperties": { "default": { "password": "example-password"}}}`
	EncProperties pulumi.MapOutput `pulumi:"encProperties"`
	// Unique external key of this object from the source system.
	ExternalKey pulumi.StringOutput `pulumi:"externalKey"`
	// (Updatable) Indicates whether this connection is the default connection. The first connection of a data asset defaults to being the default, subsequent connections default to not being the default. If a default connection already exists, then trying to create a connection as the default will fail. In this case the default connection would need to be updated not to be the default and then the new connection can then be created as the default.
	IsDefault pulumi.BoolOutput `pulumi:"isDefault"`
	// Unique connection key that is immutable.
	Key pulumi.StringOutput `pulumi:"key"`
	// A map of maps that contains the properties which are specific to the connection type. Each connection type definition defines it's set of required and optional properties. The map keys are category names and the values are maps of property name to property value. Every property is contained inside of a category. Most connections have required properties within the "default" category. Example: `{"properties": { "default": { "username": "user1"}}}`
	Properties pulumi.MapOutput `pulumi:"properties"`
	// The current state of the connection.
	State pulumi.StringOutput `pulumi:"state"`
	// The date and time the connection was created, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339). Example: `2019-03-25T21:10:29.600Z`
	TimeCreated pulumi.StringOutput `pulumi:"timeCreated"`
	// Time that the connections status was last updated. An [RFC3339](https://tools.ietf.org/html/rfc3339) formatted datetime string.
	TimeStatusUpdated pulumi.StringOutput `pulumi:"timeStatusUpdated"`
	// The last time that any change was made to the connection. An [RFC3339](https://tools.ietf.org/html/rfc3339) formatted datetime string.
	TimeUpdated pulumi.StringOutput `pulumi:"timeUpdated"`
	// The key of the object type. Type key's can be found via the '/types' endpoint.
	TypeKey pulumi.StringOutput `pulumi:"typeKey"`
	// OCID of the user who modified the connection.
	UpdatedById pulumi.StringOutput `pulumi:"updatedById"`
	// URI to the connection instance in the API.
	Uri pulumi.StringOutput `pulumi:"uri"`
}

// NewDatacatalogConnection registers a new resource with the given unique name, arguments, and options.
func NewDatacatalogConnection(ctx *pulumi.Context,
	name string, args *DatacatalogConnectionArgs, opts ...pulumi.ResourceOption) (*DatacatalogConnection, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CatalogId == nil {
		return nil, errors.New("invalid value for required argument 'CatalogId'")
	}
	if args.DataAssetKey == nil {
		return nil, errors.New("invalid value for required argument 'DataAssetKey'")
	}
	if args.DisplayName == nil {
		return nil, errors.New("invalid value for required argument 'DisplayName'")
	}
	if args.Properties == nil {
		return nil, errors.New("invalid value for required argument 'Properties'")
	}
	if args.TypeKey == nil {
		return nil, errors.New("invalid value for required argument 'TypeKey'")
	}
	var resource DatacatalogConnection
	err := ctx.RegisterResource("oci:index/datacatalogConnection:DatacatalogConnection", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDatacatalogConnection gets an existing DatacatalogConnection resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDatacatalogConnection(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DatacatalogConnectionState, opts ...pulumi.ResourceOption) (*DatacatalogConnection, error) {
	var resource DatacatalogConnection
	err := ctx.ReadResource("oci:index/datacatalogConnection:DatacatalogConnection", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DatacatalogConnection resources.
type datacatalogConnectionState struct {
	// Unique catalog identifier.
	CatalogId *string `pulumi:"catalogId"`
	// OCID of the user who created the connection.
	CreatedById *string `pulumi:"createdById"`
	// Unique data asset key.
	DataAssetKey *string `pulumi:"dataAssetKey"`
	// (Updatable) A description of the connection.
	Description *string `pulumi:"description"`
	// (Updatable) A user-friendly display name. Does not have to be unique, and it's changeable. Avoid entering confidential information.
	DisplayName *string `pulumi:"displayName"`
	// (Updatable) A map of maps that contains the encrypted values for sensitive properties which are specific to the connection type. Each connection type definition defines it's set of required and optional properties. The map keys are category names and the values are maps of property name to property value. Every property is contained inside of a category. Most connections have required properties within the "default" category. To determine the set of optional and required properties for a connection type, a query can be done on '/types?type=connection' that returns a collection of all connection types. The appropriate connection type, which will include definitions of all of it's properties, can be identified from this collection. Example: `{"encProperties": { "default": { "password": "example-password"}}}`
	EncProperties map[string]interface{} `pulumi:"encProperties"`
	// Unique external key of this object from the source system.
	ExternalKey *string `pulumi:"externalKey"`
	// (Updatable) Indicates whether this connection is the default connection. The first connection of a data asset defaults to being the default, subsequent connections default to not being the default. If a default connection already exists, then trying to create a connection as the default will fail. In this case the default connection would need to be updated not to be the default and then the new connection can then be created as the default.
	IsDefault *bool `pulumi:"isDefault"`
	// Unique connection key that is immutable.
	Key *string `pulumi:"key"`
	// A map of maps that contains the properties which are specific to the connection type. Each connection type definition defines it's set of required and optional properties. The map keys are category names and the values are maps of property name to property value. Every property is contained inside of a category. Most connections have required properties within the "default" category. Example: `{"properties": { "default": { "username": "user1"}}}`
	Properties map[string]interface{} `pulumi:"properties"`
	// The current state of the connection.
	State *string `pulumi:"state"`
	// The date and time the connection was created, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339). Example: `2019-03-25T21:10:29.600Z`
	TimeCreated *string `pulumi:"timeCreated"`
	// Time that the connections status was last updated. An [RFC3339](https://tools.ietf.org/html/rfc3339) formatted datetime string.
	TimeStatusUpdated *string `pulumi:"timeStatusUpdated"`
	// The last time that any change was made to the connection. An [RFC3339](https://tools.ietf.org/html/rfc3339) formatted datetime string.
	TimeUpdated *string `pulumi:"timeUpdated"`
	// The key of the object type. Type key's can be found via the '/types' endpoint.
	TypeKey *string `pulumi:"typeKey"`
	// OCID of the user who modified the connection.
	UpdatedById *string `pulumi:"updatedById"`
	// URI to the connection instance in the API.
	Uri *string `pulumi:"uri"`
}

type DatacatalogConnectionState struct {
	// Unique catalog identifier.
	CatalogId pulumi.StringPtrInput
	// OCID of the user who created the connection.
	CreatedById pulumi.StringPtrInput
	// Unique data asset key.
	DataAssetKey pulumi.StringPtrInput
	// (Updatable) A description of the connection.
	Description pulumi.StringPtrInput
	// (Updatable) A user-friendly display name. Does not have to be unique, and it's changeable. Avoid entering confidential information.
	DisplayName pulumi.StringPtrInput
	// (Updatable) A map of maps that contains the encrypted values for sensitive properties which are specific to the connection type. Each connection type definition defines it's set of required and optional properties. The map keys are category names and the values are maps of property name to property value. Every property is contained inside of a category. Most connections have required properties within the "default" category. To determine the set of optional and required properties for a connection type, a query can be done on '/types?type=connection' that returns a collection of all connection types. The appropriate connection type, which will include definitions of all of it's properties, can be identified from this collection. Example: `{"encProperties": { "default": { "password": "example-password"}}}`
	EncProperties pulumi.MapInput
	// Unique external key of this object from the source system.
	ExternalKey pulumi.StringPtrInput
	// (Updatable) Indicates whether this connection is the default connection. The first connection of a data asset defaults to being the default, subsequent connections default to not being the default. If a default connection already exists, then trying to create a connection as the default will fail. In this case the default connection would need to be updated not to be the default and then the new connection can then be created as the default.
	IsDefault pulumi.BoolPtrInput
	// Unique connection key that is immutable.
	Key pulumi.StringPtrInput
	// A map of maps that contains the properties which are specific to the connection type. Each connection type definition defines it's set of required and optional properties. The map keys are category names and the values are maps of property name to property value. Every property is contained inside of a category. Most connections have required properties within the "default" category. Example: `{"properties": { "default": { "username": "user1"}}}`
	Properties pulumi.MapInput
	// The current state of the connection.
	State pulumi.StringPtrInput
	// The date and time the connection was created, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339). Example: `2019-03-25T21:10:29.600Z`
	TimeCreated pulumi.StringPtrInput
	// Time that the connections status was last updated. An [RFC3339](https://tools.ietf.org/html/rfc3339) formatted datetime string.
	TimeStatusUpdated pulumi.StringPtrInput
	// The last time that any change was made to the connection. An [RFC3339](https://tools.ietf.org/html/rfc3339) formatted datetime string.
	TimeUpdated pulumi.StringPtrInput
	// The key of the object type. Type key's can be found via the '/types' endpoint.
	TypeKey pulumi.StringPtrInput
	// OCID of the user who modified the connection.
	UpdatedById pulumi.StringPtrInput
	// URI to the connection instance in the API.
	Uri pulumi.StringPtrInput
}

func (DatacatalogConnectionState) ElementType() reflect.Type {
	return reflect.TypeOf((*datacatalogConnectionState)(nil)).Elem()
}

type datacatalogConnectionArgs struct {
	// Unique catalog identifier.
	CatalogId string `pulumi:"catalogId"`
	// Unique data asset key.
	DataAssetKey string `pulumi:"dataAssetKey"`
	// (Updatable) A description of the connection.
	Description *string `pulumi:"description"`
	// (Updatable) A user-friendly display name. Does not have to be unique, and it's changeable. Avoid entering confidential information.
	DisplayName string `pulumi:"displayName"`
	// (Updatable) A map of maps that contains the encrypted values for sensitive properties which are specific to the connection type. Each connection type definition defines it's set of required and optional properties. The map keys are category names and the values are maps of property name to property value. Every property is contained inside of a category. Most connections have required properties within the "default" category. To determine the set of optional and required properties for a connection type, a query can be done on '/types?type=connection' that returns a collection of all connection types. The appropriate connection type, which will include definitions of all of it's properties, can be identified from this collection. Example: `{"encProperties": { "default": { "password": "example-password"}}}`
	EncProperties map[string]interface{} `pulumi:"encProperties"`
	// (Updatable) Indicates whether this connection is the default connection. The first connection of a data asset defaults to being the default, subsequent connections default to not being the default. If a default connection already exists, then trying to create a connection as the default will fail. In this case the default connection would need to be updated not to be the default and then the new connection can then be created as the default.
	IsDefault *bool `pulumi:"isDefault"`
	// A map of maps that contains the properties which are specific to the connection type. Each connection type definition defines it's set of required and optional properties. The map keys are category names and the values are maps of property name to property value. Every property is contained inside of a category. Most connections have required properties within the "default" category. Example: `{"properties": { "default": { "username": "user1"}}}`
	Properties map[string]interface{} `pulumi:"properties"`
	// The key of the object type. Type key's can be found via the '/types' endpoint.
	TypeKey string `pulumi:"typeKey"`
}

// The set of arguments for constructing a DatacatalogConnection resource.
type DatacatalogConnectionArgs struct {
	// Unique catalog identifier.
	CatalogId pulumi.StringInput
	// Unique data asset key.
	DataAssetKey pulumi.StringInput
	// (Updatable) A description of the connection.
	Description pulumi.StringPtrInput
	// (Updatable) A user-friendly display name. Does not have to be unique, and it's changeable. Avoid entering confidential information.
	DisplayName pulumi.StringInput
	// (Updatable) A map of maps that contains the encrypted values for sensitive properties which are specific to the connection type. Each connection type definition defines it's set of required and optional properties. The map keys are category names and the values are maps of property name to property value. Every property is contained inside of a category. Most connections have required properties within the "default" category. To determine the set of optional and required properties for a connection type, a query can be done on '/types?type=connection' that returns a collection of all connection types. The appropriate connection type, which will include definitions of all of it's properties, can be identified from this collection. Example: `{"encProperties": { "default": { "password": "example-password"}}}`
	EncProperties pulumi.MapInput
	// (Updatable) Indicates whether this connection is the default connection. The first connection of a data asset defaults to being the default, subsequent connections default to not being the default. If a default connection already exists, then trying to create a connection as the default will fail. In this case the default connection would need to be updated not to be the default and then the new connection can then be created as the default.
	IsDefault pulumi.BoolPtrInput
	// A map of maps that contains the properties which are specific to the connection type. Each connection type definition defines it's set of required and optional properties. The map keys are category names and the values are maps of property name to property value. Every property is contained inside of a category. Most connections have required properties within the "default" category. Example: `{"properties": { "default": { "username": "user1"}}}`
	Properties pulumi.MapInput
	// The key of the object type. Type key's can be found via the '/types' endpoint.
	TypeKey pulumi.StringInput
}

func (DatacatalogConnectionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*datacatalogConnectionArgs)(nil)).Elem()
}

type DatacatalogConnectionInput interface {
	pulumi.Input

	ToDatacatalogConnectionOutput() DatacatalogConnectionOutput
	ToDatacatalogConnectionOutputWithContext(ctx context.Context) DatacatalogConnectionOutput
}

func (*DatacatalogConnection) ElementType() reflect.Type {
	return reflect.TypeOf((*DatacatalogConnection)(nil))
}

func (i *DatacatalogConnection) ToDatacatalogConnectionOutput() DatacatalogConnectionOutput {
	return i.ToDatacatalogConnectionOutputWithContext(context.Background())
}

func (i *DatacatalogConnection) ToDatacatalogConnectionOutputWithContext(ctx context.Context) DatacatalogConnectionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatacatalogConnectionOutput)
}

func (i *DatacatalogConnection) ToDatacatalogConnectionPtrOutput() DatacatalogConnectionPtrOutput {
	return i.ToDatacatalogConnectionPtrOutputWithContext(context.Background())
}

func (i *DatacatalogConnection) ToDatacatalogConnectionPtrOutputWithContext(ctx context.Context) DatacatalogConnectionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatacatalogConnectionPtrOutput)
}

type DatacatalogConnectionPtrInput interface {
	pulumi.Input

	ToDatacatalogConnectionPtrOutput() DatacatalogConnectionPtrOutput
	ToDatacatalogConnectionPtrOutputWithContext(ctx context.Context) DatacatalogConnectionPtrOutput
}

type datacatalogConnectionPtrType DatacatalogConnectionArgs

func (*datacatalogConnectionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DatacatalogConnection)(nil))
}

func (i *datacatalogConnectionPtrType) ToDatacatalogConnectionPtrOutput() DatacatalogConnectionPtrOutput {
	return i.ToDatacatalogConnectionPtrOutputWithContext(context.Background())
}

func (i *datacatalogConnectionPtrType) ToDatacatalogConnectionPtrOutputWithContext(ctx context.Context) DatacatalogConnectionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatacatalogConnectionPtrOutput)
}

// DatacatalogConnectionArrayInput is an input type that accepts DatacatalogConnectionArray and DatacatalogConnectionArrayOutput values.
// You can construct a concrete instance of `DatacatalogConnectionArrayInput` via:
//
//          DatacatalogConnectionArray{ DatacatalogConnectionArgs{...} }
type DatacatalogConnectionArrayInput interface {
	pulumi.Input

	ToDatacatalogConnectionArrayOutput() DatacatalogConnectionArrayOutput
	ToDatacatalogConnectionArrayOutputWithContext(context.Context) DatacatalogConnectionArrayOutput
}

type DatacatalogConnectionArray []DatacatalogConnectionInput

func (DatacatalogConnectionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DatacatalogConnection)(nil)).Elem()
}

func (i DatacatalogConnectionArray) ToDatacatalogConnectionArrayOutput() DatacatalogConnectionArrayOutput {
	return i.ToDatacatalogConnectionArrayOutputWithContext(context.Background())
}

func (i DatacatalogConnectionArray) ToDatacatalogConnectionArrayOutputWithContext(ctx context.Context) DatacatalogConnectionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatacatalogConnectionArrayOutput)
}

// DatacatalogConnectionMapInput is an input type that accepts DatacatalogConnectionMap and DatacatalogConnectionMapOutput values.
// You can construct a concrete instance of `DatacatalogConnectionMapInput` via:
//
//          DatacatalogConnectionMap{ "key": DatacatalogConnectionArgs{...} }
type DatacatalogConnectionMapInput interface {
	pulumi.Input

	ToDatacatalogConnectionMapOutput() DatacatalogConnectionMapOutput
	ToDatacatalogConnectionMapOutputWithContext(context.Context) DatacatalogConnectionMapOutput
}

type DatacatalogConnectionMap map[string]DatacatalogConnectionInput

func (DatacatalogConnectionMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DatacatalogConnection)(nil)).Elem()
}

func (i DatacatalogConnectionMap) ToDatacatalogConnectionMapOutput() DatacatalogConnectionMapOutput {
	return i.ToDatacatalogConnectionMapOutputWithContext(context.Background())
}

func (i DatacatalogConnectionMap) ToDatacatalogConnectionMapOutputWithContext(ctx context.Context) DatacatalogConnectionMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatacatalogConnectionMapOutput)
}

type DatacatalogConnectionOutput struct {
	*pulumi.OutputState
}

func (DatacatalogConnectionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatacatalogConnection)(nil))
}

func (o DatacatalogConnectionOutput) ToDatacatalogConnectionOutput() DatacatalogConnectionOutput {
	return o
}

func (o DatacatalogConnectionOutput) ToDatacatalogConnectionOutputWithContext(ctx context.Context) DatacatalogConnectionOutput {
	return o
}

func (o DatacatalogConnectionOutput) ToDatacatalogConnectionPtrOutput() DatacatalogConnectionPtrOutput {
	return o.ToDatacatalogConnectionPtrOutputWithContext(context.Background())
}

func (o DatacatalogConnectionOutput) ToDatacatalogConnectionPtrOutputWithContext(ctx context.Context) DatacatalogConnectionPtrOutput {
	return o.ApplyT(func(v DatacatalogConnection) *DatacatalogConnection {
		return &v
	}).(DatacatalogConnectionPtrOutput)
}

type DatacatalogConnectionPtrOutput struct {
	*pulumi.OutputState
}

func (DatacatalogConnectionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DatacatalogConnection)(nil))
}

func (o DatacatalogConnectionPtrOutput) ToDatacatalogConnectionPtrOutput() DatacatalogConnectionPtrOutput {
	return o
}

func (o DatacatalogConnectionPtrOutput) ToDatacatalogConnectionPtrOutputWithContext(ctx context.Context) DatacatalogConnectionPtrOutput {
	return o
}

type DatacatalogConnectionArrayOutput struct{ *pulumi.OutputState }

func (DatacatalogConnectionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DatacatalogConnection)(nil))
}

func (o DatacatalogConnectionArrayOutput) ToDatacatalogConnectionArrayOutput() DatacatalogConnectionArrayOutput {
	return o
}

func (o DatacatalogConnectionArrayOutput) ToDatacatalogConnectionArrayOutputWithContext(ctx context.Context) DatacatalogConnectionArrayOutput {
	return o
}

func (o DatacatalogConnectionArrayOutput) Index(i pulumi.IntInput) DatacatalogConnectionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DatacatalogConnection {
		return vs[0].([]DatacatalogConnection)[vs[1].(int)]
	}).(DatacatalogConnectionOutput)
}

type DatacatalogConnectionMapOutput struct{ *pulumi.OutputState }

func (DatacatalogConnectionMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]DatacatalogConnection)(nil))
}

func (o DatacatalogConnectionMapOutput) ToDatacatalogConnectionMapOutput() DatacatalogConnectionMapOutput {
	return o
}

func (o DatacatalogConnectionMapOutput) ToDatacatalogConnectionMapOutputWithContext(ctx context.Context) DatacatalogConnectionMapOutput {
	return o
}

func (o DatacatalogConnectionMapOutput) MapIndex(k pulumi.StringInput) DatacatalogConnectionOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) DatacatalogConnection {
		return vs[0].(map[string]DatacatalogConnection)[vs[1].(string)]
	}).(DatacatalogConnectionOutput)
}

func init() {
	pulumi.RegisterOutputType(DatacatalogConnectionOutput{})
	pulumi.RegisterOutputType(DatacatalogConnectionPtrOutput{})
	pulumi.RegisterOutputType(DatacatalogConnectionArrayOutput{})
	pulumi.RegisterOutputType(DatacatalogConnectionMapOutput{})
}
