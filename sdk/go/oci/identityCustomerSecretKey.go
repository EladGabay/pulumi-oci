// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package oci

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource provides the Customer Secret Key resource in Oracle Cloud Infrastructure Identity service.
//
// Creates a new secret key for the specified user. Secret keys are used for authentication with the Object Storage Service's Amazon S3
// compatible API. The secret key consists of an Access Key/Secret Key pair. For information, see
// [Managing User Credentials](https://docs.cloud.oracle.com/iaas/Content/Identity/Tasks/managingcredentials.htm).
//
// You must specify a *description* for the secret key (although it can be an empty string). It does not
// have to be unique, and you can change it anytime with
// [UpdateCustomerSecretKey](https://docs.cloud.oracle.com/iaas/api/#/en/identity/20160918/CustomerSecretKeySummary/UpdateCustomerSecretKey).
//
// Every user has permission to create a secret key for *their own user ID*. An administrator in your organization
// does not need to write a policy to give users this ability. To compare, administrators who have permission to the
// tenancy can use this operation to create a secret key for any user, including themselves.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-oci/sdk/go/oci"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := oci.NewIdentityCustomerSecretKey(ctx, "testCustomerSecretKey", &oci.IdentityCustomerSecretKeyArgs{
// 			DisplayName: pulumi.Any(_var.Customer_secret_key_display_name),
// 			UserId:      pulumi.Any(oci_identity_user.Test_user.Id),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// CustomerSecretKeys can be imported using the `id`, e.g.
//
// ```sh
//  $ pulumi import oci:index/identityCustomerSecretKey:IdentityCustomerSecretKey test_customer_secret_key "users/{userId}/customerSecretKeys/{customerSecretKeyId}"
// ```
type IdentityCustomerSecretKey struct {
	pulumi.CustomResourceState

	// (Updatable) The name you assign to the secret key during creation. Does not have to be unique, and it's changeable.
	DisplayName pulumi.StringOutput `pulumi:"displayName"`
	// The detailed status of INACTIVE lifecycleState.
	InactiveState pulumi.StringOutput `pulumi:"inactiveState"`
	// The secret key.
	Key pulumi.StringOutput `pulumi:"key"`
	// The secret key's current state.
	State pulumi.StringOutput `pulumi:"state"`
	// Date and time the `CustomerSecretKey` object was created, in the format defined by RFC3339.  Example: `2016-08-25T21:10:29.600Z`
	TimeCreated pulumi.StringOutput `pulumi:"timeCreated"`
	// Date and time when this password will expire, in the format defined by RFC3339. Null if it never expires.  Example: `2016-08-25T21:10:29.600Z`
	TimeExpires pulumi.StringOutput `pulumi:"timeExpires"`
	// The OCID of the user.
	UserId pulumi.StringOutput `pulumi:"userId"`
}

// NewIdentityCustomerSecretKey registers a new resource with the given unique name, arguments, and options.
func NewIdentityCustomerSecretKey(ctx *pulumi.Context,
	name string, args *IdentityCustomerSecretKeyArgs, opts ...pulumi.ResourceOption) (*IdentityCustomerSecretKey, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DisplayName == nil {
		return nil, errors.New("invalid value for required argument 'DisplayName'")
	}
	if args.UserId == nil {
		return nil, errors.New("invalid value for required argument 'UserId'")
	}
	var resource IdentityCustomerSecretKey
	err := ctx.RegisterResource("oci:index/identityCustomerSecretKey:IdentityCustomerSecretKey", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIdentityCustomerSecretKey gets an existing IdentityCustomerSecretKey resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIdentityCustomerSecretKey(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *IdentityCustomerSecretKeyState, opts ...pulumi.ResourceOption) (*IdentityCustomerSecretKey, error) {
	var resource IdentityCustomerSecretKey
	err := ctx.ReadResource("oci:index/identityCustomerSecretKey:IdentityCustomerSecretKey", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering IdentityCustomerSecretKey resources.
type identityCustomerSecretKeyState struct {
	// (Updatable) The name you assign to the secret key during creation. Does not have to be unique, and it's changeable.
	DisplayName *string `pulumi:"displayName"`
	// The detailed status of INACTIVE lifecycleState.
	InactiveState *string `pulumi:"inactiveState"`
	// The secret key.
	Key *string `pulumi:"key"`
	// The secret key's current state.
	State *string `pulumi:"state"`
	// Date and time the `CustomerSecretKey` object was created, in the format defined by RFC3339.  Example: `2016-08-25T21:10:29.600Z`
	TimeCreated *string `pulumi:"timeCreated"`
	// Date and time when this password will expire, in the format defined by RFC3339. Null if it never expires.  Example: `2016-08-25T21:10:29.600Z`
	TimeExpires *string `pulumi:"timeExpires"`
	// The OCID of the user.
	UserId *string `pulumi:"userId"`
}

type IdentityCustomerSecretKeyState struct {
	// (Updatable) The name you assign to the secret key during creation. Does not have to be unique, and it's changeable.
	DisplayName pulumi.StringPtrInput
	// The detailed status of INACTIVE lifecycleState.
	InactiveState pulumi.StringPtrInput
	// The secret key.
	Key pulumi.StringPtrInput
	// The secret key's current state.
	State pulumi.StringPtrInput
	// Date and time the `CustomerSecretKey` object was created, in the format defined by RFC3339.  Example: `2016-08-25T21:10:29.600Z`
	TimeCreated pulumi.StringPtrInput
	// Date and time when this password will expire, in the format defined by RFC3339. Null if it never expires.  Example: `2016-08-25T21:10:29.600Z`
	TimeExpires pulumi.StringPtrInput
	// The OCID of the user.
	UserId pulumi.StringPtrInput
}

func (IdentityCustomerSecretKeyState) ElementType() reflect.Type {
	return reflect.TypeOf((*identityCustomerSecretKeyState)(nil)).Elem()
}

type identityCustomerSecretKeyArgs struct {
	// (Updatable) The name you assign to the secret key during creation. Does not have to be unique, and it's changeable.
	DisplayName string `pulumi:"displayName"`
	// The OCID of the user.
	UserId string `pulumi:"userId"`
}

// The set of arguments for constructing a IdentityCustomerSecretKey resource.
type IdentityCustomerSecretKeyArgs struct {
	// (Updatable) The name you assign to the secret key during creation. Does not have to be unique, and it's changeable.
	DisplayName pulumi.StringInput
	// The OCID of the user.
	UserId pulumi.StringInput
}

func (IdentityCustomerSecretKeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*identityCustomerSecretKeyArgs)(nil)).Elem()
}

type IdentityCustomerSecretKeyInput interface {
	pulumi.Input

	ToIdentityCustomerSecretKeyOutput() IdentityCustomerSecretKeyOutput
	ToIdentityCustomerSecretKeyOutputWithContext(ctx context.Context) IdentityCustomerSecretKeyOutput
}

func (*IdentityCustomerSecretKey) ElementType() reflect.Type {
	return reflect.TypeOf((*IdentityCustomerSecretKey)(nil))
}

func (i *IdentityCustomerSecretKey) ToIdentityCustomerSecretKeyOutput() IdentityCustomerSecretKeyOutput {
	return i.ToIdentityCustomerSecretKeyOutputWithContext(context.Background())
}

func (i *IdentityCustomerSecretKey) ToIdentityCustomerSecretKeyOutputWithContext(ctx context.Context) IdentityCustomerSecretKeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdentityCustomerSecretKeyOutput)
}

func (i *IdentityCustomerSecretKey) ToIdentityCustomerSecretKeyPtrOutput() IdentityCustomerSecretKeyPtrOutput {
	return i.ToIdentityCustomerSecretKeyPtrOutputWithContext(context.Background())
}

func (i *IdentityCustomerSecretKey) ToIdentityCustomerSecretKeyPtrOutputWithContext(ctx context.Context) IdentityCustomerSecretKeyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdentityCustomerSecretKeyPtrOutput)
}

type IdentityCustomerSecretKeyPtrInput interface {
	pulumi.Input

	ToIdentityCustomerSecretKeyPtrOutput() IdentityCustomerSecretKeyPtrOutput
	ToIdentityCustomerSecretKeyPtrOutputWithContext(ctx context.Context) IdentityCustomerSecretKeyPtrOutput
}

type identityCustomerSecretKeyPtrType IdentityCustomerSecretKeyArgs

func (*identityCustomerSecretKeyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**IdentityCustomerSecretKey)(nil))
}

func (i *identityCustomerSecretKeyPtrType) ToIdentityCustomerSecretKeyPtrOutput() IdentityCustomerSecretKeyPtrOutput {
	return i.ToIdentityCustomerSecretKeyPtrOutputWithContext(context.Background())
}

func (i *identityCustomerSecretKeyPtrType) ToIdentityCustomerSecretKeyPtrOutputWithContext(ctx context.Context) IdentityCustomerSecretKeyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdentityCustomerSecretKeyPtrOutput)
}

// IdentityCustomerSecretKeyArrayInput is an input type that accepts IdentityCustomerSecretKeyArray and IdentityCustomerSecretKeyArrayOutput values.
// You can construct a concrete instance of `IdentityCustomerSecretKeyArrayInput` via:
//
//          IdentityCustomerSecretKeyArray{ IdentityCustomerSecretKeyArgs{...} }
type IdentityCustomerSecretKeyArrayInput interface {
	pulumi.Input

	ToIdentityCustomerSecretKeyArrayOutput() IdentityCustomerSecretKeyArrayOutput
	ToIdentityCustomerSecretKeyArrayOutputWithContext(context.Context) IdentityCustomerSecretKeyArrayOutput
}

type IdentityCustomerSecretKeyArray []IdentityCustomerSecretKeyInput

func (IdentityCustomerSecretKeyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IdentityCustomerSecretKey)(nil)).Elem()
}

func (i IdentityCustomerSecretKeyArray) ToIdentityCustomerSecretKeyArrayOutput() IdentityCustomerSecretKeyArrayOutput {
	return i.ToIdentityCustomerSecretKeyArrayOutputWithContext(context.Background())
}

func (i IdentityCustomerSecretKeyArray) ToIdentityCustomerSecretKeyArrayOutputWithContext(ctx context.Context) IdentityCustomerSecretKeyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdentityCustomerSecretKeyArrayOutput)
}

// IdentityCustomerSecretKeyMapInput is an input type that accepts IdentityCustomerSecretKeyMap and IdentityCustomerSecretKeyMapOutput values.
// You can construct a concrete instance of `IdentityCustomerSecretKeyMapInput` via:
//
//          IdentityCustomerSecretKeyMap{ "key": IdentityCustomerSecretKeyArgs{...} }
type IdentityCustomerSecretKeyMapInput interface {
	pulumi.Input

	ToIdentityCustomerSecretKeyMapOutput() IdentityCustomerSecretKeyMapOutput
	ToIdentityCustomerSecretKeyMapOutputWithContext(context.Context) IdentityCustomerSecretKeyMapOutput
}

type IdentityCustomerSecretKeyMap map[string]IdentityCustomerSecretKeyInput

func (IdentityCustomerSecretKeyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IdentityCustomerSecretKey)(nil)).Elem()
}

func (i IdentityCustomerSecretKeyMap) ToIdentityCustomerSecretKeyMapOutput() IdentityCustomerSecretKeyMapOutput {
	return i.ToIdentityCustomerSecretKeyMapOutputWithContext(context.Background())
}

func (i IdentityCustomerSecretKeyMap) ToIdentityCustomerSecretKeyMapOutputWithContext(ctx context.Context) IdentityCustomerSecretKeyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdentityCustomerSecretKeyMapOutput)
}

type IdentityCustomerSecretKeyOutput struct {
	*pulumi.OutputState
}

func (IdentityCustomerSecretKeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IdentityCustomerSecretKey)(nil))
}

func (o IdentityCustomerSecretKeyOutput) ToIdentityCustomerSecretKeyOutput() IdentityCustomerSecretKeyOutput {
	return o
}

func (o IdentityCustomerSecretKeyOutput) ToIdentityCustomerSecretKeyOutputWithContext(ctx context.Context) IdentityCustomerSecretKeyOutput {
	return o
}

func (o IdentityCustomerSecretKeyOutput) ToIdentityCustomerSecretKeyPtrOutput() IdentityCustomerSecretKeyPtrOutput {
	return o.ToIdentityCustomerSecretKeyPtrOutputWithContext(context.Background())
}

func (o IdentityCustomerSecretKeyOutput) ToIdentityCustomerSecretKeyPtrOutputWithContext(ctx context.Context) IdentityCustomerSecretKeyPtrOutput {
	return o.ApplyT(func(v IdentityCustomerSecretKey) *IdentityCustomerSecretKey {
		return &v
	}).(IdentityCustomerSecretKeyPtrOutput)
}

type IdentityCustomerSecretKeyPtrOutput struct {
	*pulumi.OutputState
}

func (IdentityCustomerSecretKeyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IdentityCustomerSecretKey)(nil))
}

func (o IdentityCustomerSecretKeyPtrOutput) ToIdentityCustomerSecretKeyPtrOutput() IdentityCustomerSecretKeyPtrOutput {
	return o
}

func (o IdentityCustomerSecretKeyPtrOutput) ToIdentityCustomerSecretKeyPtrOutputWithContext(ctx context.Context) IdentityCustomerSecretKeyPtrOutput {
	return o
}

type IdentityCustomerSecretKeyArrayOutput struct{ *pulumi.OutputState }

func (IdentityCustomerSecretKeyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]IdentityCustomerSecretKey)(nil))
}

func (o IdentityCustomerSecretKeyArrayOutput) ToIdentityCustomerSecretKeyArrayOutput() IdentityCustomerSecretKeyArrayOutput {
	return o
}

func (o IdentityCustomerSecretKeyArrayOutput) ToIdentityCustomerSecretKeyArrayOutputWithContext(ctx context.Context) IdentityCustomerSecretKeyArrayOutput {
	return o
}

func (o IdentityCustomerSecretKeyArrayOutput) Index(i pulumi.IntInput) IdentityCustomerSecretKeyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) IdentityCustomerSecretKey {
		return vs[0].([]IdentityCustomerSecretKey)[vs[1].(int)]
	}).(IdentityCustomerSecretKeyOutput)
}

type IdentityCustomerSecretKeyMapOutput struct{ *pulumi.OutputState }

func (IdentityCustomerSecretKeyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]IdentityCustomerSecretKey)(nil))
}

func (o IdentityCustomerSecretKeyMapOutput) ToIdentityCustomerSecretKeyMapOutput() IdentityCustomerSecretKeyMapOutput {
	return o
}

func (o IdentityCustomerSecretKeyMapOutput) ToIdentityCustomerSecretKeyMapOutputWithContext(ctx context.Context) IdentityCustomerSecretKeyMapOutput {
	return o
}

func (o IdentityCustomerSecretKeyMapOutput) MapIndex(k pulumi.StringInput) IdentityCustomerSecretKeyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) IdentityCustomerSecretKey {
		return vs[0].(map[string]IdentityCustomerSecretKey)[vs[1].(string)]
	}).(IdentityCustomerSecretKeyOutput)
}

func init() {
	pulumi.RegisterOutputType(IdentityCustomerSecretKeyOutput{})
	pulumi.RegisterOutputType(IdentityCustomerSecretKeyPtrOutput{})
	pulumi.RegisterOutputType(IdentityCustomerSecretKeyArrayOutput{})
	pulumi.RegisterOutputType(IdentityCustomerSecretKeyMapOutput{})
}
