// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package oci

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource provides the Log Analytics Log Group resource in Oracle Cloud Infrastructure Log Analytics service.
//
// Creates a new log group in the specified compartment with the input display name. You may also specify optional information such as description, defined tags, and free-form tags.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-oci/sdk/go/oci"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := oci.NewLogAnalyticsLogAnalyticsLogGroup(ctx, "testLogAnalyticsLogGroup", &oci.LogAnalyticsLogAnalyticsLogGroupArgs{
// 			CompartmentId: pulumi.Any(_var.Compartment_id),
// 			DisplayName:   pulumi.Any(_var.Log_analytics_log_group_display_name),
// 			Namespace:     pulumi.Any(_var.Log_analytics_log_group_namespace),
// 			DefinedTags: pulumi.AnyMap{
// 				"foo-namespace.bar-key": pulumi.Any("value"),
// 			},
// 			Description: pulumi.Any(_var.Log_analytics_log_group_description),
// 			FreeformTags: pulumi.AnyMap{
// 				"bar-key": pulumi.Any("value"),
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// LogAnalyticsLogGroups can be imported using the `id`, e.g.
//
// ```sh
//  $ pulumi import oci:index/logAnalyticsLogAnalyticsLogGroup:LogAnalyticsLogAnalyticsLogGroup test_log_analytics_log_group "namespaces/{namespaceName}/logAnalyticsLogGroups/{logAnalyticsLogGroupId}"
// ```
type LogAnalyticsLogAnalyticsLogGroup struct {
	pulumi.CustomResourceState

	// (Updatable) Compartment Identifier [OCID] (https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
	CompartmentId pulumi.StringOutput `pulumi:"compartmentId"`
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
	DefinedTags pulumi.MapOutput `pulumi:"definedTags"`
	// (Updatable) Description for this resource.
	Description pulumi.StringOutput `pulumi:"description"`
	// (Updatable) A user-friendly name that is changeable and that does not have to be unique. Format: a leading alphanumeric, followed by zero or more alphanumerics, underscores, spaces, backslashes, or hyphens in any order). No trailing spaces allowed.
	DisplayName pulumi.StringOutput `pulumi:"displayName"`
	// (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
	FreeformTags pulumi.MapOutput `pulumi:"freeformTags"`
	// The Logging Analytics namespace used for the request.
	Namespace pulumi.StringOutput `pulumi:"namespace"`
	// The date and time the resource was created, in the format defined by RFC3339.
	TimeCreated pulumi.StringOutput `pulumi:"timeCreated"`
	// The date and time the resource was last updated, in the format defined by RFC3339.
	TimeUpdated pulumi.StringOutput `pulumi:"timeUpdated"`
}

// NewLogAnalyticsLogAnalyticsLogGroup registers a new resource with the given unique name, arguments, and options.
func NewLogAnalyticsLogAnalyticsLogGroup(ctx *pulumi.Context,
	name string, args *LogAnalyticsLogAnalyticsLogGroupArgs, opts ...pulumi.ResourceOption) (*LogAnalyticsLogAnalyticsLogGroup, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CompartmentId == nil {
		return nil, errors.New("invalid value for required argument 'CompartmentId'")
	}
	if args.DisplayName == nil {
		return nil, errors.New("invalid value for required argument 'DisplayName'")
	}
	if args.Namespace == nil {
		return nil, errors.New("invalid value for required argument 'Namespace'")
	}
	var resource LogAnalyticsLogAnalyticsLogGroup
	err := ctx.RegisterResource("oci:index/logAnalyticsLogAnalyticsLogGroup:LogAnalyticsLogAnalyticsLogGroup", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLogAnalyticsLogAnalyticsLogGroup gets an existing LogAnalyticsLogAnalyticsLogGroup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLogAnalyticsLogAnalyticsLogGroup(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LogAnalyticsLogAnalyticsLogGroupState, opts ...pulumi.ResourceOption) (*LogAnalyticsLogAnalyticsLogGroup, error) {
	var resource LogAnalyticsLogAnalyticsLogGroup
	err := ctx.ReadResource("oci:index/logAnalyticsLogAnalyticsLogGroup:LogAnalyticsLogAnalyticsLogGroup", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LogAnalyticsLogAnalyticsLogGroup resources.
type logAnalyticsLogAnalyticsLogGroupState struct {
	// (Updatable) Compartment Identifier [OCID] (https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
	CompartmentId *string `pulumi:"compartmentId"`
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
	DefinedTags map[string]interface{} `pulumi:"definedTags"`
	// (Updatable) Description for this resource.
	Description *string `pulumi:"description"`
	// (Updatable) A user-friendly name that is changeable and that does not have to be unique. Format: a leading alphanumeric, followed by zero or more alphanumerics, underscores, spaces, backslashes, or hyphens in any order). No trailing spaces allowed.
	DisplayName *string `pulumi:"displayName"`
	// (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
	FreeformTags map[string]interface{} `pulumi:"freeformTags"`
	// The Logging Analytics namespace used for the request.
	Namespace *string `pulumi:"namespace"`
	// The date and time the resource was created, in the format defined by RFC3339.
	TimeCreated *string `pulumi:"timeCreated"`
	// The date and time the resource was last updated, in the format defined by RFC3339.
	TimeUpdated *string `pulumi:"timeUpdated"`
}

type LogAnalyticsLogAnalyticsLogGroupState struct {
	// (Updatable) Compartment Identifier [OCID] (https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
	CompartmentId pulumi.StringPtrInput
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
	DefinedTags pulumi.MapInput
	// (Updatable) Description for this resource.
	Description pulumi.StringPtrInput
	// (Updatable) A user-friendly name that is changeable and that does not have to be unique. Format: a leading alphanumeric, followed by zero or more alphanumerics, underscores, spaces, backslashes, or hyphens in any order). No trailing spaces allowed.
	DisplayName pulumi.StringPtrInput
	// (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
	FreeformTags pulumi.MapInput
	// The Logging Analytics namespace used for the request.
	Namespace pulumi.StringPtrInput
	// The date and time the resource was created, in the format defined by RFC3339.
	TimeCreated pulumi.StringPtrInput
	// The date and time the resource was last updated, in the format defined by RFC3339.
	TimeUpdated pulumi.StringPtrInput
}

func (LogAnalyticsLogAnalyticsLogGroupState) ElementType() reflect.Type {
	return reflect.TypeOf((*logAnalyticsLogAnalyticsLogGroupState)(nil)).Elem()
}

type logAnalyticsLogAnalyticsLogGroupArgs struct {
	// (Updatable) Compartment Identifier [OCID] (https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
	CompartmentId string `pulumi:"compartmentId"`
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
	DefinedTags map[string]interface{} `pulumi:"definedTags"`
	// (Updatable) Description for this resource.
	Description *string `pulumi:"description"`
	// (Updatable) A user-friendly name that is changeable and that does not have to be unique. Format: a leading alphanumeric, followed by zero or more alphanumerics, underscores, spaces, backslashes, or hyphens in any order). No trailing spaces allowed.
	DisplayName string `pulumi:"displayName"`
	// (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
	FreeformTags map[string]interface{} `pulumi:"freeformTags"`
	// The Logging Analytics namespace used for the request.
	Namespace string `pulumi:"namespace"`
}

// The set of arguments for constructing a LogAnalyticsLogAnalyticsLogGroup resource.
type LogAnalyticsLogAnalyticsLogGroupArgs struct {
	// (Updatable) Compartment Identifier [OCID] (https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
	CompartmentId pulumi.StringInput
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
	DefinedTags pulumi.MapInput
	// (Updatable) Description for this resource.
	Description pulumi.StringPtrInput
	// (Updatable) A user-friendly name that is changeable and that does not have to be unique. Format: a leading alphanumeric, followed by zero or more alphanumerics, underscores, spaces, backslashes, or hyphens in any order). No trailing spaces allowed.
	DisplayName pulumi.StringInput
	// (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
	FreeformTags pulumi.MapInput
	// The Logging Analytics namespace used for the request.
	Namespace pulumi.StringInput
}

func (LogAnalyticsLogAnalyticsLogGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*logAnalyticsLogAnalyticsLogGroupArgs)(nil)).Elem()
}

type LogAnalyticsLogAnalyticsLogGroupInput interface {
	pulumi.Input

	ToLogAnalyticsLogAnalyticsLogGroupOutput() LogAnalyticsLogAnalyticsLogGroupOutput
	ToLogAnalyticsLogAnalyticsLogGroupOutputWithContext(ctx context.Context) LogAnalyticsLogAnalyticsLogGroupOutput
}

func (*LogAnalyticsLogAnalyticsLogGroup) ElementType() reflect.Type {
	return reflect.TypeOf((*LogAnalyticsLogAnalyticsLogGroup)(nil))
}

func (i *LogAnalyticsLogAnalyticsLogGroup) ToLogAnalyticsLogAnalyticsLogGroupOutput() LogAnalyticsLogAnalyticsLogGroupOutput {
	return i.ToLogAnalyticsLogAnalyticsLogGroupOutputWithContext(context.Background())
}

func (i *LogAnalyticsLogAnalyticsLogGroup) ToLogAnalyticsLogAnalyticsLogGroupOutputWithContext(ctx context.Context) LogAnalyticsLogAnalyticsLogGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogAnalyticsLogAnalyticsLogGroupOutput)
}

func (i *LogAnalyticsLogAnalyticsLogGroup) ToLogAnalyticsLogAnalyticsLogGroupPtrOutput() LogAnalyticsLogAnalyticsLogGroupPtrOutput {
	return i.ToLogAnalyticsLogAnalyticsLogGroupPtrOutputWithContext(context.Background())
}

func (i *LogAnalyticsLogAnalyticsLogGroup) ToLogAnalyticsLogAnalyticsLogGroupPtrOutputWithContext(ctx context.Context) LogAnalyticsLogAnalyticsLogGroupPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogAnalyticsLogAnalyticsLogGroupPtrOutput)
}

type LogAnalyticsLogAnalyticsLogGroupPtrInput interface {
	pulumi.Input

	ToLogAnalyticsLogAnalyticsLogGroupPtrOutput() LogAnalyticsLogAnalyticsLogGroupPtrOutput
	ToLogAnalyticsLogAnalyticsLogGroupPtrOutputWithContext(ctx context.Context) LogAnalyticsLogAnalyticsLogGroupPtrOutput
}

type logAnalyticsLogAnalyticsLogGroupPtrType LogAnalyticsLogAnalyticsLogGroupArgs

func (*logAnalyticsLogAnalyticsLogGroupPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LogAnalyticsLogAnalyticsLogGroup)(nil))
}

func (i *logAnalyticsLogAnalyticsLogGroupPtrType) ToLogAnalyticsLogAnalyticsLogGroupPtrOutput() LogAnalyticsLogAnalyticsLogGroupPtrOutput {
	return i.ToLogAnalyticsLogAnalyticsLogGroupPtrOutputWithContext(context.Background())
}

func (i *logAnalyticsLogAnalyticsLogGroupPtrType) ToLogAnalyticsLogAnalyticsLogGroupPtrOutputWithContext(ctx context.Context) LogAnalyticsLogAnalyticsLogGroupPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogAnalyticsLogAnalyticsLogGroupPtrOutput)
}

// LogAnalyticsLogAnalyticsLogGroupArrayInput is an input type that accepts LogAnalyticsLogAnalyticsLogGroupArray and LogAnalyticsLogAnalyticsLogGroupArrayOutput values.
// You can construct a concrete instance of `LogAnalyticsLogAnalyticsLogGroupArrayInput` via:
//
//          LogAnalyticsLogAnalyticsLogGroupArray{ LogAnalyticsLogAnalyticsLogGroupArgs{...} }
type LogAnalyticsLogAnalyticsLogGroupArrayInput interface {
	pulumi.Input

	ToLogAnalyticsLogAnalyticsLogGroupArrayOutput() LogAnalyticsLogAnalyticsLogGroupArrayOutput
	ToLogAnalyticsLogAnalyticsLogGroupArrayOutputWithContext(context.Context) LogAnalyticsLogAnalyticsLogGroupArrayOutput
}

type LogAnalyticsLogAnalyticsLogGroupArray []LogAnalyticsLogAnalyticsLogGroupInput

func (LogAnalyticsLogAnalyticsLogGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LogAnalyticsLogAnalyticsLogGroup)(nil)).Elem()
}

func (i LogAnalyticsLogAnalyticsLogGroupArray) ToLogAnalyticsLogAnalyticsLogGroupArrayOutput() LogAnalyticsLogAnalyticsLogGroupArrayOutput {
	return i.ToLogAnalyticsLogAnalyticsLogGroupArrayOutputWithContext(context.Background())
}

func (i LogAnalyticsLogAnalyticsLogGroupArray) ToLogAnalyticsLogAnalyticsLogGroupArrayOutputWithContext(ctx context.Context) LogAnalyticsLogAnalyticsLogGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogAnalyticsLogAnalyticsLogGroupArrayOutput)
}

// LogAnalyticsLogAnalyticsLogGroupMapInput is an input type that accepts LogAnalyticsLogAnalyticsLogGroupMap and LogAnalyticsLogAnalyticsLogGroupMapOutput values.
// You can construct a concrete instance of `LogAnalyticsLogAnalyticsLogGroupMapInput` via:
//
//          LogAnalyticsLogAnalyticsLogGroupMap{ "key": LogAnalyticsLogAnalyticsLogGroupArgs{...} }
type LogAnalyticsLogAnalyticsLogGroupMapInput interface {
	pulumi.Input

	ToLogAnalyticsLogAnalyticsLogGroupMapOutput() LogAnalyticsLogAnalyticsLogGroupMapOutput
	ToLogAnalyticsLogAnalyticsLogGroupMapOutputWithContext(context.Context) LogAnalyticsLogAnalyticsLogGroupMapOutput
}

type LogAnalyticsLogAnalyticsLogGroupMap map[string]LogAnalyticsLogAnalyticsLogGroupInput

func (LogAnalyticsLogAnalyticsLogGroupMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LogAnalyticsLogAnalyticsLogGroup)(nil)).Elem()
}

func (i LogAnalyticsLogAnalyticsLogGroupMap) ToLogAnalyticsLogAnalyticsLogGroupMapOutput() LogAnalyticsLogAnalyticsLogGroupMapOutput {
	return i.ToLogAnalyticsLogAnalyticsLogGroupMapOutputWithContext(context.Background())
}

func (i LogAnalyticsLogAnalyticsLogGroupMap) ToLogAnalyticsLogAnalyticsLogGroupMapOutputWithContext(ctx context.Context) LogAnalyticsLogAnalyticsLogGroupMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LogAnalyticsLogAnalyticsLogGroupMapOutput)
}

type LogAnalyticsLogAnalyticsLogGroupOutput struct {
	*pulumi.OutputState
}

func (LogAnalyticsLogAnalyticsLogGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LogAnalyticsLogAnalyticsLogGroup)(nil))
}

func (o LogAnalyticsLogAnalyticsLogGroupOutput) ToLogAnalyticsLogAnalyticsLogGroupOutput() LogAnalyticsLogAnalyticsLogGroupOutput {
	return o
}

func (o LogAnalyticsLogAnalyticsLogGroupOutput) ToLogAnalyticsLogAnalyticsLogGroupOutputWithContext(ctx context.Context) LogAnalyticsLogAnalyticsLogGroupOutput {
	return o
}

func (o LogAnalyticsLogAnalyticsLogGroupOutput) ToLogAnalyticsLogAnalyticsLogGroupPtrOutput() LogAnalyticsLogAnalyticsLogGroupPtrOutput {
	return o.ToLogAnalyticsLogAnalyticsLogGroupPtrOutputWithContext(context.Background())
}

func (o LogAnalyticsLogAnalyticsLogGroupOutput) ToLogAnalyticsLogAnalyticsLogGroupPtrOutputWithContext(ctx context.Context) LogAnalyticsLogAnalyticsLogGroupPtrOutput {
	return o.ApplyT(func(v LogAnalyticsLogAnalyticsLogGroup) *LogAnalyticsLogAnalyticsLogGroup {
		return &v
	}).(LogAnalyticsLogAnalyticsLogGroupPtrOutput)
}

type LogAnalyticsLogAnalyticsLogGroupPtrOutput struct {
	*pulumi.OutputState
}

func (LogAnalyticsLogAnalyticsLogGroupPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LogAnalyticsLogAnalyticsLogGroup)(nil))
}

func (o LogAnalyticsLogAnalyticsLogGroupPtrOutput) ToLogAnalyticsLogAnalyticsLogGroupPtrOutput() LogAnalyticsLogAnalyticsLogGroupPtrOutput {
	return o
}

func (o LogAnalyticsLogAnalyticsLogGroupPtrOutput) ToLogAnalyticsLogAnalyticsLogGroupPtrOutputWithContext(ctx context.Context) LogAnalyticsLogAnalyticsLogGroupPtrOutput {
	return o
}

type LogAnalyticsLogAnalyticsLogGroupArrayOutput struct{ *pulumi.OutputState }

func (LogAnalyticsLogAnalyticsLogGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LogAnalyticsLogAnalyticsLogGroup)(nil))
}

func (o LogAnalyticsLogAnalyticsLogGroupArrayOutput) ToLogAnalyticsLogAnalyticsLogGroupArrayOutput() LogAnalyticsLogAnalyticsLogGroupArrayOutput {
	return o
}

func (o LogAnalyticsLogAnalyticsLogGroupArrayOutput) ToLogAnalyticsLogAnalyticsLogGroupArrayOutputWithContext(ctx context.Context) LogAnalyticsLogAnalyticsLogGroupArrayOutput {
	return o
}

func (o LogAnalyticsLogAnalyticsLogGroupArrayOutput) Index(i pulumi.IntInput) LogAnalyticsLogAnalyticsLogGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) LogAnalyticsLogAnalyticsLogGroup {
		return vs[0].([]LogAnalyticsLogAnalyticsLogGroup)[vs[1].(int)]
	}).(LogAnalyticsLogAnalyticsLogGroupOutput)
}

type LogAnalyticsLogAnalyticsLogGroupMapOutput struct{ *pulumi.OutputState }

func (LogAnalyticsLogAnalyticsLogGroupMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]LogAnalyticsLogAnalyticsLogGroup)(nil))
}

func (o LogAnalyticsLogAnalyticsLogGroupMapOutput) ToLogAnalyticsLogAnalyticsLogGroupMapOutput() LogAnalyticsLogAnalyticsLogGroupMapOutput {
	return o
}

func (o LogAnalyticsLogAnalyticsLogGroupMapOutput) ToLogAnalyticsLogAnalyticsLogGroupMapOutputWithContext(ctx context.Context) LogAnalyticsLogAnalyticsLogGroupMapOutput {
	return o
}

func (o LogAnalyticsLogAnalyticsLogGroupMapOutput) MapIndex(k pulumi.StringInput) LogAnalyticsLogAnalyticsLogGroupOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) LogAnalyticsLogAnalyticsLogGroup {
		return vs[0].(map[string]LogAnalyticsLogAnalyticsLogGroup)[vs[1].(string)]
	}).(LogAnalyticsLogAnalyticsLogGroupOutput)
}

func init() {
	pulumi.RegisterOutputType(LogAnalyticsLogAnalyticsLogGroupOutput{})
	pulumi.RegisterOutputType(LogAnalyticsLogAnalyticsLogGroupPtrOutput{})
	pulumi.RegisterOutputType(LogAnalyticsLogAnalyticsLogGroupArrayOutput{})
	pulumi.RegisterOutputType(LogAnalyticsLogAnalyticsLogGroupMapOutput{})
}
