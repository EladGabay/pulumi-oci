// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci
{
    public static class GetStreamingStreams
    {
        /// <summary>
        /// This data source provides the list of Streams in Oracle Cloud Infrastructure Streaming service.
        /// 
        /// Lists the streams in the given compartment id.
        /// If the compartment id is specified, it will list streams in the compartment, regardless of their stream pool.
        /// If the stream pool id is specified, the action will be scoped to that stream pool.
        /// The compartment id and stream pool id cannot be specified at the same time.
        /// 
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var testStreams = Output.Create(Oci.GetStreamingStreams.InvokeAsync(new Oci.GetStreamingStreamsArgs
        ///         {
        ///             CompartmentId = @var.Compartment_id,
        ///             Id = @var.Stream_id,
        ///             Name = @var.Stream_name,
        ///             State = @var.Stream_state,
        ///             StreamPoolId = oci_streaming_stream_pool.Test_stream_pool.Id,
        ///         }));
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetStreamingStreamsResult> InvokeAsync(GetStreamingStreamsArgs? args = null, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetStreamingStreamsResult>("oci:index/getStreamingStreams:GetStreamingStreams", args ?? new GetStreamingStreamsArgs(), options.WithVersion());
    }


    public sealed class GetStreamingStreamsArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The OCID of the compartment. Is exclusive with the `streamPoolId` parameter. One of them is required.
        /// </summary>
        [Input("compartmentId")]
        public string? CompartmentId { get; set; }

        [Input("filters")]
        private List<Inputs.GetStreamingStreamsFilterArgs>? _filters;
        public List<Inputs.GetStreamingStreamsFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetStreamingStreamsFilterArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// A filter to return only resources that match the given ID exactly.
        /// </summary>
        [Input("id")]
        public string? Id { get; set; }

        /// <summary>
        /// A filter to return only resources that match the given name exactly.
        /// </summary>
        [Input("name")]
        public string? Name { get; set; }

        /// <summary>
        /// A filter to only return resources that match the given lifecycle state. The state value is case-insensitive.
        /// </summary>
        [Input("state")]
        public string? State { get; set; }

        /// <summary>
        /// The OCID of the stream pool. Is exclusive with the `compartmentId` parameter. One of them is required.
        /// </summary>
        [Input("streamPoolId")]
        public string? StreamPoolId { get; set; }

        public GetStreamingStreamsArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetStreamingStreamsResult
    {
        /// <summary>
        /// The OCID of the compartment that contains the stream.
        /// </summary>
        public readonly string? CompartmentId;
        public readonly ImmutableArray<Outputs.GetStreamingStreamsFilterResult> Filters;
        /// <summary>
        /// The OCID of the stream.
        /// </summary>
        public readonly string? Id;
        /// <summary>
        /// The name of the stream. Avoid entering confidential information.  Example: `TelemetryEvents`
        /// </summary>
        public readonly string? Name;
        /// <summary>
        /// The current state of the stream.
        /// </summary>
        public readonly string? State;
        /// <summary>
        /// The OCID of the stream pool that contains the stream.
        /// </summary>
        public readonly string? StreamPoolId;
        /// <summary>
        /// The list of streams.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetStreamingStreamsStreamResult> Streams;

        [OutputConstructor]
        private GetStreamingStreamsResult(
            string? compartmentId,

            ImmutableArray<Outputs.GetStreamingStreamsFilterResult> filters,

            string? id,

            string? name,

            string? state,

            string? streamPoolId,

            ImmutableArray<Outputs.GetStreamingStreamsStreamResult> streams)
        {
            CompartmentId = compartmentId;
            Filters = filters;
            Id = id;
            Name = name;
            State = state;
            StreamPoolId = streamPoolId;
            Streams = streams;
        }
    }
}
