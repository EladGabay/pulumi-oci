// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package oci

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource provides the Database Registration resource in Oracle Cloud Infrastructure Golden Gate service.
//
// Creates a new DatabaseRegistration.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-oci/sdk/go/oci"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := oci.NewGoldenGateDatabaseRegistration(ctx, "testDatabaseRegistration", &oci.GoldenGateDatabaseRegistrationArgs{
// 			AliasName:        pulumi.Any(_var.Database_registration_alias_name),
// 			CompartmentId:    pulumi.Any(_var.Compartment_id),
// 			DisplayName:      pulumi.Any(_var.Database_registration_display_name),
// 			Fqdn:             pulumi.Any(_var.Database_registration_fqdn),
// 			Password:         pulumi.Any(_var.Database_registration_password),
// 			Username:         pulumi.Any(_var.Database_registration_username),
// 			ConnectionString: pulumi.Any(_var.Database_registration_connection_string),
// 			DatabaseId:       pulumi.Any(oci_database_database.Test_database.Id),
// 			DefinedTags: pulumi.AnyMap{
// 				"foo-namespace.bar-key": pulumi.Any("value"),
// 			},
// 			Description: pulumi.Any(_var.Database_registration_description),
// 			FreeformTags: pulumi.AnyMap{
// 				"bar-key": pulumi.Any("value"),
// 			},
// 			IpAddress:           pulumi.Any(_var.Database_registration_ip_address),
// 			KeyId:               pulumi.Any(oci_kms_key.Test_key.Id),
// 			SecretCompartmentId: pulumi.Any(oci_identity_compartment.Test_compartment.Id),
// 			SubnetId:            pulumi.Any(oci_core_subnet.Test_subnet.Id),
// 			VaultId:             pulumi.Any(oci_kms_vault.Test_vault.Id),
// 			Wallet:              pulumi.Any(_var.Database_registration_wallet),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// DatabaseRegistrations can be imported using the `id`, e.g.
//
// ```sh
//  $ pulumi import oci:index/goldenGateDatabaseRegistration:GoldenGateDatabaseRegistration test_database_registration "id"
// ```
type GoldenGateDatabaseRegistration struct {
	pulumi.CustomResourceState

	// (Updatable) Credential store alias.
	AliasName pulumi.StringOutput `pulumi:"aliasName"`
	// (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment being referenced.
	CompartmentId pulumi.StringOutput `pulumi:"compartmentId"`
	// (Updatable) Connect descriptor or Easy Connect Naming method that Oracle GoldenGate uses to connect to a database.
	ConnectionString pulumi.StringOutput `pulumi:"connectionString"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the database being referenced.
	DatabaseId pulumi.StringOutput `pulumi:"databaseId"`
	// (Updatable) Tags defined for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
	DefinedTags pulumi.MapOutput `pulumi:"definedTags"`
	// (Updatable) Metadata about this specific object.
	Description pulumi.StringOutput `pulumi:"description"`
	// (Updatable) An object's Display Name.
	DisplayName pulumi.StringOutput `pulumi:"displayName"`
	// (Updatable) A three-label Fully Qualified Domain Name (FQDN) for a resource.
	Fqdn pulumi.StringOutput `pulumi:"fqdn"`
	// (Updatable) A simple key-value pair that is applied without any predefined name, type, or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
	FreeformTags pulumi.MapOutput `pulumi:"freeformTags"`
	// The private IP address in the customer's VCN of the customer's endpoint, typically a database.
	IpAddress pulumi.StringOutput `pulumi:"ipAddress"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the customer "Master" key being referenced. If provided, this will reference a key which the customer will be required to ensure the policies are established to permit the GoldenGate Service to utilize this key to manage secrets.
	KeyId pulumi.StringOutput `pulumi:"keyId"`
	// Describes the object's current state in detail. For example, it can be used to provide actionable information for a resource in a Failed state.
	LifecycleDetails pulumi.StringOutput `pulumi:"lifecycleDetails"`
	// (Updatable) The password Oracle GoldenGate uses to connect the associated RDBMS.  It must conform to the specific security requirements implemented by the database including length, case sensitivity, and so on.
	Password pulumi.StringOutput `pulumi:"password"`
	// A Private Endpoint IP Address created in the customer's subnet.  A customer database can expect network traffic initiated by GGS from this IP address and send network traffic to this IP address, typically in response to requests from GGS (OGG).  The customer may utilize this IP address in Security Lists or Network Security Groups (NSG) as needed.
	RcePrivateIp pulumi.StringOutput `pulumi:"rcePrivateIp"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment where the the GGS Secret will be created. If provided, this will reference a key which the customer will be required to ensure the policies are established to permit the GoldenGate Service to utilize this Compartment in which to create a Secret.
	SecretCompartmentId pulumi.StringOutput `pulumi:"secretCompartmentId"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the customer GGS Secret being referenced. If provided, this will reference a key which the customer will be required to ensure the policies are established to permit the GoldenGate Service to utilize this Secret
	SecretId pulumi.StringOutput `pulumi:"secretId"`
	// Possible lifecycle states.
	State pulumi.StringOutput `pulumi:"state"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the subnet being referenced.
	SubnetId pulumi.StringOutput `pulumi:"subnetId"`
	// The system tags associated with this resource, if any. The system tags are set by Oracle Cloud Infrastructure services. Each key is predefined and scoped to namespaces.  For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{orcl-cloud: {free-tier-retain: true}}`
	SystemTags pulumi.MapOutput `pulumi:"systemTags"`
	// The time the resource was created. The format is defined by [RFC3339](https://tools.ietf.org/html/rfc3339), such as `2016-08-25T21:10:29.600Z`.
	TimeCreated pulumi.StringOutput `pulumi:"timeCreated"`
	// The time the resource was last updated. The format is defined by [RFC3339](https://tools.ietf.org/html/rfc3339), such as `2016-08-25T21:10:29.600Z`.
	TimeUpdated pulumi.StringOutput `pulumi:"timeUpdated"`
	// (Updatable) The username Oracle GoldenGate uses to connect the associated RDBMS.  This username must already exist and be available for use by the database.  It must conform to the security requirements implemented by the database including length, case sensitivity, and so on.
	Username pulumi.StringOutput `pulumi:"username"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the customer vault being referenced. If provided, this will reference a vault which the customer will be required to ensure the policies are established to permit the GoldenGate Service to manage secrets contained within this vault.
	VaultId pulumi.StringOutput `pulumi:"vaultId"`
	// (Updatable) The wallet contents Oracle GoldenGate uses to make connections to a database.  This attribute is expected to be base64 encoded.
	Wallet pulumi.StringOutput `pulumi:"wallet"`
}

// NewGoldenGateDatabaseRegistration registers a new resource with the given unique name, arguments, and options.
func NewGoldenGateDatabaseRegistration(ctx *pulumi.Context,
	name string, args *GoldenGateDatabaseRegistrationArgs, opts ...pulumi.ResourceOption) (*GoldenGateDatabaseRegistration, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AliasName == nil {
		return nil, errors.New("invalid value for required argument 'AliasName'")
	}
	if args.CompartmentId == nil {
		return nil, errors.New("invalid value for required argument 'CompartmentId'")
	}
	if args.DisplayName == nil {
		return nil, errors.New("invalid value for required argument 'DisplayName'")
	}
	if args.Fqdn == nil {
		return nil, errors.New("invalid value for required argument 'Fqdn'")
	}
	if args.Password == nil {
		return nil, errors.New("invalid value for required argument 'Password'")
	}
	if args.Username == nil {
		return nil, errors.New("invalid value for required argument 'Username'")
	}
	var resource GoldenGateDatabaseRegistration
	err := ctx.RegisterResource("oci:index/goldenGateDatabaseRegistration:GoldenGateDatabaseRegistration", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetGoldenGateDatabaseRegistration gets an existing GoldenGateDatabaseRegistration resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetGoldenGateDatabaseRegistration(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *GoldenGateDatabaseRegistrationState, opts ...pulumi.ResourceOption) (*GoldenGateDatabaseRegistration, error) {
	var resource GoldenGateDatabaseRegistration
	err := ctx.ReadResource("oci:index/goldenGateDatabaseRegistration:GoldenGateDatabaseRegistration", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering GoldenGateDatabaseRegistration resources.
type goldenGateDatabaseRegistrationState struct {
	// (Updatable) Credential store alias.
	AliasName *string `pulumi:"aliasName"`
	// (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment being referenced.
	CompartmentId *string `pulumi:"compartmentId"`
	// (Updatable) Connect descriptor or Easy Connect Naming method that Oracle GoldenGate uses to connect to a database.
	ConnectionString *string `pulumi:"connectionString"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the database being referenced.
	DatabaseId *string `pulumi:"databaseId"`
	// (Updatable) Tags defined for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
	DefinedTags map[string]interface{} `pulumi:"definedTags"`
	// (Updatable) Metadata about this specific object.
	Description *string `pulumi:"description"`
	// (Updatable) An object's Display Name.
	DisplayName *string `pulumi:"displayName"`
	// (Updatable) A three-label Fully Qualified Domain Name (FQDN) for a resource.
	Fqdn *string `pulumi:"fqdn"`
	// (Updatable) A simple key-value pair that is applied without any predefined name, type, or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
	FreeformTags map[string]interface{} `pulumi:"freeformTags"`
	// The private IP address in the customer's VCN of the customer's endpoint, typically a database.
	IpAddress *string `pulumi:"ipAddress"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the customer "Master" key being referenced. If provided, this will reference a key which the customer will be required to ensure the policies are established to permit the GoldenGate Service to utilize this key to manage secrets.
	KeyId *string `pulumi:"keyId"`
	// Describes the object's current state in detail. For example, it can be used to provide actionable information for a resource in a Failed state.
	LifecycleDetails *string `pulumi:"lifecycleDetails"`
	// (Updatable) The password Oracle GoldenGate uses to connect the associated RDBMS.  It must conform to the specific security requirements implemented by the database including length, case sensitivity, and so on.
	Password *string `pulumi:"password"`
	// A Private Endpoint IP Address created in the customer's subnet.  A customer database can expect network traffic initiated by GGS from this IP address and send network traffic to this IP address, typically in response to requests from GGS (OGG).  The customer may utilize this IP address in Security Lists or Network Security Groups (NSG) as needed.
	RcePrivateIp *string `pulumi:"rcePrivateIp"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment where the the GGS Secret will be created. If provided, this will reference a key which the customer will be required to ensure the policies are established to permit the GoldenGate Service to utilize this Compartment in which to create a Secret.
	SecretCompartmentId *string `pulumi:"secretCompartmentId"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the customer GGS Secret being referenced. If provided, this will reference a key which the customer will be required to ensure the policies are established to permit the GoldenGate Service to utilize this Secret
	SecretId *string `pulumi:"secretId"`
	// Possible lifecycle states.
	State *string `pulumi:"state"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the subnet being referenced.
	SubnetId *string `pulumi:"subnetId"`
	// The system tags associated with this resource, if any. The system tags are set by Oracle Cloud Infrastructure services. Each key is predefined and scoped to namespaces.  For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{orcl-cloud: {free-tier-retain: true}}`
	SystemTags map[string]interface{} `pulumi:"systemTags"`
	// The time the resource was created. The format is defined by [RFC3339](https://tools.ietf.org/html/rfc3339), such as `2016-08-25T21:10:29.600Z`.
	TimeCreated *string `pulumi:"timeCreated"`
	// The time the resource was last updated. The format is defined by [RFC3339](https://tools.ietf.org/html/rfc3339), such as `2016-08-25T21:10:29.600Z`.
	TimeUpdated *string `pulumi:"timeUpdated"`
	// (Updatable) The username Oracle GoldenGate uses to connect the associated RDBMS.  This username must already exist and be available for use by the database.  It must conform to the security requirements implemented by the database including length, case sensitivity, and so on.
	Username *string `pulumi:"username"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the customer vault being referenced. If provided, this will reference a vault which the customer will be required to ensure the policies are established to permit the GoldenGate Service to manage secrets contained within this vault.
	VaultId *string `pulumi:"vaultId"`
	// (Updatable) The wallet contents Oracle GoldenGate uses to make connections to a database.  This attribute is expected to be base64 encoded.
	Wallet *string `pulumi:"wallet"`
}

type GoldenGateDatabaseRegistrationState struct {
	// (Updatable) Credential store alias.
	AliasName pulumi.StringPtrInput
	// (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment being referenced.
	CompartmentId pulumi.StringPtrInput
	// (Updatable) Connect descriptor or Easy Connect Naming method that Oracle GoldenGate uses to connect to a database.
	ConnectionString pulumi.StringPtrInput
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the database being referenced.
	DatabaseId pulumi.StringPtrInput
	// (Updatable) Tags defined for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
	DefinedTags pulumi.MapInput
	// (Updatable) Metadata about this specific object.
	Description pulumi.StringPtrInput
	// (Updatable) An object's Display Name.
	DisplayName pulumi.StringPtrInput
	// (Updatable) A three-label Fully Qualified Domain Name (FQDN) for a resource.
	Fqdn pulumi.StringPtrInput
	// (Updatable) A simple key-value pair that is applied without any predefined name, type, or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
	FreeformTags pulumi.MapInput
	// The private IP address in the customer's VCN of the customer's endpoint, typically a database.
	IpAddress pulumi.StringPtrInput
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the customer "Master" key being referenced. If provided, this will reference a key which the customer will be required to ensure the policies are established to permit the GoldenGate Service to utilize this key to manage secrets.
	KeyId pulumi.StringPtrInput
	// Describes the object's current state in detail. For example, it can be used to provide actionable information for a resource in a Failed state.
	LifecycleDetails pulumi.StringPtrInput
	// (Updatable) The password Oracle GoldenGate uses to connect the associated RDBMS.  It must conform to the specific security requirements implemented by the database including length, case sensitivity, and so on.
	Password pulumi.StringPtrInput
	// A Private Endpoint IP Address created in the customer's subnet.  A customer database can expect network traffic initiated by GGS from this IP address and send network traffic to this IP address, typically in response to requests from GGS (OGG).  The customer may utilize this IP address in Security Lists or Network Security Groups (NSG) as needed.
	RcePrivateIp pulumi.StringPtrInput
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment where the the GGS Secret will be created. If provided, this will reference a key which the customer will be required to ensure the policies are established to permit the GoldenGate Service to utilize this Compartment in which to create a Secret.
	SecretCompartmentId pulumi.StringPtrInput
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the customer GGS Secret being referenced. If provided, this will reference a key which the customer will be required to ensure the policies are established to permit the GoldenGate Service to utilize this Secret
	SecretId pulumi.StringPtrInput
	// Possible lifecycle states.
	State pulumi.StringPtrInput
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the subnet being referenced.
	SubnetId pulumi.StringPtrInput
	// The system tags associated with this resource, if any. The system tags are set by Oracle Cloud Infrastructure services. Each key is predefined and scoped to namespaces.  For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{orcl-cloud: {free-tier-retain: true}}`
	SystemTags pulumi.MapInput
	// The time the resource was created. The format is defined by [RFC3339](https://tools.ietf.org/html/rfc3339), such as `2016-08-25T21:10:29.600Z`.
	TimeCreated pulumi.StringPtrInput
	// The time the resource was last updated. The format is defined by [RFC3339](https://tools.ietf.org/html/rfc3339), such as `2016-08-25T21:10:29.600Z`.
	TimeUpdated pulumi.StringPtrInput
	// (Updatable) The username Oracle GoldenGate uses to connect the associated RDBMS.  This username must already exist and be available for use by the database.  It must conform to the security requirements implemented by the database including length, case sensitivity, and so on.
	Username pulumi.StringPtrInput
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the customer vault being referenced. If provided, this will reference a vault which the customer will be required to ensure the policies are established to permit the GoldenGate Service to manage secrets contained within this vault.
	VaultId pulumi.StringPtrInput
	// (Updatable) The wallet contents Oracle GoldenGate uses to make connections to a database.  This attribute is expected to be base64 encoded.
	Wallet pulumi.StringPtrInput
}

func (GoldenGateDatabaseRegistrationState) ElementType() reflect.Type {
	return reflect.TypeOf((*goldenGateDatabaseRegistrationState)(nil)).Elem()
}

type goldenGateDatabaseRegistrationArgs struct {
	// (Updatable) Credential store alias.
	AliasName string `pulumi:"aliasName"`
	// (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment being referenced.
	CompartmentId string `pulumi:"compartmentId"`
	// (Updatable) Connect descriptor or Easy Connect Naming method that Oracle GoldenGate uses to connect to a database.
	ConnectionString *string `pulumi:"connectionString"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the database being referenced.
	DatabaseId *string `pulumi:"databaseId"`
	// (Updatable) Tags defined for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
	DefinedTags map[string]interface{} `pulumi:"definedTags"`
	// (Updatable) Metadata about this specific object.
	Description *string `pulumi:"description"`
	// (Updatable) An object's Display Name.
	DisplayName string `pulumi:"displayName"`
	// (Updatable) A three-label Fully Qualified Domain Name (FQDN) for a resource.
	Fqdn string `pulumi:"fqdn"`
	// (Updatable) A simple key-value pair that is applied without any predefined name, type, or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
	FreeformTags map[string]interface{} `pulumi:"freeformTags"`
	// The private IP address in the customer's VCN of the customer's endpoint, typically a database.
	IpAddress *string `pulumi:"ipAddress"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the customer "Master" key being referenced. If provided, this will reference a key which the customer will be required to ensure the policies are established to permit the GoldenGate Service to utilize this key to manage secrets.
	KeyId *string `pulumi:"keyId"`
	// (Updatable) The password Oracle GoldenGate uses to connect the associated RDBMS.  It must conform to the specific security requirements implemented by the database including length, case sensitivity, and so on.
	Password string `pulumi:"password"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment where the the GGS Secret will be created. If provided, this will reference a key which the customer will be required to ensure the policies are established to permit the GoldenGate Service to utilize this Compartment in which to create a Secret.
	SecretCompartmentId *string `pulumi:"secretCompartmentId"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the subnet being referenced.
	SubnetId *string `pulumi:"subnetId"`
	// (Updatable) The username Oracle GoldenGate uses to connect the associated RDBMS.  This username must already exist and be available for use by the database.  It must conform to the security requirements implemented by the database including length, case sensitivity, and so on.
	Username string `pulumi:"username"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the customer vault being referenced. If provided, this will reference a vault which the customer will be required to ensure the policies are established to permit the GoldenGate Service to manage secrets contained within this vault.
	VaultId *string `pulumi:"vaultId"`
	// (Updatable) The wallet contents Oracle GoldenGate uses to make connections to a database.  This attribute is expected to be base64 encoded.
	Wallet *string `pulumi:"wallet"`
}

// The set of arguments for constructing a GoldenGateDatabaseRegistration resource.
type GoldenGateDatabaseRegistrationArgs struct {
	// (Updatable) Credential store alias.
	AliasName pulumi.StringInput
	// (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment being referenced.
	CompartmentId pulumi.StringInput
	// (Updatable) Connect descriptor or Easy Connect Naming method that Oracle GoldenGate uses to connect to a database.
	ConnectionString pulumi.StringPtrInput
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the database being referenced.
	DatabaseId pulumi.StringPtrInput
	// (Updatable) Tags defined for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
	DefinedTags pulumi.MapInput
	// (Updatable) Metadata about this specific object.
	Description pulumi.StringPtrInput
	// (Updatable) An object's Display Name.
	DisplayName pulumi.StringInput
	// (Updatable) A three-label Fully Qualified Domain Name (FQDN) for a resource.
	Fqdn pulumi.StringInput
	// (Updatable) A simple key-value pair that is applied without any predefined name, type, or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
	FreeformTags pulumi.MapInput
	// The private IP address in the customer's VCN of the customer's endpoint, typically a database.
	IpAddress pulumi.StringPtrInput
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the customer "Master" key being referenced. If provided, this will reference a key which the customer will be required to ensure the policies are established to permit the GoldenGate Service to utilize this key to manage secrets.
	KeyId pulumi.StringPtrInput
	// (Updatable) The password Oracle GoldenGate uses to connect the associated RDBMS.  It must conform to the specific security requirements implemented by the database including length, case sensitivity, and so on.
	Password pulumi.StringInput
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment where the the GGS Secret will be created. If provided, this will reference a key which the customer will be required to ensure the policies are established to permit the GoldenGate Service to utilize this Compartment in which to create a Secret.
	SecretCompartmentId pulumi.StringPtrInput
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the subnet being referenced.
	SubnetId pulumi.StringPtrInput
	// (Updatable) The username Oracle GoldenGate uses to connect the associated RDBMS.  This username must already exist and be available for use by the database.  It must conform to the security requirements implemented by the database including length, case sensitivity, and so on.
	Username pulumi.StringInput
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the customer vault being referenced. If provided, this will reference a vault which the customer will be required to ensure the policies are established to permit the GoldenGate Service to manage secrets contained within this vault.
	VaultId pulumi.StringPtrInput
	// (Updatable) The wallet contents Oracle GoldenGate uses to make connections to a database.  This attribute is expected to be base64 encoded.
	Wallet pulumi.StringPtrInput
}

func (GoldenGateDatabaseRegistrationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*goldenGateDatabaseRegistrationArgs)(nil)).Elem()
}

type GoldenGateDatabaseRegistrationInput interface {
	pulumi.Input

	ToGoldenGateDatabaseRegistrationOutput() GoldenGateDatabaseRegistrationOutput
	ToGoldenGateDatabaseRegistrationOutputWithContext(ctx context.Context) GoldenGateDatabaseRegistrationOutput
}

func (*GoldenGateDatabaseRegistration) ElementType() reflect.Type {
	return reflect.TypeOf((*GoldenGateDatabaseRegistration)(nil))
}

func (i *GoldenGateDatabaseRegistration) ToGoldenGateDatabaseRegistrationOutput() GoldenGateDatabaseRegistrationOutput {
	return i.ToGoldenGateDatabaseRegistrationOutputWithContext(context.Background())
}

func (i *GoldenGateDatabaseRegistration) ToGoldenGateDatabaseRegistrationOutputWithContext(ctx context.Context) GoldenGateDatabaseRegistrationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoldenGateDatabaseRegistrationOutput)
}

func (i *GoldenGateDatabaseRegistration) ToGoldenGateDatabaseRegistrationPtrOutput() GoldenGateDatabaseRegistrationPtrOutput {
	return i.ToGoldenGateDatabaseRegistrationPtrOutputWithContext(context.Background())
}

func (i *GoldenGateDatabaseRegistration) ToGoldenGateDatabaseRegistrationPtrOutputWithContext(ctx context.Context) GoldenGateDatabaseRegistrationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoldenGateDatabaseRegistrationPtrOutput)
}

type GoldenGateDatabaseRegistrationPtrInput interface {
	pulumi.Input

	ToGoldenGateDatabaseRegistrationPtrOutput() GoldenGateDatabaseRegistrationPtrOutput
	ToGoldenGateDatabaseRegistrationPtrOutputWithContext(ctx context.Context) GoldenGateDatabaseRegistrationPtrOutput
}

type goldenGateDatabaseRegistrationPtrType GoldenGateDatabaseRegistrationArgs

func (*goldenGateDatabaseRegistrationPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**GoldenGateDatabaseRegistration)(nil))
}

func (i *goldenGateDatabaseRegistrationPtrType) ToGoldenGateDatabaseRegistrationPtrOutput() GoldenGateDatabaseRegistrationPtrOutput {
	return i.ToGoldenGateDatabaseRegistrationPtrOutputWithContext(context.Background())
}

func (i *goldenGateDatabaseRegistrationPtrType) ToGoldenGateDatabaseRegistrationPtrOutputWithContext(ctx context.Context) GoldenGateDatabaseRegistrationPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoldenGateDatabaseRegistrationPtrOutput)
}

// GoldenGateDatabaseRegistrationArrayInput is an input type that accepts GoldenGateDatabaseRegistrationArray and GoldenGateDatabaseRegistrationArrayOutput values.
// You can construct a concrete instance of `GoldenGateDatabaseRegistrationArrayInput` via:
//
//          GoldenGateDatabaseRegistrationArray{ GoldenGateDatabaseRegistrationArgs{...} }
type GoldenGateDatabaseRegistrationArrayInput interface {
	pulumi.Input

	ToGoldenGateDatabaseRegistrationArrayOutput() GoldenGateDatabaseRegistrationArrayOutput
	ToGoldenGateDatabaseRegistrationArrayOutputWithContext(context.Context) GoldenGateDatabaseRegistrationArrayOutput
}

type GoldenGateDatabaseRegistrationArray []GoldenGateDatabaseRegistrationInput

func (GoldenGateDatabaseRegistrationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*GoldenGateDatabaseRegistration)(nil)).Elem()
}

func (i GoldenGateDatabaseRegistrationArray) ToGoldenGateDatabaseRegistrationArrayOutput() GoldenGateDatabaseRegistrationArrayOutput {
	return i.ToGoldenGateDatabaseRegistrationArrayOutputWithContext(context.Background())
}

func (i GoldenGateDatabaseRegistrationArray) ToGoldenGateDatabaseRegistrationArrayOutputWithContext(ctx context.Context) GoldenGateDatabaseRegistrationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoldenGateDatabaseRegistrationArrayOutput)
}

// GoldenGateDatabaseRegistrationMapInput is an input type that accepts GoldenGateDatabaseRegistrationMap and GoldenGateDatabaseRegistrationMapOutput values.
// You can construct a concrete instance of `GoldenGateDatabaseRegistrationMapInput` via:
//
//          GoldenGateDatabaseRegistrationMap{ "key": GoldenGateDatabaseRegistrationArgs{...} }
type GoldenGateDatabaseRegistrationMapInput interface {
	pulumi.Input

	ToGoldenGateDatabaseRegistrationMapOutput() GoldenGateDatabaseRegistrationMapOutput
	ToGoldenGateDatabaseRegistrationMapOutputWithContext(context.Context) GoldenGateDatabaseRegistrationMapOutput
}

type GoldenGateDatabaseRegistrationMap map[string]GoldenGateDatabaseRegistrationInput

func (GoldenGateDatabaseRegistrationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*GoldenGateDatabaseRegistration)(nil)).Elem()
}

func (i GoldenGateDatabaseRegistrationMap) ToGoldenGateDatabaseRegistrationMapOutput() GoldenGateDatabaseRegistrationMapOutput {
	return i.ToGoldenGateDatabaseRegistrationMapOutputWithContext(context.Background())
}

func (i GoldenGateDatabaseRegistrationMap) ToGoldenGateDatabaseRegistrationMapOutputWithContext(ctx context.Context) GoldenGateDatabaseRegistrationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(GoldenGateDatabaseRegistrationMapOutput)
}

type GoldenGateDatabaseRegistrationOutput struct {
	*pulumi.OutputState
}

func (GoldenGateDatabaseRegistrationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*GoldenGateDatabaseRegistration)(nil))
}

func (o GoldenGateDatabaseRegistrationOutput) ToGoldenGateDatabaseRegistrationOutput() GoldenGateDatabaseRegistrationOutput {
	return o
}

func (o GoldenGateDatabaseRegistrationOutput) ToGoldenGateDatabaseRegistrationOutputWithContext(ctx context.Context) GoldenGateDatabaseRegistrationOutput {
	return o
}

func (o GoldenGateDatabaseRegistrationOutput) ToGoldenGateDatabaseRegistrationPtrOutput() GoldenGateDatabaseRegistrationPtrOutput {
	return o.ToGoldenGateDatabaseRegistrationPtrOutputWithContext(context.Background())
}

func (o GoldenGateDatabaseRegistrationOutput) ToGoldenGateDatabaseRegistrationPtrOutputWithContext(ctx context.Context) GoldenGateDatabaseRegistrationPtrOutput {
	return o.ApplyT(func(v GoldenGateDatabaseRegistration) *GoldenGateDatabaseRegistration {
		return &v
	}).(GoldenGateDatabaseRegistrationPtrOutput)
}

type GoldenGateDatabaseRegistrationPtrOutput struct {
	*pulumi.OutputState
}

func (GoldenGateDatabaseRegistrationPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**GoldenGateDatabaseRegistration)(nil))
}

func (o GoldenGateDatabaseRegistrationPtrOutput) ToGoldenGateDatabaseRegistrationPtrOutput() GoldenGateDatabaseRegistrationPtrOutput {
	return o
}

func (o GoldenGateDatabaseRegistrationPtrOutput) ToGoldenGateDatabaseRegistrationPtrOutputWithContext(ctx context.Context) GoldenGateDatabaseRegistrationPtrOutput {
	return o
}

type GoldenGateDatabaseRegistrationArrayOutput struct{ *pulumi.OutputState }

func (GoldenGateDatabaseRegistrationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]GoldenGateDatabaseRegistration)(nil))
}

func (o GoldenGateDatabaseRegistrationArrayOutput) ToGoldenGateDatabaseRegistrationArrayOutput() GoldenGateDatabaseRegistrationArrayOutput {
	return o
}

func (o GoldenGateDatabaseRegistrationArrayOutput) ToGoldenGateDatabaseRegistrationArrayOutputWithContext(ctx context.Context) GoldenGateDatabaseRegistrationArrayOutput {
	return o
}

func (o GoldenGateDatabaseRegistrationArrayOutput) Index(i pulumi.IntInput) GoldenGateDatabaseRegistrationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) GoldenGateDatabaseRegistration {
		return vs[0].([]GoldenGateDatabaseRegistration)[vs[1].(int)]
	}).(GoldenGateDatabaseRegistrationOutput)
}

type GoldenGateDatabaseRegistrationMapOutput struct{ *pulumi.OutputState }

func (GoldenGateDatabaseRegistrationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]GoldenGateDatabaseRegistration)(nil))
}

func (o GoldenGateDatabaseRegistrationMapOutput) ToGoldenGateDatabaseRegistrationMapOutput() GoldenGateDatabaseRegistrationMapOutput {
	return o
}

func (o GoldenGateDatabaseRegistrationMapOutput) ToGoldenGateDatabaseRegistrationMapOutputWithContext(ctx context.Context) GoldenGateDatabaseRegistrationMapOutput {
	return o
}

func (o GoldenGateDatabaseRegistrationMapOutput) MapIndex(k pulumi.StringInput) GoldenGateDatabaseRegistrationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) GoldenGateDatabaseRegistration {
		return vs[0].(map[string]GoldenGateDatabaseRegistration)[vs[1].(string)]
	}).(GoldenGateDatabaseRegistrationOutput)
}

func init() {
	pulumi.RegisterOutputType(GoldenGateDatabaseRegistrationOutput{})
	pulumi.RegisterOutputType(GoldenGateDatabaseRegistrationPtrOutput{})
	pulumi.RegisterOutputType(GoldenGateDatabaseRegistrationArrayOutput{})
	pulumi.RegisterOutputType(GoldenGateDatabaseRegistrationMapOutput{})
}
