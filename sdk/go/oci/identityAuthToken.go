// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package oci

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource provides the Auth Token resource in Oracle Cloud Infrastructure Identity service.
//
// Creates a new auth token for the specified user. For information about what auth tokens are for, see
// [Managing User Credentials](https://docs.cloud.oracle.com/iaas/Content/Identity/Tasks/managingcredentials.htm).
//
// You must specify a *description* for the auth token (although it can be an empty string). It does not
// have to be unique, and you can change it anytime with
// [UpdateAuthToken](https://docs.cloud.oracle.com/iaas/api/#/en/identity/20160918/AuthToken/UpdateAuthToken).
//
// Every user has permission to create an auth token for *their own user ID*. An administrator in your organization
// does not need to write a policy to give users this ability. To compare, administrators who have permission to the
// tenancy can use this operation to create an auth token for any user, including themselves.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-oci/sdk/go/oci"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := oci.NewIdentityAuthToken(ctx, "testAuthToken", &oci.IdentityAuthTokenArgs{
// 			Description: pulumi.Any(_var.Auth_token_description),
// 			UserId:      pulumi.Any(oci_identity_user.Test_user.Id),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// AuthTokens can be imported using the `id`, e.g.
//
// ```sh
//  $ pulumi import oci:index/identityAuthToken:IdentityAuthToken test_auth_token "users/{userId}/authTokens/{authTokenId}"
// ```
type IdentityAuthToken struct {
	pulumi.CustomResourceState

	// (Updatable) The description you assign to the auth token during creation. Does not have to be unique, and it's changeable.
	Description pulumi.StringOutput `pulumi:"description"`
	// The detailed status of INACTIVE lifecycleState.
	InactiveState pulumi.StringOutput `pulumi:"inactiveState"`
	// The token's current state.
	State pulumi.StringOutput `pulumi:"state"`
	// Date and time the `AuthToken` object was created, in the format defined by RFC3339.  Example: `2016-08-25T21:10:29.600Z`
	TimeCreated pulumi.StringOutput `pulumi:"timeCreated"`
	// Date and time when this auth token will expire, in the format defined by RFC3339. Null if it never expires.  Example: `2016-08-25T21:10:29.600Z`
	TimeExpires pulumi.StringOutput `pulumi:"timeExpires"`
	// The auth token. The value is available only in the response for `CreateAuthToken`, and not for `ListAuthTokens` or `UpdateAuthToken`.
	Token pulumi.StringOutput `pulumi:"token"`
	// The OCID of the user.
	UserId pulumi.StringOutput `pulumi:"userId"`
}

// NewIdentityAuthToken registers a new resource with the given unique name, arguments, and options.
func NewIdentityAuthToken(ctx *pulumi.Context,
	name string, args *IdentityAuthTokenArgs, opts ...pulumi.ResourceOption) (*IdentityAuthToken, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Description == nil {
		return nil, errors.New("invalid value for required argument 'Description'")
	}
	if args.UserId == nil {
		return nil, errors.New("invalid value for required argument 'UserId'")
	}
	var resource IdentityAuthToken
	err := ctx.RegisterResource("oci:index/identityAuthToken:IdentityAuthToken", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIdentityAuthToken gets an existing IdentityAuthToken resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIdentityAuthToken(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *IdentityAuthTokenState, opts ...pulumi.ResourceOption) (*IdentityAuthToken, error) {
	var resource IdentityAuthToken
	err := ctx.ReadResource("oci:index/identityAuthToken:IdentityAuthToken", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering IdentityAuthToken resources.
type identityAuthTokenState struct {
	// (Updatable) The description you assign to the auth token during creation. Does not have to be unique, and it's changeable.
	Description *string `pulumi:"description"`
	// The detailed status of INACTIVE lifecycleState.
	InactiveState *string `pulumi:"inactiveState"`
	// The token's current state.
	State *string `pulumi:"state"`
	// Date and time the `AuthToken` object was created, in the format defined by RFC3339.  Example: `2016-08-25T21:10:29.600Z`
	TimeCreated *string `pulumi:"timeCreated"`
	// Date and time when this auth token will expire, in the format defined by RFC3339. Null if it never expires.  Example: `2016-08-25T21:10:29.600Z`
	TimeExpires *string `pulumi:"timeExpires"`
	// The auth token. The value is available only in the response for `CreateAuthToken`, and not for `ListAuthTokens` or `UpdateAuthToken`.
	Token *string `pulumi:"token"`
	// The OCID of the user.
	UserId *string `pulumi:"userId"`
}

type IdentityAuthTokenState struct {
	// (Updatable) The description you assign to the auth token during creation. Does not have to be unique, and it's changeable.
	Description pulumi.StringPtrInput
	// The detailed status of INACTIVE lifecycleState.
	InactiveState pulumi.StringPtrInput
	// The token's current state.
	State pulumi.StringPtrInput
	// Date and time the `AuthToken` object was created, in the format defined by RFC3339.  Example: `2016-08-25T21:10:29.600Z`
	TimeCreated pulumi.StringPtrInput
	// Date and time when this auth token will expire, in the format defined by RFC3339. Null if it never expires.  Example: `2016-08-25T21:10:29.600Z`
	TimeExpires pulumi.StringPtrInput
	// The auth token. The value is available only in the response for `CreateAuthToken`, and not for `ListAuthTokens` or `UpdateAuthToken`.
	Token pulumi.StringPtrInput
	// The OCID of the user.
	UserId pulumi.StringPtrInput
}

func (IdentityAuthTokenState) ElementType() reflect.Type {
	return reflect.TypeOf((*identityAuthTokenState)(nil)).Elem()
}

type identityAuthTokenArgs struct {
	// (Updatable) The description you assign to the auth token during creation. Does not have to be unique, and it's changeable.
	Description string `pulumi:"description"`
	// The OCID of the user.
	UserId string `pulumi:"userId"`
}

// The set of arguments for constructing a IdentityAuthToken resource.
type IdentityAuthTokenArgs struct {
	// (Updatable) The description you assign to the auth token during creation. Does not have to be unique, and it's changeable.
	Description pulumi.StringInput
	// The OCID of the user.
	UserId pulumi.StringInput
}

func (IdentityAuthTokenArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*identityAuthTokenArgs)(nil)).Elem()
}

type IdentityAuthTokenInput interface {
	pulumi.Input

	ToIdentityAuthTokenOutput() IdentityAuthTokenOutput
	ToIdentityAuthTokenOutputWithContext(ctx context.Context) IdentityAuthTokenOutput
}

func (*IdentityAuthToken) ElementType() reflect.Type {
	return reflect.TypeOf((*IdentityAuthToken)(nil))
}

func (i *IdentityAuthToken) ToIdentityAuthTokenOutput() IdentityAuthTokenOutput {
	return i.ToIdentityAuthTokenOutputWithContext(context.Background())
}

func (i *IdentityAuthToken) ToIdentityAuthTokenOutputWithContext(ctx context.Context) IdentityAuthTokenOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdentityAuthTokenOutput)
}

func (i *IdentityAuthToken) ToIdentityAuthTokenPtrOutput() IdentityAuthTokenPtrOutput {
	return i.ToIdentityAuthTokenPtrOutputWithContext(context.Background())
}

func (i *IdentityAuthToken) ToIdentityAuthTokenPtrOutputWithContext(ctx context.Context) IdentityAuthTokenPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdentityAuthTokenPtrOutput)
}

type IdentityAuthTokenPtrInput interface {
	pulumi.Input

	ToIdentityAuthTokenPtrOutput() IdentityAuthTokenPtrOutput
	ToIdentityAuthTokenPtrOutputWithContext(ctx context.Context) IdentityAuthTokenPtrOutput
}

type identityAuthTokenPtrType IdentityAuthTokenArgs

func (*identityAuthTokenPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**IdentityAuthToken)(nil))
}

func (i *identityAuthTokenPtrType) ToIdentityAuthTokenPtrOutput() IdentityAuthTokenPtrOutput {
	return i.ToIdentityAuthTokenPtrOutputWithContext(context.Background())
}

func (i *identityAuthTokenPtrType) ToIdentityAuthTokenPtrOutputWithContext(ctx context.Context) IdentityAuthTokenPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdentityAuthTokenPtrOutput)
}

// IdentityAuthTokenArrayInput is an input type that accepts IdentityAuthTokenArray and IdentityAuthTokenArrayOutput values.
// You can construct a concrete instance of `IdentityAuthTokenArrayInput` via:
//
//          IdentityAuthTokenArray{ IdentityAuthTokenArgs{...} }
type IdentityAuthTokenArrayInput interface {
	pulumi.Input

	ToIdentityAuthTokenArrayOutput() IdentityAuthTokenArrayOutput
	ToIdentityAuthTokenArrayOutputWithContext(context.Context) IdentityAuthTokenArrayOutput
}

type IdentityAuthTokenArray []IdentityAuthTokenInput

func (IdentityAuthTokenArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IdentityAuthToken)(nil)).Elem()
}

func (i IdentityAuthTokenArray) ToIdentityAuthTokenArrayOutput() IdentityAuthTokenArrayOutput {
	return i.ToIdentityAuthTokenArrayOutputWithContext(context.Background())
}

func (i IdentityAuthTokenArray) ToIdentityAuthTokenArrayOutputWithContext(ctx context.Context) IdentityAuthTokenArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdentityAuthTokenArrayOutput)
}

// IdentityAuthTokenMapInput is an input type that accepts IdentityAuthTokenMap and IdentityAuthTokenMapOutput values.
// You can construct a concrete instance of `IdentityAuthTokenMapInput` via:
//
//          IdentityAuthTokenMap{ "key": IdentityAuthTokenArgs{...} }
type IdentityAuthTokenMapInput interface {
	pulumi.Input

	ToIdentityAuthTokenMapOutput() IdentityAuthTokenMapOutput
	ToIdentityAuthTokenMapOutputWithContext(context.Context) IdentityAuthTokenMapOutput
}

type IdentityAuthTokenMap map[string]IdentityAuthTokenInput

func (IdentityAuthTokenMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IdentityAuthToken)(nil)).Elem()
}

func (i IdentityAuthTokenMap) ToIdentityAuthTokenMapOutput() IdentityAuthTokenMapOutput {
	return i.ToIdentityAuthTokenMapOutputWithContext(context.Background())
}

func (i IdentityAuthTokenMap) ToIdentityAuthTokenMapOutputWithContext(ctx context.Context) IdentityAuthTokenMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdentityAuthTokenMapOutput)
}

type IdentityAuthTokenOutput struct {
	*pulumi.OutputState
}

func (IdentityAuthTokenOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IdentityAuthToken)(nil))
}

func (o IdentityAuthTokenOutput) ToIdentityAuthTokenOutput() IdentityAuthTokenOutput {
	return o
}

func (o IdentityAuthTokenOutput) ToIdentityAuthTokenOutputWithContext(ctx context.Context) IdentityAuthTokenOutput {
	return o
}

func (o IdentityAuthTokenOutput) ToIdentityAuthTokenPtrOutput() IdentityAuthTokenPtrOutput {
	return o.ToIdentityAuthTokenPtrOutputWithContext(context.Background())
}

func (o IdentityAuthTokenOutput) ToIdentityAuthTokenPtrOutputWithContext(ctx context.Context) IdentityAuthTokenPtrOutput {
	return o.ApplyT(func(v IdentityAuthToken) *IdentityAuthToken {
		return &v
	}).(IdentityAuthTokenPtrOutput)
}

type IdentityAuthTokenPtrOutput struct {
	*pulumi.OutputState
}

func (IdentityAuthTokenPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IdentityAuthToken)(nil))
}

func (o IdentityAuthTokenPtrOutput) ToIdentityAuthTokenPtrOutput() IdentityAuthTokenPtrOutput {
	return o
}

func (o IdentityAuthTokenPtrOutput) ToIdentityAuthTokenPtrOutputWithContext(ctx context.Context) IdentityAuthTokenPtrOutput {
	return o
}

type IdentityAuthTokenArrayOutput struct{ *pulumi.OutputState }

func (IdentityAuthTokenArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]IdentityAuthToken)(nil))
}

func (o IdentityAuthTokenArrayOutput) ToIdentityAuthTokenArrayOutput() IdentityAuthTokenArrayOutput {
	return o
}

func (o IdentityAuthTokenArrayOutput) ToIdentityAuthTokenArrayOutputWithContext(ctx context.Context) IdentityAuthTokenArrayOutput {
	return o
}

func (o IdentityAuthTokenArrayOutput) Index(i pulumi.IntInput) IdentityAuthTokenOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) IdentityAuthToken {
		return vs[0].([]IdentityAuthToken)[vs[1].(int)]
	}).(IdentityAuthTokenOutput)
}

type IdentityAuthTokenMapOutput struct{ *pulumi.OutputState }

func (IdentityAuthTokenMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]IdentityAuthToken)(nil))
}

func (o IdentityAuthTokenMapOutput) ToIdentityAuthTokenMapOutput() IdentityAuthTokenMapOutput {
	return o
}

func (o IdentityAuthTokenMapOutput) ToIdentityAuthTokenMapOutputWithContext(ctx context.Context) IdentityAuthTokenMapOutput {
	return o
}

func (o IdentityAuthTokenMapOutput) MapIndex(k pulumi.StringInput) IdentityAuthTokenOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) IdentityAuthToken {
		return vs[0].(map[string]IdentityAuthToken)[vs[1].(string)]
	}).(IdentityAuthTokenOutput)
}

func init() {
	pulumi.RegisterOutputType(IdentityAuthTokenOutput{})
	pulumi.RegisterOutputType(IdentityAuthTokenPtrOutput{})
	pulumi.RegisterOutputType(IdentityAuthTokenArrayOutput{})
	pulumi.RegisterOutputType(IdentityAuthTokenMapOutput{})
}
