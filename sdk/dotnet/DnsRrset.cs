// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci
{
    /// <summary>
    /// This resource provides the Rrset resource in Oracle Cloud Infrastructure DNS service.
    /// 
    /// Replaces records in the specified RRSet. For private zones, the scope query parameter is required with a
    /// value of `PRIVATE`. When the zone name is provided as a path parameter and `PRIVATE` is used for the scope
    /// query parameter then the viewId query parameter is required.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Oci = Pulumi.Oci;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var testRrset = new Oci.DnsRrset("testRrset", new Oci.DnsRrsetArgs
    ///         {
    ///             Domain = @var.Rrset_domain,
    ///             Rtype = @var.Rrset_rtype,
    ///             ZoneNameOrId = oci_dns_zone.Test_zone.Id,
    ///             CompartmentId = @var.Compartment_id,
    ///             Items = 
    ///             {
    ///                 new Oci.Inputs.DnsRrsetItemArgs
    ///                 {
    ///                     Domain = @var.Rrset_items_domain,
    ///                     Rdata = @var.Rrset_items_rdata,
    ///                     Rtype = @var.Rrset_items_rtype,
    ///                     Ttl = @var.Rrset_items_ttl,
    ///                 },
    ///             },
    ///             Scope = @var.Rrset_scope,
    ///             ViewId = oci_dns_view.Test_view.Id,
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// 
    /// ## Import
    /// 
    /// For legacy Rrsets that were created without using `scope`, these Rrsets can be imported using the `id`, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import oci:index/dnsRrset:DnsRrset test_rrset "zoneNameOrId/{zoneNameOrId}/domain/{domain}/rtype/{rtype}"
    /// ```
    /// 
    ///  For Rrsets created using `scope` and `view_id`, these Rrsets can be imported using the `id`, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import oci:index/dnsRrset:DnsRrset test_rrset "zoneNameOrId/{zoneNameOrId}/domain/{domain}/rtype/{rtype}/scope/{scope}/viewId/{viewId}"
    /// ```
    /// 
    ///  skip adding `{view_id}` at the end if Rrset was created without `view_id`.
    /// </summary>
    [OciResourceType("oci:index/dnsRrset:DnsRrset")]
    public partial class DnsRrset : Pulumi.CustomResource
    {
        /// <summary>
        /// (Updatable) The OCID of the compartment the resource belongs to.
        /// </summary>
        [Output("compartmentId")]
        public Output<string> CompartmentId { get; private set; } = null!;

        /// <summary>
        /// The fully qualified domain name where the record can be located.
        /// </summary>
        [Output("domain")]
        public Output<string> Domain { get; private set; } = null!;

        /// <summary>
        /// (Updatable) 
        /// **NOTE** Omitting `items` at time of create, will delete any existing records in the RRSet
        /// </summary>
        [Output("items")]
        public Output<ImmutableArray<Outputs.DnsRrsetItem>> Items { get; private set; } = null!;

        /// <summary>
        /// The type of the target RRSet within the target zone.
        /// </summary>
        [Output("rtype")]
        public Output<string> Rtype { get; private set; } = null!;

        /// <summary>
        /// Specifies to operate only on resources that have a matching DNS scope. 
        /// This value will be null for zones in the global DNS and `PRIVATE` when creating private Rrsets.
        /// </summary>
        [Output("scope")]
        public Output<string?> Scope { get; private set; } = null!;

        /// <summary>
        /// The OCID of the view the resource is associated with.
        /// </summary>
        [Output("viewId")]
        public Output<string?> ViewId { get; private set; } = null!;

        /// <summary>
        /// The name or OCID of the target zone.
        /// </summary>
        [Output("zoneNameOrId")]
        public Output<string> ZoneNameOrId { get; private set; } = null!;


        /// <summary>
        /// Create a DnsRrset resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public DnsRrset(string name, DnsRrsetArgs args, CustomResourceOptions? options = null)
            : base("oci:index/dnsRrset:DnsRrset", name, args ?? new DnsRrsetArgs(), MakeResourceOptions(options, ""))
        {
        }

        private DnsRrset(string name, Input<string> id, DnsRrsetState? state = null, CustomResourceOptions? options = null)
            : base("oci:index/dnsRrset:DnsRrset", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing DnsRrset resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static DnsRrset Get(string name, Input<string> id, DnsRrsetState? state = null, CustomResourceOptions? options = null)
        {
            return new DnsRrset(name, id, state, options);
        }
    }

    public sealed class DnsRrsetArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// (Updatable) The OCID of the compartment the resource belongs to.
        /// </summary>
        [Input("compartmentId")]
        public Input<string>? CompartmentId { get; set; }

        /// <summary>
        /// The fully qualified domain name where the record can be located.
        /// </summary>
        [Input("domain", required: true)]
        public Input<string> Domain { get; set; } = null!;

        [Input("items")]
        private InputList<Inputs.DnsRrsetItemArgs>? _items;

        /// <summary>
        /// (Updatable) 
        /// **NOTE** Omitting `items` at time of create, will delete any existing records in the RRSet
        /// </summary>
        public InputList<Inputs.DnsRrsetItemArgs> Items
        {
            get => _items ?? (_items = new InputList<Inputs.DnsRrsetItemArgs>());
            set => _items = value;
        }

        /// <summary>
        /// The type of the target RRSet within the target zone.
        /// </summary>
        [Input("rtype", required: true)]
        public Input<string> Rtype { get; set; } = null!;

        /// <summary>
        /// Specifies to operate only on resources that have a matching DNS scope. 
        /// This value will be null for zones in the global DNS and `PRIVATE` when creating private Rrsets.
        /// </summary>
        [Input("scope")]
        public Input<string>? Scope { get; set; }

        /// <summary>
        /// The OCID of the view the resource is associated with.
        /// </summary>
        [Input("viewId")]
        public Input<string>? ViewId { get; set; }

        /// <summary>
        /// The name or OCID of the target zone.
        /// </summary>
        [Input("zoneNameOrId", required: true)]
        public Input<string> ZoneNameOrId { get; set; } = null!;

        public DnsRrsetArgs()
        {
        }
    }

    public sealed class DnsRrsetState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// (Updatable) The OCID of the compartment the resource belongs to.
        /// </summary>
        [Input("compartmentId")]
        public Input<string>? CompartmentId { get; set; }

        /// <summary>
        /// The fully qualified domain name where the record can be located.
        /// </summary>
        [Input("domain")]
        public Input<string>? Domain { get; set; }

        [Input("items")]
        private InputList<Inputs.DnsRrsetItemGetArgs>? _items;

        /// <summary>
        /// (Updatable) 
        /// **NOTE** Omitting `items` at time of create, will delete any existing records in the RRSet
        /// </summary>
        public InputList<Inputs.DnsRrsetItemGetArgs> Items
        {
            get => _items ?? (_items = new InputList<Inputs.DnsRrsetItemGetArgs>());
            set => _items = value;
        }

        /// <summary>
        /// The type of the target RRSet within the target zone.
        /// </summary>
        [Input("rtype")]
        public Input<string>? Rtype { get; set; }

        /// <summary>
        /// Specifies to operate only on resources that have a matching DNS scope. 
        /// This value will be null for zones in the global DNS and `PRIVATE` when creating private Rrsets.
        /// </summary>
        [Input("scope")]
        public Input<string>? Scope { get; set; }

        /// <summary>
        /// The OCID of the view the resource is associated with.
        /// </summary>
        [Input("viewId")]
        public Input<string>? ViewId { get; set; }

        /// <summary>
        /// The name or OCID of the target zone.
        /// </summary>
        [Input("zoneNameOrId")]
        public Input<string>? ZoneNameOrId { get; set; }

        public DnsRrsetState()
        {
        }
    }
}
