// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package oci

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource provides the Table resource in Oracle Cloud Infrastructure NoSQL Database service.
//
// Create a new table.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-oci/sdk/go/oci"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := oci.NewNosqlTable(ctx, "testTable", &oci.NosqlTableArgs{
// 			CompartmentId: pulumi.Any(_var.Compartment_id),
// 			DdlStatement:  pulumi.Any(_var.Table_ddl_statement),
// 			TableLimits: &NosqlTableTableLimitsArgs{
// 				MaxReadUnits:    pulumi.Any(_var.Table_table_limits_max_read_units),
// 				MaxStorageInGbs: pulumi.Any(_var.Table_table_limits_max_storage_in_gbs),
// 				MaxWriteUnits:   pulumi.Any(_var.Table_table_limits_max_write_units),
// 			},
// 			DefinedTags: pulumi.Any(_var.Table_defined_tags),
// 			FreeformTags: pulumi.AnyMap{
// 				"bar-key": pulumi.Any("value"),
// 			},
// 			IsAutoReclaimable: pulumi.Any(_var.Table_is_auto_reclaimable),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// Tables can be imported using the `id`, e.g.
//
// ```sh
//  $ pulumi import oci:index/nosqlTable:NosqlTable test_table "id"
// ```
type NosqlTable struct {
	pulumi.CustomResourceState

	// (Updatable) Compartment Identifier.
	CompartmentId pulumi.StringOutput `pulumi:"compartmentId"`
	// (Updatable) Complete CREATE TABLE DDL statement.
	DdlStatement pulumi.StringOutput `pulumi:"ddlStatement"`
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace.  Example: `{"foo-namespace": {"bar-key": "value"}}`
	DefinedTags pulumi.MapOutput `pulumi:"definedTags"`
	// (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
	FreeformTags pulumi.MapOutput `pulumi:"freeformTags"`
	// True if table can be reclaimed after an idle period.
	IsAutoReclaimable pulumi.BoolOutput `pulumi:"isAutoReclaimable"`
	// A message describing the current state in more detail.
	LifecycleDetails pulumi.StringOutput `pulumi:"lifecycleDetails"`
	// Table name.
	Name pulumi.StringOutput `pulumi:"name"`
	// The table schema information as a JSON object.
	Schema NosqlTableSchemaOutput `pulumi:"schema"`
	// The state of a table.
	State pulumi.StringOutput `pulumi:"state"`
	// Read-only system tag. These predefined keys are scoped to namespaces.  At present the only supported namespace is `"orcl-cloud"`; and the only key in that namespace is `"free-tier-retained"`. Example: `{"orcl-cloud"": {"free-tier-retained": "true"}}`
	SystemTags pulumi.MapOutput `pulumi:"systemTags"`
	// (Updatable) Throughput and storage limits configuration of a table.
	TableLimits NosqlTableTableLimitsOutput `pulumi:"tableLimits"`
	// The time the the table was created. An RFC3339 formatted datetime string.
	TimeCreated pulumi.StringOutput `pulumi:"timeCreated"`
	// If lifecycleState is INACTIVE, indicates when this table will be automatically removed. An RFC3339 formatted datetime string.
	TimeOfExpiration pulumi.StringOutput `pulumi:"timeOfExpiration"`
	// The time the the table's metadata was last updated. An RFC3339 formatted datetime string.
	TimeUpdated pulumi.StringOutput `pulumi:"timeUpdated"`
}

// NewNosqlTable registers a new resource with the given unique name, arguments, and options.
func NewNosqlTable(ctx *pulumi.Context,
	name string, args *NosqlTableArgs, opts ...pulumi.ResourceOption) (*NosqlTable, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CompartmentId == nil {
		return nil, errors.New("invalid value for required argument 'CompartmentId'")
	}
	if args.DdlStatement == nil {
		return nil, errors.New("invalid value for required argument 'DdlStatement'")
	}
	if args.TableLimits == nil {
		return nil, errors.New("invalid value for required argument 'TableLimits'")
	}
	var resource NosqlTable
	err := ctx.RegisterResource("oci:index/nosqlTable:NosqlTable", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNosqlTable gets an existing NosqlTable resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNosqlTable(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NosqlTableState, opts ...pulumi.ResourceOption) (*NosqlTable, error) {
	var resource NosqlTable
	err := ctx.ReadResource("oci:index/nosqlTable:NosqlTable", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NosqlTable resources.
type nosqlTableState struct {
	// (Updatable) Compartment Identifier.
	CompartmentId *string `pulumi:"compartmentId"`
	// (Updatable) Complete CREATE TABLE DDL statement.
	DdlStatement *string `pulumi:"ddlStatement"`
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace.  Example: `{"foo-namespace": {"bar-key": "value"}}`
	DefinedTags map[string]interface{} `pulumi:"definedTags"`
	// (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
	FreeformTags map[string]interface{} `pulumi:"freeformTags"`
	// True if table can be reclaimed after an idle period.
	IsAutoReclaimable *bool `pulumi:"isAutoReclaimable"`
	// A message describing the current state in more detail.
	LifecycleDetails *string `pulumi:"lifecycleDetails"`
	// Table name.
	Name *string `pulumi:"name"`
	// The table schema information as a JSON object.
	Schema *NosqlTableSchema `pulumi:"schema"`
	// The state of a table.
	State *string `pulumi:"state"`
	// Read-only system tag. These predefined keys are scoped to namespaces.  At present the only supported namespace is `"orcl-cloud"`; and the only key in that namespace is `"free-tier-retained"`. Example: `{"orcl-cloud"": {"free-tier-retained": "true"}}`
	SystemTags map[string]interface{} `pulumi:"systemTags"`
	// (Updatable) Throughput and storage limits configuration of a table.
	TableLimits *NosqlTableTableLimits `pulumi:"tableLimits"`
	// The time the the table was created. An RFC3339 formatted datetime string.
	TimeCreated *string `pulumi:"timeCreated"`
	// If lifecycleState is INACTIVE, indicates when this table will be automatically removed. An RFC3339 formatted datetime string.
	TimeOfExpiration *string `pulumi:"timeOfExpiration"`
	// The time the the table's metadata was last updated. An RFC3339 formatted datetime string.
	TimeUpdated *string `pulumi:"timeUpdated"`
}

type NosqlTableState struct {
	// (Updatable) Compartment Identifier.
	CompartmentId pulumi.StringPtrInput
	// (Updatable) Complete CREATE TABLE DDL statement.
	DdlStatement pulumi.StringPtrInput
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace.  Example: `{"foo-namespace": {"bar-key": "value"}}`
	DefinedTags pulumi.MapInput
	// (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
	FreeformTags pulumi.MapInput
	// True if table can be reclaimed after an idle period.
	IsAutoReclaimable pulumi.BoolPtrInput
	// A message describing the current state in more detail.
	LifecycleDetails pulumi.StringPtrInput
	// Table name.
	Name pulumi.StringPtrInput
	// The table schema information as a JSON object.
	Schema NosqlTableSchemaPtrInput
	// The state of a table.
	State pulumi.StringPtrInput
	// Read-only system tag. These predefined keys are scoped to namespaces.  At present the only supported namespace is `"orcl-cloud"`; and the only key in that namespace is `"free-tier-retained"`. Example: `{"orcl-cloud"": {"free-tier-retained": "true"}}`
	SystemTags pulumi.MapInput
	// (Updatable) Throughput and storage limits configuration of a table.
	TableLimits NosqlTableTableLimitsPtrInput
	// The time the the table was created. An RFC3339 formatted datetime string.
	TimeCreated pulumi.StringPtrInput
	// If lifecycleState is INACTIVE, indicates when this table will be automatically removed. An RFC3339 formatted datetime string.
	TimeOfExpiration pulumi.StringPtrInput
	// The time the the table's metadata was last updated. An RFC3339 formatted datetime string.
	TimeUpdated pulumi.StringPtrInput
}

func (NosqlTableState) ElementType() reflect.Type {
	return reflect.TypeOf((*nosqlTableState)(nil)).Elem()
}

type nosqlTableArgs struct {
	// (Updatable) Compartment Identifier.
	CompartmentId string `pulumi:"compartmentId"`
	// (Updatable) Complete CREATE TABLE DDL statement.
	DdlStatement string `pulumi:"ddlStatement"`
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace.  Example: `{"foo-namespace": {"bar-key": "value"}}`
	DefinedTags map[string]interface{} `pulumi:"definedTags"`
	// (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
	FreeformTags map[string]interface{} `pulumi:"freeformTags"`
	// True if table can be reclaimed after an idle period.
	IsAutoReclaimable *bool `pulumi:"isAutoReclaimable"`
	// Table name.
	Name *string `pulumi:"name"`
	// (Updatable) Throughput and storage limits configuration of a table.
	TableLimits NosqlTableTableLimits `pulumi:"tableLimits"`
}

// The set of arguments for constructing a NosqlTable resource.
type NosqlTableArgs struct {
	// (Updatable) Compartment Identifier.
	CompartmentId pulumi.StringInput
	// (Updatable) Complete CREATE TABLE DDL statement.
	DdlStatement pulumi.StringInput
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace.  Example: `{"foo-namespace": {"bar-key": "value"}}`
	DefinedTags pulumi.MapInput
	// (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
	FreeformTags pulumi.MapInput
	// True if table can be reclaimed after an idle period.
	IsAutoReclaimable pulumi.BoolPtrInput
	// Table name.
	Name pulumi.StringPtrInput
	// (Updatable) Throughput and storage limits configuration of a table.
	TableLimits NosqlTableTableLimitsInput
}

func (NosqlTableArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*nosqlTableArgs)(nil)).Elem()
}

type NosqlTableInput interface {
	pulumi.Input

	ToNosqlTableOutput() NosqlTableOutput
	ToNosqlTableOutputWithContext(ctx context.Context) NosqlTableOutput
}

func (*NosqlTable) ElementType() reflect.Type {
	return reflect.TypeOf((*NosqlTable)(nil))
}

func (i *NosqlTable) ToNosqlTableOutput() NosqlTableOutput {
	return i.ToNosqlTableOutputWithContext(context.Background())
}

func (i *NosqlTable) ToNosqlTableOutputWithContext(ctx context.Context) NosqlTableOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NosqlTableOutput)
}

func (i *NosqlTable) ToNosqlTablePtrOutput() NosqlTablePtrOutput {
	return i.ToNosqlTablePtrOutputWithContext(context.Background())
}

func (i *NosqlTable) ToNosqlTablePtrOutputWithContext(ctx context.Context) NosqlTablePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NosqlTablePtrOutput)
}

type NosqlTablePtrInput interface {
	pulumi.Input

	ToNosqlTablePtrOutput() NosqlTablePtrOutput
	ToNosqlTablePtrOutputWithContext(ctx context.Context) NosqlTablePtrOutput
}

type nosqlTablePtrType NosqlTableArgs

func (*nosqlTablePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NosqlTable)(nil))
}

func (i *nosqlTablePtrType) ToNosqlTablePtrOutput() NosqlTablePtrOutput {
	return i.ToNosqlTablePtrOutputWithContext(context.Background())
}

func (i *nosqlTablePtrType) ToNosqlTablePtrOutputWithContext(ctx context.Context) NosqlTablePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NosqlTablePtrOutput)
}

// NosqlTableArrayInput is an input type that accepts NosqlTableArray and NosqlTableArrayOutput values.
// You can construct a concrete instance of `NosqlTableArrayInput` via:
//
//          NosqlTableArray{ NosqlTableArgs{...} }
type NosqlTableArrayInput interface {
	pulumi.Input

	ToNosqlTableArrayOutput() NosqlTableArrayOutput
	ToNosqlTableArrayOutputWithContext(context.Context) NosqlTableArrayOutput
}

type NosqlTableArray []NosqlTableInput

func (NosqlTableArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NosqlTable)(nil)).Elem()
}

func (i NosqlTableArray) ToNosqlTableArrayOutput() NosqlTableArrayOutput {
	return i.ToNosqlTableArrayOutputWithContext(context.Background())
}

func (i NosqlTableArray) ToNosqlTableArrayOutputWithContext(ctx context.Context) NosqlTableArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NosqlTableArrayOutput)
}

// NosqlTableMapInput is an input type that accepts NosqlTableMap and NosqlTableMapOutput values.
// You can construct a concrete instance of `NosqlTableMapInput` via:
//
//          NosqlTableMap{ "key": NosqlTableArgs{...} }
type NosqlTableMapInput interface {
	pulumi.Input

	ToNosqlTableMapOutput() NosqlTableMapOutput
	ToNosqlTableMapOutputWithContext(context.Context) NosqlTableMapOutput
}

type NosqlTableMap map[string]NosqlTableInput

func (NosqlTableMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NosqlTable)(nil)).Elem()
}

func (i NosqlTableMap) ToNosqlTableMapOutput() NosqlTableMapOutput {
	return i.ToNosqlTableMapOutputWithContext(context.Background())
}

func (i NosqlTableMap) ToNosqlTableMapOutputWithContext(ctx context.Context) NosqlTableMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NosqlTableMapOutput)
}

type NosqlTableOutput struct {
	*pulumi.OutputState
}

func (NosqlTableOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NosqlTable)(nil))
}

func (o NosqlTableOutput) ToNosqlTableOutput() NosqlTableOutput {
	return o
}

func (o NosqlTableOutput) ToNosqlTableOutputWithContext(ctx context.Context) NosqlTableOutput {
	return o
}

func (o NosqlTableOutput) ToNosqlTablePtrOutput() NosqlTablePtrOutput {
	return o.ToNosqlTablePtrOutputWithContext(context.Background())
}

func (o NosqlTableOutput) ToNosqlTablePtrOutputWithContext(ctx context.Context) NosqlTablePtrOutput {
	return o.ApplyT(func(v NosqlTable) *NosqlTable {
		return &v
	}).(NosqlTablePtrOutput)
}

type NosqlTablePtrOutput struct {
	*pulumi.OutputState
}

func (NosqlTablePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NosqlTable)(nil))
}

func (o NosqlTablePtrOutput) ToNosqlTablePtrOutput() NosqlTablePtrOutput {
	return o
}

func (o NosqlTablePtrOutput) ToNosqlTablePtrOutputWithContext(ctx context.Context) NosqlTablePtrOutput {
	return o
}

type NosqlTableArrayOutput struct{ *pulumi.OutputState }

func (NosqlTableArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NosqlTable)(nil))
}

func (o NosqlTableArrayOutput) ToNosqlTableArrayOutput() NosqlTableArrayOutput {
	return o
}

func (o NosqlTableArrayOutput) ToNosqlTableArrayOutputWithContext(ctx context.Context) NosqlTableArrayOutput {
	return o
}

func (o NosqlTableArrayOutput) Index(i pulumi.IntInput) NosqlTableOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NosqlTable {
		return vs[0].([]NosqlTable)[vs[1].(int)]
	}).(NosqlTableOutput)
}

type NosqlTableMapOutput struct{ *pulumi.OutputState }

func (NosqlTableMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]NosqlTable)(nil))
}

func (o NosqlTableMapOutput) ToNosqlTableMapOutput() NosqlTableMapOutput {
	return o
}

func (o NosqlTableMapOutput) ToNosqlTableMapOutputWithContext(ctx context.Context) NosqlTableMapOutput {
	return o
}

func (o NosqlTableMapOutput) MapIndex(k pulumi.StringInput) NosqlTableOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) NosqlTable {
		return vs[0].(map[string]NosqlTable)[vs[1].(string)]
	}).(NosqlTableOutput)
}

func init() {
	pulumi.RegisterOutputType(NosqlTableOutput{})
	pulumi.RegisterOutputType(NosqlTablePtrOutput{})
	pulumi.RegisterOutputType(NosqlTableArrayOutput{})
	pulumi.RegisterOutputType(NosqlTableMapOutput{})
}
