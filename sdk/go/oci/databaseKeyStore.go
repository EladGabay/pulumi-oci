// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package oci

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource provides the Key Store resource in Oracle Cloud Infrastructure Database service.
//
// Creates a Key Store.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-oci/sdk/go/oci"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := oci.NewDatabaseKeyStore(ctx, "testKeyStore", &oci.DatabaseKeyStoreArgs{
// 			CompartmentId: pulumi.Any(_var.Compartment_id),
// 			DisplayName:   pulumi.Any(_var.Key_store_display_name),
// 			TypeDetails: &DatabaseKeyStoreTypeDetailsArgs{
// 				AdminUsername: pulumi.Any(_var.Key_store_type_details_admin_username),
// 				ConnectionIps: pulumi.Any(_var.Key_store_type_details_connection_ips),
// 				SecretId:      pulumi.Any(oci_vault_secret.Test_secret.Id),
// 				Type:          pulumi.Any(_var.Key_store_type_details_type),
// 				VaultId:       pulumi.Any(oci_kms_vault.Test_vault.Id),
// 			},
// 			DefinedTags: pulumi.Any(_var.Key_store_defined_tags),
// 			FreeformTags: pulumi.AnyMap{
// 				"Department": pulumi.Any("Finance"),
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// KeyStores can be imported using the `id`, e.g.
//
// ```sh
//  $ pulumi import oci:index/databaseKeyStore:DatabaseKeyStore test_key_store "id"
// ```
type DatabaseKeyStore struct {
	pulumi.CustomResourceState

	// List of databases associated with the key store.
	AssociatedDatabases DatabaseKeyStoreAssociatedDatabaseArrayOutput `pulumi:"associatedDatabases"`
	// (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
	CompartmentId pulumi.StringOutput `pulumi:"compartmentId"`
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
	DefinedTags pulumi.MapOutput `pulumi:"definedTags"`
	// The user-friendly name for the key store. The name does not need to be unique.
	DisplayName pulumi.StringOutput `pulumi:"displayName"`
	// (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Department": "Finance"}`
	FreeformTags pulumi.MapOutput `pulumi:"freeformTags"`
	// Additional information about the current lifecycle state.
	LifecycleDetails pulumi.StringOutput `pulumi:"lifecycleDetails"`
	// The current state of the key store.
	State pulumi.StringOutput `pulumi:"state"`
	// The date and time that the key store was created.
	TimeCreated pulumi.StringOutput `pulumi:"timeCreated"`
	// (Updatable) Key store type details.
	TypeDetails DatabaseKeyStoreTypeDetailsOutput `pulumi:"typeDetails"`
}

// NewDatabaseKeyStore registers a new resource with the given unique name, arguments, and options.
func NewDatabaseKeyStore(ctx *pulumi.Context,
	name string, args *DatabaseKeyStoreArgs, opts ...pulumi.ResourceOption) (*DatabaseKeyStore, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CompartmentId == nil {
		return nil, errors.New("invalid value for required argument 'CompartmentId'")
	}
	if args.DisplayName == nil {
		return nil, errors.New("invalid value for required argument 'DisplayName'")
	}
	if args.TypeDetails == nil {
		return nil, errors.New("invalid value for required argument 'TypeDetails'")
	}
	var resource DatabaseKeyStore
	err := ctx.RegisterResource("oci:index/databaseKeyStore:DatabaseKeyStore", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDatabaseKeyStore gets an existing DatabaseKeyStore resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDatabaseKeyStore(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DatabaseKeyStoreState, opts ...pulumi.ResourceOption) (*DatabaseKeyStore, error) {
	var resource DatabaseKeyStore
	err := ctx.ReadResource("oci:index/databaseKeyStore:DatabaseKeyStore", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DatabaseKeyStore resources.
type databaseKeyStoreState struct {
	// List of databases associated with the key store.
	AssociatedDatabases []DatabaseKeyStoreAssociatedDatabase `pulumi:"associatedDatabases"`
	// (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
	CompartmentId *string `pulumi:"compartmentId"`
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
	DefinedTags map[string]interface{} `pulumi:"definedTags"`
	// The user-friendly name for the key store. The name does not need to be unique.
	DisplayName *string `pulumi:"displayName"`
	// (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Department": "Finance"}`
	FreeformTags map[string]interface{} `pulumi:"freeformTags"`
	// Additional information about the current lifecycle state.
	LifecycleDetails *string `pulumi:"lifecycleDetails"`
	// The current state of the key store.
	State *string `pulumi:"state"`
	// The date and time that the key store was created.
	TimeCreated *string `pulumi:"timeCreated"`
	// (Updatable) Key store type details.
	TypeDetails *DatabaseKeyStoreTypeDetails `pulumi:"typeDetails"`
}

type DatabaseKeyStoreState struct {
	// List of databases associated with the key store.
	AssociatedDatabases DatabaseKeyStoreAssociatedDatabaseArrayInput
	// (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
	CompartmentId pulumi.StringPtrInput
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
	DefinedTags pulumi.MapInput
	// The user-friendly name for the key store. The name does not need to be unique.
	DisplayName pulumi.StringPtrInput
	// (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Department": "Finance"}`
	FreeformTags pulumi.MapInput
	// Additional information about the current lifecycle state.
	LifecycleDetails pulumi.StringPtrInput
	// The current state of the key store.
	State pulumi.StringPtrInput
	// The date and time that the key store was created.
	TimeCreated pulumi.StringPtrInput
	// (Updatable) Key store type details.
	TypeDetails DatabaseKeyStoreTypeDetailsPtrInput
}

func (DatabaseKeyStoreState) ElementType() reflect.Type {
	return reflect.TypeOf((*databaseKeyStoreState)(nil)).Elem()
}

type databaseKeyStoreArgs struct {
	// (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
	CompartmentId string `pulumi:"compartmentId"`
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
	DefinedTags map[string]interface{} `pulumi:"definedTags"`
	// The user-friendly name for the key store. The name does not need to be unique.
	DisplayName string `pulumi:"displayName"`
	// (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Department": "Finance"}`
	FreeformTags map[string]interface{} `pulumi:"freeformTags"`
	// (Updatable) Key store type details.
	TypeDetails DatabaseKeyStoreTypeDetails `pulumi:"typeDetails"`
}

// The set of arguments for constructing a DatabaseKeyStore resource.
type DatabaseKeyStoreArgs struct {
	// (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
	CompartmentId pulumi.StringInput
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
	DefinedTags pulumi.MapInput
	// The user-friendly name for the key store. The name does not need to be unique.
	DisplayName pulumi.StringInput
	// (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Department": "Finance"}`
	FreeformTags pulumi.MapInput
	// (Updatable) Key store type details.
	TypeDetails DatabaseKeyStoreTypeDetailsInput
}

func (DatabaseKeyStoreArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*databaseKeyStoreArgs)(nil)).Elem()
}

type DatabaseKeyStoreInput interface {
	pulumi.Input

	ToDatabaseKeyStoreOutput() DatabaseKeyStoreOutput
	ToDatabaseKeyStoreOutputWithContext(ctx context.Context) DatabaseKeyStoreOutput
}

func (*DatabaseKeyStore) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseKeyStore)(nil))
}

func (i *DatabaseKeyStore) ToDatabaseKeyStoreOutput() DatabaseKeyStoreOutput {
	return i.ToDatabaseKeyStoreOutputWithContext(context.Background())
}

func (i *DatabaseKeyStore) ToDatabaseKeyStoreOutputWithContext(ctx context.Context) DatabaseKeyStoreOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseKeyStoreOutput)
}

func (i *DatabaseKeyStore) ToDatabaseKeyStorePtrOutput() DatabaseKeyStorePtrOutput {
	return i.ToDatabaseKeyStorePtrOutputWithContext(context.Background())
}

func (i *DatabaseKeyStore) ToDatabaseKeyStorePtrOutputWithContext(ctx context.Context) DatabaseKeyStorePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseKeyStorePtrOutput)
}

type DatabaseKeyStorePtrInput interface {
	pulumi.Input

	ToDatabaseKeyStorePtrOutput() DatabaseKeyStorePtrOutput
	ToDatabaseKeyStorePtrOutputWithContext(ctx context.Context) DatabaseKeyStorePtrOutput
}

type databaseKeyStorePtrType DatabaseKeyStoreArgs

func (*databaseKeyStorePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DatabaseKeyStore)(nil))
}

func (i *databaseKeyStorePtrType) ToDatabaseKeyStorePtrOutput() DatabaseKeyStorePtrOutput {
	return i.ToDatabaseKeyStorePtrOutputWithContext(context.Background())
}

func (i *databaseKeyStorePtrType) ToDatabaseKeyStorePtrOutputWithContext(ctx context.Context) DatabaseKeyStorePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseKeyStorePtrOutput)
}

// DatabaseKeyStoreArrayInput is an input type that accepts DatabaseKeyStoreArray and DatabaseKeyStoreArrayOutput values.
// You can construct a concrete instance of `DatabaseKeyStoreArrayInput` via:
//
//          DatabaseKeyStoreArray{ DatabaseKeyStoreArgs{...} }
type DatabaseKeyStoreArrayInput interface {
	pulumi.Input

	ToDatabaseKeyStoreArrayOutput() DatabaseKeyStoreArrayOutput
	ToDatabaseKeyStoreArrayOutputWithContext(context.Context) DatabaseKeyStoreArrayOutput
}

type DatabaseKeyStoreArray []DatabaseKeyStoreInput

func (DatabaseKeyStoreArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DatabaseKeyStore)(nil)).Elem()
}

func (i DatabaseKeyStoreArray) ToDatabaseKeyStoreArrayOutput() DatabaseKeyStoreArrayOutput {
	return i.ToDatabaseKeyStoreArrayOutputWithContext(context.Background())
}

func (i DatabaseKeyStoreArray) ToDatabaseKeyStoreArrayOutputWithContext(ctx context.Context) DatabaseKeyStoreArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseKeyStoreArrayOutput)
}

// DatabaseKeyStoreMapInput is an input type that accepts DatabaseKeyStoreMap and DatabaseKeyStoreMapOutput values.
// You can construct a concrete instance of `DatabaseKeyStoreMapInput` via:
//
//          DatabaseKeyStoreMap{ "key": DatabaseKeyStoreArgs{...} }
type DatabaseKeyStoreMapInput interface {
	pulumi.Input

	ToDatabaseKeyStoreMapOutput() DatabaseKeyStoreMapOutput
	ToDatabaseKeyStoreMapOutputWithContext(context.Context) DatabaseKeyStoreMapOutput
}

type DatabaseKeyStoreMap map[string]DatabaseKeyStoreInput

func (DatabaseKeyStoreMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DatabaseKeyStore)(nil)).Elem()
}

func (i DatabaseKeyStoreMap) ToDatabaseKeyStoreMapOutput() DatabaseKeyStoreMapOutput {
	return i.ToDatabaseKeyStoreMapOutputWithContext(context.Background())
}

func (i DatabaseKeyStoreMap) ToDatabaseKeyStoreMapOutputWithContext(ctx context.Context) DatabaseKeyStoreMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseKeyStoreMapOutput)
}

type DatabaseKeyStoreOutput struct {
	*pulumi.OutputState
}

func (DatabaseKeyStoreOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseKeyStore)(nil))
}

func (o DatabaseKeyStoreOutput) ToDatabaseKeyStoreOutput() DatabaseKeyStoreOutput {
	return o
}

func (o DatabaseKeyStoreOutput) ToDatabaseKeyStoreOutputWithContext(ctx context.Context) DatabaseKeyStoreOutput {
	return o
}

func (o DatabaseKeyStoreOutput) ToDatabaseKeyStorePtrOutput() DatabaseKeyStorePtrOutput {
	return o.ToDatabaseKeyStorePtrOutputWithContext(context.Background())
}

func (o DatabaseKeyStoreOutput) ToDatabaseKeyStorePtrOutputWithContext(ctx context.Context) DatabaseKeyStorePtrOutput {
	return o.ApplyT(func(v DatabaseKeyStore) *DatabaseKeyStore {
		return &v
	}).(DatabaseKeyStorePtrOutput)
}

type DatabaseKeyStorePtrOutput struct {
	*pulumi.OutputState
}

func (DatabaseKeyStorePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DatabaseKeyStore)(nil))
}

func (o DatabaseKeyStorePtrOutput) ToDatabaseKeyStorePtrOutput() DatabaseKeyStorePtrOutput {
	return o
}

func (o DatabaseKeyStorePtrOutput) ToDatabaseKeyStorePtrOutputWithContext(ctx context.Context) DatabaseKeyStorePtrOutput {
	return o
}

type DatabaseKeyStoreArrayOutput struct{ *pulumi.OutputState }

func (DatabaseKeyStoreArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DatabaseKeyStore)(nil))
}

func (o DatabaseKeyStoreArrayOutput) ToDatabaseKeyStoreArrayOutput() DatabaseKeyStoreArrayOutput {
	return o
}

func (o DatabaseKeyStoreArrayOutput) ToDatabaseKeyStoreArrayOutputWithContext(ctx context.Context) DatabaseKeyStoreArrayOutput {
	return o
}

func (o DatabaseKeyStoreArrayOutput) Index(i pulumi.IntInput) DatabaseKeyStoreOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DatabaseKeyStore {
		return vs[0].([]DatabaseKeyStore)[vs[1].(int)]
	}).(DatabaseKeyStoreOutput)
}

type DatabaseKeyStoreMapOutput struct{ *pulumi.OutputState }

func (DatabaseKeyStoreMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]DatabaseKeyStore)(nil))
}

func (o DatabaseKeyStoreMapOutput) ToDatabaseKeyStoreMapOutput() DatabaseKeyStoreMapOutput {
	return o
}

func (o DatabaseKeyStoreMapOutput) ToDatabaseKeyStoreMapOutputWithContext(ctx context.Context) DatabaseKeyStoreMapOutput {
	return o
}

func (o DatabaseKeyStoreMapOutput) MapIndex(k pulumi.StringInput) DatabaseKeyStoreOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) DatabaseKeyStore {
		return vs[0].(map[string]DatabaseKeyStore)[vs[1].(string)]
	}).(DatabaseKeyStoreOutput)
}

func init() {
	pulumi.RegisterOutputType(DatabaseKeyStoreOutput{})
	pulumi.RegisterOutputType(DatabaseKeyStorePtrOutput{})
	pulumi.RegisterOutputType(DatabaseKeyStoreArrayOutput{})
	pulumi.RegisterOutputType(DatabaseKeyStoreMapOutput{})
}
