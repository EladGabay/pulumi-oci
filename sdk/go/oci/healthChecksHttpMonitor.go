// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package oci

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource provides the Http Monitor resource in Oracle Cloud Infrastructure Health Checks service.
//
// Creates an HTTP monitor. Vantage points will be automatically selected if not specified,
// and probes will be initiated from each vantage point to each of the targets at the frequency
// specified by `intervalInSeconds`.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-oci/sdk/go/oci"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := oci.NewHealthChecksHttpMonitor(ctx, "testHttpMonitor", &oci.HealthChecksHttpMonitorArgs{
// 			CompartmentId:     pulumi.Any(_var.Compartment_id),
// 			DisplayName:       pulumi.Any(_var.Http_monitor_display_name),
// 			IntervalInSeconds: pulumi.Any(_var.Http_monitor_interval_in_seconds),
// 			Protocol:          pulumi.Any(_var.Http_monitor_protocol),
// 			Targets:           pulumi.Any(_var.Http_monitor_targets),
// 			DefinedTags: pulumi.AnyMap{
// 				"Operations.CostCenter": pulumi.Any("42"),
// 			},
// 			FreeformTags: pulumi.AnyMap{
// 				"Department": pulumi.Any("Finance"),
// 			},
// 			Headers:           pulumi.Any(_var.Http_monitor_headers),
// 			IsEnabled:         pulumi.Any(_var.Http_monitor_is_enabled),
// 			Method:            pulumi.Any(_var.Http_monitor_method),
// 			Path:              pulumi.Any(_var.Http_monitor_path),
// 			Port:              pulumi.Any(_var.Http_monitor_port),
// 			TimeoutInSeconds:  pulumi.Any(_var.Http_monitor_timeout_in_seconds),
// 			VantagePointNames: pulumi.Any(_var.Http_monitor_vantage_point_names),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// HttpMonitors can be imported using the `id`, e.g.
//
// ```sh
//  $ pulumi import oci:index/healthChecksHttpMonitor:HealthChecksHttpMonitor test_http_monitor "id"
// ```
type HealthChecksHttpMonitor struct {
	pulumi.CustomResourceState

	// (Updatable) The OCID of the compartment.
	CompartmentId pulumi.StringOutput `pulumi:"compartmentId"`
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Operations.CostCenter": "42"}`
	DefinedTags pulumi.MapOutput `pulumi:"definedTags"`
	// (Updatable) A user-friendly and mutable name suitable for display in a user interface.
	DisplayName pulumi.StringOutput `pulumi:"displayName"`
	// (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace.  For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Department": "Finance"}`
	FreeformTags pulumi.MapOutput `pulumi:"freeformTags"`
	// (Updatable) A dictionary of HTTP request headers.
	Headers pulumi.MapOutput `pulumi:"headers"`
	// The region where updates must be made and where results must be fetched from.
	HomeRegion pulumi.StringOutput `pulumi:"homeRegion"`
	// (Updatable) The monitor interval in seconds. Valid values: 10, 30, and 60.
	IntervalInSeconds pulumi.IntOutput `pulumi:"intervalInSeconds"`
	// (Updatable) Enables or disables the monitor. Set to 'true' to launch monitoring.
	IsEnabled pulumi.BoolOutput `pulumi:"isEnabled"`
	// (Updatable) The supported HTTP methods available for probes.
	Method pulumi.StringOutput `pulumi:"method"`
	// (Updatable) The optional URL path to probe, including query parameters.
	Path pulumi.StringOutput `pulumi:"path"`
	// (Updatable) The port on which to probe endpoints. If unspecified, probes will use the default port of their protocol.
	Port pulumi.IntOutput `pulumi:"port"`
	// (Updatable) The supported protocols available for HTTP probes.
	Protocol pulumi.StringOutput `pulumi:"protocol"`
	// A URL for fetching the probe results.
	ResultsUrl pulumi.StringOutput `pulumi:"resultsUrl"`
	// (Updatable) A list of targets (hostnames or IP addresses) of the probe.
	Targets pulumi.StringArrayOutput `pulumi:"targets"`
	// The RFC 3339-formatted creation date and time of the probe.
	TimeCreated pulumi.StringOutput `pulumi:"timeCreated"`
	// (Updatable) The probe timeout in seconds. Valid values: 10, 20, 30, and 60. The probe timeout must be less than or equal to `intervalInSeconds` for monitors.
	TimeoutInSeconds pulumi.IntOutput `pulumi:"timeoutInSeconds"`
	// (Updatable) A list of names of vantage points from which to execute the probe.
	VantagePointNames pulumi.StringArrayOutput `pulumi:"vantagePointNames"`
}

// NewHealthChecksHttpMonitor registers a new resource with the given unique name, arguments, and options.
func NewHealthChecksHttpMonitor(ctx *pulumi.Context,
	name string, args *HealthChecksHttpMonitorArgs, opts ...pulumi.ResourceOption) (*HealthChecksHttpMonitor, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CompartmentId == nil {
		return nil, errors.New("invalid value for required argument 'CompartmentId'")
	}
	if args.DisplayName == nil {
		return nil, errors.New("invalid value for required argument 'DisplayName'")
	}
	if args.IntervalInSeconds == nil {
		return nil, errors.New("invalid value for required argument 'IntervalInSeconds'")
	}
	if args.Protocol == nil {
		return nil, errors.New("invalid value for required argument 'Protocol'")
	}
	if args.Targets == nil {
		return nil, errors.New("invalid value for required argument 'Targets'")
	}
	var resource HealthChecksHttpMonitor
	err := ctx.RegisterResource("oci:index/healthChecksHttpMonitor:HealthChecksHttpMonitor", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetHealthChecksHttpMonitor gets an existing HealthChecksHttpMonitor resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetHealthChecksHttpMonitor(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *HealthChecksHttpMonitorState, opts ...pulumi.ResourceOption) (*HealthChecksHttpMonitor, error) {
	var resource HealthChecksHttpMonitor
	err := ctx.ReadResource("oci:index/healthChecksHttpMonitor:HealthChecksHttpMonitor", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering HealthChecksHttpMonitor resources.
type healthChecksHttpMonitorState struct {
	// (Updatable) The OCID of the compartment.
	CompartmentId *string `pulumi:"compartmentId"`
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Operations.CostCenter": "42"}`
	DefinedTags map[string]interface{} `pulumi:"definedTags"`
	// (Updatable) A user-friendly and mutable name suitable for display in a user interface.
	DisplayName *string `pulumi:"displayName"`
	// (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace.  For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Department": "Finance"}`
	FreeformTags map[string]interface{} `pulumi:"freeformTags"`
	// (Updatable) A dictionary of HTTP request headers.
	Headers map[string]interface{} `pulumi:"headers"`
	// The region where updates must be made and where results must be fetched from.
	HomeRegion *string `pulumi:"homeRegion"`
	// (Updatable) The monitor interval in seconds. Valid values: 10, 30, and 60.
	IntervalInSeconds *int `pulumi:"intervalInSeconds"`
	// (Updatable) Enables or disables the monitor. Set to 'true' to launch monitoring.
	IsEnabled *bool `pulumi:"isEnabled"`
	// (Updatable) The supported HTTP methods available for probes.
	Method *string `pulumi:"method"`
	// (Updatable) The optional URL path to probe, including query parameters.
	Path *string `pulumi:"path"`
	// (Updatable) The port on which to probe endpoints. If unspecified, probes will use the default port of their protocol.
	Port *int `pulumi:"port"`
	// (Updatable) The supported protocols available for HTTP probes.
	Protocol *string `pulumi:"protocol"`
	// A URL for fetching the probe results.
	ResultsUrl *string `pulumi:"resultsUrl"`
	// (Updatable) A list of targets (hostnames or IP addresses) of the probe.
	Targets []string `pulumi:"targets"`
	// The RFC 3339-formatted creation date and time of the probe.
	TimeCreated *string `pulumi:"timeCreated"`
	// (Updatable) The probe timeout in seconds. Valid values: 10, 20, 30, and 60. The probe timeout must be less than or equal to `intervalInSeconds` for monitors.
	TimeoutInSeconds *int `pulumi:"timeoutInSeconds"`
	// (Updatable) A list of names of vantage points from which to execute the probe.
	VantagePointNames []string `pulumi:"vantagePointNames"`
}

type HealthChecksHttpMonitorState struct {
	// (Updatable) The OCID of the compartment.
	CompartmentId pulumi.StringPtrInput
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Operations.CostCenter": "42"}`
	DefinedTags pulumi.MapInput
	// (Updatable) A user-friendly and mutable name suitable for display in a user interface.
	DisplayName pulumi.StringPtrInput
	// (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace.  For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Department": "Finance"}`
	FreeformTags pulumi.MapInput
	// (Updatable) A dictionary of HTTP request headers.
	Headers pulumi.MapInput
	// The region where updates must be made and where results must be fetched from.
	HomeRegion pulumi.StringPtrInput
	// (Updatable) The monitor interval in seconds. Valid values: 10, 30, and 60.
	IntervalInSeconds pulumi.IntPtrInput
	// (Updatable) Enables or disables the monitor. Set to 'true' to launch monitoring.
	IsEnabled pulumi.BoolPtrInput
	// (Updatable) The supported HTTP methods available for probes.
	Method pulumi.StringPtrInput
	// (Updatable) The optional URL path to probe, including query parameters.
	Path pulumi.StringPtrInput
	// (Updatable) The port on which to probe endpoints. If unspecified, probes will use the default port of their protocol.
	Port pulumi.IntPtrInput
	// (Updatable) The supported protocols available for HTTP probes.
	Protocol pulumi.StringPtrInput
	// A URL for fetching the probe results.
	ResultsUrl pulumi.StringPtrInput
	// (Updatable) A list of targets (hostnames or IP addresses) of the probe.
	Targets pulumi.StringArrayInput
	// The RFC 3339-formatted creation date and time of the probe.
	TimeCreated pulumi.StringPtrInput
	// (Updatable) The probe timeout in seconds. Valid values: 10, 20, 30, and 60. The probe timeout must be less than or equal to `intervalInSeconds` for monitors.
	TimeoutInSeconds pulumi.IntPtrInput
	// (Updatable) A list of names of vantage points from which to execute the probe.
	VantagePointNames pulumi.StringArrayInput
}

func (HealthChecksHttpMonitorState) ElementType() reflect.Type {
	return reflect.TypeOf((*healthChecksHttpMonitorState)(nil)).Elem()
}

type healthChecksHttpMonitorArgs struct {
	// (Updatable) The OCID of the compartment.
	CompartmentId string `pulumi:"compartmentId"`
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Operations.CostCenter": "42"}`
	DefinedTags map[string]interface{} `pulumi:"definedTags"`
	// (Updatable) A user-friendly and mutable name suitable for display in a user interface.
	DisplayName string `pulumi:"displayName"`
	// (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace.  For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Department": "Finance"}`
	FreeformTags map[string]interface{} `pulumi:"freeformTags"`
	// (Updatable) A dictionary of HTTP request headers.
	Headers map[string]interface{} `pulumi:"headers"`
	// (Updatable) The monitor interval in seconds. Valid values: 10, 30, and 60.
	IntervalInSeconds int `pulumi:"intervalInSeconds"`
	// (Updatable) Enables or disables the monitor. Set to 'true' to launch monitoring.
	IsEnabled *bool `pulumi:"isEnabled"`
	// (Updatable) The supported HTTP methods available for probes.
	Method *string `pulumi:"method"`
	// (Updatable) The optional URL path to probe, including query parameters.
	Path *string `pulumi:"path"`
	// (Updatable) The port on which to probe endpoints. If unspecified, probes will use the default port of their protocol.
	Port *int `pulumi:"port"`
	// (Updatable) The supported protocols available for HTTP probes.
	Protocol string `pulumi:"protocol"`
	// (Updatable) A list of targets (hostnames or IP addresses) of the probe.
	Targets []string `pulumi:"targets"`
	// (Updatable) The probe timeout in seconds. Valid values: 10, 20, 30, and 60. The probe timeout must be less than or equal to `intervalInSeconds` for monitors.
	TimeoutInSeconds *int `pulumi:"timeoutInSeconds"`
	// (Updatable) A list of names of vantage points from which to execute the probe.
	VantagePointNames []string `pulumi:"vantagePointNames"`
}

// The set of arguments for constructing a HealthChecksHttpMonitor resource.
type HealthChecksHttpMonitorArgs struct {
	// (Updatable) The OCID of the compartment.
	CompartmentId pulumi.StringInput
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Operations.CostCenter": "42"}`
	DefinedTags pulumi.MapInput
	// (Updatable) A user-friendly and mutable name suitable for display in a user interface.
	DisplayName pulumi.StringInput
	// (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace.  For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Department": "Finance"}`
	FreeformTags pulumi.MapInput
	// (Updatable) A dictionary of HTTP request headers.
	Headers pulumi.MapInput
	// (Updatable) The monitor interval in seconds. Valid values: 10, 30, and 60.
	IntervalInSeconds pulumi.IntInput
	// (Updatable) Enables or disables the monitor. Set to 'true' to launch monitoring.
	IsEnabled pulumi.BoolPtrInput
	// (Updatable) The supported HTTP methods available for probes.
	Method pulumi.StringPtrInput
	// (Updatable) The optional URL path to probe, including query parameters.
	Path pulumi.StringPtrInput
	// (Updatable) The port on which to probe endpoints. If unspecified, probes will use the default port of their protocol.
	Port pulumi.IntPtrInput
	// (Updatable) The supported protocols available for HTTP probes.
	Protocol pulumi.StringInput
	// (Updatable) A list of targets (hostnames or IP addresses) of the probe.
	Targets pulumi.StringArrayInput
	// (Updatable) The probe timeout in seconds. Valid values: 10, 20, 30, and 60. The probe timeout must be less than or equal to `intervalInSeconds` for monitors.
	TimeoutInSeconds pulumi.IntPtrInput
	// (Updatable) A list of names of vantage points from which to execute the probe.
	VantagePointNames pulumi.StringArrayInput
}

func (HealthChecksHttpMonitorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*healthChecksHttpMonitorArgs)(nil)).Elem()
}

type HealthChecksHttpMonitorInput interface {
	pulumi.Input

	ToHealthChecksHttpMonitorOutput() HealthChecksHttpMonitorOutput
	ToHealthChecksHttpMonitorOutputWithContext(ctx context.Context) HealthChecksHttpMonitorOutput
}

func (*HealthChecksHttpMonitor) ElementType() reflect.Type {
	return reflect.TypeOf((*HealthChecksHttpMonitor)(nil))
}

func (i *HealthChecksHttpMonitor) ToHealthChecksHttpMonitorOutput() HealthChecksHttpMonitorOutput {
	return i.ToHealthChecksHttpMonitorOutputWithContext(context.Background())
}

func (i *HealthChecksHttpMonitor) ToHealthChecksHttpMonitorOutputWithContext(ctx context.Context) HealthChecksHttpMonitorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HealthChecksHttpMonitorOutput)
}

func (i *HealthChecksHttpMonitor) ToHealthChecksHttpMonitorPtrOutput() HealthChecksHttpMonitorPtrOutput {
	return i.ToHealthChecksHttpMonitorPtrOutputWithContext(context.Background())
}

func (i *HealthChecksHttpMonitor) ToHealthChecksHttpMonitorPtrOutputWithContext(ctx context.Context) HealthChecksHttpMonitorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HealthChecksHttpMonitorPtrOutput)
}

type HealthChecksHttpMonitorPtrInput interface {
	pulumi.Input

	ToHealthChecksHttpMonitorPtrOutput() HealthChecksHttpMonitorPtrOutput
	ToHealthChecksHttpMonitorPtrOutputWithContext(ctx context.Context) HealthChecksHttpMonitorPtrOutput
}

type healthChecksHttpMonitorPtrType HealthChecksHttpMonitorArgs

func (*healthChecksHttpMonitorPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**HealthChecksHttpMonitor)(nil))
}

func (i *healthChecksHttpMonitorPtrType) ToHealthChecksHttpMonitorPtrOutput() HealthChecksHttpMonitorPtrOutput {
	return i.ToHealthChecksHttpMonitorPtrOutputWithContext(context.Background())
}

func (i *healthChecksHttpMonitorPtrType) ToHealthChecksHttpMonitorPtrOutputWithContext(ctx context.Context) HealthChecksHttpMonitorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HealthChecksHttpMonitorPtrOutput)
}

// HealthChecksHttpMonitorArrayInput is an input type that accepts HealthChecksHttpMonitorArray and HealthChecksHttpMonitorArrayOutput values.
// You can construct a concrete instance of `HealthChecksHttpMonitorArrayInput` via:
//
//          HealthChecksHttpMonitorArray{ HealthChecksHttpMonitorArgs{...} }
type HealthChecksHttpMonitorArrayInput interface {
	pulumi.Input

	ToHealthChecksHttpMonitorArrayOutput() HealthChecksHttpMonitorArrayOutput
	ToHealthChecksHttpMonitorArrayOutputWithContext(context.Context) HealthChecksHttpMonitorArrayOutput
}

type HealthChecksHttpMonitorArray []HealthChecksHttpMonitorInput

func (HealthChecksHttpMonitorArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*HealthChecksHttpMonitor)(nil)).Elem()
}

func (i HealthChecksHttpMonitorArray) ToHealthChecksHttpMonitorArrayOutput() HealthChecksHttpMonitorArrayOutput {
	return i.ToHealthChecksHttpMonitorArrayOutputWithContext(context.Background())
}

func (i HealthChecksHttpMonitorArray) ToHealthChecksHttpMonitorArrayOutputWithContext(ctx context.Context) HealthChecksHttpMonitorArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HealthChecksHttpMonitorArrayOutput)
}

// HealthChecksHttpMonitorMapInput is an input type that accepts HealthChecksHttpMonitorMap and HealthChecksHttpMonitorMapOutput values.
// You can construct a concrete instance of `HealthChecksHttpMonitorMapInput` via:
//
//          HealthChecksHttpMonitorMap{ "key": HealthChecksHttpMonitorArgs{...} }
type HealthChecksHttpMonitorMapInput interface {
	pulumi.Input

	ToHealthChecksHttpMonitorMapOutput() HealthChecksHttpMonitorMapOutput
	ToHealthChecksHttpMonitorMapOutputWithContext(context.Context) HealthChecksHttpMonitorMapOutput
}

type HealthChecksHttpMonitorMap map[string]HealthChecksHttpMonitorInput

func (HealthChecksHttpMonitorMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*HealthChecksHttpMonitor)(nil)).Elem()
}

func (i HealthChecksHttpMonitorMap) ToHealthChecksHttpMonitorMapOutput() HealthChecksHttpMonitorMapOutput {
	return i.ToHealthChecksHttpMonitorMapOutputWithContext(context.Background())
}

func (i HealthChecksHttpMonitorMap) ToHealthChecksHttpMonitorMapOutputWithContext(ctx context.Context) HealthChecksHttpMonitorMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(HealthChecksHttpMonitorMapOutput)
}

type HealthChecksHttpMonitorOutput struct {
	*pulumi.OutputState
}

func (HealthChecksHttpMonitorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*HealthChecksHttpMonitor)(nil))
}

func (o HealthChecksHttpMonitorOutput) ToHealthChecksHttpMonitorOutput() HealthChecksHttpMonitorOutput {
	return o
}

func (o HealthChecksHttpMonitorOutput) ToHealthChecksHttpMonitorOutputWithContext(ctx context.Context) HealthChecksHttpMonitorOutput {
	return o
}

func (o HealthChecksHttpMonitorOutput) ToHealthChecksHttpMonitorPtrOutput() HealthChecksHttpMonitorPtrOutput {
	return o.ToHealthChecksHttpMonitorPtrOutputWithContext(context.Background())
}

func (o HealthChecksHttpMonitorOutput) ToHealthChecksHttpMonitorPtrOutputWithContext(ctx context.Context) HealthChecksHttpMonitorPtrOutput {
	return o.ApplyT(func(v HealthChecksHttpMonitor) *HealthChecksHttpMonitor {
		return &v
	}).(HealthChecksHttpMonitorPtrOutput)
}

type HealthChecksHttpMonitorPtrOutput struct {
	*pulumi.OutputState
}

func (HealthChecksHttpMonitorPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**HealthChecksHttpMonitor)(nil))
}

func (o HealthChecksHttpMonitorPtrOutput) ToHealthChecksHttpMonitorPtrOutput() HealthChecksHttpMonitorPtrOutput {
	return o
}

func (o HealthChecksHttpMonitorPtrOutput) ToHealthChecksHttpMonitorPtrOutputWithContext(ctx context.Context) HealthChecksHttpMonitorPtrOutput {
	return o
}

type HealthChecksHttpMonitorArrayOutput struct{ *pulumi.OutputState }

func (HealthChecksHttpMonitorArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]HealthChecksHttpMonitor)(nil))
}

func (o HealthChecksHttpMonitorArrayOutput) ToHealthChecksHttpMonitorArrayOutput() HealthChecksHttpMonitorArrayOutput {
	return o
}

func (o HealthChecksHttpMonitorArrayOutput) ToHealthChecksHttpMonitorArrayOutputWithContext(ctx context.Context) HealthChecksHttpMonitorArrayOutput {
	return o
}

func (o HealthChecksHttpMonitorArrayOutput) Index(i pulumi.IntInput) HealthChecksHttpMonitorOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) HealthChecksHttpMonitor {
		return vs[0].([]HealthChecksHttpMonitor)[vs[1].(int)]
	}).(HealthChecksHttpMonitorOutput)
}

type HealthChecksHttpMonitorMapOutput struct{ *pulumi.OutputState }

func (HealthChecksHttpMonitorMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]HealthChecksHttpMonitor)(nil))
}

func (o HealthChecksHttpMonitorMapOutput) ToHealthChecksHttpMonitorMapOutput() HealthChecksHttpMonitorMapOutput {
	return o
}

func (o HealthChecksHttpMonitorMapOutput) ToHealthChecksHttpMonitorMapOutputWithContext(ctx context.Context) HealthChecksHttpMonitorMapOutput {
	return o
}

func (o HealthChecksHttpMonitorMapOutput) MapIndex(k pulumi.StringInput) HealthChecksHttpMonitorOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) HealthChecksHttpMonitor {
		return vs[0].(map[string]HealthChecksHttpMonitor)[vs[1].(string)]
	}).(HealthChecksHttpMonitorOutput)
}

func init() {
	pulumi.RegisterOutputType(HealthChecksHttpMonitorOutput{})
	pulumi.RegisterOutputType(HealthChecksHttpMonitorPtrOutput{})
	pulumi.RegisterOutputType(HealthChecksHttpMonitorArrayOutput{})
	pulumi.RegisterOutputType(HealthChecksHttpMonitorMapOutput{})
}
