// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package oci

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource provides the Backup resource in Oracle Cloud Infrastructure Database service.
//
// Creates a new backup in the specified database based on the request parameters you provide. If you previously used RMAN or dbcli to configure backups and then you switch to using the Console or the API for backups, a new backup configuration is created and associated with your database. This means that you can no longer rely on your previously configured unmanaged backups to work.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-oci/sdk/go/oci"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := oci.NewDatabaseBackup(ctx, "testBackup", &oci.DatabaseBackupArgs{
// 			DatabaseId:  pulumi.Any(oci_database_database.Test_database.Id),
// 			DisplayName: pulumi.Any(_var.Backup_display_name),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// Backups can be imported using the `id`, e.g.
//
// ```sh
//  $ pulumi import oci:index/databaseBackup:DatabaseBackup test_backup "id"
// ```
type DatabaseBackup struct {
	pulumi.CustomResourceState

	// The name of the availability domain where the database backup is stored.
	AvailabilityDomain pulumi.StringOutput `pulumi:"availabilityDomain"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
	CompartmentId pulumi.StringOutput `pulumi:"compartmentId"`
	// The Oracle Database edition of the DB system from which the database backup was taken.
	DatabaseEdition pulumi.StringOutput `pulumi:"databaseEdition"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the database.
	DatabaseId pulumi.StringOutput `pulumi:"databaseId"`
	// The size of the database in gigabytes at the time the backup was taken.
	DatabaseSizeInGbs pulumi.Float64Output `pulumi:"databaseSizeInGbs"`
	// The user-friendly name for the backup. The name does not have to be unique.
	DisplayName pulumi.StringOutput `pulumi:"displayName"`
	// The OCID of the key container that is used as the master encryption key in database transparent data encryption (TDE) operations.
	KmsKeyId pulumi.StringOutput `pulumi:"kmsKeyId"`
	// Additional information about the current lifecycle state.
	LifecycleDetails pulumi.StringOutput `pulumi:"lifecycleDetails"`
	// Shape of the backup's source database.
	Shape pulumi.StringOutput `pulumi:"shape"`
	// The current state of the backup.
	State pulumi.StringOutput `pulumi:"state"`
	// The date and time the backup was completed.
	TimeEnded pulumi.StringOutput `pulumi:"timeEnded"`
	// The date and time the backup started.
	TimeStarted pulumi.StringOutput `pulumi:"timeStarted"`
	// The type of backup.
	Type pulumi.StringOutput `pulumi:"type"`
	// Version of the backup's source database
	Version pulumi.StringOutput `pulumi:"version"`
}

// NewDatabaseBackup registers a new resource with the given unique name, arguments, and options.
func NewDatabaseBackup(ctx *pulumi.Context,
	name string, args *DatabaseBackupArgs, opts ...pulumi.ResourceOption) (*DatabaseBackup, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DatabaseId == nil {
		return nil, errors.New("invalid value for required argument 'DatabaseId'")
	}
	if args.DisplayName == nil {
		return nil, errors.New("invalid value for required argument 'DisplayName'")
	}
	var resource DatabaseBackup
	err := ctx.RegisterResource("oci:index/databaseBackup:DatabaseBackup", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDatabaseBackup gets an existing DatabaseBackup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDatabaseBackup(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DatabaseBackupState, opts ...pulumi.ResourceOption) (*DatabaseBackup, error) {
	var resource DatabaseBackup
	err := ctx.ReadResource("oci:index/databaseBackup:DatabaseBackup", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DatabaseBackup resources.
type databaseBackupState struct {
	// The name of the availability domain where the database backup is stored.
	AvailabilityDomain *string `pulumi:"availabilityDomain"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
	CompartmentId *string `pulumi:"compartmentId"`
	// The Oracle Database edition of the DB system from which the database backup was taken.
	DatabaseEdition *string `pulumi:"databaseEdition"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the database.
	DatabaseId *string `pulumi:"databaseId"`
	// The size of the database in gigabytes at the time the backup was taken.
	DatabaseSizeInGbs *float64 `pulumi:"databaseSizeInGbs"`
	// The user-friendly name for the backup. The name does not have to be unique.
	DisplayName *string `pulumi:"displayName"`
	// The OCID of the key container that is used as the master encryption key in database transparent data encryption (TDE) operations.
	KmsKeyId *string `pulumi:"kmsKeyId"`
	// Additional information about the current lifecycle state.
	LifecycleDetails *string `pulumi:"lifecycleDetails"`
	// Shape of the backup's source database.
	Shape *string `pulumi:"shape"`
	// The current state of the backup.
	State *string `pulumi:"state"`
	// The date and time the backup was completed.
	TimeEnded *string `pulumi:"timeEnded"`
	// The date and time the backup started.
	TimeStarted *string `pulumi:"timeStarted"`
	// The type of backup.
	Type *string `pulumi:"type"`
	// Version of the backup's source database
	Version *string `pulumi:"version"`
}

type DatabaseBackupState struct {
	// The name of the availability domain where the database backup is stored.
	AvailabilityDomain pulumi.StringPtrInput
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
	CompartmentId pulumi.StringPtrInput
	// The Oracle Database edition of the DB system from which the database backup was taken.
	DatabaseEdition pulumi.StringPtrInput
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the database.
	DatabaseId pulumi.StringPtrInput
	// The size of the database in gigabytes at the time the backup was taken.
	DatabaseSizeInGbs pulumi.Float64PtrInput
	// The user-friendly name for the backup. The name does not have to be unique.
	DisplayName pulumi.StringPtrInput
	// The OCID of the key container that is used as the master encryption key in database transparent data encryption (TDE) operations.
	KmsKeyId pulumi.StringPtrInput
	// Additional information about the current lifecycle state.
	LifecycleDetails pulumi.StringPtrInput
	// Shape of the backup's source database.
	Shape pulumi.StringPtrInput
	// The current state of the backup.
	State pulumi.StringPtrInput
	// The date and time the backup was completed.
	TimeEnded pulumi.StringPtrInput
	// The date and time the backup started.
	TimeStarted pulumi.StringPtrInput
	// The type of backup.
	Type pulumi.StringPtrInput
	// Version of the backup's source database
	Version pulumi.StringPtrInput
}

func (DatabaseBackupState) ElementType() reflect.Type {
	return reflect.TypeOf((*databaseBackupState)(nil)).Elem()
}

type databaseBackupArgs struct {
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the database.
	DatabaseId string `pulumi:"databaseId"`
	// The user-friendly name for the backup. The name does not have to be unique.
	DisplayName string `pulumi:"displayName"`
}

// The set of arguments for constructing a DatabaseBackup resource.
type DatabaseBackupArgs struct {
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the database.
	DatabaseId pulumi.StringInput
	// The user-friendly name for the backup. The name does not have to be unique.
	DisplayName pulumi.StringInput
}

func (DatabaseBackupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*databaseBackupArgs)(nil)).Elem()
}

type DatabaseBackupInput interface {
	pulumi.Input

	ToDatabaseBackupOutput() DatabaseBackupOutput
	ToDatabaseBackupOutputWithContext(ctx context.Context) DatabaseBackupOutput
}

func (*DatabaseBackup) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseBackup)(nil))
}

func (i *DatabaseBackup) ToDatabaseBackupOutput() DatabaseBackupOutput {
	return i.ToDatabaseBackupOutputWithContext(context.Background())
}

func (i *DatabaseBackup) ToDatabaseBackupOutputWithContext(ctx context.Context) DatabaseBackupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseBackupOutput)
}

func (i *DatabaseBackup) ToDatabaseBackupPtrOutput() DatabaseBackupPtrOutput {
	return i.ToDatabaseBackupPtrOutputWithContext(context.Background())
}

func (i *DatabaseBackup) ToDatabaseBackupPtrOutputWithContext(ctx context.Context) DatabaseBackupPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseBackupPtrOutput)
}

type DatabaseBackupPtrInput interface {
	pulumi.Input

	ToDatabaseBackupPtrOutput() DatabaseBackupPtrOutput
	ToDatabaseBackupPtrOutputWithContext(ctx context.Context) DatabaseBackupPtrOutput
}

type databaseBackupPtrType DatabaseBackupArgs

func (*databaseBackupPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DatabaseBackup)(nil))
}

func (i *databaseBackupPtrType) ToDatabaseBackupPtrOutput() DatabaseBackupPtrOutput {
	return i.ToDatabaseBackupPtrOutputWithContext(context.Background())
}

func (i *databaseBackupPtrType) ToDatabaseBackupPtrOutputWithContext(ctx context.Context) DatabaseBackupPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseBackupPtrOutput)
}

// DatabaseBackupArrayInput is an input type that accepts DatabaseBackupArray and DatabaseBackupArrayOutput values.
// You can construct a concrete instance of `DatabaseBackupArrayInput` via:
//
//          DatabaseBackupArray{ DatabaseBackupArgs{...} }
type DatabaseBackupArrayInput interface {
	pulumi.Input

	ToDatabaseBackupArrayOutput() DatabaseBackupArrayOutput
	ToDatabaseBackupArrayOutputWithContext(context.Context) DatabaseBackupArrayOutput
}

type DatabaseBackupArray []DatabaseBackupInput

func (DatabaseBackupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DatabaseBackup)(nil)).Elem()
}

func (i DatabaseBackupArray) ToDatabaseBackupArrayOutput() DatabaseBackupArrayOutput {
	return i.ToDatabaseBackupArrayOutputWithContext(context.Background())
}

func (i DatabaseBackupArray) ToDatabaseBackupArrayOutputWithContext(ctx context.Context) DatabaseBackupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseBackupArrayOutput)
}

// DatabaseBackupMapInput is an input type that accepts DatabaseBackupMap and DatabaseBackupMapOutput values.
// You can construct a concrete instance of `DatabaseBackupMapInput` via:
//
//          DatabaseBackupMap{ "key": DatabaseBackupArgs{...} }
type DatabaseBackupMapInput interface {
	pulumi.Input

	ToDatabaseBackupMapOutput() DatabaseBackupMapOutput
	ToDatabaseBackupMapOutputWithContext(context.Context) DatabaseBackupMapOutput
}

type DatabaseBackupMap map[string]DatabaseBackupInput

func (DatabaseBackupMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DatabaseBackup)(nil)).Elem()
}

func (i DatabaseBackupMap) ToDatabaseBackupMapOutput() DatabaseBackupMapOutput {
	return i.ToDatabaseBackupMapOutputWithContext(context.Background())
}

func (i DatabaseBackupMap) ToDatabaseBackupMapOutputWithContext(ctx context.Context) DatabaseBackupMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseBackupMapOutput)
}

type DatabaseBackupOutput struct {
	*pulumi.OutputState
}

func (DatabaseBackupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseBackup)(nil))
}

func (o DatabaseBackupOutput) ToDatabaseBackupOutput() DatabaseBackupOutput {
	return o
}

func (o DatabaseBackupOutput) ToDatabaseBackupOutputWithContext(ctx context.Context) DatabaseBackupOutput {
	return o
}

func (o DatabaseBackupOutput) ToDatabaseBackupPtrOutput() DatabaseBackupPtrOutput {
	return o.ToDatabaseBackupPtrOutputWithContext(context.Background())
}

func (o DatabaseBackupOutput) ToDatabaseBackupPtrOutputWithContext(ctx context.Context) DatabaseBackupPtrOutput {
	return o.ApplyT(func(v DatabaseBackup) *DatabaseBackup {
		return &v
	}).(DatabaseBackupPtrOutput)
}

type DatabaseBackupPtrOutput struct {
	*pulumi.OutputState
}

func (DatabaseBackupPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DatabaseBackup)(nil))
}

func (o DatabaseBackupPtrOutput) ToDatabaseBackupPtrOutput() DatabaseBackupPtrOutput {
	return o
}

func (o DatabaseBackupPtrOutput) ToDatabaseBackupPtrOutputWithContext(ctx context.Context) DatabaseBackupPtrOutput {
	return o
}

type DatabaseBackupArrayOutput struct{ *pulumi.OutputState }

func (DatabaseBackupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DatabaseBackup)(nil))
}

func (o DatabaseBackupArrayOutput) ToDatabaseBackupArrayOutput() DatabaseBackupArrayOutput {
	return o
}

func (o DatabaseBackupArrayOutput) ToDatabaseBackupArrayOutputWithContext(ctx context.Context) DatabaseBackupArrayOutput {
	return o
}

func (o DatabaseBackupArrayOutput) Index(i pulumi.IntInput) DatabaseBackupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DatabaseBackup {
		return vs[0].([]DatabaseBackup)[vs[1].(int)]
	}).(DatabaseBackupOutput)
}

type DatabaseBackupMapOutput struct{ *pulumi.OutputState }

func (DatabaseBackupMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]DatabaseBackup)(nil))
}

func (o DatabaseBackupMapOutput) ToDatabaseBackupMapOutput() DatabaseBackupMapOutput {
	return o
}

func (o DatabaseBackupMapOutput) ToDatabaseBackupMapOutputWithContext(ctx context.Context) DatabaseBackupMapOutput {
	return o
}

func (o DatabaseBackupMapOutput) MapIndex(k pulumi.StringInput) DatabaseBackupOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) DatabaseBackup {
		return vs[0].(map[string]DatabaseBackup)[vs[1].(string)]
	}).(DatabaseBackupOutput)
}

func init() {
	pulumi.RegisterOutputType(DatabaseBackupOutput{})
	pulumi.RegisterOutputType(DatabaseBackupPtrOutput{})
	pulumi.RegisterOutputType(DatabaseBackupArrayOutput{})
	pulumi.RegisterOutputType(DatabaseBackupMapOutput{})
}
