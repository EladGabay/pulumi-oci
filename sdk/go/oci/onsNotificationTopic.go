// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package oci

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource provides the Notification Topic resource in Oracle Cloud Infrastructure Notifications service.
//
// Creates a topic in the specified compartment. For general information about topics, see
// [Managing Topics and Subscriptions](https://docs.cloud.oracle.com/iaas/Content/Notification/Tasks/managingtopicsandsubscriptions.htm).
//
// For the purposes of access control, you must provide the OCID of the compartment where you want the topic to reside.
// For information about access control and compartments, see [Overview of the IAM Service](https://docs.cloud.oracle.com/iaas/Content/Identity/Concepts/overview.htm).
//
// You must specify a display name for the topic.
//
// All Oracle Cloud Infrastructure resources, including topics, get an Oracle-assigned, unique ID called an
// Oracle Cloud Identifier (OCID). When you create a resource, you can find its OCID in the response. You can also
// retrieve a resource's OCID by using a List API operation on that resource type, or by viewing the resource in the
// Console. For more information, see [Resource Identifiers](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
//
// Transactions Per Minute (TPM) per-tenancy limit for this operation: 60.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-oci/sdk/go/oci"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := oci.NewOnsNotificationTopic(ctx, "testNotificationTopic", &oci.OnsNotificationTopicArgs{
// 			CompartmentId: pulumi.Any(_var.Compartment_id),
// 			DefinedTags: pulumi.AnyMap{
// 				"Operations.CostCenter": pulumi.Any("42"),
// 			},
// 			Description: pulumi.Any(_var.Notification_topic_description),
// 			FreeformTags: pulumi.AnyMap{
// 				"Department": pulumi.Any("Finance"),
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// NotificationTopics can be imported using the `id`, e.g.
//
// ```sh
//  $ pulumi import oci:index/onsNotificationTopic:OnsNotificationTopic test_notification_topic "id"
// ```
type OnsNotificationTopic struct {
	pulumi.CustomResourceState

	// The endpoint for managing subscriptions or publishing messages to the topic.
	ApiEndpoint pulumi.StringOutput `pulumi:"apiEndpoint"`
	// (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment to create the topic in.
	CompartmentId pulumi.StringOutput `pulumi:"compartmentId"`
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Operations.CostCenter": "42"}`
	DefinedTags pulumi.MapOutput `pulumi:"definedTags"`
	// (Updatable) The description of the topic being created. Avoid entering confidential information.
	Description pulumi.StringOutput `pulumi:"description"`
	// For optimistic concurrency control. See `if-match`.
	Etag pulumi.StringOutput `pulumi:"etag"`
	// (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Department": "Finance"}`
	FreeformTags pulumi.MapOutput `pulumi:"freeformTags"`
	// The name of the topic being created. The topic name must be unique across the tenancy. Avoid entering confidential information.
	Name pulumi.StringOutput `pulumi:"name"`
	// A unique short topic Id. This is used only for SMS subscriptions.
	ShortTopicId pulumi.StringOutput `pulumi:"shortTopicId"`
	// The lifecycle state of the topic.
	State pulumi.StringOutput `pulumi:"state"`
	// The time the topic was created.
	TimeCreated pulumi.StringOutput `pulumi:"timeCreated"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the topic.
	TopicId pulumi.StringOutput `pulumi:"topicId"`
}

// NewOnsNotificationTopic registers a new resource with the given unique name, arguments, and options.
func NewOnsNotificationTopic(ctx *pulumi.Context,
	name string, args *OnsNotificationTopicArgs, opts ...pulumi.ResourceOption) (*OnsNotificationTopic, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CompartmentId == nil {
		return nil, errors.New("invalid value for required argument 'CompartmentId'")
	}
	var resource OnsNotificationTopic
	err := ctx.RegisterResource("oci:index/onsNotificationTopic:OnsNotificationTopic", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetOnsNotificationTopic gets an existing OnsNotificationTopic resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetOnsNotificationTopic(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *OnsNotificationTopicState, opts ...pulumi.ResourceOption) (*OnsNotificationTopic, error) {
	var resource OnsNotificationTopic
	err := ctx.ReadResource("oci:index/onsNotificationTopic:OnsNotificationTopic", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering OnsNotificationTopic resources.
type onsNotificationTopicState struct {
	// The endpoint for managing subscriptions or publishing messages to the topic.
	ApiEndpoint *string `pulumi:"apiEndpoint"`
	// (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment to create the topic in.
	CompartmentId *string `pulumi:"compartmentId"`
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Operations.CostCenter": "42"}`
	DefinedTags map[string]interface{} `pulumi:"definedTags"`
	// (Updatable) The description of the topic being created. Avoid entering confidential information.
	Description *string `pulumi:"description"`
	// For optimistic concurrency control. See `if-match`.
	Etag *string `pulumi:"etag"`
	// (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Department": "Finance"}`
	FreeformTags map[string]interface{} `pulumi:"freeformTags"`
	// The name of the topic being created. The topic name must be unique across the tenancy. Avoid entering confidential information.
	Name *string `pulumi:"name"`
	// A unique short topic Id. This is used only for SMS subscriptions.
	ShortTopicId *string `pulumi:"shortTopicId"`
	// The lifecycle state of the topic.
	State *string `pulumi:"state"`
	// The time the topic was created.
	TimeCreated *string `pulumi:"timeCreated"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the topic.
	TopicId *string `pulumi:"topicId"`
}

type OnsNotificationTopicState struct {
	// The endpoint for managing subscriptions or publishing messages to the topic.
	ApiEndpoint pulumi.StringPtrInput
	// (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment to create the topic in.
	CompartmentId pulumi.StringPtrInput
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Operations.CostCenter": "42"}`
	DefinedTags pulumi.MapInput
	// (Updatable) The description of the topic being created. Avoid entering confidential information.
	Description pulumi.StringPtrInput
	// For optimistic concurrency control. See `if-match`.
	Etag pulumi.StringPtrInput
	// (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Department": "Finance"}`
	FreeformTags pulumi.MapInput
	// The name of the topic being created. The topic name must be unique across the tenancy. Avoid entering confidential information.
	Name pulumi.StringPtrInput
	// A unique short topic Id. This is used only for SMS subscriptions.
	ShortTopicId pulumi.StringPtrInput
	// The lifecycle state of the topic.
	State pulumi.StringPtrInput
	// The time the topic was created.
	TimeCreated pulumi.StringPtrInput
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the topic.
	TopicId pulumi.StringPtrInput
}

func (OnsNotificationTopicState) ElementType() reflect.Type {
	return reflect.TypeOf((*onsNotificationTopicState)(nil)).Elem()
}

type onsNotificationTopicArgs struct {
	// (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment to create the topic in.
	CompartmentId string `pulumi:"compartmentId"`
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Operations.CostCenter": "42"}`
	DefinedTags map[string]interface{} `pulumi:"definedTags"`
	// (Updatable) The description of the topic being created. Avoid entering confidential information.
	Description *string `pulumi:"description"`
	// (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Department": "Finance"}`
	FreeformTags map[string]interface{} `pulumi:"freeformTags"`
	// The name of the topic being created. The topic name must be unique across the tenancy. Avoid entering confidential information.
	Name *string `pulumi:"name"`
}

// The set of arguments for constructing a OnsNotificationTopic resource.
type OnsNotificationTopicArgs struct {
	// (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment to create the topic in.
	CompartmentId pulumi.StringInput
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Operations.CostCenter": "42"}`
	DefinedTags pulumi.MapInput
	// (Updatable) The description of the topic being created. Avoid entering confidential information.
	Description pulumi.StringPtrInput
	// (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Department": "Finance"}`
	FreeformTags pulumi.MapInput
	// The name of the topic being created. The topic name must be unique across the tenancy. Avoid entering confidential information.
	Name pulumi.StringPtrInput
}

func (OnsNotificationTopicArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*onsNotificationTopicArgs)(nil)).Elem()
}

type OnsNotificationTopicInput interface {
	pulumi.Input

	ToOnsNotificationTopicOutput() OnsNotificationTopicOutput
	ToOnsNotificationTopicOutputWithContext(ctx context.Context) OnsNotificationTopicOutput
}

func (*OnsNotificationTopic) ElementType() reflect.Type {
	return reflect.TypeOf((*OnsNotificationTopic)(nil))
}

func (i *OnsNotificationTopic) ToOnsNotificationTopicOutput() OnsNotificationTopicOutput {
	return i.ToOnsNotificationTopicOutputWithContext(context.Background())
}

func (i *OnsNotificationTopic) ToOnsNotificationTopicOutputWithContext(ctx context.Context) OnsNotificationTopicOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OnsNotificationTopicOutput)
}

func (i *OnsNotificationTopic) ToOnsNotificationTopicPtrOutput() OnsNotificationTopicPtrOutput {
	return i.ToOnsNotificationTopicPtrOutputWithContext(context.Background())
}

func (i *OnsNotificationTopic) ToOnsNotificationTopicPtrOutputWithContext(ctx context.Context) OnsNotificationTopicPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OnsNotificationTopicPtrOutput)
}

type OnsNotificationTopicPtrInput interface {
	pulumi.Input

	ToOnsNotificationTopicPtrOutput() OnsNotificationTopicPtrOutput
	ToOnsNotificationTopicPtrOutputWithContext(ctx context.Context) OnsNotificationTopicPtrOutput
}

type onsNotificationTopicPtrType OnsNotificationTopicArgs

func (*onsNotificationTopicPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**OnsNotificationTopic)(nil))
}

func (i *onsNotificationTopicPtrType) ToOnsNotificationTopicPtrOutput() OnsNotificationTopicPtrOutput {
	return i.ToOnsNotificationTopicPtrOutputWithContext(context.Background())
}

func (i *onsNotificationTopicPtrType) ToOnsNotificationTopicPtrOutputWithContext(ctx context.Context) OnsNotificationTopicPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OnsNotificationTopicPtrOutput)
}

// OnsNotificationTopicArrayInput is an input type that accepts OnsNotificationTopicArray and OnsNotificationTopicArrayOutput values.
// You can construct a concrete instance of `OnsNotificationTopicArrayInput` via:
//
//          OnsNotificationTopicArray{ OnsNotificationTopicArgs{...} }
type OnsNotificationTopicArrayInput interface {
	pulumi.Input

	ToOnsNotificationTopicArrayOutput() OnsNotificationTopicArrayOutput
	ToOnsNotificationTopicArrayOutputWithContext(context.Context) OnsNotificationTopicArrayOutput
}

type OnsNotificationTopicArray []OnsNotificationTopicInput

func (OnsNotificationTopicArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*OnsNotificationTopic)(nil)).Elem()
}

func (i OnsNotificationTopicArray) ToOnsNotificationTopicArrayOutput() OnsNotificationTopicArrayOutput {
	return i.ToOnsNotificationTopicArrayOutputWithContext(context.Background())
}

func (i OnsNotificationTopicArray) ToOnsNotificationTopicArrayOutputWithContext(ctx context.Context) OnsNotificationTopicArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OnsNotificationTopicArrayOutput)
}

// OnsNotificationTopicMapInput is an input type that accepts OnsNotificationTopicMap and OnsNotificationTopicMapOutput values.
// You can construct a concrete instance of `OnsNotificationTopicMapInput` via:
//
//          OnsNotificationTopicMap{ "key": OnsNotificationTopicArgs{...} }
type OnsNotificationTopicMapInput interface {
	pulumi.Input

	ToOnsNotificationTopicMapOutput() OnsNotificationTopicMapOutput
	ToOnsNotificationTopicMapOutputWithContext(context.Context) OnsNotificationTopicMapOutput
}

type OnsNotificationTopicMap map[string]OnsNotificationTopicInput

func (OnsNotificationTopicMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*OnsNotificationTopic)(nil)).Elem()
}

func (i OnsNotificationTopicMap) ToOnsNotificationTopicMapOutput() OnsNotificationTopicMapOutput {
	return i.ToOnsNotificationTopicMapOutputWithContext(context.Background())
}

func (i OnsNotificationTopicMap) ToOnsNotificationTopicMapOutputWithContext(ctx context.Context) OnsNotificationTopicMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OnsNotificationTopicMapOutput)
}

type OnsNotificationTopicOutput struct {
	*pulumi.OutputState
}

func (OnsNotificationTopicOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OnsNotificationTopic)(nil))
}

func (o OnsNotificationTopicOutput) ToOnsNotificationTopicOutput() OnsNotificationTopicOutput {
	return o
}

func (o OnsNotificationTopicOutput) ToOnsNotificationTopicOutputWithContext(ctx context.Context) OnsNotificationTopicOutput {
	return o
}

func (o OnsNotificationTopicOutput) ToOnsNotificationTopicPtrOutput() OnsNotificationTopicPtrOutput {
	return o.ToOnsNotificationTopicPtrOutputWithContext(context.Background())
}

func (o OnsNotificationTopicOutput) ToOnsNotificationTopicPtrOutputWithContext(ctx context.Context) OnsNotificationTopicPtrOutput {
	return o.ApplyT(func(v OnsNotificationTopic) *OnsNotificationTopic {
		return &v
	}).(OnsNotificationTopicPtrOutput)
}

type OnsNotificationTopicPtrOutput struct {
	*pulumi.OutputState
}

func (OnsNotificationTopicPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OnsNotificationTopic)(nil))
}

func (o OnsNotificationTopicPtrOutput) ToOnsNotificationTopicPtrOutput() OnsNotificationTopicPtrOutput {
	return o
}

func (o OnsNotificationTopicPtrOutput) ToOnsNotificationTopicPtrOutputWithContext(ctx context.Context) OnsNotificationTopicPtrOutput {
	return o
}

type OnsNotificationTopicArrayOutput struct{ *pulumi.OutputState }

func (OnsNotificationTopicArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OnsNotificationTopic)(nil))
}

func (o OnsNotificationTopicArrayOutput) ToOnsNotificationTopicArrayOutput() OnsNotificationTopicArrayOutput {
	return o
}

func (o OnsNotificationTopicArrayOutput) ToOnsNotificationTopicArrayOutputWithContext(ctx context.Context) OnsNotificationTopicArrayOutput {
	return o
}

func (o OnsNotificationTopicArrayOutput) Index(i pulumi.IntInput) OnsNotificationTopicOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) OnsNotificationTopic {
		return vs[0].([]OnsNotificationTopic)[vs[1].(int)]
	}).(OnsNotificationTopicOutput)
}

type OnsNotificationTopicMapOutput struct{ *pulumi.OutputState }

func (OnsNotificationTopicMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]OnsNotificationTopic)(nil))
}

func (o OnsNotificationTopicMapOutput) ToOnsNotificationTopicMapOutput() OnsNotificationTopicMapOutput {
	return o
}

func (o OnsNotificationTopicMapOutput) ToOnsNotificationTopicMapOutputWithContext(ctx context.Context) OnsNotificationTopicMapOutput {
	return o
}

func (o OnsNotificationTopicMapOutput) MapIndex(k pulumi.StringInput) OnsNotificationTopicOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) OnsNotificationTopic {
		return vs[0].(map[string]OnsNotificationTopic)[vs[1].(string)]
	}).(OnsNotificationTopicOutput)
}

func init() {
	pulumi.RegisterOutputType(OnsNotificationTopicOutput{})
	pulumi.RegisterOutputType(OnsNotificationTopicPtrOutput{})
	pulumi.RegisterOutputType(OnsNotificationTopicArrayOutput{})
	pulumi.RegisterOutputType(OnsNotificationTopicMapOutput{})
}
