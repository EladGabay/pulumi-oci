// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci
{
    public static class GetIdentityNetworkSources
    {
        /// <summary>
        /// This data source provides the list of Network Sources in Oracle Cloud Infrastructure Identity service.
        /// 
        /// Lists the network sources in your tenancy. You must specify your tenancy's OCID as the value for
        /// the compartment ID (remember that the tenancy is simply the root compartment).
        /// See [Where to Get the Tenancy's OCID and User's OCID](https://docs.cloud.oracle.com/iaas/Content/API/Concepts/apisigningkey.htm#five).
        /// 
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var testNetworkSources = Output.Create(Oci.GetIdentityNetworkSources.InvokeAsync(new Oci.GetIdentityNetworkSourcesArgs
        ///         {
        ///             CompartmentId = @var.Tenancy_ocid,
        ///             Name = @var.Network_source_name,
        ///             State = @var.Network_source_state,
        ///         }));
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetIdentityNetworkSourcesResult> InvokeAsync(GetIdentityNetworkSourcesArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetIdentityNetworkSourcesResult>("oci:index/getIdentityNetworkSources:GetIdentityNetworkSources", args ?? new GetIdentityNetworkSourcesArgs(), options.WithVersion());
    }


    public sealed class GetIdentityNetworkSourcesArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The OCID of the compartment (remember that the tenancy is simply the root compartment).
        /// </summary>
        [Input("compartmentId", required: true)]
        public string CompartmentId { get; set; } = null!;

        [Input("filters")]
        private List<Inputs.GetIdentityNetworkSourcesFilterArgs>? _filters;
        public List<Inputs.GetIdentityNetworkSourcesFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetIdentityNetworkSourcesFilterArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// A filter to only return resources that match the given name exactly.
        /// </summary>
        [Input("name")]
        public string? Name { get; set; }

        /// <summary>
        /// A filter to only return resources that match the given lifecycle state.  The state value is case-insensitive.
        /// </summary>
        [Input("state")]
        public string? State { get; set; }

        public GetIdentityNetworkSourcesArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetIdentityNetworkSourcesResult
    {
        /// <summary>
        /// The OCID of the tenancy containing the network source. The tenancy is the root compartment.
        /// </summary>
        public readonly string CompartmentId;
        public readonly ImmutableArray<Outputs.GetIdentityNetworkSourcesFilterResult> Filters;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The name you assign to the network source during creation. The name must be unique across the tenancy and cannot be changed.
        /// </summary>
        public readonly string? Name;
        /// <summary>
        /// The list of network_sources.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetIdentityNetworkSourcesNetworkSourceResult> NetworkSources;
        /// <summary>
        /// The network source object's current state. After creating a network source, make sure its `lifecycleState` changes from CREATING to ACTIVE before using it.
        /// </summary>
        public readonly string? State;

        [OutputConstructor]
        private GetIdentityNetworkSourcesResult(
            string compartmentId,

            ImmutableArray<Outputs.GetIdentityNetworkSourcesFilterResult> filters,

            string id,

            string? name,

            ImmutableArray<Outputs.GetIdentityNetworkSourcesNetworkSourceResult> networkSources,

            string? state)
        {
            CompartmentId = compartmentId;
            Filters = filters;
            Id = id;
            Name = name;
            NetworkSources = networkSources;
            State = state;
        }
    }
}
