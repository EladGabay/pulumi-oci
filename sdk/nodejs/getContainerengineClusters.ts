// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "./types";
import * as utilities from "./utilities";

/**
 * This data source provides the list of Clusters in Oracle Cloud Infrastructure Container Engine service.
 *
 * List all the cluster objects in a compartment.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as oci from "@pulumi/oci";
 *
 * const testClusters = oci.GetContainerengineClusters({
 *     compartmentId: _var.compartment_id,
 *     name: _var.cluster_name,
 *     states: _var.cluster_state,
 * });
 * ```
 */
export function getContainerengineClusters(args: GetContainerengineClustersArgs, opts?: pulumi.InvokeOptions): Promise<GetContainerengineClustersResult> {
    if (!opts) {
        opts = {}
    }

    if (!opts.version) {
        opts.version = utilities.getVersion();
    }
    return pulumi.runtime.invoke("oci:index/getContainerengineClusters:GetContainerengineClusters", {
        "compartmentId": args.compartmentId,
        "filters": args.filters,
        "name": args.name,
        "states": args.states,
    }, opts);
}

/**
 * A collection of arguments for invoking GetContainerengineClusters.
 */
export interface GetContainerengineClustersArgs {
    /**
     * The OCID of the compartment.
     */
    compartmentId: string;
    filters?: inputs.GetContainerengineClustersFilter[];
    /**
     * The name to filter on.
     */
    name?: string;
    /**
     * A cluster lifecycle state to filter on. Can have multiple parameters of this name.
     */
    states?: string[];
}

/**
 * A collection of values returned by GetContainerengineClusters.
 */
export interface GetContainerengineClustersResult {
    /**
     * The list of clusters.
     */
    readonly clusters: outputs.GetContainerengineClustersCluster[];
    /**
     * The OCID of the compartment in which the cluster exists.
     */
    readonly compartmentId: string;
    readonly filters?: outputs.GetContainerengineClustersFilter[];
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * The name of the cluster.
     */
    readonly name?: string;
    /**
     * The state of the cluster masters.
     */
    readonly states?: string[];
}
