// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package oci

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource provides the Load Balancer Routing Policy resource in Oracle Cloud Infrastructure Load Balancer service.
//
// Adds a routing policy to a load balancer. For more information, see
// [Managing Request Routing](https://docs.cloud.oracle.com/iaas/Content/Balance/Tasks/managingrequest.htm).
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-oci/sdk/go/oci"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := oci.NewLoadBalancerLoadBalancerRoutingPolicy(ctx, "testLoadBalancerRoutingPolicy", &oci.LoadBalancerLoadBalancerRoutingPolicyArgs{
// 			ConditionLanguageVersion: pulumi.Any(_var.Load_balancer_routing_policy_condition_language_version),
// 			LoadBalancerId:           pulumi.Any(oci_load_balancer_load_balancer.Test_load_balancer.Id),
// 			Rules: LoadBalancerLoadBalancerRoutingPolicyRuleArray{
// 				&LoadBalancerLoadBalancerRoutingPolicyRuleArgs{
// 					Actions: LoadBalancerLoadBalancerRoutingPolicyRuleActionArray{
// 						&LoadBalancerLoadBalancerRoutingPolicyRuleActionArgs{
// 							Name:           pulumi.Any(_var.Load_balancer_routing_policy_rules_actions_name),
// 							BackendSetName: pulumi.Any(oci_load_balancer_backend_set.Test_backend_set.Name),
// 						},
// 					},
// 					Condition: pulumi.Any(_var.Load_balancer_routing_policy_rules_condition),
// 					Name:      pulumi.Any(_var.Load_balancer_routing_policy_rules_name),
// 				},
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// LoadBalancerRoutingPolicies can be imported using the `id`, e.g.
//
// ```sh
//  $ pulumi import oci:index/loadBalancerLoadBalancerRoutingPolicy:LoadBalancerLoadBalancerRoutingPolicy test_load_balancer_routing_policy "loadBalancers/{loadBalancerId}/routingPolicies/{routingPolicyName}"
// ```
type LoadBalancerLoadBalancerRoutingPolicy struct {
	pulumi.CustomResourceState

	// (Updatable) The version of the language in which `condition` of `rules` are composed.
	ConditionLanguageVersion pulumi.StringOutput `pulumi:"conditionLanguageVersion"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the load balancer to add the routing policy rule list to.
	LoadBalancerId pulumi.StringOutput `pulumi:"loadBalancerId"`
	// (Updatable) A unique name for the routing policy rule. Avoid entering confidential information.
	Name pulumi.StringOutput `pulumi:"name"`
	// (Updatable) The list of routing rules.
	Rules LoadBalancerLoadBalancerRoutingPolicyRuleArrayOutput `pulumi:"rules"`
	State pulumi.StringOutput                                  `pulumi:"state"`
}

// NewLoadBalancerLoadBalancerRoutingPolicy registers a new resource with the given unique name, arguments, and options.
func NewLoadBalancerLoadBalancerRoutingPolicy(ctx *pulumi.Context,
	name string, args *LoadBalancerLoadBalancerRoutingPolicyArgs, opts ...pulumi.ResourceOption) (*LoadBalancerLoadBalancerRoutingPolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ConditionLanguageVersion == nil {
		return nil, errors.New("invalid value for required argument 'ConditionLanguageVersion'")
	}
	if args.LoadBalancerId == nil {
		return nil, errors.New("invalid value for required argument 'LoadBalancerId'")
	}
	if args.Rules == nil {
		return nil, errors.New("invalid value for required argument 'Rules'")
	}
	var resource LoadBalancerLoadBalancerRoutingPolicy
	err := ctx.RegisterResource("oci:index/loadBalancerLoadBalancerRoutingPolicy:LoadBalancerLoadBalancerRoutingPolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLoadBalancerLoadBalancerRoutingPolicy gets an existing LoadBalancerLoadBalancerRoutingPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLoadBalancerLoadBalancerRoutingPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LoadBalancerLoadBalancerRoutingPolicyState, opts ...pulumi.ResourceOption) (*LoadBalancerLoadBalancerRoutingPolicy, error) {
	var resource LoadBalancerLoadBalancerRoutingPolicy
	err := ctx.ReadResource("oci:index/loadBalancerLoadBalancerRoutingPolicy:LoadBalancerLoadBalancerRoutingPolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LoadBalancerLoadBalancerRoutingPolicy resources.
type loadBalancerLoadBalancerRoutingPolicyState struct {
	// (Updatable) The version of the language in which `condition` of `rules` are composed.
	ConditionLanguageVersion *string `pulumi:"conditionLanguageVersion"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the load balancer to add the routing policy rule list to.
	LoadBalancerId *string `pulumi:"loadBalancerId"`
	// (Updatable) A unique name for the routing policy rule. Avoid entering confidential information.
	Name *string `pulumi:"name"`
	// (Updatable) The list of routing rules.
	Rules []LoadBalancerLoadBalancerRoutingPolicyRule `pulumi:"rules"`
	State *string                                     `pulumi:"state"`
}

type LoadBalancerLoadBalancerRoutingPolicyState struct {
	// (Updatable) The version of the language in which `condition` of `rules` are composed.
	ConditionLanguageVersion pulumi.StringPtrInput
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the load balancer to add the routing policy rule list to.
	LoadBalancerId pulumi.StringPtrInput
	// (Updatable) A unique name for the routing policy rule. Avoid entering confidential information.
	Name pulumi.StringPtrInput
	// (Updatable) The list of routing rules.
	Rules LoadBalancerLoadBalancerRoutingPolicyRuleArrayInput
	State pulumi.StringPtrInput
}

func (LoadBalancerLoadBalancerRoutingPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*loadBalancerLoadBalancerRoutingPolicyState)(nil)).Elem()
}

type loadBalancerLoadBalancerRoutingPolicyArgs struct {
	// (Updatable) The version of the language in which `condition` of `rules` are composed.
	ConditionLanguageVersion string `pulumi:"conditionLanguageVersion"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the load balancer to add the routing policy rule list to.
	LoadBalancerId string `pulumi:"loadBalancerId"`
	// (Updatable) A unique name for the routing policy rule. Avoid entering confidential information.
	Name *string `pulumi:"name"`
	// (Updatable) The list of routing rules.
	Rules []LoadBalancerLoadBalancerRoutingPolicyRule `pulumi:"rules"`
}

// The set of arguments for constructing a LoadBalancerLoadBalancerRoutingPolicy resource.
type LoadBalancerLoadBalancerRoutingPolicyArgs struct {
	// (Updatable) The version of the language in which `condition` of `rules` are composed.
	ConditionLanguageVersion pulumi.StringInput
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the load balancer to add the routing policy rule list to.
	LoadBalancerId pulumi.StringInput
	// (Updatable) A unique name for the routing policy rule. Avoid entering confidential information.
	Name pulumi.StringPtrInput
	// (Updatable) The list of routing rules.
	Rules LoadBalancerLoadBalancerRoutingPolicyRuleArrayInput
}

func (LoadBalancerLoadBalancerRoutingPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*loadBalancerLoadBalancerRoutingPolicyArgs)(nil)).Elem()
}

type LoadBalancerLoadBalancerRoutingPolicyInput interface {
	pulumi.Input

	ToLoadBalancerLoadBalancerRoutingPolicyOutput() LoadBalancerLoadBalancerRoutingPolicyOutput
	ToLoadBalancerLoadBalancerRoutingPolicyOutputWithContext(ctx context.Context) LoadBalancerLoadBalancerRoutingPolicyOutput
}

func (*LoadBalancerLoadBalancerRoutingPolicy) ElementType() reflect.Type {
	return reflect.TypeOf((*LoadBalancerLoadBalancerRoutingPolicy)(nil))
}

func (i *LoadBalancerLoadBalancerRoutingPolicy) ToLoadBalancerLoadBalancerRoutingPolicyOutput() LoadBalancerLoadBalancerRoutingPolicyOutput {
	return i.ToLoadBalancerLoadBalancerRoutingPolicyOutputWithContext(context.Background())
}

func (i *LoadBalancerLoadBalancerRoutingPolicy) ToLoadBalancerLoadBalancerRoutingPolicyOutputWithContext(ctx context.Context) LoadBalancerLoadBalancerRoutingPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoadBalancerLoadBalancerRoutingPolicyOutput)
}

func (i *LoadBalancerLoadBalancerRoutingPolicy) ToLoadBalancerLoadBalancerRoutingPolicyPtrOutput() LoadBalancerLoadBalancerRoutingPolicyPtrOutput {
	return i.ToLoadBalancerLoadBalancerRoutingPolicyPtrOutputWithContext(context.Background())
}

func (i *LoadBalancerLoadBalancerRoutingPolicy) ToLoadBalancerLoadBalancerRoutingPolicyPtrOutputWithContext(ctx context.Context) LoadBalancerLoadBalancerRoutingPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoadBalancerLoadBalancerRoutingPolicyPtrOutput)
}

type LoadBalancerLoadBalancerRoutingPolicyPtrInput interface {
	pulumi.Input

	ToLoadBalancerLoadBalancerRoutingPolicyPtrOutput() LoadBalancerLoadBalancerRoutingPolicyPtrOutput
	ToLoadBalancerLoadBalancerRoutingPolicyPtrOutputWithContext(ctx context.Context) LoadBalancerLoadBalancerRoutingPolicyPtrOutput
}

type loadBalancerLoadBalancerRoutingPolicyPtrType LoadBalancerLoadBalancerRoutingPolicyArgs

func (*loadBalancerLoadBalancerRoutingPolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**LoadBalancerLoadBalancerRoutingPolicy)(nil))
}

func (i *loadBalancerLoadBalancerRoutingPolicyPtrType) ToLoadBalancerLoadBalancerRoutingPolicyPtrOutput() LoadBalancerLoadBalancerRoutingPolicyPtrOutput {
	return i.ToLoadBalancerLoadBalancerRoutingPolicyPtrOutputWithContext(context.Background())
}

func (i *loadBalancerLoadBalancerRoutingPolicyPtrType) ToLoadBalancerLoadBalancerRoutingPolicyPtrOutputWithContext(ctx context.Context) LoadBalancerLoadBalancerRoutingPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoadBalancerLoadBalancerRoutingPolicyPtrOutput)
}

// LoadBalancerLoadBalancerRoutingPolicyArrayInput is an input type that accepts LoadBalancerLoadBalancerRoutingPolicyArray and LoadBalancerLoadBalancerRoutingPolicyArrayOutput values.
// You can construct a concrete instance of `LoadBalancerLoadBalancerRoutingPolicyArrayInput` via:
//
//          LoadBalancerLoadBalancerRoutingPolicyArray{ LoadBalancerLoadBalancerRoutingPolicyArgs{...} }
type LoadBalancerLoadBalancerRoutingPolicyArrayInput interface {
	pulumi.Input

	ToLoadBalancerLoadBalancerRoutingPolicyArrayOutput() LoadBalancerLoadBalancerRoutingPolicyArrayOutput
	ToLoadBalancerLoadBalancerRoutingPolicyArrayOutputWithContext(context.Context) LoadBalancerLoadBalancerRoutingPolicyArrayOutput
}

type LoadBalancerLoadBalancerRoutingPolicyArray []LoadBalancerLoadBalancerRoutingPolicyInput

func (LoadBalancerLoadBalancerRoutingPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LoadBalancerLoadBalancerRoutingPolicy)(nil)).Elem()
}

func (i LoadBalancerLoadBalancerRoutingPolicyArray) ToLoadBalancerLoadBalancerRoutingPolicyArrayOutput() LoadBalancerLoadBalancerRoutingPolicyArrayOutput {
	return i.ToLoadBalancerLoadBalancerRoutingPolicyArrayOutputWithContext(context.Background())
}

func (i LoadBalancerLoadBalancerRoutingPolicyArray) ToLoadBalancerLoadBalancerRoutingPolicyArrayOutputWithContext(ctx context.Context) LoadBalancerLoadBalancerRoutingPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoadBalancerLoadBalancerRoutingPolicyArrayOutput)
}

// LoadBalancerLoadBalancerRoutingPolicyMapInput is an input type that accepts LoadBalancerLoadBalancerRoutingPolicyMap and LoadBalancerLoadBalancerRoutingPolicyMapOutput values.
// You can construct a concrete instance of `LoadBalancerLoadBalancerRoutingPolicyMapInput` via:
//
//          LoadBalancerLoadBalancerRoutingPolicyMap{ "key": LoadBalancerLoadBalancerRoutingPolicyArgs{...} }
type LoadBalancerLoadBalancerRoutingPolicyMapInput interface {
	pulumi.Input

	ToLoadBalancerLoadBalancerRoutingPolicyMapOutput() LoadBalancerLoadBalancerRoutingPolicyMapOutput
	ToLoadBalancerLoadBalancerRoutingPolicyMapOutputWithContext(context.Context) LoadBalancerLoadBalancerRoutingPolicyMapOutput
}

type LoadBalancerLoadBalancerRoutingPolicyMap map[string]LoadBalancerLoadBalancerRoutingPolicyInput

func (LoadBalancerLoadBalancerRoutingPolicyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LoadBalancerLoadBalancerRoutingPolicy)(nil)).Elem()
}

func (i LoadBalancerLoadBalancerRoutingPolicyMap) ToLoadBalancerLoadBalancerRoutingPolicyMapOutput() LoadBalancerLoadBalancerRoutingPolicyMapOutput {
	return i.ToLoadBalancerLoadBalancerRoutingPolicyMapOutputWithContext(context.Background())
}

func (i LoadBalancerLoadBalancerRoutingPolicyMap) ToLoadBalancerLoadBalancerRoutingPolicyMapOutputWithContext(ctx context.Context) LoadBalancerLoadBalancerRoutingPolicyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LoadBalancerLoadBalancerRoutingPolicyMapOutput)
}

type LoadBalancerLoadBalancerRoutingPolicyOutput struct {
	*pulumi.OutputState
}

func (LoadBalancerLoadBalancerRoutingPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LoadBalancerLoadBalancerRoutingPolicy)(nil))
}

func (o LoadBalancerLoadBalancerRoutingPolicyOutput) ToLoadBalancerLoadBalancerRoutingPolicyOutput() LoadBalancerLoadBalancerRoutingPolicyOutput {
	return o
}

func (o LoadBalancerLoadBalancerRoutingPolicyOutput) ToLoadBalancerLoadBalancerRoutingPolicyOutputWithContext(ctx context.Context) LoadBalancerLoadBalancerRoutingPolicyOutput {
	return o
}

func (o LoadBalancerLoadBalancerRoutingPolicyOutput) ToLoadBalancerLoadBalancerRoutingPolicyPtrOutput() LoadBalancerLoadBalancerRoutingPolicyPtrOutput {
	return o.ToLoadBalancerLoadBalancerRoutingPolicyPtrOutputWithContext(context.Background())
}

func (o LoadBalancerLoadBalancerRoutingPolicyOutput) ToLoadBalancerLoadBalancerRoutingPolicyPtrOutputWithContext(ctx context.Context) LoadBalancerLoadBalancerRoutingPolicyPtrOutput {
	return o.ApplyT(func(v LoadBalancerLoadBalancerRoutingPolicy) *LoadBalancerLoadBalancerRoutingPolicy {
		return &v
	}).(LoadBalancerLoadBalancerRoutingPolicyPtrOutput)
}

type LoadBalancerLoadBalancerRoutingPolicyPtrOutput struct {
	*pulumi.OutputState
}

func (LoadBalancerLoadBalancerRoutingPolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LoadBalancerLoadBalancerRoutingPolicy)(nil))
}

func (o LoadBalancerLoadBalancerRoutingPolicyPtrOutput) ToLoadBalancerLoadBalancerRoutingPolicyPtrOutput() LoadBalancerLoadBalancerRoutingPolicyPtrOutput {
	return o
}

func (o LoadBalancerLoadBalancerRoutingPolicyPtrOutput) ToLoadBalancerLoadBalancerRoutingPolicyPtrOutputWithContext(ctx context.Context) LoadBalancerLoadBalancerRoutingPolicyPtrOutput {
	return o
}

type LoadBalancerLoadBalancerRoutingPolicyArrayOutput struct{ *pulumi.OutputState }

func (LoadBalancerLoadBalancerRoutingPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]LoadBalancerLoadBalancerRoutingPolicy)(nil))
}

func (o LoadBalancerLoadBalancerRoutingPolicyArrayOutput) ToLoadBalancerLoadBalancerRoutingPolicyArrayOutput() LoadBalancerLoadBalancerRoutingPolicyArrayOutput {
	return o
}

func (o LoadBalancerLoadBalancerRoutingPolicyArrayOutput) ToLoadBalancerLoadBalancerRoutingPolicyArrayOutputWithContext(ctx context.Context) LoadBalancerLoadBalancerRoutingPolicyArrayOutput {
	return o
}

func (o LoadBalancerLoadBalancerRoutingPolicyArrayOutput) Index(i pulumi.IntInput) LoadBalancerLoadBalancerRoutingPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) LoadBalancerLoadBalancerRoutingPolicy {
		return vs[0].([]LoadBalancerLoadBalancerRoutingPolicy)[vs[1].(int)]
	}).(LoadBalancerLoadBalancerRoutingPolicyOutput)
}

type LoadBalancerLoadBalancerRoutingPolicyMapOutput struct{ *pulumi.OutputState }

func (LoadBalancerLoadBalancerRoutingPolicyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]LoadBalancerLoadBalancerRoutingPolicy)(nil))
}

func (o LoadBalancerLoadBalancerRoutingPolicyMapOutput) ToLoadBalancerLoadBalancerRoutingPolicyMapOutput() LoadBalancerLoadBalancerRoutingPolicyMapOutput {
	return o
}

func (o LoadBalancerLoadBalancerRoutingPolicyMapOutput) ToLoadBalancerLoadBalancerRoutingPolicyMapOutputWithContext(ctx context.Context) LoadBalancerLoadBalancerRoutingPolicyMapOutput {
	return o
}

func (o LoadBalancerLoadBalancerRoutingPolicyMapOutput) MapIndex(k pulumi.StringInput) LoadBalancerLoadBalancerRoutingPolicyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) LoadBalancerLoadBalancerRoutingPolicy {
		return vs[0].(map[string]LoadBalancerLoadBalancerRoutingPolicy)[vs[1].(string)]
	}).(LoadBalancerLoadBalancerRoutingPolicyOutput)
}

func init() {
	pulumi.RegisterOutputType(LoadBalancerLoadBalancerRoutingPolicyOutput{})
	pulumi.RegisterOutputType(LoadBalancerLoadBalancerRoutingPolicyPtrOutput{})
	pulumi.RegisterOutputType(LoadBalancerLoadBalancerRoutingPolicyArrayOutput{})
	pulumi.RegisterOutputType(LoadBalancerLoadBalancerRoutingPolicyMapOutput{})
}
