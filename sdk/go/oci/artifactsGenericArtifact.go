// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package oci

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource provides the Generic Artifact resource in Oracle Cloud Infrastructure Artifacts service.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-oci/sdk/go/oci"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := oci.NewArtifactsGenericArtifact(ctx, "testGenericArtifact", &oci.ArtifactsGenericArtifactArgs{
// 			ArtifactId: pulumi.Any(oci_artifacts_artifact.Test_artifact.Id),
// 			DefinedTags: pulumi.AnyMap{
// 				"Operations.CostCenter": pulumi.Any("42"),
// 			},
// 			FreeformTags: pulumi.AnyMap{
// 				"Department": pulumi.Any("Finance"),
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// Import is not supported for this resource.
type ArtifactsGenericArtifact struct {
	pulumi.CustomResourceState

	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the artifact.  Example: `ocid1.genericartifact.oc1..exampleuniqueID`
	ArtifactId pulumi.StringOutput `pulumi:"artifactId"`
	// A user-defined path to describe the location of an artifact. Slashes do not create a directory structure, but you can use slashes to organize the repository. An artifact path does not include an artifact version.  Example: `project01/my-web-app/artifact-abc`
	ArtifactPath pulumi.StringOutput `pulumi:"artifactPath"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the repository's compartment.
	CompartmentId pulumi.StringOutput `pulumi:"compartmentId"`
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Operations.CostCenter": "42"}`
	DefinedTags pulumi.MapOutput `pulumi:"definedTags"`
	// The artifact name with the format of `<artifact-path>:<artifact-version>`. The artifact name is truncated to a maximum length of 255.  Example: `project01/my-web-app/artifact-abc:1.0.0`
	DisplayName pulumi.StringOutput `pulumi:"displayName"`
	// (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Department": "Finance"}`
	FreeformTags pulumi.MapOutput `pulumi:"freeformTags"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the repository.
	RepositoryId pulumi.StringOutput `pulumi:"repositoryId"`
	// The SHA256 digest for the artifact. When you upload an artifact to the repository, a SHA256 digest is calculated and added to the artifact properties.
	Sha256 pulumi.StringOutput `pulumi:"sha256"`
	// The size of the artifact in bytes.
	SizeInBytes pulumi.StringOutput `pulumi:"sizeInBytes"`
	// The current state of the artifact.
	State pulumi.StringOutput `pulumi:"state"`
	// An RFC 3339 timestamp indicating when the repository was created.
	TimeCreated pulumi.StringOutput `pulumi:"timeCreated"`
	// A user-defined string to describe the artifact version.  Example: `1.1.0` or `1.2-beta-2`
	Version pulumi.StringOutput `pulumi:"version"`
}

// NewArtifactsGenericArtifact registers a new resource with the given unique name, arguments, and options.
func NewArtifactsGenericArtifact(ctx *pulumi.Context,
	name string, args *ArtifactsGenericArtifactArgs, opts ...pulumi.ResourceOption) (*ArtifactsGenericArtifact, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ArtifactId == nil {
		return nil, errors.New("invalid value for required argument 'ArtifactId'")
	}
	var resource ArtifactsGenericArtifact
	err := ctx.RegisterResource("oci:index/artifactsGenericArtifact:ArtifactsGenericArtifact", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetArtifactsGenericArtifact gets an existing ArtifactsGenericArtifact resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetArtifactsGenericArtifact(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ArtifactsGenericArtifactState, opts ...pulumi.ResourceOption) (*ArtifactsGenericArtifact, error) {
	var resource ArtifactsGenericArtifact
	err := ctx.ReadResource("oci:index/artifactsGenericArtifact:ArtifactsGenericArtifact", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ArtifactsGenericArtifact resources.
type artifactsGenericArtifactState struct {
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the artifact.  Example: `ocid1.genericartifact.oc1..exampleuniqueID`
	ArtifactId *string `pulumi:"artifactId"`
	// A user-defined path to describe the location of an artifact. Slashes do not create a directory structure, but you can use slashes to organize the repository. An artifact path does not include an artifact version.  Example: `project01/my-web-app/artifact-abc`
	ArtifactPath *string `pulumi:"artifactPath"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the repository's compartment.
	CompartmentId *string `pulumi:"compartmentId"`
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Operations.CostCenter": "42"}`
	DefinedTags map[string]interface{} `pulumi:"definedTags"`
	// The artifact name with the format of `<artifact-path>:<artifact-version>`. The artifact name is truncated to a maximum length of 255.  Example: `project01/my-web-app/artifact-abc:1.0.0`
	DisplayName *string `pulumi:"displayName"`
	// (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Department": "Finance"}`
	FreeformTags map[string]interface{} `pulumi:"freeformTags"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the repository.
	RepositoryId *string `pulumi:"repositoryId"`
	// The SHA256 digest for the artifact. When you upload an artifact to the repository, a SHA256 digest is calculated and added to the artifact properties.
	Sha256 *string `pulumi:"sha256"`
	// The size of the artifact in bytes.
	SizeInBytes *string `pulumi:"sizeInBytes"`
	// The current state of the artifact.
	State *string `pulumi:"state"`
	// An RFC 3339 timestamp indicating when the repository was created.
	TimeCreated *string `pulumi:"timeCreated"`
	// A user-defined string to describe the artifact version.  Example: `1.1.0` or `1.2-beta-2`
	Version *string `pulumi:"version"`
}

type ArtifactsGenericArtifactState struct {
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the artifact.  Example: `ocid1.genericartifact.oc1..exampleuniqueID`
	ArtifactId pulumi.StringPtrInput
	// A user-defined path to describe the location of an artifact. Slashes do not create a directory structure, but you can use slashes to organize the repository. An artifact path does not include an artifact version.  Example: `project01/my-web-app/artifact-abc`
	ArtifactPath pulumi.StringPtrInput
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the repository's compartment.
	CompartmentId pulumi.StringPtrInput
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Operations.CostCenter": "42"}`
	DefinedTags pulumi.MapInput
	// The artifact name with the format of `<artifact-path>:<artifact-version>`. The artifact name is truncated to a maximum length of 255.  Example: `project01/my-web-app/artifact-abc:1.0.0`
	DisplayName pulumi.StringPtrInput
	// (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Department": "Finance"}`
	FreeformTags pulumi.MapInput
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the repository.
	RepositoryId pulumi.StringPtrInput
	// The SHA256 digest for the artifact. When you upload an artifact to the repository, a SHA256 digest is calculated and added to the artifact properties.
	Sha256 pulumi.StringPtrInput
	// The size of the artifact in bytes.
	SizeInBytes pulumi.StringPtrInput
	// The current state of the artifact.
	State pulumi.StringPtrInput
	// An RFC 3339 timestamp indicating when the repository was created.
	TimeCreated pulumi.StringPtrInput
	// A user-defined string to describe the artifact version.  Example: `1.1.0` or `1.2-beta-2`
	Version pulumi.StringPtrInput
}

func (ArtifactsGenericArtifactState) ElementType() reflect.Type {
	return reflect.TypeOf((*artifactsGenericArtifactState)(nil)).Elem()
}

type artifactsGenericArtifactArgs struct {
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the artifact.  Example: `ocid1.genericartifact.oc1..exampleuniqueID`
	ArtifactId string `pulumi:"artifactId"`
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Operations.CostCenter": "42"}`
	DefinedTags map[string]interface{} `pulumi:"definedTags"`
	// (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Department": "Finance"}`
	FreeformTags map[string]interface{} `pulumi:"freeformTags"`
}

// The set of arguments for constructing a ArtifactsGenericArtifact resource.
type ArtifactsGenericArtifactArgs struct {
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the artifact.  Example: `ocid1.genericartifact.oc1..exampleuniqueID`
	ArtifactId pulumi.StringInput
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Operations.CostCenter": "42"}`
	DefinedTags pulumi.MapInput
	// (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Department": "Finance"}`
	FreeformTags pulumi.MapInput
}

func (ArtifactsGenericArtifactArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*artifactsGenericArtifactArgs)(nil)).Elem()
}

type ArtifactsGenericArtifactInput interface {
	pulumi.Input

	ToArtifactsGenericArtifactOutput() ArtifactsGenericArtifactOutput
	ToArtifactsGenericArtifactOutputWithContext(ctx context.Context) ArtifactsGenericArtifactOutput
}

func (*ArtifactsGenericArtifact) ElementType() reflect.Type {
	return reflect.TypeOf((*ArtifactsGenericArtifact)(nil))
}

func (i *ArtifactsGenericArtifact) ToArtifactsGenericArtifactOutput() ArtifactsGenericArtifactOutput {
	return i.ToArtifactsGenericArtifactOutputWithContext(context.Background())
}

func (i *ArtifactsGenericArtifact) ToArtifactsGenericArtifactOutputWithContext(ctx context.Context) ArtifactsGenericArtifactOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArtifactsGenericArtifactOutput)
}

func (i *ArtifactsGenericArtifact) ToArtifactsGenericArtifactPtrOutput() ArtifactsGenericArtifactPtrOutput {
	return i.ToArtifactsGenericArtifactPtrOutputWithContext(context.Background())
}

func (i *ArtifactsGenericArtifact) ToArtifactsGenericArtifactPtrOutputWithContext(ctx context.Context) ArtifactsGenericArtifactPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArtifactsGenericArtifactPtrOutput)
}

type ArtifactsGenericArtifactPtrInput interface {
	pulumi.Input

	ToArtifactsGenericArtifactPtrOutput() ArtifactsGenericArtifactPtrOutput
	ToArtifactsGenericArtifactPtrOutputWithContext(ctx context.Context) ArtifactsGenericArtifactPtrOutput
}

type artifactsGenericArtifactPtrType ArtifactsGenericArtifactArgs

func (*artifactsGenericArtifactPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ArtifactsGenericArtifact)(nil))
}

func (i *artifactsGenericArtifactPtrType) ToArtifactsGenericArtifactPtrOutput() ArtifactsGenericArtifactPtrOutput {
	return i.ToArtifactsGenericArtifactPtrOutputWithContext(context.Background())
}

func (i *artifactsGenericArtifactPtrType) ToArtifactsGenericArtifactPtrOutputWithContext(ctx context.Context) ArtifactsGenericArtifactPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArtifactsGenericArtifactPtrOutput)
}

// ArtifactsGenericArtifactArrayInput is an input type that accepts ArtifactsGenericArtifactArray and ArtifactsGenericArtifactArrayOutput values.
// You can construct a concrete instance of `ArtifactsGenericArtifactArrayInput` via:
//
//          ArtifactsGenericArtifactArray{ ArtifactsGenericArtifactArgs{...} }
type ArtifactsGenericArtifactArrayInput interface {
	pulumi.Input

	ToArtifactsGenericArtifactArrayOutput() ArtifactsGenericArtifactArrayOutput
	ToArtifactsGenericArtifactArrayOutputWithContext(context.Context) ArtifactsGenericArtifactArrayOutput
}

type ArtifactsGenericArtifactArray []ArtifactsGenericArtifactInput

func (ArtifactsGenericArtifactArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ArtifactsGenericArtifact)(nil)).Elem()
}

func (i ArtifactsGenericArtifactArray) ToArtifactsGenericArtifactArrayOutput() ArtifactsGenericArtifactArrayOutput {
	return i.ToArtifactsGenericArtifactArrayOutputWithContext(context.Background())
}

func (i ArtifactsGenericArtifactArray) ToArtifactsGenericArtifactArrayOutputWithContext(ctx context.Context) ArtifactsGenericArtifactArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArtifactsGenericArtifactArrayOutput)
}

// ArtifactsGenericArtifactMapInput is an input type that accepts ArtifactsGenericArtifactMap and ArtifactsGenericArtifactMapOutput values.
// You can construct a concrete instance of `ArtifactsGenericArtifactMapInput` via:
//
//          ArtifactsGenericArtifactMap{ "key": ArtifactsGenericArtifactArgs{...} }
type ArtifactsGenericArtifactMapInput interface {
	pulumi.Input

	ToArtifactsGenericArtifactMapOutput() ArtifactsGenericArtifactMapOutput
	ToArtifactsGenericArtifactMapOutputWithContext(context.Context) ArtifactsGenericArtifactMapOutput
}

type ArtifactsGenericArtifactMap map[string]ArtifactsGenericArtifactInput

func (ArtifactsGenericArtifactMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ArtifactsGenericArtifact)(nil)).Elem()
}

func (i ArtifactsGenericArtifactMap) ToArtifactsGenericArtifactMapOutput() ArtifactsGenericArtifactMapOutput {
	return i.ToArtifactsGenericArtifactMapOutputWithContext(context.Background())
}

func (i ArtifactsGenericArtifactMap) ToArtifactsGenericArtifactMapOutputWithContext(ctx context.Context) ArtifactsGenericArtifactMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ArtifactsGenericArtifactMapOutput)
}

type ArtifactsGenericArtifactOutput struct {
	*pulumi.OutputState
}

func (ArtifactsGenericArtifactOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ArtifactsGenericArtifact)(nil))
}

func (o ArtifactsGenericArtifactOutput) ToArtifactsGenericArtifactOutput() ArtifactsGenericArtifactOutput {
	return o
}

func (o ArtifactsGenericArtifactOutput) ToArtifactsGenericArtifactOutputWithContext(ctx context.Context) ArtifactsGenericArtifactOutput {
	return o
}

func (o ArtifactsGenericArtifactOutput) ToArtifactsGenericArtifactPtrOutput() ArtifactsGenericArtifactPtrOutput {
	return o.ToArtifactsGenericArtifactPtrOutputWithContext(context.Background())
}

func (o ArtifactsGenericArtifactOutput) ToArtifactsGenericArtifactPtrOutputWithContext(ctx context.Context) ArtifactsGenericArtifactPtrOutput {
	return o.ApplyT(func(v ArtifactsGenericArtifact) *ArtifactsGenericArtifact {
		return &v
	}).(ArtifactsGenericArtifactPtrOutput)
}

type ArtifactsGenericArtifactPtrOutput struct {
	*pulumi.OutputState
}

func (ArtifactsGenericArtifactPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ArtifactsGenericArtifact)(nil))
}

func (o ArtifactsGenericArtifactPtrOutput) ToArtifactsGenericArtifactPtrOutput() ArtifactsGenericArtifactPtrOutput {
	return o
}

func (o ArtifactsGenericArtifactPtrOutput) ToArtifactsGenericArtifactPtrOutputWithContext(ctx context.Context) ArtifactsGenericArtifactPtrOutput {
	return o
}

type ArtifactsGenericArtifactArrayOutput struct{ *pulumi.OutputState }

func (ArtifactsGenericArtifactArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ArtifactsGenericArtifact)(nil))
}

func (o ArtifactsGenericArtifactArrayOutput) ToArtifactsGenericArtifactArrayOutput() ArtifactsGenericArtifactArrayOutput {
	return o
}

func (o ArtifactsGenericArtifactArrayOutput) ToArtifactsGenericArtifactArrayOutputWithContext(ctx context.Context) ArtifactsGenericArtifactArrayOutput {
	return o
}

func (o ArtifactsGenericArtifactArrayOutput) Index(i pulumi.IntInput) ArtifactsGenericArtifactOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ArtifactsGenericArtifact {
		return vs[0].([]ArtifactsGenericArtifact)[vs[1].(int)]
	}).(ArtifactsGenericArtifactOutput)
}

type ArtifactsGenericArtifactMapOutput struct{ *pulumi.OutputState }

func (ArtifactsGenericArtifactMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]ArtifactsGenericArtifact)(nil))
}

func (o ArtifactsGenericArtifactMapOutput) ToArtifactsGenericArtifactMapOutput() ArtifactsGenericArtifactMapOutput {
	return o
}

func (o ArtifactsGenericArtifactMapOutput) ToArtifactsGenericArtifactMapOutputWithContext(ctx context.Context) ArtifactsGenericArtifactMapOutput {
	return o
}

func (o ArtifactsGenericArtifactMapOutput) MapIndex(k pulumi.StringInput) ArtifactsGenericArtifactOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) ArtifactsGenericArtifact {
		return vs[0].(map[string]ArtifactsGenericArtifact)[vs[1].(string)]
	}).(ArtifactsGenericArtifactOutput)
}

func init() {
	pulumi.RegisterOutputType(ArtifactsGenericArtifactOutput{})
	pulumi.RegisterOutputType(ArtifactsGenericArtifactPtrOutput{})
	pulumi.RegisterOutputType(ArtifactsGenericArtifactArrayOutput{})
	pulumi.RegisterOutputType(ArtifactsGenericArtifactMapOutput{})
}
