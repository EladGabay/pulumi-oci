// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci
{
    public static class GetMarketplaceListingPackages
    {
        /// <summary>
        /// This data source provides the list of Listing Packages in Oracle Cloud Infrastructure Marketplace service.
        /// 
        /// Gets the list of packages for a listing.
        /// 
        /// If you plan to launch an instance from an image listing, you must first subscribe to the listing. When
        /// you launch the instance, you also need to provide the image ID of the listing resource version that you want.
        /// 
        /// Subscribing to the listing requires you to first get a signature from the terms of use agreement for the
        /// listing resource version. To get the signature, issue a [GetAppCatalogListingAgreements](https://docs.cloud.oracle.com/en-us/iaas/api/#/en/iaas/latest/AppCatalogListingResourceVersionAgreements/GetAppCatalogListingAgreements) API call.
        /// The [AppCatalogListingResourceVersionAgreements](https://docs.cloud.oracle.com/en-us/iaas/api/#/en/iaas/latest/AppCatalogListingResourceVersionAgreements) object, including
        /// its signature, is returned in the response. With the signature for the terms of use agreement for the desired
        /// listing resource version, create a subscription by issuing a
        /// [CreateAppCatalogSubscription](https://docs.cloud.oracle.com/en-us/iaas/api/#/en/iaas/latest/AppCatalogSubscription/CreateAppCatalogSubscription) API call.
        /// 
        /// To get the image ID to launch an instance, issue a [GetAppCatalogListingResourceVersion](https://docs.cloud.oracle.com/en-us/iaas/api/#/en/iaas/latest/AppCatalogListingResourceVersion/GetAppCatalogListingResourceVersion) API call.
        /// Lastly, to launch the instance, use the image ID of the listing resource version to issue a [LaunchInstance](https://docs.cloud.oracle.com/en-us/iaas/api/#/en/iaas/latest/Instance/LaunchInstance) API call.
        /// 
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var testListingPackages = Output.Create(Oci.GetMarketplaceListingPackages.InvokeAsync(new Oci.GetMarketplaceListingPackagesArgs
        ///         {
        ///             ListingId = oci_marketplace_listing.Test_listing.Id,
        ///             CompartmentId = @var.Compartment_id,
        ///             PackageType = @var.Listing_package_package_type,
        ///             PackageVersion = @var.Listing_package_package_version,
        ///         }));
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetMarketplaceListingPackagesResult> InvokeAsync(GetMarketplaceListingPackagesArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetMarketplaceListingPackagesResult>("oci:index/getMarketplaceListingPackages:GetMarketplaceListingPackages", args ?? new GetMarketplaceListingPackagesArgs(), options.WithVersion());
    }


    public sealed class GetMarketplaceListingPackagesArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The unique identifier for the compartment.
        /// </summary>
        [Input("compartmentId")]
        public string? CompartmentId { get; set; }

        [Input("filters")]
        private List<Inputs.GetMarketplaceListingPackagesFilterArgs>? _filters;
        public List<Inputs.GetMarketplaceListingPackagesFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetMarketplaceListingPackagesFilterArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// The unique identifier for the listing.
        /// </summary>
        [Input("listingId", required: true)]
        public string ListingId { get; set; } = null!;

        /// <summary>
        /// A filter to return only packages that match the given package type exactly.
        /// </summary>
        [Input("packageType")]
        public string? PackageType { get; set; }

        /// <summary>
        /// The version of the package. Package versions are unique within a listing.
        /// </summary>
        [Input("packageVersion")]
        public string? PackageVersion { get; set; }

        public GetMarketplaceListingPackagesArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetMarketplaceListingPackagesResult
    {
        public readonly string? CompartmentId;
        public readonly ImmutableArray<Outputs.GetMarketplaceListingPackagesFilterResult> Filters;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The ID of the listing that the specified package belongs to.
        /// </summary>
        public readonly string ListingId;
        /// <summary>
        /// The list of listing_packages.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetMarketplaceListingPackagesListingPackageResult> ListingPackages;
        /// <summary>
        /// The specified package's type.
        /// </summary>
        public readonly string? PackageType;
        public readonly string? PackageVersion;

        [OutputConstructor]
        private GetMarketplaceListingPackagesResult(
            string? compartmentId,

            ImmutableArray<Outputs.GetMarketplaceListingPackagesFilterResult> filters,

            string id,

            string listingId,

            ImmutableArray<Outputs.GetMarketplaceListingPackagesListingPackageResult> listingPackages,

            string? packageType,

            string? packageVersion)
        {
            CompartmentId = compartmentId;
            Filters = filters;
            Id = id;
            ListingId = listingId;
            ListingPackages = listingPackages;
            PackageType = packageType;
            PackageVersion = packageVersion;
        }
    }
}
