// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package oci

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource provides the Alarm resource in Oracle Cloud Infrastructure Monitoring service.
//
// Creates a new alarm in the specified compartment.
// For important limits information, see [Limits on Monitoring](https://docs.cloud.oracle.com/iaas/Content/Monitoring/Concepts/monitoringoverview.htm#Limits).
//
// This call is subject to a Monitoring limit that applies to the total number of requests across all alarm operations.
// Monitoring might throttle this call to reject an otherwise valid request when the total rate of alarm operations exceeds 10 requests,
// or transactions, per second (TPS) for a given tenancy.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-oci/sdk/go/oci"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := oci.NewMonitoringAlarm(ctx, "testAlarm", &oci.MonitoringAlarmArgs{
// 			CompartmentId: pulumi.Any(_var.Compartment_id),
// 			Destinations: pulumi.StringArray{
// 				pulumi.Any(oci_ons_notification_topic.Test_notification_topic.Id),
// 			},
// 			DisplayName:         pulumi.Any(_var.Alarm_display_name),
// 			IsEnabled:           pulumi.Any(_var.Alarm_is_enabled),
// 			MetricCompartmentId: pulumi.Any(_var.Alarm_metric_compartment_id),
// 			Namespace:           pulumi.Any(_var.Alarm_namespace),
// 			Query:               pulumi.Any(_var.Alarm_query),
// 			Severity:            pulumi.Any(_var.Alarm_severity),
// 			Body:                pulumi.Any(_var.Alarm_body),
// 			DefinedTags: pulumi.AnyMap{
// 				"Operations.CostCenter": pulumi.Any("42"),
// 			},
// 			FreeformTags: pulumi.AnyMap{
// 				"Department": pulumi.Any("Finance"),
// 			},
// 			MetricCompartmentIdInSubtree: pulumi.Any(_var.Alarm_metric_compartment_id_in_subtree),
// 			PendingDuration:              pulumi.Any(_var.Alarm_pending_duration),
// 			RepeatNotificationDuration:   pulumi.Any(_var.Alarm_repeat_notification_duration),
// 			Resolution:                   pulumi.Any(_var.Alarm_resolution),
// 			ResourceGroup:                pulumi.Any(_var.Alarm_resource_group),
// 			Suppression: &MonitoringAlarmSuppressionArgs{
// 				TimeSuppressFrom:  pulumi.Any(_var.Alarm_suppression_time_suppress_from),
// 				TimeSuppressUntil: pulumi.Any(_var.Alarm_suppression_time_suppress_until),
// 				Description:       pulumi.Any(_var.Alarm_suppression_description),
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// Alarms can be imported using the `id`, e.g.
//
// ```sh
//  $ pulumi import oci:index/monitoringAlarm:MonitoringAlarm test_alarm "id"
// ```
type MonitoringAlarm struct {
	pulumi.CustomResourceState

	// (Updatable) The human-readable content of the notification delivered. Oracle recommends providing guidance to operators for resolving the alarm condition. Consider adding links to standard runbook practices. Avoid entering confidential information.  Example: `High CPU usage alert. Follow runbook instructions for resolution.`
	Body pulumi.StringOutput `pulumi:"body"`
	// (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment containing the alarm.
	CompartmentId pulumi.StringOutput `pulumi:"compartmentId"`
	// (Updatable) Usage of predefined tag keys. These predefined keys are scoped to namespaces. Example: `{"Operations.CostCenter": "42"}`
	DefinedTags pulumi.MapOutput `pulumi:"definedTags"`
	// (Updatable) A list of destinations to which the notifications for this alarm will be delivered.  Each destination is represented by an [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) related to the supported destination service. For example, a destination using the Notifications service is represented by a topic OCID.  Supported destination services: Notifications Service. Limit: One destination per supported destination service.
	Destinations pulumi.StringArrayOutput `pulumi:"destinations"`
	// (Updatable) A user-friendly name for the alarm. It does not have to be unique, and it's changeable. Avoid entering confidential information.
	DisplayName pulumi.StringOutput `pulumi:"displayName"`
	// (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"Department": "Finance"}`
	FreeformTags pulumi.MapOutput `pulumi:"freeformTags"`
	// (Updatable) Whether the alarm is enabled.  Example: `true`
	IsEnabled pulumi.BoolOutput `pulumi:"isEnabled"`
	// (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment containing the metric being evaluated by the alarm.
	MetricCompartmentId pulumi.StringOutput `pulumi:"metricCompartmentId"`
	// (Updatable) When true, the alarm evaluates metrics from all compartments and subcompartments. The parameter can only be set to true when metricCompartmentId is the tenancy OCID (the tenancy is the root compartment). A true value requires the user to have tenancy-level permissions. If this requirement is not met, then the call is rejected. When false, the alarm evaluates metrics from only the compartment specified in metricCompartmentId. Default is false.  Example: `true`
	MetricCompartmentIdInSubtree pulumi.BoolOutput `pulumi:"metricCompartmentIdInSubtree"`
	// (Updatable) The source service or application emitting the metric that is evaluated by the alarm.  Example: `ociComputeagent`
	Namespace pulumi.StringOutput `pulumi:"namespace"`
	// (Updatable) The period of time that the condition defined in the alarm must persist before the alarm state  changes from "OK" to "FIRING". For example, a value of 5 minutes means that the  alarm must persist in breaching the condition for five minutes before the alarm updates its  state to "FIRING".
	PendingDuration pulumi.StringOutput `pulumi:"pendingDuration"`
	// (Updatable) The Monitoring Query Language (MQL) expression to evaluate for the alarm. The Alarms feature of  the Monitoring service interprets results for each returned time series as Boolean values,  where zero represents false and a non-zero value represents true. A true value means that the trigger  rule condition has been met. The query must specify a metric, statistic, interval, and trigger  rule (threshold or absence). Supported values for interval: `1m`-`60m` (also `1h`). You can optionally  specify dimensions and grouping functions. Supported grouping functions: `grouping()`, `groupBy()`.  For details about Monitoring Query Language (MQL), see [Monitoring Query Language (MQL) Reference](https://docs.cloud.oracle.com/iaas/Content/Monitoring/Reference/mql.htm). For available dimensions, review the metric definition for the supported service.  See [Supported Services](https://docs.cloud.oracle.com/iaas/Content/Monitoring/Concepts/monitoringoverview.htm#SupportedServices).
	Query pulumi.StringOutput `pulumi:"query"`
	// (Updatable) The frequency at which notifications are re-submitted, if the alarm keeps firing without interruption. Format defined by ISO 8601. For example, `PT4H` indicates four hours. Minimum: PT1M. Maximum: P30D.
	RepeatNotificationDuration pulumi.StringOutput `pulumi:"repeatNotificationDuration"`
	// (Updatable) The time between calculated aggregation windows for the alarm. Supported value: `1m`
	Resolution pulumi.StringOutput `pulumi:"resolution"`
	// (Updatable) Resource group that you want to use as a filter. The alarm retrieves metric data associated with the specified resource group only. Only one resource group can be applied per metric. A valid resourceGroup value starts with an alphabetical character and includes only alphanumeric characters, periods (.), underscores (_), hyphens (-), and dollar signs ($). Avoid entering confidential information.  Example: `frontend-fleet`
	ResourceGroup pulumi.StringOutput `pulumi:"resourceGroup"`
	// (Updatable) The perceived type of response required when the alarm is in the "FIRING" state.  Example: `CRITICAL`
	Severity pulumi.StringOutput `pulumi:"severity"`
	// The current lifecycle state of the alarm.  Example: `DELETED`
	State pulumi.StringOutput `pulumi:"state"`
	// (Updatable) The configuration details for suppressing an alarm.
	Suppression MonitoringAlarmSuppressionOutput `pulumi:"suppression"`
	// The date and time the alarm was created. Format defined by RFC3339.  Example: `2019-02-01T01:02:29.600Z`
	TimeCreated pulumi.StringOutput `pulumi:"timeCreated"`
	// The date and time the alarm was last updated. Format defined by RFC3339.  Example: `2019-02-03T01:02:29.600Z`
	TimeUpdated pulumi.StringOutput `pulumi:"timeUpdated"`
}

// NewMonitoringAlarm registers a new resource with the given unique name, arguments, and options.
func NewMonitoringAlarm(ctx *pulumi.Context,
	name string, args *MonitoringAlarmArgs, opts ...pulumi.ResourceOption) (*MonitoringAlarm, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CompartmentId == nil {
		return nil, errors.New("invalid value for required argument 'CompartmentId'")
	}
	if args.Destinations == nil {
		return nil, errors.New("invalid value for required argument 'Destinations'")
	}
	if args.DisplayName == nil {
		return nil, errors.New("invalid value for required argument 'DisplayName'")
	}
	if args.IsEnabled == nil {
		return nil, errors.New("invalid value for required argument 'IsEnabled'")
	}
	if args.MetricCompartmentId == nil {
		return nil, errors.New("invalid value for required argument 'MetricCompartmentId'")
	}
	if args.Namespace == nil {
		return nil, errors.New("invalid value for required argument 'Namespace'")
	}
	if args.Query == nil {
		return nil, errors.New("invalid value for required argument 'Query'")
	}
	if args.Severity == nil {
		return nil, errors.New("invalid value for required argument 'Severity'")
	}
	var resource MonitoringAlarm
	err := ctx.RegisterResource("oci:index/monitoringAlarm:MonitoringAlarm", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMonitoringAlarm gets an existing MonitoringAlarm resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMonitoringAlarm(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MonitoringAlarmState, opts ...pulumi.ResourceOption) (*MonitoringAlarm, error) {
	var resource MonitoringAlarm
	err := ctx.ReadResource("oci:index/monitoringAlarm:MonitoringAlarm", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering MonitoringAlarm resources.
type monitoringAlarmState struct {
	// (Updatable) The human-readable content of the notification delivered. Oracle recommends providing guidance to operators for resolving the alarm condition. Consider adding links to standard runbook practices. Avoid entering confidential information.  Example: `High CPU usage alert. Follow runbook instructions for resolution.`
	Body *string `pulumi:"body"`
	// (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment containing the alarm.
	CompartmentId *string `pulumi:"compartmentId"`
	// (Updatable) Usage of predefined tag keys. These predefined keys are scoped to namespaces. Example: `{"Operations.CostCenter": "42"}`
	DefinedTags map[string]interface{} `pulumi:"definedTags"`
	// (Updatable) A list of destinations to which the notifications for this alarm will be delivered.  Each destination is represented by an [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) related to the supported destination service. For example, a destination using the Notifications service is represented by a topic OCID.  Supported destination services: Notifications Service. Limit: One destination per supported destination service.
	Destinations []string `pulumi:"destinations"`
	// (Updatable) A user-friendly name for the alarm. It does not have to be unique, and it's changeable. Avoid entering confidential information.
	DisplayName *string `pulumi:"displayName"`
	// (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"Department": "Finance"}`
	FreeformTags map[string]interface{} `pulumi:"freeformTags"`
	// (Updatable) Whether the alarm is enabled.  Example: `true`
	IsEnabled *bool `pulumi:"isEnabled"`
	// (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment containing the metric being evaluated by the alarm.
	MetricCompartmentId *string `pulumi:"metricCompartmentId"`
	// (Updatable) When true, the alarm evaluates metrics from all compartments and subcompartments. The parameter can only be set to true when metricCompartmentId is the tenancy OCID (the tenancy is the root compartment). A true value requires the user to have tenancy-level permissions. If this requirement is not met, then the call is rejected. When false, the alarm evaluates metrics from only the compartment specified in metricCompartmentId. Default is false.  Example: `true`
	MetricCompartmentIdInSubtree *bool `pulumi:"metricCompartmentIdInSubtree"`
	// (Updatable) The source service or application emitting the metric that is evaluated by the alarm.  Example: `ociComputeagent`
	Namespace *string `pulumi:"namespace"`
	// (Updatable) The period of time that the condition defined in the alarm must persist before the alarm state  changes from "OK" to "FIRING". For example, a value of 5 minutes means that the  alarm must persist in breaching the condition for five minutes before the alarm updates its  state to "FIRING".
	PendingDuration *string `pulumi:"pendingDuration"`
	// (Updatable) The Monitoring Query Language (MQL) expression to evaluate for the alarm. The Alarms feature of  the Monitoring service interprets results for each returned time series as Boolean values,  where zero represents false and a non-zero value represents true. A true value means that the trigger  rule condition has been met. The query must specify a metric, statistic, interval, and trigger  rule (threshold or absence). Supported values for interval: `1m`-`60m` (also `1h`). You can optionally  specify dimensions and grouping functions. Supported grouping functions: `grouping()`, `groupBy()`.  For details about Monitoring Query Language (MQL), see [Monitoring Query Language (MQL) Reference](https://docs.cloud.oracle.com/iaas/Content/Monitoring/Reference/mql.htm). For available dimensions, review the metric definition for the supported service.  See [Supported Services](https://docs.cloud.oracle.com/iaas/Content/Monitoring/Concepts/monitoringoverview.htm#SupportedServices).
	Query *string `pulumi:"query"`
	// (Updatable) The frequency at which notifications are re-submitted, if the alarm keeps firing without interruption. Format defined by ISO 8601. For example, `PT4H` indicates four hours. Minimum: PT1M. Maximum: P30D.
	RepeatNotificationDuration *string `pulumi:"repeatNotificationDuration"`
	// (Updatable) The time between calculated aggregation windows for the alarm. Supported value: `1m`
	Resolution *string `pulumi:"resolution"`
	// (Updatable) Resource group that you want to use as a filter. The alarm retrieves metric data associated with the specified resource group only. Only one resource group can be applied per metric. A valid resourceGroup value starts with an alphabetical character and includes only alphanumeric characters, periods (.), underscores (_), hyphens (-), and dollar signs ($). Avoid entering confidential information.  Example: `frontend-fleet`
	ResourceGroup *string `pulumi:"resourceGroup"`
	// (Updatable) The perceived type of response required when the alarm is in the "FIRING" state.  Example: `CRITICAL`
	Severity *string `pulumi:"severity"`
	// The current lifecycle state of the alarm.  Example: `DELETED`
	State *string `pulumi:"state"`
	// (Updatable) The configuration details for suppressing an alarm.
	Suppression *MonitoringAlarmSuppression `pulumi:"suppression"`
	// The date and time the alarm was created. Format defined by RFC3339.  Example: `2019-02-01T01:02:29.600Z`
	TimeCreated *string `pulumi:"timeCreated"`
	// The date and time the alarm was last updated. Format defined by RFC3339.  Example: `2019-02-03T01:02:29.600Z`
	TimeUpdated *string `pulumi:"timeUpdated"`
}

type MonitoringAlarmState struct {
	// (Updatable) The human-readable content of the notification delivered. Oracle recommends providing guidance to operators for resolving the alarm condition. Consider adding links to standard runbook practices. Avoid entering confidential information.  Example: `High CPU usage alert. Follow runbook instructions for resolution.`
	Body pulumi.StringPtrInput
	// (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment containing the alarm.
	CompartmentId pulumi.StringPtrInput
	// (Updatable) Usage of predefined tag keys. These predefined keys are scoped to namespaces. Example: `{"Operations.CostCenter": "42"}`
	DefinedTags pulumi.MapInput
	// (Updatable) A list of destinations to which the notifications for this alarm will be delivered.  Each destination is represented by an [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) related to the supported destination service. For example, a destination using the Notifications service is represented by a topic OCID.  Supported destination services: Notifications Service. Limit: One destination per supported destination service.
	Destinations pulumi.StringArrayInput
	// (Updatable) A user-friendly name for the alarm. It does not have to be unique, and it's changeable. Avoid entering confidential information.
	DisplayName pulumi.StringPtrInput
	// (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"Department": "Finance"}`
	FreeformTags pulumi.MapInput
	// (Updatable) Whether the alarm is enabled.  Example: `true`
	IsEnabled pulumi.BoolPtrInput
	// (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment containing the metric being evaluated by the alarm.
	MetricCompartmentId pulumi.StringPtrInput
	// (Updatable) When true, the alarm evaluates metrics from all compartments and subcompartments. The parameter can only be set to true when metricCompartmentId is the tenancy OCID (the tenancy is the root compartment). A true value requires the user to have tenancy-level permissions. If this requirement is not met, then the call is rejected. When false, the alarm evaluates metrics from only the compartment specified in metricCompartmentId. Default is false.  Example: `true`
	MetricCompartmentIdInSubtree pulumi.BoolPtrInput
	// (Updatable) The source service or application emitting the metric that is evaluated by the alarm.  Example: `ociComputeagent`
	Namespace pulumi.StringPtrInput
	// (Updatable) The period of time that the condition defined in the alarm must persist before the alarm state  changes from "OK" to "FIRING". For example, a value of 5 minutes means that the  alarm must persist in breaching the condition for five minutes before the alarm updates its  state to "FIRING".
	PendingDuration pulumi.StringPtrInput
	// (Updatable) The Monitoring Query Language (MQL) expression to evaluate for the alarm. The Alarms feature of  the Monitoring service interprets results for each returned time series as Boolean values,  where zero represents false and a non-zero value represents true. A true value means that the trigger  rule condition has been met. The query must specify a metric, statistic, interval, and trigger  rule (threshold or absence). Supported values for interval: `1m`-`60m` (also `1h`). You can optionally  specify dimensions and grouping functions. Supported grouping functions: `grouping()`, `groupBy()`.  For details about Monitoring Query Language (MQL), see [Monitoring Query Language (MQL) Reference](https://docs.cloud.oracle.com/iaas/Content/Monitoring/Reference/mql.htm). For available dimensions, review the metric definition for the supported service.  See [Supported Services](https://docs.cloud.oracle.com/iaas/Content/Monitoring/Concepts/monitoringoverview.htm#SupportedServices).
	Query pulumi.StringPtrInput
	// (Updatable) The frequency at which notifications are re-submitted, if the alarm keeps firing without interruption. Format defined by ISO 8601. For example, `PT4H` indicates four hours. Minimum: PT1M. Maximum: P30D.
	RepeatNotificationDuration pulumi.StringPtrInput
	// (Updatable) The time between calculated aggregation windows for the alarm. Supported value: `1m`
	Resolution pulumi.StringPtrInput
	// (Updatable) Resource group that you want to use as a filter. The alarm retrieves metric data associated with the specified resource group only. Only one resource group can be applied per metric. A valid resourceGroup value starts with an alphabetical character and includes only alphanumeric characters, periods (.), underscores (_), hyphens (-), and dollar signs ($). Avoid entering confidential information.  Example: `frontend-fleet`
	ResourceGroup pulumi.StringPtrInput
	// (Updatable) The perceived type of response required when the alarm is in the "FIRING" state.  Example: `CRITICAL`
	Severity pulumi.StringPtrInput
	// The current lifecycle state of the alarm.  Example: `DELETED`
	State pulumi.StringPtrInput
	// (Updatable) The configuration details for suppressing an alarm.
	Suppression MonitoringAlarmSuppressionPtrInput
	// The date and time the alarm was created. Format defined by RFC3339.  Example: `2019-02-01T01:02:29.600Z`
	TimeCreated pulumi.StringPtrInput
	// The date and time the alarm was last updated. Format defined by RFC3339.  Example: `2019-02-03T01:02:29.600Z`
	TimeUpdated pulumi.StringPtrInput
}

func (MonitoringAlarmState) ElementType() reflect.Type {
	return reflect.TypeOf((*monitoringAlarmState)(nil)).Elem()
}

type monitoringAlarmArgs struct {
	// (Updatable) The human-readable content of the notification delivered. Oracle recommends providing guidance to operators for resolving the alarm condition. Consider adding links to standard runbook practices. Avoid entering confidential information.  Example: `High CPU usage alert. Follow runbook instructions for resolution.`
	Body *string `pulumi:"body"`
	// (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment containing the alarm.
	CompartmentId string `pulumi:"compartmentId"`
	// (Updatable) Usage of predefined tag keys. These predefined keys are scoped to namespaces. Example: `{"Operations.CostCenter": "42"}`
	DefinedTags map[string]interface{} `pulumi:"definedTags"`
	// (Updatable) A list of destinations to which the notifications for this alarm will be delivered.  Each destination is represented by an [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) related to the supported destination service. For example, a destination using the Notifications service is represented by a topic OCID.  Supported destination services: Notifications Service. Limit: One destination per supported destination service.
	Destinations []string `pulumi:"destinations"`
	// (Updatable) A user-friendly name for the alarm. It does not have to be unique, and it's changeable. Avoid entering confidential information.
	DisplayName string `pulumi:"displayName"`
	// (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"Department": "Finance"}`
	FreeformTags map[string]interface{} `pulumi:"freeformTags"`
	// (Updatable) Whether the alarm is enabled.  Example: `true`
	IsEnabled bool `pulumi:"isEnabled"`
	// (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment containing the metric being evaluated by the alarm.
	MetricCompartmentId string `pulumi:"metricCompartmentId"`
	// (Updatable) When true, the alarm evaluates metrics from all compartments and subcompartments. The parameter can only be set to true when metricCompartmentId is the tenancy OCID (the tenancy is the root compartment). A true value requires the user to have tenancy-level permissions. If this requirement is not met, then the call is rejected. When false, the alarm evaluates metrics from only the compartment specified in metricCompartmentId. Default is false.  Example: `true`
	MetricCompartmentIdInSubtree *bool `pulumi:"metricCompartmentIdInSubtree"`
	// (Updatable) The source service or application emitting the metric that is evaluated by the alarm.  Example: `ociComputeagent`
	Namespace string `pulumi:"namespace"`
	// (Updatable) The period of time that the condition defined in the alarm must persist before the alarm state  changes from "OK" to "FIRING". For example, a value of 5 minutes means that the  alarm must persist in breaching the condition for five minutes before the alarm updates its  state to "FIRING".
	PendingDuration *string `pulumi:"pendingDuration"`
	// (Updatable) The Monitoring Query Language (MQL) expression to evaluate for the alarm. The Alarms feature of  the Monitoring service interprets results for each returned time series as Boolean values,  where zero represents false and a non-zero value represents true. A true value means that the trigger  rule condition has been met. The query must specify a metric, statistic, interval, and trigger  rule (threshold or absence). Supported values for interval: `1m`-`60m` (also `1h`). You can optionally  specify dimensions and grouping functions. Supported grouping functions: `grouping()`, `groupBy()`.  For details about Monitoring Query Language (MQL), see [Monitoring Query Language (MQL) Reference](https://docs.cloud.oracle.com/iaas/Content/Monitoring/Reference/mql.htm). For available dimensions, review the metric definition for the supported service.  See [Supported Services](https://docs.cloud.oracle.com/iaas/Content/Monitoring/Concepts/monitoringoverview.htm#SupportedServices).
	Query string `pulumi:"query"`
	// (Updatable) The frequency at which notifications are re-submitted, if the alarm keeps firing without interruption. Format defined by ISO 8601. For example, `PT4H` indicates four hours. Minimum: PT1M. Maximum: P30D.
	RepeatNotificationDuration *string `pulumi:"repeatNotificationDuration"`
	// (Updatable) The time between calculated aggregation windows for the alarm. Supported value: `1m`
	Resolution *string `pulumi:"resolution"`
	// (Updatable) Resource group that you want to use as a filter. The alarm retrieves metric data associated with the specified resource group only. Only one resource group can be applied per metric. A valid resourceGroup value starts with an alphabetical character and includes only alphanumeric characters, periods (.), underscores (_), hyphens (-), and dollar signs ($). Avoid entering confidential information.  Example: `frontend-fleet`
	ResourceGroup *string `pulumi:"resourceGroup"`
	// (Updatable) The perceived type of response required when the alarm is in the "FIRING" state.  Example: `CRITICAL`
	Severity string `pulumi:"severity"`
	// (Updatable) The configuration details for suppressing an alarm.
	Suppression *MonitoringAlarmSuppression `pulumi:"suppression"`
}

// The set of arguments for constructing a MonitoringAlarm resource.
type MonitoringAlarmArgs struct {
	// (Updatable) The human-readable content of the notification delivered. Oracle recommends providing guidance to operators for resolving the alarm condition. Consider adding links to standard runbook practices. Avoid entering confidential information.  Example: `High CPU usage alert. Follow runbook instructions for resolution.`
	Body pulumi.StringPtrInput
	// (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment containing the alarm.
	CompartmentId pulumi.StringInput
	// (Updatable) Usage of predefined tag keys. These predefined keys are scoped to namespaces. Example: `{"Operations.CostCenter": "42"}`
	DefinedTags pulumi.MapInput
	// (Updatable) A list of destinations to which the notifications for this alarm will be delivered.  Each destination is represented by an [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) related to the supported destination service. For example, a destination using the Notifications service is represented by a topic OCID.  Supported destination services: Notifications Service. Limit: One destination per supported destination service.
	Destinations pulumi.StringArrayInput
	// (Updatable) A user-friendly name for the alarm. It does not have to be unique, and it's changeable. Avoid entering confidential information.
	DisplayName pulumi.StringInput
	// (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"Department": "Finance"}`
	FreeformTags pulumi.MapInput
	// (Updatable) Whether the alarm is enabled.  Example: `true`
	IsEnabled pulumi.BoolInput
	// (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment containing the metric being evaluated by the alarm.
	MetricCompartmentId pulumi.StringInput
	// (Updatable) When true, the alarm evaluates metrics from all compartments and subcompartments. The parameter can only be set to true when metricCompartmentId is the tenancy OCID (the tenancy is the root compartment). A true value requires the user to have tenancy-level permissions. If this requirement is not met, then the call is rejected. When false, the alarm evaluates metrics from only the compartment specified in metricCompartmentId. Default is false.  Example: `true`
	MetricCompartmentIdInSubtree pulumi.BoolPtrInput
	// (Updatable) The source service or application emitting the metric that is evaluated by the alarm.  Example: `ociComputeagent`
	Namespace pulumi.StringInput
	// (Updatable) The period of time that the condition defined in the alarm must persist before the alarm state  changes from "OK" to "FIRING". For example, a value of 5 minutes means that the  alarm must persist in breaching the condition for five minutes before the alarm updates its  state to "FIRING".
	PendingDuration pulumi.StringPtrInput
	// (Updatable) The Monitoring Query Language (MQL) expression to evaluate for the alarm. The Alarms feature of  the Monitoring service interprets results for each returned time series as Boolean values,  where zero represents false and a non-zero value represents true. A true value means that the trigger  rule condition has been met. The query must specify a metric, statistic, interval, and trigger  rule (threshold or absence). Supported values for interval: `1m`-`60m` (also `1h`). You can optionally  specify dimensions and grouping functions. Supported grouping functions: `grouping()`, `groupBy()`.  For details about Monitoring Query Language (MQL), see [Monitoring Query Language (MQL) Reference](https://docs.cloud.oracle.com/iaas/Content/Monitoring/Reference/mql.htm). For available dimensions, review the metric definition for the supported service.  See [Supported Services](https://docs.cloud.oracle.com/iaas/Content/Monitoring/Concepts/monitoringoverview.htm#SupportedServices).
	Query pulumi.StringInput
	// (Updatable) The frequency at which notifications are re-submitted, if the alarm keeps firing without interruption. Format defined by ISO 8601. For example, `PT4H` indicates four hours. Minimum: PT1M. Maximum: P30D.
	RepeatNotificationDuration pulumi.StringPtrInput
	// (Updatable) The time between calculated aggregation windows for the alarm. Supported value: `1m`
	Resolution pulumi.StringPtrInput
	// (Updatable) Resource group that you want to use as a filter. The alarm retrieves metric data associated with the specified resource group only. Only one resource group can be applied per metric. A valid resourceGroup value starts with an alphabetical character and includes only alphanumeric characters, periods (.), underscores (_), hyphens (-), and dollar signs ($). Avoid entering confidential information.  Example: `frontend-fleet`
	ResourceGroup pulumi.StringPtrInput
	// (Updatable) The perceived type of response required when the alarm is in the "FIRING" state.  Example: `CRITICAL`
	Severity pulumi.StringInput
	// (Updatable) The configuration details for suppressing an alarm.
	Suppression MonitoringAlarmSuppressionPtrInput
}

func (MonitoringAlarmArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*monitoringAlarmArgs)(nil)).Elem()
}

type MonitoringAlarmInput interface {
	pulumi.Input

	ToMonitoringAlarmOutput() MonitoringAlarmOutput
	ToMonitoringAlarmOutputWithContext(ctx context.Context) MonitoringAlarmOutput
}

func (*MonitoringAlarm) ElementType() reflect.Type {
	return reflect.TypeOf((*MonitoringAlarm)(nil))
}

func (i *MonitoringAlarm) ToMonitoringAlarmOutput() MonitoringAlarmOutput {
	return i.ToMonitoringAlarmOutputWithContext(context.Background())
}

func (i *MonitoringAlarm) ToMonitoringAlarmOutputWithContext(ctx context.Context) MonitoringAlarmOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitoringAlarmOutput)
}

func (i *MonitoringAlarm) ToMonitoringAlarmPtrOutput() MonitoringAlarmPtrOutput {
	return i.ToMonitoringAlarmPtrOutputWithContext(context.Background())
}

func (i *MonitoringAlarm) ToMonitoringAlarmPtrOutputWithContext(ctx context.Context) MonitoringAlarmPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitoringAlarmPtrOutput)
}

type MonitoringAlarmPtrInput interface {
	pulumi.Input

	ToMonitoringAlarmPtrOutput() MonitoringAlarmPtrOutput
	ToMonitoringAlarmPtrOutputWithContext(ctx context.Context) MonitoringAlarmPtrOutput
}

type monitoringAlarmPtrType MonitoringAlarmArgs

func (*monitoringAlarmPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MonitoringAlarm)(nil))
}

func (i *monitoringAlarmPtrType) ToMonitoringAlarmPtrOutput() MonitoringAlarmPtrOutput {
	return i.ToMonitoringAlarmPtrOutputWithContext(context.Background())
}

func (i *monitoringAlarmPtrType) ToMonitoringAlarmPtrOutputWithContext(ctx context.Context) MonitoringAlarmPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitoringAlarmPtrOutput)
}

// MonitoringAlarmArrayInput is an input type that accepts MonitoringAlarmArray and MonitoringAlarmArrayOutput values.
// You can construct a concrete instance of `MonitoringAlarmArrayInput` via:
//
//          MonitoringAlarmArray{ MonitoringAlarmArgs{...} }
type MonitoringAlarmArrayInput interface {
	pulumi.Input

	ToMonitoringAlarmArrayOutput() MonitoringAlarmArrayOutput
	ToMonitoringAlarmArrayOutputWithContext(context.Context) MonitoringAlarmArrayOutput
}

type MonitoringAlarmArray []MonitoringAlarmInput

func (MonitoringAlarmArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MonitoringAlarm)(nil)).Elem()
}

func (i MonitoringAlarmArray) ToMonitoringAlarmArrayOutput() MonitoringAlarmArrayOutput {
	return i.ToMonitoringAlarmArrayOutputWithContext(context.Background())
}

func (i MonitoringAlarmArray) ToMonitoringAlarmArrayOutputWithContext(ctx context.Context) MonitoringAlarmArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitoringAlarmArrayOutput)
}

// MonitoringAlarmMapInput is an input type that accepts MonitoringAlarmMap and MonitoringAlarmMapOutput values.
// You can construct a concrete instance of `MonitoringAlarmMapInput` via:
//
//          MonitoringAlarmMap{ "key": MonitoringAlarmArgs{...} }
type MonitoringAlarmMapInput interface {
	pulumi.Input

	ToMonitoringAlarmMapOutput() MonitoringAlarmMapOutput
	ToMonitoringAlarmMapOutputWithContext(context.Context) MonitoringAlarmMapOutput
}

type MonitoringAlarmMap map[string]MonitoringAlarmInput

func (MonitoringAlarmMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MonitoringAlarm)(nil)).Elem()
}

func (i MonitoringAlarmMap) ToMonitoringAlarmMapOutput() MonitoringAlarmMapOutput {
	return i.ToMonitoringAlarmMapOutputWithContext(context.Background())
}

func (i MonitoringAlarmMap) ToMonitoringAlarmMapOutputWithContext(ctx context.Context) MonitoringAlarmMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MonitoringAlarmMapOutput)
}

type MonitoringAlarmOutput struct {
	*pulumi.OutputState
}

func (MonitoringAlarmOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MonitoringAlarm)(nil))
}

func (o MonitoringAlarmOutput) ToMonitoringAlarmOutput() MonitoringAlarmOutput {
	return o
}

func (o MonitoringAlarmOutput) ToMonitoringAlarmOutputWithContext(ctx context.Context) MonitoringAlarmOutput {
	return o
}

func (o MonitoringAlarmOutput) ToMonitoringAlarmPtrOutput() MonitoringAlarmPtrOutput {
	return o.ToMonitoringAlarmPtrOutputWithContext(context.Background())
}

func (o MonitoringAlarmOutput) ToMonitoringAlarmPtrOutputWithContext(ctx context.Context) MonitoringAlarmPtrOutput {
	return o.ApplyT(func(v MonitoringAlarm) *MonitoringAlarm {
		return &v
	}).(MonitoringAlarmPtrOutput)
}

type MonitoringAlarmPtrOutput struct {
	*pulumi.OutputState
}

func (MonitoringAlarmPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MonitoringAlarm)(nil))
}

func (o MonitoringAlarmPtrOutput) ToMonitoringAlarmPtrOutput() MonitoringAlarmPtrOutput {
	return o
}

func (o MonitoringAlarmPtrOutput) ToMonitoringAlarmPtrOutputWithContext(ctx context.Context) MonitoringAlarmPtrOutput {
	return o
}

type MonitoringAlarmArrayOutput struct{ *pulumi.OutputState }

func (MonitoringAlarmArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MonitoringAlarm)(nil))
}

func (o MonitoringAlarmArrayOutput) ToMonitoringAlarmArrayOutput() MonitoringAlarmArrayOutput {
	return o
}

func (o MonitoringAlarmArrayOutput) ToMonitoringAlarmArrayOutputWithContext(ctx context.Context) MonitoringAlarmArrayOutput {
	return o
}

func (o MonitoringAlarmArrayOutput) Index(i pulumi.IntInput) MonitoringAlarmOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MonitoringAlarm {
		return vs[0].([]MonitoringAlarm)[vs[1].(int)]
	}).(MonitoringAlarmOutput)
}

type MonitoringAlarmMapOutput struct{ *pulumi.OutputState }

func (MonitoringAlarmMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]MonitoringAlarm)(nil))
}

func (o MonitoringAlarmMapOutput) ToMonitoringAlarmMapOutput() MonitoringAlarmMapOutput {
	return o
}

func (o MonitoringAlarmMapOutput) ToMonitoringAlarmMapOutputWithContext(ctx context.Context) MonitoringAlarmMapOutput {
	return o
}

func (o MonitoringAlarmMapOutput) MapIndex(k pulumi.StringInput) MonitoringAlarmOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) MonitoringAlarm {
		return vs[0].(map[string]MonitoringAlarm)[vs[1].(string)]
	}).(MonitoringAlarmOutput)
}

func init() {
	pulumi.RegisterOutputType(MonitoringAlarmOutput{})
	pulumi.RegisterOutputType(MonitoringAlarmPtrOutput{})
	pulumi.RegisterOutputType(MonitoringAlarmArrayOutput{})
	pulumi.RegisterOutputType(MonitoringAlarmMapOutput{})
}
