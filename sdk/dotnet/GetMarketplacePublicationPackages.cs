// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci
{
    public static class GetMarketplacePublicationPackages
    {
        /// <summary>
        /// This data source provides the list of Publication Packages in Oracle Cloud Infrastructure Marketplace service.
        /// 
        /// Lists the packages in the given Publication
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var testPublicationPackages = Output.Create(Oci.GetMarketplacePublicationPackages.InvokeAsync(new Oci.GetMarketplacePublicationPackagesArgs
        ///         {
        ///             PublicationId = oci_marketplace_publication.Test_publication.Id,
        ///             PackageType = @var.Publication_package_package_type,
        ///             PackageVersion = @var.Publication_package_package_version,
        ///         }));
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetMarketplacePublicationPackagesResult> InvokeAsync(GetMarketplacePublicationPackagesArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetMarketplacePublicationPackagesResult>("oci:index/getMarketplacePublicationPackages:GetMarketplacePublicationPackages", args ?? new GetMarketplacePublicationPackagesArgs(), options.WithVersion());
    }


    public sealed class GetMarketplacePublicationPackagesArgs : Pulumi.InvokeArgs
    {
        [Input("filters")]
        private List<Inputs.GetMarketplacePublicationPackagesFilterArgs>? _filters;
        public List<Inputs.GetMarketplacePublicationPackagesFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetMarketplacePublicationPackagesFilterArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// A filter to return only packages that match the given package type exactly.
        /// </summary>
        [Input("packageType")]
        public string? PackageType { get; set; }

        /// <summary>
        /// The version of the package. Package versions are unique within a listing.
        /// </summary>
        [Input("packageVersion")]
        public string? PackageVersion { get; set; }

        /// <summary>
        /// The unique identifier for the listing.
        /// </summary>
        [Input("publicationId", required: true)]
        public string PublicationId { get; set; } = null!;

        public GetMarketplacePublicationPackagesArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetMarketplacePublicationPackagesResult
    {
        public readonly ImmutableArray<Outputs.GetMarketplacePublicationPackagesFilterResult> Filters;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The specified package's type.
        /// </summary>
        public readonly string? PackageType;
        public readonly string? PackageVersion;
        public readonly string PublicationId;
        /// <summary>
        /// The list of publication_packages.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetMarketplacePublicationPackagesPublicationPackageResult> PublicationPackages;

        [OutputConstructor]
        private GetMarketplacePublicationPackagesResult(
            ImmutableArray<Outputs.GetMarketplacePublicationPackagesFilterResult> filters,

            string id,

            string? packageType,

            string? packageVersion,

            string publicationId,

            ImmutableArray<Outputs.GetMarketplacePublicationPackagesPublicationPackageResult> publicationPackages)
        {
            Filters = filters;
            Id = id;
            PackageType = packageType;
            PackageVersion = packageVersion;
            PublicationId = publicationId;
            PublicationPackages = publicationPackages;
        }
    }
}
