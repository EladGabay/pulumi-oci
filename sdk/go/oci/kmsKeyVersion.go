// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package oci

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource provides the Key Version resource in Oracle Cloud Infrastructure Kms service.
//
// Generates a new [KeyVersion](https://docs.cloud.oracle.com/iaas/api/#/en/key/latest/KeyVersion/) resource that provides new cryptographic
// material for a master encryption key. The key must be in an `ENABLED` state to be rotated.
//
// As a management operation, this call is subject to a Key Management limit that applies to the total number
// of requests across all  management write operations. Key Management might throttle this call to reject an
// otherwise valid request when the total rate of management write operations exceeds 10 requests per second
// for a given tenancy.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-oci/sdk/go/oci"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := oci.NewKmsKeyVersion(ctx, "testKeyVersion", &oci.KmsKeyVersionArgs{
// 			KeyId:              pulumi.Any(oci_kms_key.Test_key.Id),
// 			ManagementEndpoint: pulumi.Any(_var.Key_version_management_endpoint),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// KeyVersions can be imported using the `id`, e.g.
//
// ```sh
//  $ pulumi import oci:index/kmsKeyVersion:KmsKeyVersion test_key_version "managementEndpoint/{managementEndpoint}/keys/{keyId}/keyVersions/{keyVersionId}"
// ```
type KmsKeyVersion struct {
	pulumi.CustomResourceState

	// The OCID of the compartment that contains this key version.
	CompartmentId pulumi.StringOutput `pulumi:"compartmentId"`
	// A boolean that will be true when key version is primary, and will be false when key version is a replica from a primary key version.
	IsPrimary pulumi.BoolOutput `pulumi:"isPrimary"`
	// The OCID of the key.
	KeyId        pulumi.StringOutput `pulumi:"keyId"`
	KeyVersionId pulumi.StringOutput `pulumi:"keyVersionId"`
	// The service endpoint to perform management operations against. Management operations include 'Create,' 'Update,' 'List,' 'Get,' and 'Delete' operations. See Vault Management endpoint.
	ManagementEndpoint pulumi.StringOutput `pulumi:"managementEndpoint"`
	// The public key in PEM format. (This value pertains only to RSA and ECDSA keys.)
	PublicKey pulumi.StringOutput `pulumi:"publicKey"`
	// KeyVersion replica details
	ReplicaDetails    KmsKeyVersionReplicaDetailsOutput `pulumi:"replicaDetails"`
	RestoredFromKeyId pulumi.StringOutput               `pulumi:"restoredFromKeyId"`
	// The OCID of the key version from which this key version was restored.
	RestoredFromKeyVersionId pulumi.StringOutput `pulumi:"restoredFromKeyVersionId"`
	// The key version's current lifecycle state.  Example: `ENABLED`
	State pulumi.StringOutput `pulumi:"state"`
	// The date and time this key version was created, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format.  Example: "2018-04-03T21:10:29.600Z"
	TimeCreated pulumi.StringOutput `pulumi:"timeCreated"`
	// (Updatable) An optional property for the deletion time of the key version, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: `2019-04-03T21:10:29.600Z`
	TimeOfDeletion pulumi.StringOutput `pulumi:"timeOfDeletion"`
	// The OCID of the vault that contains this key version.
	VaultId pulumi.StringOutput `pulumi:"vaultId"`
}

// NewKmsKeyVersion registers a new resource with the given unique name, arguments, and options.
func NewKmsKeyVersion(ctx *pulumi.Context,
	name string, args *KmsKeyVersionArgs, opts ...pulumi.ResourceOption) (*KmsKeyVersion, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.KeyId == nil {
		return nil, errors.New("invalid value for required argument 'KeyId'")
	}
	if args.ManagementEndpoint == nil {
		return nil, errors.New("invalid value for required argument 'ManagementEndpoint'")
	}
	var resource KmsKeyVersion
	err := ctx.RegisterResource("oci:index/kmsKeyVersion:KmsKeyVersion", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetKmsKeyVersion gets an existing KmsKeyVersion resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetKmsKeyVersion(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *KmsKeyVersionState, opts ...pulumi.ResourceOption) (*KmsKeyVersion, error) {
	var resource KmsKeyVersion
	err := ctx.ReadResource("oci:index/kmsKeyVersion:KmsKeyVersion", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering KmsKeyVersion resources.
type kmsKeyVersionState struct {
	// The OCID of the compartment that contains this key version.
	CompartmentId *string `pulumi:"compartmentId"`
	// A boolean that will be true when key version is primary, and will be false when key version is a replica from a primary key version.
	IsPrimary *bool `pulumi:"isPrimary"`
	// The OCID of the key.
	KeyId        *string `pulumi:"keyId"`
	KeyVersionId *string `pulumi:"keyVersionId"`
	// The service endpoint to perform management operations against. Management operations include 'Create,' 'Update,' 'List,' 'Get,' and 'Delete' operations. See Vault Management endpoint.
	ManagementEndpoint *string `pulumi:"managementEndpoint"`
	// The public key in PEM format. (This value pertains only to RSA and ECDSA keys.)
	PublicKey *string `pulumi:"publicKey"`
	// KeyVersion replica details
	ReplicaDetails    *KmsKeyVersionReplicaDetails `pulumi:"replicaDetails"`
	RestoredFromKeyId *string                      `pulumi:"restoredFromKeyId"`
	// The OCID of the key version from which this key version was restored.
	RestoredFromKeyVersionId *string `pulumi:"restoredFromKeyVersionId"`
	// The key version's current lifecycle state.  Example: `ENABLED`
	State *string `pulumi:"state"`
	// The date and time this key version was created, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format.  Example: "2018-04-03T21:10:29.600Z"
	TimeCreated *string `pulumi:"timeCreated"`
	// (Updatable) An optional property for the deletion time of the key version, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: `2019-04-03T21:10:29.600Z`
	TimeOfDeletion *string `pulumi:"timeOfDeletion"`
	// The OCID of the vault that contains this key version.
	VaultId *string `pulumi:"vaultId"`
}

type KmsKeyVersionState struct {
	// The OCID of the compartment that contains this key version.
	CompartmentId pulumi.StringPtrInput
	// A boolean that will be true when key version is primary, and will be false when key version is a replica from a primary key version.
	IsPrimary pulumi.BoolPtrInput
	// The OCID of the key.
	KeyId        pulumi.StringPtrInput
	KeyVersionId pulumi.StringPtrInput
	// The service endpoint to perform management operations against. Management operations include 'Create,' 'Update,' 'List,' 'Get,' and 'Delete' operations. See Vault Management endpoint.
	ManagementEndpoint pulumi.StringPtrInput
	// The public key in PEM format. (This value pertains only to RSA and ECDSA keys.)
	PublicKey pulumi.StringPtrInput
	// KeyVersion replica details
	ReplicaDetails    KmsKeyVersionReplicaDetailsPtrInput
	RestoredFromKeyId pulumi.StringPtrInput
	// The OCID of the key version from which this key version was restored.
	RestoredFromKeyVersionId pulumi.StringPtrInput
	// The key version's current lifecycle state.  Example: `ENABLED`
	State pulumi.StringPtrInput
	// The date and time this key version was created, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format.  Example: "2018-04-03T21:10:29.600Z"
	TimeCreated pulumi.StringPtrInput
	// (Updatable) An optional property for the deletion time of the key version, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: `2019-04-03T21:10:29.600Z`
	TimeOfDeletion pulumi.StringPtrInput
	// The OCID of the vault that contains this key version.
	VaultId pulumi.StringPtrInput
}

func (KmsKeyVersionState) ElementType() reflect.Type {
	return reflect.TypeOf((*kmsKeyVersionState)(nil)).Elem()
}

type kmsKeyVersionArgs struct {
	// The OCID of the key.
	KeyId string `pulumi:"keyId"`
	// The service endpoint to perform management operations against. Management operations include 'Create,' 'Update,' 'List,' 'Get,' and 'Delete' operations. See Vault Management endpoint.
	ManagementEndpoint string `pulumi:"managementEndpoint"`
	// (Updatable) An optional property for the deletion time of the key version, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: `2019-04-03T21:10:29.600Z`
	TimeOfDeletion *string `pulumi:"timeOfDeletion"`
}

// The set of arguments for constructing a KmsKeyVersion resource.
type KmsKeyVersionArgs struct {
	// The OCID of the key.
	KeyId pulumi.StringInput
	// The service endpoint to perform management operations against. Management operations include 'Create,' 'Update,' 'List,' 'Get,' and 'Delete' operations. See Vault Management endpoint.
	ManagementEndpoint pulumi.StringInput
	// (Updatable) An optional property for the deletion time of the key version, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: `2019-04-03T21:10:29.600Z`
	TimeOfDeletion pulumi.StringPtrInput
}

func (KmsKeyVersionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*kmsKeyVersionArgs)(nil)).Elem()
}

type KmsKeyVersionInput interface {
	pulumi.Input

	ToKmsKeyVersionOutput() KmsKeyVersionOutput
	ToKmsKeyVersionOutputWithContext(ctx context.Context) KmsKeyVersionOutput
}

func (*KmsKeyVersion) ElementType() reflect.Type {
	return reflect.TypeOf((*KmsKeyVersion)(nil))
}

func (i *KmsKeyVersion) ToKmsKeyVersionOutput() KmsKeyVersionOutput {
	return i.ToKmsKeyVersionOutputWithContext(context.Background())
}

func (i *KmsKeyVersion) ToKmsKeyVersionOutputWithContext(ctx context.Context) KmsKeyVersionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KmsKeyVersionOutput)
}

func (i *KmsKeyVersion) ToKmsKeyVersionPtrOutput() KmsKeyVersionPtrOutput {
	return i.ToKmsKeyVersionPtrOutputWithContext(context.Background())
}

func (i *KmsKeyVersion) ToKmsKeyVersionPtrOutputWithContext(ctx context.Context) KmsKeyVersionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KmsKeyVersionPtrOutput)
}

type KmsKeyVersionPtrInput interface {
	pulumi.Input

	ToKmsKeyVersionPtrOutput() KmsKeyVersionPtrOutput
	ToKmsKeyVersionPtrOutputWithContext(ctx context.Context) KmsKeyVersionPtrOutput
}

type kmsKeyVersionPtrType KmsKeyVersionArgs

func (*kmsKeyVersionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KmsKeyVersion)(nil))
}

func (i *kmsKeyVersionPtrType) ToKmsKeyVersionPtrOutput() KmsKeyVersionPtrOutput {
	return i.ToKmsKeyVersionPtrOutputWithContext(context.Background())
}

func (i *kmsKeyVersionPtrType) ToKmsKeyVersionPtrOutputWithContext(ctx context.Context) KmsKeyVersionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KmsKeyVersionPtrOutput)
}

// KmsKeyVersionArrayInput is an input type that accepts KmsKeyVersionArray and KmsKeyVersionArrayOutput values.
// You can construct a concrete instance of `KmsKeyVersionArrayInput` via:
//
//          KmsKeyVersionArray{ KmsKeyVersionArgs{...} }
type KmsKeyVersionArrayInput interface {
	pulumi.Input

	ToKmsKeyVersionArrayOutput() KmsKeyVersionArrayOutput
	ToKmsKeyVersionArrayOutputWithContext(context.Context) KmsKeyVersionArrayOutput
}

type KmsKeyVersionArray []KmsKeyVersionInput

func (KmsKeyVersionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*KmsKeyVersion)(nil)).Elem()
}

func (i KmsKeyVersionArray) ToKmsKeyVersionArrayOutput() KmsKeyVersionArrayOutput {
	return i.ToKmsKeyVersionArrayOutputWithContext(context.Background())
}

func (i KmsKeyVersionArray) ToKmsKeyVersionArrayOutputWithContext(ctx context.Context) KmsKeyVersionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KmsKeyVersionArrayOutput)
}

// KmsKeyVersionMapInput is an input type that accepts KmsKeyVersionMap and KmsKeyVersionMapOutput values.
// You can construct a concrete instance of `KmsKeyVersionMapInput` via:
//
//          KmsKeyVersionMap{ "key": KmsKeyVersionArgs{...} }
type KmsKeyVersionMapInput interface {
	pulumi.Input

	ToKmsKeyVersionMapOutput() KmsKeyVersionMapOutput
	ToKmsKeyVersionMapOutputWithContext(context.Context) KmsKeyVersionMapOutput
}

type KmsKeyVersionMap map[string]KmsKeyVersionInput

func (KmsKeyVersionMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*KmsKeyVersion)(nil)).Elem()
}

func (i KmsKeyVersionMap) ToKmsKeyVersionMapOutput() KmsKeyVersionMapOutput {
	return i.ToKmsKeyVersionMapOutputWithContext(context.Background())
}

func (i KmsKeyVersionMap) ToKmsKeyVersionMapOutputWithContext(ctx context.Context) KmsKeyVersionMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KmsKeyVersionMapOutput)
}

type KmsKeyVersionOutput struct {
	*pulumi.OutputState
}

func (KmsKeyVersionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KmsKeyVersion)(nil))
}

func (o KmsKeyVersionOutput) ToKmsKeyVersionOutput() KmsKeyVersionOutput {
	return o
}

func (o KmsKeyVersionOutput) ToKmsKeyVersionOutputWithContext(ctx context.Context) KmsKeyVersionOutput {
	return o
}

func (o KmsKeyVersionOutput) ToKmsKeyVersionPtrOutput() KmsKeyVersionPtrOutput {
	return o.ToKmsKeyVersionPtrOutputWithContext(context.Background())
}

func (o KmsKeyVersionOutput) ToKmsKeyVersionPtrOutputWithContext(ctx context.Context) KmsKeyVersionPtrOutput {
	return o.ApplyT(func(v KmsKeyVersion) *KmsKeyVersion {
		return &v
	}).(KmsKeyVersionPtrOutput)
}

type KmsKeyVersionPtrOutput struct {
	*pulumi.OutputState
}

func (KmsKeyVersionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KmsKeyVersion)(nil))
}

func (o KmsKeyVersionPtrOutput) ToKmsKeyVersionPtrOutput() KmsKeyVersionPtrOutput {
	return o
}

func (o KmsKeyVersionPtrOutput) ToKmsKeyVersionPtrOutputWithContext(ctx context.Context) KmsKeyVersionPtrOutput {
	return o
}

type KmsKeyVersionArrayOutput struct{ *pulumi.OutputState }

func (KmsKeyVersionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]KmsKeyVersion)(nil))
}

func (o KmsKeyVersionArrayOutput) ToKmsKeyVersionArrayOutput() KmsKeyVersionArrayOutput {
	return o
}

func (o KmsKeyVersionArrayOutput) ToKmsKeyVersionArrayOutputWithContext(ctx context.Context) KmsKeyVersionArrayOutput {
	return o
}

func (o KmsKeyVersionArrayOutput) Index(i pulumi.IntInput) KmsKeyVersionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) KmsKeyVersion {
		return vs[0].([]KmsKeyVersion)[vs[1].(int)]
	}).(KmsKeyVersionOutput)
}

type KmsKeyVersionMapOutput struct{ *pulumi.OutputState }

func (KmsKeyVersionMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]KmsKeyVersion)(nil))
}

func (o KmsKeyVersionMapOutput) ToKmsKeyVersionMapOutput() KmsKeyVersionMapOutput {
	return o
}

func (o KmsKeyVersionMapOutput) ToKmsKeyVersionMapOutputWithContext(ctx context.Context) KmsKeyVersionMapOutput {
	return o
}

func (o KmsKeyVersionMapOutput) MapIndex(k pulumi.StringInput) KmsKeyVersionOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) KmsKeyVersion {
		return vs[0].(map[string]KmsKeyVersion)[vs[1].(string)]
	}).(KmsKeyVersionOutput)
}

func init() {
	pulumi.RegisterOutputType(KmsKeyVersionOutput{})
	pulumi.RegisterOutputType(KmsKeyVersionPtrOutput{})
	pulumi.RegisterOutputType(KmsKeyVersionArrayOutput{})
	pulumi.RegisterOutputType(KmsKeyVersionMapOutput{})
}
