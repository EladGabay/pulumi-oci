// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package oci

import (
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This data source provides the list of Catalog Types in Oracle Cloud Infrastructure Data Catalog service.
//
// Returns a list of all types within a data catalog.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-oci/sdk/go/oci"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		opt0 := _var.Catalog_type_external_type_name
// 		opt1 := _var.Catalog_type_is_approved
// 		opt2 := _var.Catalog_type_is_internal
// 		opt3 := _var.Catalog_type_is_tag
// 		opt4 := _var.Catalog_type_name
// 		opt5 := _var.Catalog_type_state
// 		opt6 := _var.Catalog_type_type_category
// 		_, err := oci.GetDatacatalogCatalogTypes(ctx, &GetDatacatalogCatalogTypesArgs{
// 			CatalogId:        oci_datacatalog_catalog.Test_catalog.Id,
// 			ExternalTypeName: &opt0,
// 			Fields:           _var.Catalog_type_fields,
// 			IsApproved:       &opt1,
// 			IsInternal:       &opt2,
// 			IsTag:            &opt3,
// 			Name:             &opt4,
// 			State:            &opt5,
// 			TypeCategory:     &opt6,
// 		}, nil)
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
func GetDatacatalogCatalogTypes(ctx *pulumi.Context, args *GetDatacatalogCatalogTypesArgs, opts ...pulumi.InvokeOption) (*GetDatacatalogCatalogTypesResult, error) {
	var rv GetDatacatalogCatalogTypesResult
	err := ctx.Invoke("oci:index/getDatacatalogCatalogTypes:GetDatacatalogCatalogTypes", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking GetDatacatalogCatalogTypes.
type GetDatacatalogCatalogTypesArgs struct {
	// Unique catalog identifier.
	CatalogId string `pulumi:"catalogId"`
	// Data type as defined in an external system.
	ExternalTypeName *string `pulumi:"externalTypeName"`
	// Specifies the fields to return in a type summary response.
	Fields  []string                           `pulumi:"fields"`
	Filters []GetDatacatalogCatalogTypesFilter `pulumi:"filters"`
	// Indicates whether the type is approved for use as a classifying object.
	IsApproved *string `pulumi:"isApproved"`
	// Indicates whether the type is internal, making it unavailable for use by metadata elements.
	IsInternal *string `pulumi:"isInternal"`
	// Indicates whether the type can be used for tagging metadata elements.
	IsTag *string `pulumi:"isTag"`
	// Immutable resource name.
	Name *string `pulumi:"name"`
	// A filter to return only resources that match the specified lifecycle state. The value is case insensitive.
	State *string `pulumi:"state"`
	// Indicates the category of this type . For example, data assets or connections.
	TypeCategory *string `pulumi:"typeCategory"`
}

// A collection of values returned by GetDatacatalogCatalogTypes.
type GetDatacatalogCatalogTypesResult struct {
	// The data catalog's OCID.
	CatalogId string `pulumi:"catalogId"`
	// Mapping type equivalence in the external system.
	ExternalTypeName *string                            `pulumi:"externalTypeName"`
	Fields           []string                           `pulumi:"fields"`
	Filters          []GetDatacatalogCatalogTypesFilter `pulumi:"filters"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// Indicates whether the type is approved for use as a classifying object.
	IsApproved *string `pulumi:"isApproved"`
	// Indicates whether the type is internal, making it unavailable for use by metadata elements.
	IsInternal *string `pulumi:"isInternal"`
	// Indicates whether the type can be used for tagging metadata elements.
	IsTag *string `pulumi:"isTag"`
	// The immutable name of the type.
	Name *string `pulumi:"name"`
	// The current state of the type.
	State *string `pulumi:"state"`
	// Indicates the category this type belongs to. For instance, data assets, connections.
	TypeCategory *string `pulumi:"typeCategory"`
	// The list of type_collection.
	TypeCollections []GetDatacatalogCatalogTypesTypeCollection `pulumi:"typeCollections"`
}
