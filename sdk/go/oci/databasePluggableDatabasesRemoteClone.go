// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package oci

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource provides the Pluggable Databases Remote Clone resource in Oracle Cloud Infrastructure Database service.
//
// Clones a pluggable database (PDB) to a different database from the source PDB. The cloned PDB will be started upon completion of the clone operation. The source PDB must be in the `READ_WRITE` openMode when performing the clone.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-oci/sdk/go/oci"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := oci.NewDatabasePluggableDatabasesRemoteClone(ctx, "testPluggableDatabasesRemoteClone", &oci.DatabasePluggableDatabasesRemoteCloneArgs{
// 			ClonedPdbName:                  pulumi.Any(_var.Pluggable_databases_remote_clone_cloned_pdb_name),
// 			PdbAdminPassword:               pulumi.Any(_var.Pluggable_databases_remote_clone_pdb_admin_password),
// 			PluggableDatabaseId:            pulumi.Any(oci_database_pluggable_database.Test_pluggable_database.Id),
// 			SourceContainerDbAdminPassword: pulumi.Any(_var.Pluggable_databases_remote_clone_source_container_db_admin_password),
// 			TargetContainerDatabaseId:      pulumi.Any(oci_database_database.Test_database.Id),
// 			TargetTdeWalletPassword:        pulumi.Any(_var.Pluggable_databases_remote_clone_target_tde_wallet_password),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// Import is not supported for this resource.
type DatabasePluggableDatabasesRemoteClone struct {
	pulumi.CustomResourceState

	// The name for the pluggable database (PDB). The name is unique in the context of a [container database](https://docs.cloud.oracle.com/iaas/api/#/en/database/latest/Database/). The name must begin with an alphabetic character and can contain a maximum of thirty alphanumeric characters. Special characters are not permitted. The pluggable database name should not be same as the container database name.
	ClonedPdbName pulumi.StringOutput `pulumi:"clonedPdbName"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
	CompartmentId pulumi.StringOutput `pulumi:"compartmentId"`
	// Connection strings to connect to an Oracle Pluggable Database.
	ConnectionStrings DatabasePluggableDatabasesRemoteCloneConnectionStringsOutput `pulumi:"connectionStrings"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the CDB.
	ContainerDatabaseId pulumi.StringOutput `pulumi:"containerDatabaseId"`
	// Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
	DefinedTags pulumi.MapOutput `pulumi:"definedTags"`
	// Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Department": "Finance"}`
	FreeformTags pulumi.MapOutput `pulumi:"freeformTags"`
	// The restricted mode of the pluggable database. If a pluggable database is opened in restricted mode, the user needs both create a session and have restricted session privileges to connect to it.
	IsRestricted pulumi.BoolOutput `pulumi:"isRestricted"`
	// Detailed message for the lifecycle state.
	LifecycleDetails pulumi.StringOutput `pulumi:"lifecycleDetails"`
	// The mode that pluggable database is in. Open mode can only be changed to READ_ONLY or MIGRATE directly from the backend (within the Oracle Database software).
	OpenMode pulumi.StringOutput `pulumi:"openMode"`
	// A strong password for PDB Admin of the newly cloned PDB. The password must be at least nine characters and contain at least two uppercase, two lowercase, two numbers, and two special characters. The special characters must be _, \#, or -.
	PdbAdminPassword pulumi.StringOutput `pulumi:"pdbAdminPassword"`
	// The name for the pluggable database (PDB). The name is unique in the context of a [container database](https://docs.cloud.oracle.com/iaas/api/#/en/database/latest/Database/). The name must begin with an alphabetic character and can contain a maximum of thirty alphanumeric characters. Special characters are not permitted. The pluggable database name should not be same as the container database name.
	PdbName pulumi.StringOutput `pulumi:"pdbName"`
	// The database [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
	PluggableDatabaseId pulumi.StringOutput `pulumi:"pluggableDatabaseId"`
	// The DB system administrator password of the source CDB.
	SourceContainerDbAdminPassword pulumi.StringOutput `pulumi:"sourceContainerDbAdminPassword"`
	// The current state of the pluggable database.
	State pulumi.StringOutput `pulumi:"state"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the target CDB
	TargetContainerDatabaseId pulumi.StringOutput `pulumi:"targetContainerDatabaseId"`
	// The existing TDE wallet password of the target CDB.
	TargetTdeWalletPassword pulumi.StringOutput `pulumi:"targetTdeWalletPassword"`
	// The date and time the pluggable database was created.
	TimeCreated pulumi.StringOutput `pulumi:"timeCreated"`
}

// NewDatabasePluggableDatabasesRemoteClone registers a new resource with the given unique name, arguments, and options.
func NewDatabasePluggableDatabasesRemoteClone(ctx *pulumi.Context,
	name string, args *DatabasePluggableDatabasesRemoteCloneArgs, opts ...pulumi.ResourceOption) (*DatabasePluggableDatabasesRemoteClone, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ClonedPdbName == nil {
		return nil, errors.New("invalid value for required argument 'ClonedPdbName'")
	}
	if args.PdbAdminPassword == nil {
		return nil, errors.New("invalid value for required argument 'PdbAdminPassword'")
	}
	if args.PluggableDatabaseId == nil {
		return nil, errors.New("invalid value for required argument 'PluggableDatabaseId'")
	}
	if args.SourceContainerDbAdminPassword == nil {
		return nil, errors.New("invalid value for required argument 'SourceContainerDbAdminPassword'")
	}
	if args.TargetContainerDatabaseId == nil {
		return nil, errors.New("invalid value for required argument 'TargetContainerDatabaseId'")
	}
	if args.TargetTdeWalletPassword == nil {
		return nil, errors.New("invalid value for required argument 'TargetTdeWalletPassword'")
	}
	var resource DatabasePluggableDatabasesRemoteClone
	err := ctx.RegisterResource("oci:index/databasePluggableDatabasesRemoteClone:DatabasePluggableDatabasesRemoteClone", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDatabasePluggableDatabasesRemoteClone gets an existing DatabasePluggableDatabasesRemoteClone resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDatabasePluggableDatabasesRemoteClone(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DatabasePluggableDatabasesRemoteCloneState, opts ...pulumi.ResourceOption) (*DatabasePluggableDatabasesRemoteClone, error) {
	var resource DatabasePluggableDatabasesRemoteClone
	err := ctx.ReadResource("oci:index/databasePluggableDatabasesRemoteClone:DatabasePluggableDatabasesRemoteClone", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DatabasePluggableDatabasesRemoteClone resources.
type databasePluggableDatabasesRemoteCloneState struct {
	// The name for the pluggable database (PDB). The name is unique in the context of a [container database](https://docs.cloud.oracle.com/iaas/api/#/en/database/latest/Database/). The name must begin with an alphabetic character and can contain a maximum of thirty alphanumeric characters. Special characters are not permitted. The pluggable database name should not be same as the container database name.
	ClonedPdbName *string `pulumi:"clonedPdbName"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
	CompartmentId *string `pulumi:"compartmentId"`
	// Connection strings to connect to an Oracle Pluggable Database.
	ConnectionStrings *DatabasePluggableDatabasesRemoteCloneConnectionStrings `pulumi:"connectionStrings"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the CDB.
	ContainerDatabaseId *string `pulumi:"containerDatabaseId"`
	// Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
	DefinedTags map[string]interface{} `pulumi:"definedTags"`
	// Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Department": "Finance"}`
	FreeformTags map[string]interface{} `pulumi:"freeformTags"`
	// The restricted mode of the pluggable database. If a pluggable database is opened in restricted mode, the user needs both create a session and have restricted session privileges to connect to it.
	IsRestricted *bool `pulumi:"isRestricted"`
	// Detailed message for the lifecycle state.
	LifecycleDetails *string `pulumi:"lifecycleDetails"`
	// The mode that pluggable database is in. Open mode can only be changed to READ_ONLY or MIGRATE directly from the backend (within the Oracle Database software).
	OpenMode *string `pulumi:"openMode"`
	// A strong password for PDB Admin of the newly cloned PDB. The password must be at least nine characters and contain at least two uppercase, two lowercase, two numbers, and two special characters. The special characters must be _, \#, or -.
	PdbAdminPassword *string `pulumi:"pdbAdminPassword"`
	// The name for the pluggable database (PDB). The name is unique in the context of a [container database](https://docs.cloud.oracle.com/iaas/api/#/en/database/latest/Database/). The name must begin with an alphabetic character and can contain a maximum of thirty alphanumeric characters. Special characters are not permitted. The pluggable database name should not be same as the container database name.
	PdbName *string `pulumi:"pdbName"`
	// The database [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
	PluggableDatabaseId *string `pulumi:"pluggableDatabaseId"`
	// The DB system administrator password of the source CDB.
	SourceContainerDbAdminPassword *string `pulumi:"sourceContainerDbAdminPassword"`
	// The current state of the pluggable database.
	State *string `pulumi:"state"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the target CDB
	TargetContainerDatabaseId *string `pulumi:"targetContainerDatabaseId"`
	// The existing TDE wallet password of the target CDB.
	TargetTdeWalletPassword *string `pulumi:"targetTdeWalletPassword"`
	// The date and time the pluggable database was created.
	TimeCreated *string `pulumi:"timeCreated"`
}

type DatabasePluggableDatabasesRemoteCloneState struct {
	// The name for the pluggable database (PDB). The name is unique in the context of a [container database](https://docs.cloud.oracle.com/iaas/api/#/en/database/latest/Database/). The name must begin with an alphabetic character and can contain a maximum of thirty alphanumeric characters. Special characters are not permitted. The pluggable database name should not be same as the container database name.
	ClonedPdbName pulumi.StringPtrInput
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
	CompartmentId pulumi.StringPtrInput
	// Connection strings to connect to an Oracle Pluggable Database.
	ConnectionStrings DatabasePluggableDatabasesRemoteCloneConnectionStringsPtrInput
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the CDB.
	ContainerDatabaseId pulumi.StringPtrInput
	// Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
	DefinedTags pulumi.MapInput
	// Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Department": "Finance"}`
	FreeformTags pulumi.MapInput
	// The restricted mode of the pluggable database. If a pluggable database is opened in restricted mode, the user needs both create a session and have restricted session privileges to connect to it.
	IsRestricted pulumi.BoolPtrInput
	// Detailed message for the lifecycle state.
	LifecycleDetails pulumi.StringPtrInput
	// The mode that pluggable database is in. Open mode can only be changed to READ_ONLY or MIGRATE directly from the backend (within the Oracle Database software).
	OpenMode pulumi.StringPtrInput
	// A strong password for PDB Admin of the newly cloned PDB. The password must be at least nine characters and contain at least two uppercase, two lowercase, two numbers, and two special characters. The special characters must be _, \#, or -.
	PdbAdminPassword pulumi.StringPtrInput
	// The name for the pluggable database (PDB). The name is unique in the context of a [container database](https://docs.cloud.oracle.com/iaas/api/#/en/database/latest/Database/). The name must begin with an alphabetic character and can contain a maximum of thirty alphanumeric characters. Special characters are not permitted. The pluggable database name should not be same as the container database name.
	PdbName pulumi.StringPtrInput
	// The database [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
	PluggableDatabaseId pulumi.StringPtrInput
	// The DB system administrator password of the source CDB.
	SourceContainerDbAdminPassword pulumi.StringPtrInput
	// The current state of the pluggable database.
	State pulumi.StringPtrInput
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the target CDB
	TargetContainerDatabaseId pulumi.StringPtrInput
	// The existing TDE wallet password of the target CDB.
	TargetTdeWalletPassword pulumi.StringPtrInput
	// The date and time the pluggable database was created.
	TimeCreated pulumi.StringPtrInput
}

func (DatabasePluggableDatabasesRemoteCloneState) ElementType() reflect.Type {
	return reflect.TypeOf((*databasePluggableDatabasesRemoteCloneState)(nil)).Elem()
}

type databasePluggableDatabasesRemoteCloneArgs struct {
	// The name for the pluggable database (PDB). The name is unique in the context of a [container database](https://docs.cloud.oracle.com/iaas/api/#/en/database/latest/Database/). The name must begin with an alphabetic character and can contain a maximum of thirty alphanumeric characters. Special characters are not permitted. The pluggable database name should not be same as the container database name.
	ClonedPdbName string `pulumi:"clonedPdbName"`
	// A strong password for PDB Admin of the newly cloned PDB. The password must be at least nine characters and contain at least two uppercase, two lowercase, two numbers, and two special characters. The special characters must be _, \#, or -.
	PdbAdminPassword string `pulumi:"pdbAdminPassword"`
	// The database [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
	PluggableDatabaseId string `pulumi:"pluggableDatabaseId"`
	// The DB system administrator password of the source CDB.
	SourceContainerDbAdminPassword string `pulumi:"sourceContainerDbAdminPassword"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the target CDB
	TargetContainerDatabaseId string `pulumi:"targetContainerDatabaseId"`
	// The existing TDE wallet password of the target CDB.
	TargetTdeWalletPassword string `pulumi:"targetTdeWalletPassword"`
}

// The set of arguments for constructing a DatabasePluggableDatabasesRemoteClone resource.
type DatabasePluggableDatabasesRemoteCloneArgs struct {
	// The name for the pluggable database (PDB). The name is unique in the context of a [container database](https://docs.cloud.oracle.com/iaas/api/#/en/database/latest/Database/). The name must begin with an alphabetic character and can contain a maximum of thirty alphanumeric characters. Special characters are not permitted. The pluggable database name should not be same as the container database name.
	ClonedPdbName pulumi.StringInput
	// A strong password for PDB Admin of the newly cloned PDB. The password must be at least nine characters and contain at least two uppercase, two lowercase, two numbers, and two special characters. The special characters must be _, \#, or -.
	PdbAdminPassword pulumi.StringInput
	// The database [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
	PluggableDatabaseId pulumi.StringInput
	// The DB system administrator password of the source CDB.
	SourceContainerDbAdminPassword pulumi.StringInput
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the target CDB
	TargetContainerDatabaseId pulumi.StringInput
	// The existing TDE wallet password of the target CDB.
	TargetTdeWalletPassword pulumi.StringInput
}

func (DatabasePluggableDatabasesRemoteCloneArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*databasePluggableDatabasesRemoteCloneArgs)(nil)).Elem()
}

type DatabasePluggableDatabasesRemoteCloneInput interface {
	pulumi.Input

	ToDatabasePluggableDatabasesRemoteCloneOutput() DatabasePluggableDatabasesRemoteCloneOutput
	ToDatabasePluggableDatabasesRemoteCloneOutputWithContext(ctx context.Context) DatabasePluggableDatabasesRemoteCloneOutput
}

func (*DatabasePluggableDatabasesRemoteClone) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabasePluggableDatabasesRemoteClone)(nil))
}

func (i *DatabasePluggableDatabasesRemoteClone) ToDatabasePluggableDatabasesRemoteCloneOutput() DatabasePluggableDatabasesRemoteCloneOutput {
	return i.ToDatabasePluggableDatabasesRemoteCloneOutputWithContext(context.Background())
}

func (i *DatabasePluggableDatabasesRemoteClone) ToDatabasePluggableDatabasesRemoteCloneOutputWithContext(ctx context.Context) DatabasePluggableDatabasesRemoteCloneOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabasePluggableDatabasesRemoteCloneOutput)
}

func (i *DatabasePluggableDatabasesRemoteClone) ToDatabasePluggableDatabasesRemoteClonePtrOutput() DatabasePluggableDatabasesRemoteClonePtrOutput {
	return i.ToDatabasePluggableDatabasesRemoteClonePtrOutputWithContext(context.Background())
}

func (i *DatabasePluggableDatabasesRemoteClone) ToDatabasePluggableDatabasesRemoteClonePtrOutputWithContext(ctx context.Context) DatabasePluggableDatabasesRemoteClonePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabasePluggableDatabasesRemoteClonePtrOutput)
}

type DatabasePluggableDatabasesRemoteClonePtrInput interface {
	pulumi.Input

	ToDatabasePluggableDatabasesRemoteClonePtrOutput() DatabasePluggableDatabasesRemoteClonePtrOutput
	ToDatabasePluggableDatabasesRemoteClonePtrOutputWithContext(ctx context.Context) DatabasePluggableDatabasesRemoteClonePtrOutput
}

type databasePluggableDatabasesRemoteClonePtrType DatabasePluggableDatabasesRemoteCloneArgs

func (*databasePluggableDatabasesRemoteClonePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DatabasePluggableDatabasesRemoteClone)(nil))
}

func (i *databasePluggableDatabasesRemoteClonePtrType) ToDatabasePluggableDatabasesRemoteClonePtrOutput() DatabasePluggableDatabasesRemoteClonePtrOutput {
	return i.ToDatabasePluggableDatabasesRemoteClonePtrOutputWithContext(context.Background())
}

func (i *databasePluggableDatabasesRemoteClonePtrType) ToDatabasePluggableDatabasesRemoteClonePtrOutputWithContext(ctx context.Context) DatabasePluggableDatabasesRemoteClonePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabasePluggableDatabasesRemoteClonePtrOutput)
}

// DatabasePluggableDatabasesRemoteCloneArrayInput is an input type that accepts DatabasePluggableDatabasesRemoteCloneArray and DatabasePluggableDatabasesRemoteCloneArrayOutput values.
// You can construct a concrete instance of `DatabasePluggableDatabasesRemoteCloneArrayInput` via:
//
//          DatabasePluggableDatabasesRemoteCloneArray{ DatabasePluggableDatabasesRemoteCloneArgs{...} }
type DatabasePluggableDatabasesRemoteCloneArrayInput interface {
	pulumi.Input

	ToDatabasePluggableDatabasesRemoteCloneArrayOutput() DatabasePluggableDatabasesRemoteCloneArrayOutput
	ToDatabasePluggableDatabasesRemoteCloneArrayOutputWithContext(context.Context) DatabasePluggableDatabasesRemoteCloneArrayOutput
}

type DatabasePluggableDatabasesRemoteCloneArray []DatabasePluggableDatabasesRemoteCloneInput

func (DatabasePluggableDatabasesRemoteCloneArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DatabasePluggableDatabasesRemoteClone)(nil)).Elem()
}

func (i DatabasePluggableDatabasesRemoteCloneArray) ToDatabasePluggableDatabasesRemoteCloneArrayOutput() DatabasePluggableDatabasesRemoteCloneArrayOutput {
	return i.ToDatabasePluggableDatabasesRemoteCloneArrayOutputWithContext(context.Background())
}

func (i DatabasePluggableDatabasesRemoteCloneArray) ToDatabasePluggableDatabasesRemoteCloneArrayOutputWithContext(ctx context.Context) DatabasePluggableDatabasesRemoteCloneArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabasePluggableDatabasesRemoteCloneArrayOutput)
}

// DatabasePluggableDatabasesRemoteCloneMapInput is an input type that accepts DatabasePluggableDatabasesRemoteCloneMap and DatabasePluggableDatabasesRemoteCloneMapOutput values.
// You can construct a concrete instance of `DatabasePluggableDatabasesRemoteCloneMapInput` via:
//
//          DatabasePluggableDatabasesRemoteCloneMap{ "key": DatabasePluggableDatabasesRemoteCloneArgs{...} }
type DatabasePluggableDatabasesRemoteCloneMapInput interface {
	pulumi.Input

	ToDatabasePluggableDatabasesRemoteCloneMapOutput() DatabasePluggableDatabasesRemoteCloneMapOutput
	ToDatabasePluggableDatabasesRemoteCloneMapOutputWithContext(context.Context) DatabasePluggableDatabasesRemoteCloneMapOutput
}

type DatabasePluggableDatabasesRemoteCloneMap map[string]DatabasePluggableDatabasesRemoteCloneInput

func (DatabasePluggableDatabasesRemoteCloneMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DatabasePluggableDatabasesRemoteClone)(nil)).Elem()
}

func (i DatabasePluggableDatabasesRemoteCloneMap) ToDatabasePluggableDatabasesRemoteCloneMapOutput() DatabasePluggableDatabasesRemoteCloneMapOutput {
	return i.ToDatabasePluggableDatabasesRemoteCloneMapOutputWithContext(context.Background())
}

func (i DatabasePluggableDatabasesRemoteCloneMap) ToDatabasePluggableDatabasesRemoteCloneMapOutputWithContext(ctx context.Context) DatabasePluggableDatabasesRemoteCloneMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabasePluggableDatabasesRemoteCloneMapOutput)
}

type DatabasePluggableDatabasesRemoteCloneOutput struct {
	*pulumi.OutputState
}

func (DatabasePluggableDatabasesRemoteCloneOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabasePluggableDatabasesRemoteClone)(nil))
}

func (o DatabasePluggableDatabasesRemoteCloneOutput) ToDatabasePluggableDatabasesRemoteCloneOutput() DatabasePluggableDatabasesRemoteCloneOutput {
	return o
}

func (o DatabasePluggableDatabasesRemoteCloneOutput) ToDatabasePluggableDatabasesRemoteCloneOutputWithContext(ctx context.Context) DatabasePluggableDatabasesRemoteCloneOutput {
	return o
}

func (o DatabasePluggableDatabasesRemoteCloneOutput) ToDatabasePluggableDatabasesRemoteClonePtrOutput() DatabasePluggableDatabasesRemoteClonePtrOutput {
	return o.ToDatabasePluggableDatabasesRemoteClonePtrOutputWithContext(context.Background())
}

func (o DatabasePluggableDatabasesRemoteCloneOutput) ToDatabasePluggableDatabasesRemoteClonePtrOutputWithContext(ctx context.Context) DatabasePluggableDatabasesRemoteClonePtrOutput {
	return o.ApplyT(func(v DatabasePluggableDatabasesRemoteClone) *DatabasePluggableDatabasesRemoteClone {
		return &v
	}).(DatabasePluggableDatabasesRemoteClonePtrOutput)
}

type DatabasePluggableDatabasesRemoteClonePtrOutput struct {
	*pulumi.OutputState
}

func (DatabasePluggableDatabasesRemoteClonePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DatabasePluggableDatabasesRemoteClone)(nil))
}

func (o DatabasePluggableDatabasesRemoteClonePtrOutput) ToDatabasePluggableDatabasesRemoteClonePtrOutput() DatabasePluggableDatabasesRemoteClonePtrOutput {
	return o
}

func (o DatabasePluggableDatabasesRemoteClonePtrOutput) ToDatabasePluggableDatabasesRemoteClonePtrOutputWithContext(ctx context.Context) DatabasePluggableDatabasesRemoteClonePtrOutput {
	return o
}

type DatabasePluggableDatabasesRemoteCloneArrayOutput struct{ *pulumi.OutputState }

func (DatabasePluggableDatabasesRemoteCloneArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DatabasePluggableDatabasesRemoteClone)(nil))
}

func (o DatabasePluggableDatabasesRemoteCloneArrayOutput) ToDatabasePluggableDatabasesRemoteCloneArrayOutput() DatabasePluggableDatabasesRemoteCloneArrayOutput {
	return o
}

func (o DatabasePluggableDatabasesRemoteCloneArrayOutput) ToDatabasePluggableDatabasesRemoteCloneArrayOutputWithContext(ctx context.Context) DatabasePluggableDatabasesRemoteCloneArrayOutput {
	return o
}

func (o DatabasePluggableDatabasesRemoteCloneArrayOutput) Index(i pulumi.IntInput) DatabasePluggableDatabasesRemoteCloneOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DatabasePluggableDatabasesRemoteClone {
		return vs[0].([]DatabasePluggableDatabasesRemoteClone)[vs[1].(int)]
	}).(DatabasePluggableDatabasesRemoteCloneOutput)
}

type DatabasePluggableDatabasesRemoteCloneMapOutput struct{ *pulumi.OutputState }

func (DatabasePluggableDatabasesRemoteCloneMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]DatabasePluggableDatabasesRemoteClone)(nil))
}

func (o DatabasePluggableDatabasesRemoteCloneMapOutput) ToDatabasePluggableDatabasesRemoteCloneMapOutput() DatabasePluggableDatabasesRemoteCloneMapOutput {
	return o
}

func (o DatabasePluggableDatabasesRemoteCloneMapOutput) ToDatabasePluggableDatabasesRemoteCloneMapOutputWithContext(ctx context.Context) DatabasePluggableDatabasesRemoteCloneMapOutput {
	return o
}

func (o DatabasePluggableDatabasesRemoteCloneMapOutput) MapIndex(k pulumi.StringInput) DatabasePluggableDatabasesRemoteCloneOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) DatabasePluggableDatabasesRemoteClone {
		return vs[0].(map[string]DatabasePluggableDatabasesRemoteClone)[vs[1].(string)]
	}).(DatabasePluggableDatabasesRemoteCloneOutput)
}

func init() {
	pulumi.RegisterOutputType(DatabasePluggableDatabasesRemoteCloneOutput{})
	pulumi.RegisterOutputType(DatabasePluggableDatabasesRemoteClonePtrOutput{})
	pulumi.RegisterOutputType(DatabasePluggableDatabasesRemoteCloneArrayOutput{})
	pulumi.RegisterOutputType(DatabasePluggableDatabasesRemoteCloneMapOutput{})
}
