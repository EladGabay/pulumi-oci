// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci
{
    /// <summary>
    /// This resource provides the Node Pool resource in Oracle Cloud Infrastructure Container Engine service.
    /// 
    /// Create a new node pool.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Oci = Pulumi.Oci;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var testNodePool = new Oci.ContainerengineNodePool("testNodePool", new Oci.ContainerengineNodePoolArgs
    ///         {
    ///             ClusterId = oci_containerengine_cluster.Test_cluster.Id,
    ///             CompartmentId = @var.Compartment_id,
    ///             KubernetesVersion = @var.Node_pool_kubernetes_version,
    ///             NodeShape = @var.Node_pool_node_shape,
    ///             SubnetIds = @var.Node_pool_subnet_ids,
    ///             InitialNodeLabels = 
    ///             {
    ///                 new Oci.Inputs.ContainerengineNodePoolInitialNodeLabelArgs
    ///                 {
    ///                     Key = @var.Node_pool_initial_node_labels_key,
    ///                     Value = @var.Node_pool_initial_node_labels_value,
    ///                 },
    ///             },
    ///             NodeConfigDetails = new Oci.Inputs.ContainerengineNodePoolNodeConfigDetailsArgs
    ///             {
    ///                 PlacementConfigs = 
    ///                 {
    ///                     new Oci.Inputs.ContainerengineNodePoolNodeConfigDetailsPlacementConfigArgs
    ///                     {
    ///                         AvailabilityDomain = @var.Node_pool_node_config_details_placement_configs_availability_domain,
    ///                         SubnetId = oci_core_subnet.Test_subnet.Id,
    ///                     },
    ///                 },
    ///                 Size = @var.Node_pool_node_config_details_size,
    ///                 NsgIds = @var.Node_pool_node_config_details_nsg_ids,
    ///             },
    ///             NodeImageName = oci_core_image.Test_image.Name,
    ///             NodeMetadata = @var.Node_pool_node_metadata,
    ///             NodeShapeConfig = new Oci.Inputs.ContainerengineNodePoolNodeShapeConfigArgs
    ///             {
    ///                 MemoryInGbs = @var.Node_pool_node_shape_config_memory_in_gbs,
    ///                 Ocpus = @var.Node_pool_node_shape_config_ocpus,
    ///             },
    ///             NodeSourceDetails = new Oci.Inputs.ContainerengineNodePoolNodeSourceDetailsArgs
    ///             {
    ///                 ImageId = oci_core_image.Test_image.Id,
    ///                 SourceType = @var.Node_pool_node_source_details_source_type,
    ///                 BootVolumeSizeInGbs = @var.Node_pool_node_source_details_boot_volume_size_in_gbs,
    ///             },
    ///             QuantityPerSubnet = @var.Node_pool_quantity_per_subnet,
    ///             SshPublicKey = @var.Node_pool_ssh_public_key,
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// 
    /// ## Import
    /// 
    /// NodePools can be imported using the `id`, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import oci:index/containerengineNodePool:ContainerengineNodePool test_node_pool "id"
    /// ```
    /// </summary>
    [OciResourceType("oci:index/containerengineNodePool:ContainerengineNodePool")]
    public partial class ContainerengineNodePool : Pulumi.CustomResource
    {
        /// <summary>
        /// The OCID of the cluster to which this node pool is attached.
        /// </summary>
        [Output("clusterId")]
        public Output<string> ClusterId { get; private set; } = null!;

        /// <summary>
        /// The OCID of the compartment in which the node pool exists.
        /// </summary>
        [Output("compartmentId")]
        public Output<string> CompartmentId { get; private set; } = null!;

        /// <summary>
        /// (Updatable) A list of key/value pairs to add to nodes after they join the Kubernetes cluster.
        /// </summary>
        [Output("initialNodeLabels")]
        public Output<ImmutableArray<Outputs.ContainerengineNodePoolInitialNodeLabel>> InitialNodeLabels { get; private set; } = null!;

        /// <summary>
        /// (Updatable) The version of Kubernetes to install on the nodes in the node pool.
        /// </summary>
        [Output("kubernetesVersion")]
        public Output<string> KubernetesVersion { get; private set; } = null!;

        /// <summary>
        /// (Updatable) The name of the node pool. Avoid entering confidential information.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// (Updatable) The configuration of nodes in the node pool. Exactly one of the subnetIds or nodeConfigDetails properties must be specified.
        /// </summary>
        [Output("nodeConfigDetails")]
        public Output<Outputs.ContainerengineNodePoolNodeConfigDetails> NodeConfigDetails { get; private set; } = null!;

        /// <summary>
        /// Deprecated. Use `node_source_details` instead. The OCID of the image running on the nodes in the node pool. Cannot be used when `node_image_name` is specified.
        /// </summary>
        [Output("nodeImageId")]
        public Output<string> NodeImageId { get; private set; } = null!;

        /// <summary>
        /// Deprecated. Use `nodeSourceDetails` instead. If you specify values for both, this value is ignored. The name of the image running on the nodes in the node pool. Cannot be used when `node_image_id` is specified.
        /// </summary>
        [Output("nodeImageName")]
        public Output<string> NodeImageName { get; private set; } = null!;

        /// <summary>
        /// (Updatable) A list of key/value pairs to add to each underlying Oracle Cloud Infrastructure instance in the node pool on launch.
        /// </summary>
        [Output("nodeMetadata")]
        public Output<ImmutableDictionary<string, object>> NodeMetadata { get; private set; } = null!;

        /// <summary>
        /// (Updatable) The name of the node shape of the nodes in the node pool.
        /// </summary>
        [Output("nodeShape")]
        public Output<string> NodeShape { get; private set; } = null!;

        /// <summary>
        /// (Updatable) Specify the configuration of the shape to launch nodes in the node pool.
        /// </summary>
        [Output("nodeShapeConfig")]
        public Output<Outputs.ContainerengineNodePoolNodeShapeConfig> NodeShapeConfig { get; private set; } = null!;

        /// <summary>
        /// Deprecated. see `nodeSourceDetails`. Source running on the nodes in the node pool.
        /// </summary>
        [Output("nodeSource")]
        public Output<Outputs.ContainerengineNodePoolNodeSource> NodeSource { get; private set; } = null!;

        /// <summary>
        /// (Updatable) Specify the source to use to launch nodes in the node pool. Currently, image is the only supported source.
        /// </summary>
        [Output("nodeSourceDetails")]
        public Output<Outputs.ContainerengineNodePoolNodeSourceDetails> NodeSourceDetails { get; private set; } = null!;

        /// <summary>
        /// The nodes in the node pool.
        /// </summary>
        [Output("nodes")]
        public Output<ImmutableArray<Outputs.ContainerengineNodePoolNode>> Nodes { get; private set; } = null!;

        /// <summary>
        /// (Updatable) Optional, default to 1. The number of nodes to create in each subnet specified in subnetIds property. When used, subnetIds is required. This property is deprecated, use nodeConfigDetails instead.
        /// </summary>
        [Output("quantityPerSubnet")]
        public Output<int> QuantityPerSubnet { get; private set; } = null!;

        /// <summary>
        /// (Updatable) The SSH public key on each node in the node pool on launch.
        /// </summary>
        [Output("sshPublicKey")]
        public Output<string> SshPublicKey { get; private set; } = null!;

        /// <summary>
        /// (Updatable) The OCIDs of the subnets in which to place nodes for this node pool. When used, quantityPerSubnet can be provided. This property is deprecated, use nodeConfigDetails. Exactly one of the subnetIds or nodeConfigDetails properties must be specified.
        /// </summary>
        [Output("subnetIds")]
        public Output<ImmutableArray<string>> SubnetIds { get; private set; } = null!;


        /// <summary>
        /// Create a ContainerengineNodePool resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ContainerengineNodePool(string name, ContainerengineNodePoolArgs args, CustomResourceOptions? options = null)
            : base("oci:index/containerengineNodePool:ContainerengineNodePool", name, args ?? new ContainerengineNodePoolArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ContainerengineNodePool(string name, Input<string> id, ContainerengineNodePoolState? state = null, CustomResourceOptions? options = null)
            : base("oci:index/containerengineNodePool:ContainerengineNodePool", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ContainerengineNodePool resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ContainerengineNodePool Get(string name, Input<string> id, ContainerengineNodePoolState? state = null, CustomResourceOptions? options = null)
        {
            return new ContainerengineNodePool(name, id, state, options);
        }
    }

    public sealed class ContainerengineNodePoolArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The OCID of the cluster to which this node pool is attached.
        /// </summary>
        [Input("clusterId", required: true)]
        public Input<string> ClusterId { get; set; } = null!;

        /// <summary>
        /// The OCID of the compartment in which the node pool exists.
        /// </summary>
        [Input("compartmentId", required: true)]
        public Input<string> CompartmentId { get; set; } = null!;

        [Input("initialNodeLabels")]
        private InputList<Inputs.ContainerengineNodePoolInitialNodeLabelArgs>? _initialNodeLabels;

        /// <summary>
        /// (Updatable) A list of key/value pairs to add to nodes after they join the Kubernetes cluster.
        /// </summary>
        public InputList<Inputs.ContainerengineNodePoolInitialNodeLabelArgs> InitialNodeLabels
        {
            get => _initialNodeLabels ?? (_initialNodeLabels = new InputList<Inputs.ContainerengineNodePoolInitialNodeLabelArgs>());
            set => _initialNodeLabels = value;
        }

        /// <summary>
        /// (Updatable) The version of Kubernetes to install on the nodes in the node pool.
        /// </summary>
        [Input("kubernetesVersion", required: true)]
        public Input<string> KubernetesVersion { get; set; } = null!;

        /// <summary>
        /// (Updatable) The name of the node pool. Avoid entering confidential information.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// (Updatable) The configuration of nodes in the node pool. Exactly one of the subnetIds or nodeConfigDetails properties must be specified.
        /// </summary>
        [Input("nodeConfigDetails")]
        public Input<Inputs.ContainerengineNodePoolNodeConfigDetailsArgs>? NodeConfigDetails { get; set; }

        /// <summary>
        /// Deprecated. Use `node_source_details` instead. The OCID of the image running on the nodes in the node pool. Cannot be used when `node_image_name` is specified.
        /// </summary>
        [Input("nodeImageId")]
        public Input<string>? NodeImageId { get; set; }

        /// <summary>
        /// Deprecated. Use `nodeSourceDetails` instead. If you specify values for both, this value is ignored. The name of the image running on the nodes in the node pool. Cannot be used when `node_image_id` is specified.
        /// </summary>
        [Input("nodeImageName")]
        public Input<string>? NodeImageName { get; set; }

        [Input("nodeMetadata")]
        private InputMap<object>? _nodeMetadata;

        /// <summary>
        /// (Updatable) A list of key/value pairs to add to each underlying Oracle Cloud Infrastructure instance in the node pool on launch.
        /// </summary>
        public InputMap<object> NodeMetadata
        {
            get => _nodeMetadata ?? (_nodeMetadata = new InputMap<object>());
            set => _nodeMetadata = value;
        }

        /// <summary>
        /// (Updatable) The name of the node shape of the nodes in the node pool.
        /// </summary>
        [Input("nodeShape", required: true)]
        public Input<string> NodeShape { get; set; } = null!;

        /// <summary>
        /// (Updatable) Specify the configuration of the shape to launch nodes in the node pool.
        /// </summary>
        [Input("nodeShapeConfig")]
        public Input<Inputs.ContainerengineNodePoolNodeShapeConfigArgs>? NodeShapeConfig { get; set; }

        /// <summary>
        /// (Updatable) Specify the source to use to launch nodes in the node pool. Currently, image is the only supported source.
        /// </summary>
        [Input("nodeSourceDetails")]
        public Input<Inputs.ContainerengineNodePoolNodeSourceDetailsArgs>? NodeSourceDetails { get; set; }

        /// <summary>
        /// (Updatable) Optional, default to 1. The number of nodes to create in each subnet specified in subnetIds property. When used, subnetIds is required. This property is deprecated, use nodeConfigDetails instead.
        /// </summary>
        [Input("quantityPerSubnet")]
        public Input<int>? QuantityPerSubnet { get; set; }

        /// <summary>
        /// (Updatable) The SSH public key on each node in the node pool on launch.
        /// </summary>
        [Input("sshPublicKey")]
        public Input<string>? SshPublicKey { get; set; }

        [Input("subnetIds")]
        private InputList<string>? _subnetIds;

        /// <summary>
        /// (Updatable) The OCIDs of the subnets in which to place nodes for this node pool. When used, quantityPerSubnet can be provided. This property is deprecated, use nodeConfigDetails. Exactly one of the subnetIds or nodeConfigDetails properties must be specified.
        /// </summary>
        public InputList<string> SubnetIds
        {
            get => _subnetIds ?? (_subnetIds = new InputList<string>());
            set => _subnetIds = value;
        }

        public ContainerengineNodePoolArgs()
        {
        }
    }

    public sealed class ContainerengineNodePoolState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The OCID of the cluster to which this node pool is attached.
        /// </summary>
        [Input("clusterId")]
        public Input<string>? ClusterId { get; set; }

        /// <summary>
        /// The OCID of the compartment in which the node pool exists.
        /// </summary>
        [Input("compartmentId")]
        public Input<string>? CompartmentId { get; set; }

        [Input("initialNodeLabels")]
        private InputList<Inputs.ContainerengineNodePoolInitialNodeLabelGetArgs>? _initialNodeLabels;

        /// <summary>
        /// (Updatable) A list of key/value pairs to add to nodes after they join the Kubernetes cluster.
        /// </summary>
        public InputList<Inputs.ContainerengineNodePoolInitialNodeLabelGetArgs> InitialNodeLabels
        {
            get => _initialNodeLabels ?? (_initialNodeLabels = new InputList<Inputs.ContainerengineNodePoolInitialNodeLabelGetArgs>());
            set => _initialNodeLabels = value;
        }

        /// <summary>
        /// (Updatable) The version of Kubernetes to install on the nodes in the node pool.
        /// </summary>
        [Input("kubernetesVersion")]
        public Input<string>? KubernetesVersion { get; set; }

        /// <summary>
        /// (Updatable) The name of the node pool. Avoid entering confidential information.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// (Updatable) The configuration of nodes in the node pool. Exactly one of the subnetIds or nodeConfigDetails properties must be specified.
        /// </summary>
        [Input("nodeConfigDetails")]
        public Input<Inputs.ContainerengineNodePoolNodeConfigDetailsGetArgs>? NodeConfigDetails { get; set; }

        /// <summary>
        /// Deprecated. Use `node_source_details` instead. The OCID of the image running on the nodes in the node pool. Cannot be used when `node_image_name` is specified.
        /// </summary>
        [Input("nodeImageId")]
        public Input<string>? NodeImageId { get; set; }

        /// <summary>
        /// Deprecated. Use `nodeSourceDetails` instead. If you specify values for both, this value is ignored. The name of the image running on the nodes in the node pool. Cannot be used when `node_image_id` is specified.
        /// </summary>
        [Input("nodeImageName")]
        public Input<string>? NodeImageName { get; set; }

        [Input("nodeMetadata")]
        private InputMap<object>? _nodeMetadata;

        /// <summary>
        /// (Updatable) A list of key/value pairs to add to each underlying Oracle Cloud Infrastructure instance in the node pool on launch.
        /// </summary>
        public InputMap<object> NodeMetadata
        {
            get => _nodeMetadata ?? (_nodeMetadata = new InputMap<object>());
            set => _nodeMetadata = value;
        }

        /// <summary>
        /// (Updatable) The name of the node shape of the nodes in the node pool.
        /// </summary>
        [Input("nodeShape")]
        public Input<string>? NodeShape { get; set; }

        /// <summary>
        /// (Updatable) Specify the configuration of the shape to launch nodes in the node pool.
        /// </summary>
        [Input("nodeShapeConfig")]
        public Input<Inputs.ContainerengineNodePoolNodeShapeConfigGetArgs>? NodeShapeConfig { get; set; }

        /// <summary>
        /// Deprecated. see `nodeSourceDetails`. Source running on the nodes in the node pool.
        /// </summary>
        [Input("nodeSource")]
        public Input<Inputs.ContainerengineNodePoolNodeSourceGetArgs>? NodeSource { get; set; }

        /// <summary>
        /// (Updatable) Specify the source to use to launch nodes in the node pool. Currently, image is the only supported source.
        /// </summary>
        [Input("nodeSourceDetails")]
        public Input<Inputs.ContainerengineNodePoolNodeSourceDetailsGetArgs>? NodeSourceDetails { get; set; }

        [Input("nodes")]
        private InputList<Inputs.ContainerengineNodePoolNodeGetArgs>? _nodes;

        /// <summary>
        /// The nodes in the node pool.
        /// </summary>
        public InputList<Inputs.ContainerengineNodePoolNodeGetArgs> Nodes
        {
            get => _nodes ?? (_nodes = new InputList<Inputs.ContainerengineNodePoolNodeGetArgs>());
            set => _nodes = value;
        }

        /// <summary>
        /// (Updatable) Optional, default to 1. The number of nodes to create in each subnet specified in subnetIds property. When used, subnetIds is required. This property is deprecated, use nodeConfigDetails instead.
        /// </summary>
        [Input("quantityPerSubnet")]
        public Input<int>? QuantityPerSubnet { get; set; }

        /// <summary>
        /// (Updatable) The SSH public key on each node in the node pool on launch.
        /// </summary>
        [Input("sshPublicKey")]
        public Input<string>? SshPublicKey { get; set; }

        [Input("subnetIds")]
        private InputList<string>? _subnetIds;

        /// <summary>
        /// (Updatable) The OCIDs of the subnets in which to place nodes for this node pool. When used, quantityPerSubnet can be provided. This property is deprecated, use nodeConfigDetails. Exactly one of the subnetIds or nodeConfigDetails properties must be specified.
        /// </summary>
        public InputList<string> SubnetIds
        {
            get => _subnetIds ?? (_subnetIds = new InputList<string>());
            set => _subnetIds = value;
        }

        public ContainerengineNodePoolState()
        {
        }
    }
}
