// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package oci

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource provides the Analytics Instance Vanity Url resource in Oracle Cloud Infrastructure Analytics service.
//
// Allows specifying a custom host name to be used to access the analytics instance.  This requires prior setup of DNS entry and certificate
// for this host.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-oci/sdk/go/oci"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := oci.NewAnalyticsAnalyticsInstanceVanityUrl(ctx, "testAnalyticsInstanceVanityUrl", &oci.AnalyticsAnalyticsInstanceVanityUrlArgs{
// 			AnalyticsInstanceId: pulumi.Any(oci_analytics_analytics_instance.Test_analytics_instance.Id),
// 			CaCertificate:       pulumi.Any(_var.Analytics_instance_vanity_url_ca_certificate),
// 			Hosts:               pulumi.Any(_var.Analytics_instance_vanity_url_hosts),
// 			PrivateKey:          pulumi.Any(_var.Analytics_instance_vanity_url_private_key),
// 			PublicCertificate:   pulumi.Any(_var.Analytics_instance_vanity_url_public_certificate),
// 			Description:         pulumi.Any(_var.Analytics_instance_vanity_url_description),
// 			Passphrase:          pulumi.Any(_var.Analytics_instance_vanity_url_passphrase),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// AnalyticsInstanceVanityUrls can be imported using the `id`, e.g.
//
// ```sh
//  $ pulumi import oci:index/analyticsAnalyticsInstanceVanityUrl:AnalyticsAnalyticsInstanceVanityUrl test_analytics_instance_vanity_url "analyticsInstances/{analyticsInstanceId}/vanityUrls/{vanityUrlKey}"
// ```
type AnalyticsAnalyticsInstanceVanityUrl struct {
	pulumi.CustomResourceState

	// The OCID of the AnalyticsInstance.
	AnalyticsInstanceId pulumi.StringOutput `pulumi:"analyticsInstanceId"`
	// (Updatable) PEM CA certificate(s) for HTTPS connections. This may include multiple PEM certificates.
	CaCertificate pulumi.StringOutput `pulumi:"caCertificate"`
	// Optional description.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// List of fully qualified hostnames supported by this vanity URL definition (max of 3).
	Hosts pulumi.StringArrayOutput `pulumi:"hosts"`
	// (Updatable) Passphrase for the PEM Private key (if any).
	Passphrase pulumi.StringPtrOutput `pulumi:"passphrase"`
	// (Updatable) PEM Private key for HTTPS connections.
	PrivateKey pulumi.StringOutput `pulumi:"privateKey"`
	// (Updatable) PEM certificate for HTTPS connections.
	PublicCertificate pulumi.StringOutput `pulumi:"publicCertificate"`
}

// NewAnalyticsAnalyticsInstanceVanityUrl registers a new resource with the given unique name, arguments, and options.
func NewAnalyticsAnalyticsInstanceVanityUrl(ctx *pulumi.Context,
	name string, args *AnalyticsAnalyticsInstanceVanityUrlArgs, opts ...pulumi.ResourceOption) (*AnalyticsAnalyticsInstanceVanityUrl, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AnalyticsInstanceId == nil {
		return nil, errors.New("invalid value for required argument 'AnalyticsInstanceId'")
	}
	if args.CaCertificate == nil {
		return nil, errors.New("invalid value for required argument 'CaCertificate'")
	}
	if args.Hosts == nil {
		return nil, errors.New("invalid value for required argument 'Hosts'")
	}
	if args.PrivateKey == nil {
		return nil, errors.New("invalid value for required argument 'PrivateKey'")
	}
	if args.PublicCertificate == nil {
		return nil, errors.New("invalid value for required argument 'PublicCertificate'")
	}
	var resource AnalyticsAnalyticsInstanceVanityUrl
	err := ctx.RegisterResource("oci:index/analyticsAnalyticsInstanceVanityUrl:AnalyticsAnalyticsInstanceVanityUrl", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAnalyticsAnalyticsInstanceVanityUrl gets an existing AnalyticsAnalyticsInstanceVanityUrl resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAnalyticsAnalyticsInstanceVanityUrl(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AnalyticsAnalyticsInstanceVanityUrlState, opts ...pulumi.ResourceOption) (*AnalyticsAnalyticsInstanceVanityUrl, error) {
	var resource AnalyticsAnalyticsInstanceVanityUrl
	err := ctx.ReadResource("oci:index/analyticsAnalyticsInstanceVanityUrl:AnalyticsAnalyticsInstanceVanityUrl", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AnalyticsAnalyticsInstanceVanityUrl resources.
type analyticsAnalyticsInstanceVanityUrlState struct {
	// The OCID of the AnalyticsInstance.
	AnalyticsInstanceId *string `pulumi:"analyticsInstanceId"`
	// (Updatable) PEM CA certificate(s) for HTTPS connections. This may include multiple PEM certificates.
	CaCertificate *string `pulumi:"caCertificate"`
	// Optional description.
	Description *string `pulumi:"description"`
	// List of fully qualified hostnames supported by this vanity URL definition (max of 3).
	Hosts []string `pulumi:"hosts"`
	// (Updatable) Passphrase for the PEM Private key (if any).
	Passphrase *string `pulumi:"passphrase"`
	// (Updatable) PEM Private key for HTTPS connections.
	PrivateKey *string `pulumi:"privateKey"`
	// (Updatable) PEM certificate for HTTPS connections.
	PublicCertificate *string `pulumi:"publicCertificate"`
}

type AnalyticsAnalyticsInstanceVanityUrlState struct {
	// The OCID of the AnalyticsInstance.
	AnalyticsInstanceId pulumi.StringPtrInput
	// (Updatable) PEM CA certificate(s) for HTTPS connections. This may include multiple PEM certificates.
	CaCertificate pulumi.StringPtrInput
	// Optional description.
	Description pulumi.StringPtrInput
	// List of fully qualified hostnames supported by this vanity URL definition (max of 3).
	Hosts pulumi.StringArrayInput
	// (Updatable) Passphrase for the PEM Private key (if any).
	Passphrase pulumi.StringPtrInput
	// (Updatable) PEM Private key for HTTPS connections.
	PrivateKey pulumi.StringPtrInput
	// (Updatable) PEM certificate for HTTPS connections.
	PublicCertificate pulumi.StringPtrInput
}

func (AnalyticsAnalyticsInstanceVanityUrlState) ElementType() reflect.Type {
	return reflect.TypeOf((*analyticsAnalyticsInstanceVanityUrlState)(nil)).Elem()
}

type analyticsAnalyticsInstanceVanityUrlArgs struct {
	// The OCID of the AnalyticsInstance.
	AnalyticsInstanceId string `pulumi:"analyticsInstanceId"`
	// (Updatable) PEM CA certificate(s) for HTTPS connections. This may include multiple PEM certificates.
	CaCertificate string `pulumi:"caCertificate"`
	// Optional description.
	Description *string `pulumi:"description"`
	// List of fully qualified hostnames supported by this vanity URL definition (max of 3).
	Hosts []string `pulumi:"hosts"`
	// (Updatable) Passphrase for the PEM Private key (if any).
	Passphrase *string `pulumi:"passphrase"`
	// (Updatable) PEM Private key for HTTPS connections.
	PrivateKey string `pulumi:"privateKey"`
	// (Updatable) PEM certificate for HTTPS connections.
	PublicCertificate string `pulumi:"publicCertificate"`
}

// The set of arguments for constructing a AnalyticsAnalyticsInstanceVanityUrl resource.
type AnalyticsAnalyticsInstanceVanityUrlArgs struct {
	// The OCID of the AnalyticsInstance.
	AnalyticsInstanceId pulumi.StringInput
	// (Updatable) PEM CA certificate(s) for HTTPS connections. This may include multiple PEM certificates.
	CaCertificate pulumi.StringInput
	// Optional description.
	Description pulumi.StringPtrInput
	// List of fully qualified hostnames supported by this vanity URL definition (max of 3).
	Hosts pulumi.StringArrayInput
	// (Updatable) Passphrase for the PEM Private key (if any).
	Passphrase pulumi.StringPtrInput
	// (Updatable) PEM Private key for HTTPS connections.
	PrivateKey pulumi.StringInput
	// (Updatable) PEM certificate for HTTPS connections.
	PublicCertificate pulumi.StringInput
}

func (AnalyticsAnalyticsInstanceVanityUrlArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*analyticsAnalyticsInstanceVanityUrlArgs)(nil)).Elem()
}

type AnalyticsAnalyticsInstanceVanityUrlInput interface {
	pulumi.Input

	ToAnalyticsAnalyticsInstanceVanityUrlOutput() AnalyticsAnalyticsInstanceVanityUrlOutput
	ToAnalyticsAnalyticsInstanceVanityUrlOutputWithContext(ctx context.Context) AnalyticsAnalyticsInstanceVanityUrlOutput
}

func (*AnalyticsAnalyticsInstanceVanityUrl) ElementType() reflect.Type {
	return reflect.TypeOf((*AnalyticsAnalyticsInstanceVanityUrl)(nil))
}

func (i *AnalyticsAnalyticsInstanceVanityUrl) ToAnalyticsAnalyticsInstanceVanityUrlOutput() AnalyticsAnalyticsInstanceVanityUrlOutput {
	return i.ToAnalyticsAnalyticsInstanceVanityUrlOutputWithContext(context.Background())
}

func (i *AnalyticsAnalyticsInstanceVanityUrl) ToAnalyticsAnalyticsInstanceVanityUrlOutputWithContext(ctx context.Context) AnalyticsAnalyticsInstanceVanityUrlOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnalyticsAnalyticsInstanceVanityUrlOutput)
}

func (i *AnalyticsAnalyticsInstanceVanityUrl) ToAnalyticsAnalyticsInstanceVanityUrlPtrOutput() AnalyticsAnalyticsInstanceVanityUrlPtrOutput {
	return i.ToAnalyticsAnalyticsInstanceVanityUrlPtrOutputWithContext(context.Background())
}

func (i *AnalyticsAnalyticsInstanceVanityUrl) ToAnalyticsAnalyticsInstanceVanityUrlPtrOutputWithContext(ctx context.Context) AnalyticsAnalyticsInstanceVanityUrlPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnalyticsAnalyticsInstanceVanityUrlPtrOutput)
}

type AnalyticsAnalyticsInstanceVanityUrlPtrInput interface {
	pulumi.Input

	ToAnalyticsAnalyticsInstanceVanityUrlPtrOutput() AnalyticsAnalyticsInstanceVanityUrlPtrOutput
	ToAnalyticsAnalyticsInstanceVanityUrlPtrOutputWithContext(ctx context.Context) AnalyticsAnalyticsInstanceVanityUrlPtrOutput
}

type analyticsAnalyticsInstanceVanityUrlPtrType AnalyticsAnalyticsInstanceVanityUrlArgs

func (*analyticsAnalyticsInstanceVanityUrlPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**AnalyticsAnalyticsInstanceVanityUrl)(nil))
}

func (i *analyticsAnalyticsInstanceVanityUrlPtrType) ToAnalyticsAnalyticsInstanceVanityUrlPtrOutput() AnalyticsAnalyticsInstanceVanityUrlPtrOutput {
	return i.ToAnalyticsAnalyticsInstanceVanityUrlPtrOutputWithContext(context.Background())
}

func (i *analyticsAnalyticsInstanceVanityUrlPtrType) ToAnalyticsAnalyticsInstanceVanityUrlPtrOutputWithContext(ctx context.Context) AnalyticsAnalyticsInstanceVanityUrlPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnalyticsAnalyticsInstanceVanityUrlPtrOutput)
}

// AnalyticsAnalyticsInstanceVanityUrlArrayInput is an input type that accepts AnalyticsAnalyticsInstanceVanityUrlArray and AnalyticsAnalyticsInstanceVanityUrlArrayOutput values.
// You can construct a concrete instance of `AnalyticsAnalyticsInstanceVanityUrlArrayInput` via:
//
//          AnalyticsAnalyticsInstanceVanityUrlArray{ AnalyticsAnalyticsInstanceVanityUrlArgs{...} }
type AnalyticsAnalyticsInstanceVanityUrlArrayInput interface {
	pulumi.Input

	ToAnalyticsAnalyticsInstanceVanityUrlArrayOutput() AnalyticsAnalyticsInstanceVanityUrlArrayOutput
	ToAnalyticsAnalyticsInstanceVanityUrlArrayOutputWithContext(context.Context) AnalyticsAnalyticsInstanceVanityUrlArrayOutput
}

type AnalyticsAnalyticsInstanceVanityUrlArray []AnalyticsAnalyticsInstanceVanityUrlInput

func (AnalyticsAnalyticsInstanceVanityUrlArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AnalyticsAnalyticsInstanceVanityUrl)(nil)).Elem()
}

func (i AnalyticsAnalyticsInstanceVanityUrlArray) ToAnalyticsAnalyticsInstanceVanityUrlArrayOutput() AnalyticsAnalyticsInstanceVanityUrlArrayOutput {
	return i.ToAnalyticsAnalyticsInstanceVanityUrlArrayOutputWithContext(context.Background())
}

func (i AnalyticsAnalyticsInstanceVanityUrlArray) ToAnalyticsAnalyticsInstanceVanityUrlArrayOutputWithContext(ctx context.Context) AnalyticsAnalyticsInstanceVanityUrlArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnalyticsAnalyticsInstanceVanityUrlArrayOutput)
}

// AnalyticsAnalyticsInstanceVanityUrlMapInput is an input type that accepts AnalyticsAnalyticsInstanceVanityUrlMap and AnalyticsAnalyticsInstanceVanityUrlMapOutput values.
// You can construct a concrete instance of `AnalyticsAnalyticsInstanceVanityUrlMapInput` via:
//
//          AnalyticsAnalyticsInstanceVanityUrlMap{ "key": AnalyticsAnalyticsInstanceVanityUrlArgs{...} }
type AnalyticsAnalyticsInstanceVanityUrlMapInput interface {
	pulumi.Input

	ToAnalyticsAnalyticsInstanceVanityUrlMapOutput() AnalyticsAnalyticsInstanceVanityUrlMapOutput
	ToAnalyticsAnalyticsInstanceVanityUrlMapOutputWithContext(context.Context) AnalyticsAnalyticsInstanceVanityUrlMapOutput
}

type AnalyticsAnalyticsInstanceVanityUrlMap map[string]AnalyticsAnalyticsInstanceVanityUrlInput

func (AnalyticsAnalyticsInstanceVanityUrlMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AnalyticsAnalyticsInstanceVanityUrl)(nil)).Elem()
}

func (i AnalyticsAnalyticsInstanceVanityUrlMap) ToAnalyticsAnalyticsInstanceVanityUrlMapOutput() AnalyticsAnalyticsInstanceVanityUrlMapOutput {
	return i.ToAnalyticsAnalyticsInstanceVanityUrlMapOutputWithContext(context.Background())
}

func (i AnalyticsAnalyticsInstanceVanityUrlMap) ToAnalyticsAnalyticsInstanceVanityUrlMapOutputWithContext(ctx context.Context) AnalyticsAnalyticsInstanceVanityUrlMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AnalyticsAnalyticsInstanceVanityUrlMapOutput)
}

type AnalyticsAnalyticsInstanceVanityUrlOutput struct {
	*pulumi.OutputState
}

func (AnalyticsAnalyticsInstanceVanityUrlOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*AnalyticsAnalyticsInstanceVanityUrl)(nil))
}

func (o AnalyticsAnalyticsInstanceVanityUrlOutput) ToAnalyticsAnalyticsInstanceVanityUrlOutput() AnalyticsAnalyticsInstanceVanityUrlOutput {
	return o
}

func (o AnalyticsAnalyticsInstanceVanityUrlOutput) ToAnalyticsAnalyticsInstanceVanityUrlOutputWithContext(ctx context.Context) AnalyticsAnalyticsInstanceVanityUrlOutput {
	return o
}

func (o AnalyticsAnalyticsInstanceVanityUrlOutput) ToAnalyticsAnalyticsInstanceVanityUrlPtrOutput() AnalyticsAnalyticsInstanceVanityUrlPtrOutput {
	return o.ToAnalyticsAnalyticsInstanceVanityUrlPtrOutputWithContext(context.Background())
}

func (o AnalyticsAnalyticsInstanceVanityUrlOutput) ToAnalyticsAnalyticsInstanceVanityUrlPtrOutputWithContext(ctx context.Context) AnalyticsAnalyticsInstanceVanityUrlPtrOutput {
	return o.ApplyT(func(v AnalyticsAnalyticsInstanceVanityUrl) *AnalyticsAnalyticsInstanceVanityUrl {
		return &v
	}).(AnalyticsAnalyticsInstanceVanityUrlPtrOutput)
}

type AnalyticsAnalyticsInstanceVanityUrlPtrOutput struct {
	*pulumi.OutputState
}

func (AnalyticsAnalyticsInstanceVanityUrlPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AnalyticsAnalyticsInstanceVanityUrl)(nil))
}

func (o AnalyticsAnalyticsInstanceVanityUrlPtrOutput) ToAnalyticsAnalyticsInstanceVanityUrlPtrOutput() AnalyticsAnalyticsInstanceVanityUrlPtrOutput {
	return o
}

func (o AnalyticsAnalyticsInstanceVanityUrlPtrOutput) ToAnalyticsAnalyticsInstanceVanityUrlPtrOutputWithContext(ctx context.Context) AnalyticsAnalyticsInstanceVanityUrlPtrOutput {
	return o
}

type AnalyticsAnalyticsInstanceVanityUrlArrayOutput struct{ *pulumi.OutputState }

func (AnalyticsAnalyticsInstanceVanityUrlArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]AnalyticsAnalyticsInstanceVanityUrl)(nil))
}

func (o AnalyticsAnalyticsInstanceVanityUrlArrayOutput) ToAnalyticsAnalyticsInstanceVanityUrlArrayOutput() AnalyticsAnalyticsInstanceVanityUrlArrayOutput {
	return o
}

func (o AnalyticsAnalyticsInstanceVanityUrlArrayOutput) ToAnalyticsAnalyticsInstanceVanityUrlArrayOutputWithContext(ctx context.Context) AnalyticsAnalyticsInstanceVanityUrlArrayOutput {
	return o
}

func (o AnalyticsAnalyticsInstanceVanityUrlArrayOutput) Index(i pulumi.IntInput) AnalyticsAnalyticsInstanceVanityUrlOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) AnalyticsAnalyticsInstanceVanityUrl {
		return vs[0].([]AnalyticsAnalyticsInstanceVanityUrl)[vs[1].(int)]
	}).(AnalyticsAnalyticsInstanceVanityUrlOutput)
}

type AnalyticsAnalyticsInstanceVanityUrlMapOutput struct{ *pulumi.OutputState }

func (AnalyticsAnalyticsInstanceVanityUrlMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]AnalyticsAnalyticsInstanceVanityUrl)(nil))
}

func (o AnalyticsAnalyticsInstanceVanityUrlMapOutput) ToAnalyticsAnalyticsInstanceVanityUrlMapOutput() AnalyticsAnalyticsInstanceVanityUrlMapOutput {
	return o
}

func (o AnalyticsAnalyticsInstanceVanityUrlMapOutput) ToAnalyticsAnalyticsInstanceVanityUrlMapOutputWithContext(ctx context.Context) AnalyticsAnalyticsInstanceVanityUrlMapOutput {
	return o
}

func (o AnalyticsAnalyticsInstanceVanityUrlMapOutput) MapIndex(k pulumi.StringInput) AnalyticsAnalyticsInstanceVanityUrlOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) AnalyticsAnalyticsInstanceVanityUrl {
		return vs[0].(map[string]AnalyticsAnalyticsInstanceVanityUrl)[vs[1].(string)]
	}).(AnalyticsAnalyticsInstanceVanityUrlOutput)
}

func init() {
	pulumi.RegisterOutputType(AnalyticsAnalyticsInstanceVanityUrlOutput{})
	pulumi.RegisterOutputType(AnalyticsAnalyticsInstanceVanityUrlPtrOutput{})
	pulumi.RegisterOutputType(AnalyticsAnalyticsInstanceVanityUrlArrayOutput{})
	pulumi.RegisterOutputType(AnalyticsAnalyticsInstanceVanityUrlMapOutput{})
}
