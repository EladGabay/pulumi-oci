// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package oci

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource provides the Smtp Credential resource in Oracle Cloud Infrastructure Identity service.
//
// Creates a new SMTP credential for the specified user. An SMTP credential has an SMTP user name and an SMTP password.
// You must specify a *description* for the SMTP credential (although it can be an empty string). It does not
// have to be unique, and you can change it anytime with
// [UpdateSmtpCredential](https://docs.cloud.oracle.com/iaas/api/#/en/identity/20160918/SmtpCredentialSummary/UpdateSmtpCredential).
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-oci/sdk/go/oci"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := oci.NewIdentitySmtpCredential(ctx, "testSmtpCredential", &oci.IdentitySmtpCredentialArgs{
// 			Description: pulumi.Any(_var.Smtp_credential_description),
// 			UserId:      pulumi.Any(oci_identity_user.Test_user.Id),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// SmtpCredentials can be imported using the `id`, e.g.
//
// ```sh
//  $ pulumi import oci:index/identitySmtpCredential:IdentitySmtpCredential test_smtp_credential "users/{userId}/smtpCredentials/{smtpCredentialId}"
// ```
type IdentitySmtpCredential struct {
	pulumi.CustomResourceState

	// (Updatable) The description you assign to the SMTP credentials during creation. Does not have to be unique, and it's changeable.
	Description pulumi.StringOutput `pulumi:"description"`
	// The detailed status of INACTIVE lifecycleState.
	InactiveState pulumi.StringOutput `pulumi:"inactiveState"`
	// The SMTP password.
	Password pulumi.StringOutput `pulumi:"password"`
	// The credential's current state.
	State pulumi.StringOutput `pulumi:"state"`
	// Date and time the `SmtpCredential` object was created, in the format defined by RFC3339.  Example: `2016-08-25T21:10:29.600Z`
	TimeCreated pulumi.StringOutput `pulumi:"timeCreated"`
	// Date and time when this credential will expire, in the format defined by RFC3339. Null if it never expires.  Example: `2016-08-25T21:10:29.600Z`
	TimeExpires pulumi.StringOutput `pulumi:"timeExpires"`
	// The OCID of the user.
	UserId pulumi.StringOutput `pulumi:"userId"`
	// The SMTP user name.
	Username pulumi.StringOutput `pulumi:"username"`
}

// NewIdentitySmtpCredential registers a new resource with the given unique name, arguments, and options.
func NewIdentitySmtpCredential(ctx *pulumi.Context,
	name string, args *IdentitySmtpCredentialArgs, opts ...pulumi.ResourceOption) (*IdentitySmtpCredential, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Description == nil {
		return nil, errors.New("invalid value for required argument 'Description'")
	}
	if args.UserId == nil {
		return nil, errors.New("invalid value for required argument 'UserId'")
	}
	var resource IdentitySmtpCredential
	err := ctx.RegisterResource("oci:index/identitySmtpCredential:IdentitySmtpCredential", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIdentitySmtpCredential gets an existing IdentitySmtpCredential resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIdentitySmtpCredential(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *IdentitySmtpCredentialState, opts ...pulumi.ResourceOption) (*IdentitySmtpCredential, error) {
	var resource IdentitySmtpCredential
	err := ctx.ReadResource("oci:index/identitySmtpCredential:IdentitySmtpCredential", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering IdentitySmtpCredential resources.
type identitySmtpCredentialState struct {
	// (Updatable) The description you assign to the SMTP credentials during creation. Does not have to be unique, and it's changeable.
	Description *string `pulumi:"description"`
	// The detailed status of INACTIVE lifecycleState.
	InactiveState *string `pulumi:"inactiveState"`
	// The SMTP password.
	Password *string `pulumi:"password"`
	// The credential's current state.
	State *string `pulumi:"state"`
	// Date and time the `SmtpCredential` object was created, in the format defined by RFC3339.  Example: `2016-08-25T21:10:29.600Z`
	TimeCreated *string `pulumi:"timeCreated"`
	// Date and time when this credential will expire, in the format defined by RFC3339. Null if it never expires.  Example: `2016-08-25T21:10:29.600Z`
	TimeExpires *string `pulumi:"timeExpires"`
	// The OCID of the user.
	UserId *string `pulumi:"userId"`
	// The SMTP user name.
	Username *string `pulumi:"username"`
}

type IdentitySmtpCredentialState struct {
	// (Updatable) The description you assign to the SMTP credentials during creation. Does not have to be unique, and it's changeable.
	Description pulumi.StringPtrInput
	// The detailed status of INACTIVE lifecycleState.
	InactiveState pulumi.StringPtrInput
	// The SMTP password.
	Password pulumi.StringPtrInput
	// The credential's current state.
	State pulumi.StringPtrInput
	// Date and time the `SmtpCredential` object was created, in the format defined by RFC3339.  Example: `2016-08-25T21:10:29.600Z`
	TimeCreated pulumi.StringPtrInput
	// Date and time when this credential will expire, in the format defined by RFC3339. Null if it never expires.  Example: `2016-08-25T21:10:29.600Z`
	TimeExpires pulumi.StringPtrInput
	// The OCID of the user.
	UserId pulumi.StringPtrInput
	// The SMTP user name.
	Username pulumi.StringPtrInput
}

func (IdentitySmtpCredentialState) ElementType() reflect.Type {
	return reflect.TypeOf((*identitySmtpCredentialState)(nil)).Elem()
}

type identitySmtpCredentialArgs struct {
	// (Updatable) The description you assign to the SMTP credentials during creation. Does not have to be unique, and it's changeable.
	Description string `pulumi:"description"`
	// The OCID of the user.
	UserId string `pulumi:"userId"`
}

// The set of arguments for constructing a IdentitySmtpCredential resource.
type IdentitySmtpCredentialArgs struct {
	// (Updatable) The description you assign to the SMTP credentials during creation. Does not have to be unique, and it's changeable.
	Description pulumi.StringInput
	// The OCID of the user.
	UserId pulumi.StringInput
}

func (IdentitySmtpCredentialArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*identitySmtpCredentialArgs)(nil)).Elem()
}

type IdentitySmtpCredentialInput interface {
	pulumi.Input

	ToIdentitySmtpCredentialOutput() IdentitySmtpCredentialOutput
	ToIdentitySmtpCredentialOutputWithContext(ctx context.Context) IdentitySmtpCredentialOutput
}

func (*IdentitySmtpCredential) ElementType() reflect.Type {
	return reflect.TypeOf((*IdentitySmtpCredential)(nil))
}

func (i *IdentitySmtpCredential) ToIdentitySmtpCredentialOutput() IdentitySmtpCredentialOutput {
	return i.ToIdentitySmtpCredentialOutputWithContext(context.Background())
}

func (i *IdentitySmtpCredential) ToIdentitySmtpCredentialOutputWithContext(ctx context.Context) IdentitySmtpCredentialOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdentitySmtpCredentialOutput)
}

func (i *IdentitySmtpCredential) ToIdentitySmtpCredentialPtrOutput() IdentitySmtpCredentialPtrOutput {
	return i.ToIdentitySmtpCredentialPtrOutputWithContext(context.Background())
}

func (i *IdentitySmtpCredential) ToIdentitySmtpCredentialPtrOutputWithContext(ctx context.Context) IdentitySmtpCredentialPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdentitySmtpCredentialPtrOutput)
}

type IdentitySmtpCredentialPtrInput interface {
	pulumi.Input

	ToIdentitySmtpCredentialPtrOutput() IdentitySmtpCredentialPtrOutput
	ToIdentitySmtpCredentialPtrOutputWithContext(ctx context.Context) IdentitySmtpCredentialPtrOutput
}

type identitySmtpCredentialPtrType IdentitySmtpCredentialArgs

func (*identitySmtpCredentialPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**IdentitySmtpCredential)(nil))
}

func (i *identitySmtpCredentialPtrType) ToIdentitySmtpCredentialPtrOutput() IdentitySmtpCredentialPtrOutput {
	return i.ToIdentitySmtpCredentialPtrOutputWithContext(context.Background())
}

func (i *identitySmtpCredentialPtrType) ToIdentitySmtpCredentialPtrOutputWithContext(ctx context.Context) IdentitySmtpCredentialPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdentitySmtpCredentialPtrOutput)
}

// IdentitySmtpCredentialArrayInput is an input type that accepts IdentitySmtpCredentialArray and IdentitySmtpCredentialArrayOutput values.
// You can construct a concrete instance of `IdentitySmtpCredentialArrayInput` via:
//
//          IdentitySmtpCredentialArray{ IdentitySmtpCredentialArgs{...} }
type IdentitySmtpCredentialArrayInput interface {
	pulumi.Input

	ToIdentitySmtpCredentialArrayOutput() IdentitySmtpCredentialArrayOutput
	ToIdentitySmtpCredentialArrayOutputWithContext(context.Context) IdentitySmtpCredentialArrayOutput
}

type IdentitySmtpCredentialArray []IdentitySmtpCredentialInput

func (IdentitySmtpCredentialArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IdentitySmtpCredential)(nil)).Elem()
}

func (i IdentitySmtpCredentialArray) ToIdentitySmtpCredentialArrayOutput() IdentitySmtpCredentialArrayOutput {
	return i.ToIdentitySmtpCredentialArrayOutputWithContext(context.Background())
}

func (i IdentitySmtpCredentialArray) ToIdentitySmtpCredentialArrayOutputWithContext(ctx context.Context) IdentitySmtpCredentialArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdentitySmtpCredentialArrayOutput)
}

// IdentitySmtpCredentialMapInput is an input type that accepts IdentitySmtpCredentialMap and IdentitySmtpCredentialMapOutput values.
// You can construct a concrete instance of `IdentitySmtpCredentialMapInput` via:
//
//          IdentitySmtpCredentialMap{ "key": IdentitySmtpCredentialArgs{...} }
type IdentitySmtpCredentialMapInput interface {
	pulumi.Input

	ToIdentitySmtpCredentialMapOutput() IdentitySmtpCredentialMapOutput
	ToIdentitySmtpCredentialMapOutputWithContext(context.Context) IdentitySmtpCredentialMapOutput
}

type IdentitySmtpCredentialMap map[string]IdentitySmtpCredentialInput

func (IdentitySmtpCredentialMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IdentitySmtpCredential)(nil)).Elem()
}

func (i IdentitySmtpCredentialMap) ToIdentitySmtpCredentialMapOutput() IdentitySmtpCredentialMapOutput {
	return i.ToIdentitySmtpCredentialMapOutputWithContext(context.Background())
}

func (i IdentitySmtpCredentialMap) ToIdentitySmtpCredentialMapOutputWithContext(ctx context.Context) IdentitySmtpCredentialMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdentitySmtpCredentialMapOutput)
}

type IdentitySmtpCredentialOutput struct {
	*pulumi.OutputState
}

func (IdentitySmtpCredentialOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IdentitySmtpCredential)(nil))
}

func (o IdentitySmtpCredentialOutput) ToIdentitySmtpCredentialOutput() IdentitySmtpCredentialOutput {
	return o
}

func (o IdentitySmtpCredentialOutput) ToIdentitySmtpCredentialOutputWithContext(ctx context.Context) IdentitySmtpCredentialOutput {
	return o
}

func (o IdentitySmtpCredentialOutput) ToIdentitySmtpCredentialPtrOutput() IdentitySmtpCredentialPtrOutput {
	return o.ToIdentitySmtpCredentialPtrOutputWithContext(context.Background())
}

func (o IdentitySmtpCredentialOutput) ToIdentitySmtpCredentialPtrOutputWithContext(ctx context.Context) IdentitySmtpCredentialPtrOutput {
	return o.ApplyT(func(v IdentitySmtpCredential) *IdentitySmtpCredential {
		return &v
	}).(IdentitySmtpCredentialPtrOutput)
}

type IdentitySmtpCredentialPtrOutput struct {
	*pulumi.OutputState
}

func (IdentitySmtpCredentialPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IdentitySmtpCredential)(nil))
}

func (o IdentitySmtpCredentialPtrOutput) ToIdentitySmtpCredentialPtrOutput() IdentitySmtpCredentialPtrOutput {
	return o
}

func (o IdentitySmtpCredentialPtrOutput) ToIdentitySmtpCredentialPtrOutputWithContext(ctx context.Context) IdentitySmtpCredentialPtrOutput {
	return o
}

type IdentitySmtpCredentialArrayOutput struct{ *pulumi.OutputState }

func (IdentitySmtpCredentialArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]IdentitySmtpCredential)(nil))
}

func (o IdentitySmtpCredentialArrayOutput) ToIdentitySmtpCredentialArrayOutput() IdentitySmtpCredentialArrayOutput {
	return o
}

func (o IdentitySmtpCredentialArrayOutput) ToIdentitySmtpCredentialArrayOutputWithContext(ctx context.Context) IdentitySmtpCredentialArrayOutput {
	return o
}

func (o IdentitySmtpCredentialArrayOutput) Index(i pulumi.IntInput) IdentitySmtpCredentialOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) IdentitySmtpCredential {
		return vs[0].([]IdentitySmtpCredential)[vs[1].(int)]
	}).(IdentitySmtpCredentialOutput)
}

type IdentitySmtpCredentialMapOutput struct{ *pulumi.OutputState }

func (IdentitySmtpCredentialMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]IdentitySmtpCredential)(nil))
}

func (o IdentitySmtpCredentialMapOutput) ToIdentitySmtpCredentialMapOutput() IdentitySmtpCredentialMapOutput {
	return o
}

func (o IdentitySmtpCredentialMapOutput) ToIdentitySmtpCredentialMapOutputWithContext(ctx context.Context) IdentitySmtpCredentialMapOutput {
	return o
}

func (o IdentitySmtpCredentialMapOutput) MapIndex(k pulumi.StringInput) IdentitySmtpCredentialOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) IdentitySmtpCredential {
		return vs[0].(map[string]IdentitySmtpCredential)[vs[1].(string)]
	}).(IdentitySmtpCredentialOutput)
}

func init() {
	pulumi.RegisterOutputType(IdentitySmtpCredentialOutput{})
	pulumi.RegisterOutputType(IdentitySmtpCredentialPtrOutput{})
	pulumi.RegisterOutputType(IdentitySmtpCredentialArrayOutput{})
	pulumi.RegisterOutputType(IdentitySmtpCredentialMapOutput{})
}
