// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package oci

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource provides the Backend resource in Oracle Cloud Infrastructure Network Load Balancer service.
//
// Adds a backend server to a backend set.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-oci/sdk/go/oci"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := oci.NewNetworkLoadBalancerBackend(ctx, "testBackend", &oci.NetworkLoadBalancerBackendArgs{
// 			BackendSetName:        pulumi.Any(oci_network_load_balancer_backend_set.Test_backend_set.Name),
// 			NetworkLoadBalancerId: pulumi.Any(oci_network_load_balancer_network_load_balancer.Test_network_load_balancer.Id),
// 			Port:                  pulumi.Any(_var.Backend_port),
// 			IpAddress:             pulumi.Any(_var.Backend_ip_address),
// 			IsBackup:              pulumi.Any(_var.Backend_is_backup),
// 			IsDrain:               pulumi.Any(_var.Backend_is_drain),
// 			IsOffline:             pulumi.Any(_var.Backend_is_offline),
// 			TargetId:              pulumi.Any(oci_cloud_guard_target.Test_target.Id),
// 			Weight:                pulumi.Any(_var.Backend_weight),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// Backends can be imported using the `id`, e.g.
//
// ```sh
//  $ pulumi import oci:index/networkLoadBalancerBackend:NetworkLoadBalancerBackend test_backend "networkLoadBalancers/{networkLoadBalancerId}/backendSets/{backendSetName}/backends/{backendName}"
// ```
type NetworkLoadBalancerBackend struct {
	pulumi.CustomResourceState

	// The name of the backend set to which to add the backend server.  Example: `exampleBackendSet`
	BackendSetName pulumi.StringOutput `pulumi:"backendSetName"`
	// The IP address of the backend server. Example: `10.0.0.3`
	IpAddress pulumi.StringOutput `pulumi:"ipAddress"`
	// (Updatable) Whether the network load balancer should treat this server as a backup unit. If `true`, then the network load balancer forwards no ingress traffic to this backend server unless all other backend servers not marked as "isBackup" fail the health check policy.  Example: `false`
	IsBackup pulumi.BoolOutput `pulumi:"isBackup"`
	// (Updatable) Whether the network load balancer should drain this server. Servers marked "isDrain" receive no  incoming traffic.  Example: `false`
	IsDrain pulumi.BoolOutput `pulumi:"isDrain"`
	// (Updatable) Whether the network load balancer should treat this server as offline. Offline servers receive no incoming traffic.  Example: `false`
	IsOffline pulumi.BoolOutput `pulumi:"isOffline"`
	// Optional unique name identifying the backend within the backend set. If not specified, then one will be generated. Example: `webServer1`
	Name pulumi.StringOutput `pulumi:"name"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the network load balancer to update.
	NetworkLoadBalancerId pulumi.StringOutput `pulumi:"networkLoadBalancerId"`
	// The communication port for the backend server.  Example: `8080`
	Port pulumi.IntOutput `pulumi:"port"`
	// The IP OCID/Instance OCID associated with the backend server. Example: `ocid1.privateip..oc1.<var>&lt;unique_ID&gt;</var>`
	TargetId pulumi.StringOutput `pulumi:"targetId"`
	// (Updatable) The network load balancing policy weight assigned to the server. Backend servers with a higher weight receive a larger proportion of incoming traffic. For example, a server weighted '3' receives three times the number of new connections as a server weighted '1'. For more information about load balancing policies, see [How Network Load Balancing Policies Work](https://docs.cloud.oracle.com/iaas/Content/Balance/Reference/lbpolicies.htm).  Example: `3`
	Weight pulumi.IntOutput `pulumi:"weight"`
}

// NewNetworkLoadBalancerBackend registers a new resource with the given unique name, arguments, and options.
func NewNetworkLoadBalancerBackend(ctx *pulumi.Context,
	name string, args *NetworkLoadBalancerBackendArgs, opts ...pulumi.ResourceOption) (*NetworkLoadBalancerBackend, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.BackendSetName == nil {
		return nil, errors.New("invalid value for required argument 'BackendSetName'")
	}
	if args.NetworkLoadBalancerId == nil {
		return nil, errors.New("invalid value for required argument 'NetworkLoadBalancerId'")
	}
	if args.Port == nil {
		return nil, errors.New("invalid value for required argument 'Port'")
	}
	var resource NetworkLoadBalancerBackend
	err := ctx.RegisterResource("oci:index/networkLoadBalancerBackend:NetworkLoadBalancerBackend", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNetworkLoadBalancerBackend gets an existing NetworkLoadBalancerBackend resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNetworkLoadBalancerBackend(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NetworkLoadBalancerBackendState, opts ...pulumi.ResourceOption) (*NetworkLoadBalancerBackend, error) {
	var resource NetworkLoadBalancerBackend
	err := ctx.ReadResource("oci:index/networkLoadBalancerBackend:NetworkLoadBalancerBackend", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NetworkLoadBalancerBackend resources.
type networkLoadBalancerBackendState struct {
	// The name of the backend set to which to add the backend server.  Example: `exampleBackendSet`
	BackendSetName *string `pulumi:"backendSetName"`
	// The IP address of the backend server. Example: `10.0.0.3`
	IpAddress *string `pulumi:"ipAddress"`
	// (Updatable) Whether the network load balancer should treat this server as a backup unit. If `true`, then the network load balancer forwards no ingress traffic to this backend server unless all other backend servers not marked as "isBackup" fail the health check policy.  Example: `false`
	IsBackup *bool `pulumi:"isBackup"`
	// (Updatable) Whether the network load balancer should drain this server. Servers marked "isDrain" receive no  incoming traffic.  Example: `false`
	IsDrain *bool `pulumi:"isDrain"`
	// (Updatable) Whether the network load balancer should treat this server as offline. Offline servers receive no incoming traffic.  Example: `false`
	IsOffline *bool `pulumi:"isOffline"`
	// Optional unique name identifying the backend within the backend set. If not specified, then one will be generated. Example: `webServer1`
	Name *string `pulumi:"name"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the network load balancer to update.
	NetworkLoadBalancerId *string `pulumi:"networkLoadBalancerId"`
	// The communication port for the backend server.  Example: `8080`
	Port *int `pulumi:"port"`
	// The IP OCID/Instance OCID associated with the backend server. Example: `ocid1.privateip..oc1.<var>&lt;unique_ID&gt;</var>`
	TargetId *string `pulumi:"targetId"`
	// (Updatable) The network load balancing policy weight assigned to the server. Backend servers with a higher weight receive a larger proportion of incoming traffic. For example, a server weighted '3' receives three times the number of new connections as a server weighted '1'. For more information about load balancing policies, see [How Network Load Balancing Policies Work](https://docs.cloud.oracle.com/iaas/Content/Balance/Reference/lbpolicies.htm).  Example: `3`
	Weight *int `pulumi:"weight"`
}

type NetworkLoadBalancerBackendState struct {
	// The name of the backend set to which to add the backend server.  Example: `exampleBackendSet`
	BackendSetName pulumi.StringPtrInput
	// The IP address of the backend server. Example: `10.0.0.3`
	IpAddress pulumi.StringPtrInput
	// (Updatable) Whether the network load balancer should treat this server as a backup unit. If `true`, then the network load balancer forwards no ingress traffic to this backend server unless all other backend servers not marked as "isBackup" fail the health check policy.  Example: `false`
	IsBackup pulumi.BoolPtrInput
	// (Updatable) Whether the network load balancer should drain this server. Servers marked "isDrain" receive no  incoming traffic.  Example: `false`
	IsDrain pulumi.BoolPtrInput
	// (Updatable) Whether the network load balancer should treat this server as offline. Offline servers receive no incoming traffic.  Example: `false`
	IsOffline pulumi.BoolPtrInput
	// Optional unique name identifying the backend within the backend set. If not specified, then one will be generated. Example: `webServer1`
	Name pulumi.StringPtrInput
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the network load balancer to update.
	NetworkLoadBalancerId pulumi.StringPtrInput
	// The communication port for the backend server.  Example: `8080`
	Port pulumi.IntPtrInput
	// The IP OCID/Instance OCID associated with the backend server. Example: `ocid1.privateip..oc1.<var>&lt;unique_ID&gt;</var>`
	TargetId pulumi.StringPtrInput
	// (Updatable) The network load balancing policy weight assigned to the server. Backend servers with a higher weight receive a larger proportion of incoming traffic. For example, a server weighted '3' receives three times the number of new connections as a server weighted '1'. For more information about load balancing policies, see [How Network Load Balancing Policies Work](https://docs.cloud.oracle.com/iaas/Content/Balance/Reference/lbpolicies.htm).  Example: `3`
	Weight pulumi.IntPtrInput
}

func (NetworkLoadBalancerBackendState) ElementType() reflect.Type {
	return reflect.TypeOf((*networkLoadBalancerBackendState)(nil)).Elem()
}

type networkLoadBalancerBackendArgs struct {
	// The name of the backend set to which to add the backend server.  Example: `exampleBackendSet`
	BackendSetName string `pulumi:"backendSetName"`
	// The IP address of the backend server. Example: `10.0.0.3`
	IpAddress *string `pulumi:"ipAddress"`
	// (Updatable) Whether the network load balancer should treat this server as a backup unit. If `true`, then the network load balancer forwards no ingress traffic to this backend server unless all other backend servers not marked as "isBackup" fail the health check policy.  Example: `false`
	IsBackup *bool `pulumi:"isBackup"`
	// (Updatable) Whether the network load balancer should drain this server. Servers marked "isDrain" receive no  incoming traffic.  Example: `false`
	IsDrain *bool `pulumi:"isDrain"`
	// (Updatable) Whether the network load balancer should treat this server as offline. Offline servers receive no incoming traffic.  Example: `false`
	IsOffline *bool `pulumi:"isOffline"`
	// Optional unique name identifying the backend within the backend set. If not specified, then one will be generated. Example: `webServer1`
	Name *string `pulumi:"name"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the network load balancer to update.
	NetworkLoadBalancerId string `pulumi:"networkLoadBalancerId"`
	// The communication port for the backend server.  Example: `8080`
	Port int `pulumi:"port"`
	// The IP OCID/Instance OCID associated with the backend server. Example: `ocid1.privateip..oc1.<var>&lt;unique_ID&gt;</var>`
	TargetId *string `pulumi:"targetId"`
	// (Updatable) The network load balancing policy weight assigned to the server. Backend servers with a higher weight receive a larger proportion of incoming traffic. For example, a server weighted '3' receives three times the number of new connections as a server weighted '1'. For more information about load balancing policies, see [How Network Load Balancing Policies Work](https://docs.cloud.oracle.com/iaas/Content/Balance/Reference/lbpolicies.htm).  Example: `3`
	Weight *int `pulumi:"weight"`
}

// The set of arguments for constructing a NetworkLoadBalancerBackend resource.
type NetworkLoadBalancerBackendArgs struct {
	// The name of the backend set to which to add the backend server.  Example: `exampleBackendSet`
	BackendSetName pulumi.StringInput
	// The IP address of the backend server. Example: `10.0.0.3`
	IpAddress pulumi.StringPtrInput
	// (Updatable) Whether the network load balancer should treat this server as a backup unit. If `true`, then the network load balancer forwards no ingress traffic to this backend server unless all other backend servers not marked as "isBackup" fail the health check policy.  Example: `false`
	IsBackup pulumi.BoolPtrInput
	// (Updatable) Whether the network load balancer should drain this server. Servers marked "isDrain" receive no  incoming traffic.  Example: `false`
	IsDrain pulumi.BoolPtrInput
	// (Updatable) Whether the network load balancer should treat this server as offline. Offline servers receive no incoming traffic.  Example: `false`
	IsOffline pulumi.BoolPtrInput
	// Optional unique name identifying the backend within the backend set. If not specified, then one will be generated. Example: `webServer1`
	Name pulumi.StringPtrInput
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the network load balancer to update.
	NetworkLoadBalancerId pulumi.StringInput
	// The communication port for the backend server.  Example: `8080`
	Port pulumi.IntInput
	// The IP OCID/Instance OCID associated with the backend server. Example: `ocid1.privateip..oc1.<var>&lt;unique_ID&gt;</var>`
	TargetId pulumi.StringPtrInput
	// (Updatable) The network load balancing policy weight assigned to the server. Backend servers with a higher weight receive a larger proportion of incoming traffic. For example, a server weighted '3' receives three times the number of new connections as a server weighted '1'. For more information about load balancing policies, see [How Network Load Balancing Policies Work](https://docs.cloud.oracle.com/iaas/Content/Balance/Reference/lbpolicies.htm).  Example: `3`
	Weight pulumi.IntPtrInput
}

func (NetworkLoadBalancerBackendArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*networkLoadBalancerBackendArgs)(nil)).Elem()
}

type NetworkLoadBalancerBackendInput interface {
	pulumi.Input

	ToNetworkLoadBalancerBackendOutput() NetworkLoadBalancerBackendOutput
	ToNetworkLoadBalancerBackendOutputWithContext(ctx context.Context) NetworkLoadBalancerBackendOutput
}

func (*NetworkLoadBalancerBackend) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkLoadBalancerBackend)(nil))
}

func (i *NetworkLoadBalancerBackend) ToNetworkLoadBalancerBackendOutput() NetworkLoadBalancerBackendOutput {
	return i.ToNetworkLoadBalancerBackendOutputWithContext(context.Background())
}

func (i *NetworkLoadBalancerBackend) ToNetworkLoadBalancerBackendOutputWithContext(ctx context.Context) NetworkLoadBalancerBackendOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkLoadBalancerBackendOutput)
}

func (i *NetworkLoadBalancerBackend) ToNetworkLoadBalancerBackendPtrOutput() NetworkLoadBalancerBackendPtrOutput {
	return i.ToNetworkLoadBalancerBackendPtrOutputWithContext(context.Background())
}

func (i *NetworkLoadBalancerBackend) ToNetworkLoadBalancerBackendPtrOutputWithContext(ctx context.Context) NetworkLoadBalancerBackendPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkLoadBalancerBackendPtrOutput)
}

type NetworkLoadBalancerBackendPtrInput interface {
	pulumi.Input

	ToNetworkLoadBalancerBackendPtrOutput() NetworkLoadBalancerBackendPtrOutput
	ToNetworkLoadBalancerBackendPtrOutputWithContext(ctx context.Context) NetworkLoadBalancerBackendPtrOutput
}

type networkLoadBalancerBackendPtrType NetworkLoadBalancerBackendArgs

func (*networkLoadBalancerBackendPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkLoadBalancerBackend)(nil))
}

func (i *networkLoadBalancerBackendPtrType) ToNetworkLoadBalancerBackendPtrOutput() NetworkLoadBalancerBackendPtrOutput {
	return i.ToNetworkLoadBalancerBackendPtrOutputWithContext(context.Background())
}

func (i *networkLoadBalancerBackendPtrType) ToNetworkLoadBalancerBackendPtrOutputWithContext(ctx context.Context) NetworkLoadBalancerBackendPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkLoadBalancerBackendPtrOutput)
}

// NetworkLoadBalancerBackendArrayInput is an input type that accepts NetworkLoadBalancerBackendArray and NetworkLoadBalancerBackendArrayOutput values.
// You can construct a concrete instance of `NetworkLoadBalancerBackendArrayInput` via:
//
//          NetworkLoadBalancerBackendArray{ NetworkLoadBalancerBackendArgs{...} }
type NetworkLoadBalancerBackendArrayInput interface {
	pulumi.Input

	ToNetworkLoadBalancerBackendArrayOutput() NetworkLoadBalancerBackendArrayOutput
	ToNetworkLoadBalancerBackendArrayOutputWithContext(context.Context) NetworkLoadBalancerBackendArrayOutput
}

type NetworkLoadBalancerBackendArray []NetworkLoadBalancerBackendInput

func (NetworkLoadBalancerBackendArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NetworkLoadBalancerBackend)(nil)).Elem()
}

func (i NetworkLoadBalancerBackendArray) ToNetworkLoadBalancerBackendArrayOutput() NetworkLoadBalancerBackendArrayOutput {
	return i.ToNetworkLoadBalancerBackendArrayOutputWithContext(context.Background())
}

func (i NetworkLoadBalancerBackendArray) ToNetworkLoadBalancerBackendArrayOutputWithContext(ctx context.Context) NetworkLoadBalancerBackendArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkLoadBalancerBackendArrayOutput)
}

// NetworkLoadBalancerBackendMapInput is an input type that accepts NetworkLoadBalancerBackendMap and NetworkLoadBalancerBackendMapOutput values.
// You can construct a concrete instance of `NetworkLoadBalancerBackendMapInput` via:
//
//          NetworkLoadBalancerBackendMap{ "key": NetworkLoadBalancerBackendArgs{...} }
type NetworkLoadBalancerBackendMapInput interface {
	pulumi.Input

	ToNetworkLoadBalancerBackendMapOutput() NetworkLoadBalancerBackendMapOutput
	ToNetworkLoadBalancerBackendMapOutputWithContext(context.Context) NetworkLoadBalancerBackendMapOutput
}

type NetworkLoadBalancerBackendMap map[string]NetworkLoadBalancerBackendInput

func (NetworkLoadBalancerBackendMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NetworkLoadBalancerBackend)(nil)).Elem()
}

func (i NetworkLoadBalancerBackendMap) ToNetworkLoadBalancerBackendMapOutput() NetworkLoadBalancerBackendMapOutput {
	return i.ToNetworkLoadBalancerBackendMapOutputWithContext(context.Background())
}

func (i NetworkLoadBalancerBackendMap) ToNetworkLoadBalancerBackendMapOutputWithContext(ctx context.Context) NetworkLoadBalancerBackendMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NetworkLoadBalancerBackendMapOutput)
}

type NetworkLoadBalancerBackendOutput struct {
	*pulumi.OutputState
}

func (NetworkLoadBalancerBackendOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NetworkLoadBalancerBackend)(nil))
}

func (o NetworkLoadBalancerBackendOutput) ToNetworkLoadBalancerBackendOutput() NetworkLoadBalancerBackendOutput {
	return o
}

func (o NetworkLoadBalancerBackendOutput) ToNetworkLoadBalancerBackendOutputWithContext(ctx context.Context) NetworkLoadBalancerBackendOutput {
	return o
}

func (o NetworkLoadBalancerBackendOutput) ToNetworkLoadBalancerBackendPtrOutput() NetworkLoadBalancerBackendPtrOutput {
	return o.ToNetworkLoadBalancerBackendPtrOutputWithContext(context.Background())
}

func (o NetworkLoadBalancerBackendOutput) ToNetworkLoadBalancerBackendPtrOutputWithContext(ctx context.Context) NetworkLoadBalancerBackendPtrOutput {
	return o.ApplyT(func(v NetworkLoadBalancerBackend) *NetworkLoadBalancerBackend {
		return &v
	}).(NetworkLoadBalancerBackendPtrOutput)
}

type NetworkLoadBalancerBackendPtrOutput struct {
	*pulumi.OutputState
}

func (NetworkLoadBalancerBackendPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NetworkLoadBalancerBackend)(nil))
}

func (o NetworkLoadBalancerBackendPtrOutput) ToNetworkLoadBalancerBackendPtrOutput() NetworkLoadBalancerBackendPtrOutput {
	return o
}

func (o NetworkLoadBalancerBackendPtrOutput) ToNetworkLoadBalancerBackendPtrOutputWithContext(ctx context.Context) NetworkLoadBalancerBackendPtrOutput {
	return o
}

type NetworkLoadBalancerBackendArrayOutput struct{ *pulumi.OutputState }

func (NetworkLoadBalancerBackendArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NetworkLoadBalancerBackend)(nil))
}

func (o NetworkLoadBalancerBackendArrayOutput) ToNetworkLoadBalancerBackendArrayOutput() NetworkLoadBalancerBackendArrayOutput {
	return o
}

func (o NetworkLoadBalancerBackendArrayOutput) ToNetworkLoadBalancerBackendArrayOutputWithContext(ctx context.Context) NetworkLoadBalancerBackendArrayOutput {
	return o
}

func (o NetworkLoadBalancerBackendArrayOutput) Index(i pulumi.IntInput) NetworkLoadBalancerBackendOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NetworkLoadBalancerBackend {
		return vs[0].([]NetworkLoadBalancerBackend)[vs[1].(int)]
	}).(NetworkLoadBalancerBackendOutput)
}

type NetworkLoadBalancerBackendMapOutput struct{ *pulumi.OutputState }

func (NetworkLoadBalancerBackendMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]NetworkLoadBalancerBackend)(nil))
}

func (o NetworkLoadBalancerBackendMapOutput) ToNetworkLoadBalancerBackendMapOutput() NetworkLoadBalancerBackendMapOutput {
	return o
}

func (o NetworkLoadBalancerBackendMapOutput) ToNetworkLoadBalancerBackendMapOutputWithContext(ctx context.Context) NetworkLoadBalancerBackendMapOutput {
	return o
}

func (o NetworkLoadBalancerBackendMapOutput) MapIndex(k pulumi.StringInput) NetworkLoadBalancerBackendOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) NetworkLoadBalancerBackend {
		return vs[0].(map[string]NetworkLoadBalancerBackend)[vs[1].(string)]
	}).(NetworkLoadBalancerBackendOutput)
}

func init() {
	pulumi.RegisterOutputType(NetworkLoadBalancerBackendOutput{})
	pulumi.RegisterOutputType(NetworkLoadBalancerBackendPtrOutput{})
	pulumi.RegisterOutputType(NetworkLoadBalancerBackendArrayOutput{})
	pulumi.RegisterOutputType(NetworkLoadBalancerBackendMapOutput{})
}
