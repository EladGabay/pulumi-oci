// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package oci

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource provides the Remote Peering Connection resource in Oracle Cloud Infrastructure Core service.
//
// Creates a new remote peering connection (RPC) for the specified DRG.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-oci/sdk/go/oci"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := oci.NewCoreRemotePeeringConnection(ctx, "testRemotePeeringConnection", &oci.CoreRemotePeeringConnectionArgs{
// 			CompartmentId: pulumi.Any(_var.Compartment_id),
// 			DrgId:         pulumi.Any(oci_core_drg.Test_drg.Id),
// 			DefinedTags: pulumi.AnyMap{
// 				"Operations.CostCenter": pulumi.Any("42"),
// 			},
// 			DisplayName: pulumi.Any(_var.Remote_peering_connection_display_name),
// 			FreeformTags: pulumi.AnyMap{
// 				"Department": pulumi.Any("Finance"),
// 			},
// 			PeerId:         pulumi.Any(oci_core_remote_peering_connection.Test_remote_peering_connection2.Id),
// 			PeerRegionName: pulumi.Any(_var.Remote_peering_connection_peer_region_name),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// RemotePeeringConnections can be imported using the `id`, e.g.
//
// ```sh
//  $ pulumi import oci:index/coreRemotePeeringConnection:CoreRemotePeeringConnection test_remote_peering_connection "id"
// ```
type CoreRemotePeeringConnection struct {
	pulumi.CustomResourceState

	// (Updatable) The OCID of the compartment to contain the RPC.
	CompartmentId pulumi.StringOutput `pulumi:"compartmentId"`
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Operations.CostCenter": "42"}`
	DefinedTags pulumi.MapOutput `pulumi:"definedTags"`
	// (Updatable) A user-friendly name. Does not have to be unique, and it's changeable. Avoid entering confidential information.
	DisplayName pulumi.StringOutput `pulumi:"displayName"`
	// The OCID of the DRG the RPC belongs to.
	DrgId pulumi.StringOutput `pulumi:"drgId"`
	// (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Department": "Finance"}`
	FreeformTags pulumi.MapOutput `pulumi:"freeformTags"`
	// Whether the VCN at the other end of the peering is in a different tenancy.  Example: `false`
	IsCrossTenancyPeering pulumi.BoolOutput `pulumi:"isCrossTenancyPeering"`
	// The OCID of the RPC you want to peer with.
	PeerId pulumi.StringOutput `pulumi:"peerId"`
	// The name of the region that contains the RPC you want to peer with.  Example: `us-ashburn-1`
	PeerRegionName pulumi.StringOutput `pulumi:"peerRegionName"`
	// If this RPC is peered, this value is the OCID of the other RPC's tenancy.
	PeerTenancyId pulumi.StringOutput `pulumi:"peerTenancyId"`
	// Whether the RPC is peered with another RPC. `NEW` means the RPC has not yet been peered. `PENDING` means the peering is being established. `REVOKED` means the RPC at the other end of the peering has been deleted.
	PeeringStatus pulumi.StringOutput `pulumi:"peeringStatus"`
	// The RPC's current lifecycle state.
	State pulumi.StringOutput `pulumi:"state"`
	// The date and time the RPC was created, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).  Example: `2016-08-25T21:10:29.600Z`
	TimeCreated pulumi.StringOutput `pulumi:"timeCreated"`
}

// NewCoreRemotePeeringConnection registers a new resource with the given unique name, arguments, and options.
func NewCoreRemotePeeringConnection(ctx *pulumi.Context,
	name string, args *CoreRemotePeeringConnectionArgs, opts ...pulumi.ResourceOption) (*CoreRemotePeeringConnection, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CompartmentId == nil {
		return nil, errors.New("invalid value for required argument 'CompartmentId'")
	}
	if args.DrgId == nil {
		return nil, errors.New("invalid value for required argument 'DrgId'")
	}
	var resource CoreRemotePeeringConnection
	err := ctx.RegisterResource("oci:index/coreRemotePeeringConnection:CoreRemotePeeringConnection", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCoreRemotePeeringConnection gets an existing CoreRemotePeeringConnection resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCoreRemotePeeringConnection(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CoreRemotePeeringConnectionState, opts ...pulumi.ResourceOption) (*CoreRemotePeeringConnection, error) {
	var resource CoreRemotePeeringConnection
	err := ctx.ReadResource("oci:index/coreRemotePeeringConnection:CoreRemotePeeringConnection", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CoreRemotePeeringConnection resources.
type coreRemotePeeringConnectionState struct {
	// (Updatable) The OCID of the compartment to contain the RPC.
	CompartmentId *string `pulumi:"compartmentId"`
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Operations.CostCenter": "42"}`
	DefinedTags map[string]interface{} `pulumi:"definedTags"`
	// (Updatable) A user-friendly name. Does not have to be unique, and it's changeable. Avoid entering confidential information.
	DisplayName *string `pulumi:"displayName"`
	// The OCID of the DRG the RPC belongs to.
	DrgId *string `pulumi:"drgId"`
	// (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Department": "Finance"}`
	FreeformTags map[string]interface{} `pulumi:"freeformTags"`
	// Whether the VCN at the other end of the peering is in a different tenancy.  Example: `false`
	IsCrossTenancyPeering *bool `pulumi:"isCrossTenancyPeering"`
	// The OCID of the RPC you want to peer with.
	PeerId *string `pulumi:"peerId"`
	// The name of the region that contains the RPC you want to peer with.  Example: `us-ashburn-1`
	PeerRegionName *string `pulumi:"peerRegionName"`
	// If this RPC is peered, this value is the OCID of the other RPC's tenancy.
	PeerTenancyId *string `pulumi:"peerTenancyId"`
	// Whether the RPC is peered with another RPC. `NEW` means the RPC has not yet been peered. `PENDING` means the peering is being established. `REVOKED` means the RPC at the other end of the peering has been deleted.
	PeeringStatus *string `pulumi:"peeringStatus"`
	// The RPC's current lifecycle state.
	State *string `pulumi:"state"`
	// The date and time the RPC was created, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).  Example: `2016-08-25T21:10:29.600Z`
	TimeCreated *string `pulumi:"timeCreated"`
}

type CoreRemotePeeringConnectionState struct {
	// (Updatable) The OCID of the compartment to contain the RPC.
	CompartmentId pulumi.StringPtrInput
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Operations.CostCenter": "42"}`
	DefinedTags pulumi.MapInput
	// (Updatable) A user-friendly name. Does not have to be unique, and it's changeable. Avoid entering confidential information.
	DisplayName pulumi.StringPtrInput
	// The OCID of the DRG the RPC belongs to.
	DrgId pulumi.StringPtrInput
	// (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Department": "Finance"}`
	FreeformTags pulumi.MapInput
	// Whether the VCN at the other end of the peering is in a different tenancy.  Example: `false`
	IsCrossTenancyPeering pulumi.BoolPtrInput
	// The OCID of the RPC you want to peer with.
	PeerId pulumi.StringPtrInput
	// The name of the region that contains the RPC you want to peer with.  Example: `us-ashburn-1`
	PeerRegionName pulumi.StringPtrInput
	// If this RPC is peered, this value is the OCID of the other RPC's tenancy.
	PeerTenancyId pulumi.StringPtrInput
	// Whether the RPC is peered with another RPC. `NEW` means the RPC has not yet been peered. `PENDING` means the peering is being established. `REVOKED` means the RPC at the other end of the peering has been deleted.
	PeeringStatus pulumi.StringPtrInput
	// The RPC's current lifecycle state.
	State pulumi.StringPtrInput
	// The date and time the RPC was created, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).  Example: `2016-08-25T21:10:29.600Z`
	TimeCreated pulumi.StringPtrInput
}

func (CoreRemotePeeringConnectionState) ElementType() reflect.Type {
	return reflect.TypeOf((*coreRemotePeeringConnectionState)(nil)).Elem()
}

type coreRemotePeeringConnectionArgs struct {
	// (Updatable) The OCID of the compartment to contain the RPC.
	CompartmentId string `pulumi:"compartmentId"`
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Operations.CostCenter": "42"}`
	DefinedTags map[string]interface{} `pulumi:"definedTags"`
	// (Updatable) A user-friendly name. Does not have to be unique, and it's changeable. Avoid entering confidential information.
	DisplayName *string `pulumi:"displayName"`
	// The OCID of the DRG the RPC belongs to.
	DrgId string `pulumi:"drgId"`
	// (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Department": "Finance"}`
	FreeformTags map[string]interface{} `pulumi:"freeformTags"`
	// The OCID of the RPC you want to peer with.
	PeerId *string `pulumi:"peerId"`
	// The name of the region that contains the RPC you want to peer with.  Example: `us-ashburn-1`
	PeerRegionName *string `pulumi:"peerRegionName"`
}

// The set of arguments for constructing a CoreRemotePeeringConnection resource.
type CoreRemotePeeringConnectionArgs struct {
	// (Updatable) The OCID of the compartment to contain the RPC.
	CompartmentId pulumi.StringInput
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Operations.CostCenter": "42"}`
	DefinedTags pulumi.MapInput
	// (Updatable) A user-friendly name. Does not have to be unique, and it's changeable. Avoid entering confidential information.
	DisplayName pulumi.StringPtrInput
	// The OCID of the DRG the RPC belongs to.
	DrgId pulumi.StringInput
	// (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Department": "Finance"}`
	FreeformTags pulumi.MapInput
	// The OCID of the RPC you want to peer with.
	PeerId pulumi.StringPtrInput
	// The name of the region that contains the RPC you want to peer with.  Example: `us-ashburn-1`
	PeerRegionName pulumi.StringPtrInput
}

func (CoreRemotePeeringConnectionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*coreRemotePeeringConnectionArgs)(nil)).Elem()
}

type CoreRemotePeeringConnectionInput interface {
	pulumi.Input

	ToCoreRemotePeeringConnectionOutput() CoreRemotePeeringConnectionOutput
	ToCoreRemotePeeringConnectionOutputWithContext(ctx context.Context) CoreRemotePeeringConnectionOutput
}

func (*CoreRemotePeeringConnection) ElementType() reflect.Type {
	return reflect.TypeOf((*CoreRemotePeeringConnection)(nil))
}

func (i *CoreRemotePeeringConnection) ToCoreRemotePeeringConnectionOutput() CoreRemotePeeringConnectionOutput {
	return i.ToCoreRemotePeeringConnectionOutputWithContext(context.Background())
}

func (i *CoreRemotePeeringConnection) ToCoreRemotePeeringConnectionOutputWithContext(ctx context.Context) CoreRemotePeeringConnectionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CoreRemotePeeringConnectionOutput)
}

func (i *CoreRemotePeeringConnection) ToCoreRemotePeeringConnectionPtrOutput() CoreRemotePeeringConnectionPtrOutput {
	return i.ToCoreRemotePeeringConnectionPtrOutputWithContext(context.Background())
}

func (i *CoreRemotePeeringConnection) ToCoreRemotePeeringConnectionPtrOutputWithContext(ctx context.Context) CoreRemotePeeringConnectionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CoreRemotePeeringConnectionPtrOutput)
}

type CoreRemotePeeringConnectionPtrInput interface {
	pulumi.Input

	ToCoreRemotePeeringConnectionPtrOutput() CoreRemotePeeringConnectionPtrOutput
	ToCoreRemotePeeringConnectionPtrOutputWithContext(ctx context.Context) CoreRemotePeeringConnectionPtrOutput
}

type coreRemotePeeringConnectionPtrType CoreRemotePeeringConnectionArgs

func (*coreRemotePeeringConnectionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CoreRemotePeeringConnection)(nil))
}

func (i *coreRemotePeeringConnectionPtrType) ToCoreRemotePeeringConnectionPtrOutput() CoreRemotePeeringConnectionPtrOutput {
	return i.ToCoreRemotePeeringConnectionPtrOutputWithContext(context.Background())
}

func (i *coreRemotePeeringConnectionPtrType) ToCoreRemotePeeringConnectionPtrOutputWithContext(ctx context.Context) CoreRemotePeeringConnectionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CoreRemotePeeringConnectionPtrOutput)
}

// CoreRemotePeeringConnectionArrayInput is an input type that accepts CoreRemotePeeringConnectionArray and CoreRemotePeeringConnectionArrayOutput values.
// You can construct a concrete instance of `CoreRemotePeeringConnectionArrayInput` via:
//
//          CoreRemotePeeringConnectionArray{ CoreRemotePeeringConnectionArgs{...} }
type CoreRemotePeeringConnectionArrayInput interface {
	pulumi.Input

	ToCoreRemotePeeringConnectionArrayOutput() CoreRemotePeeringConnectionArrayOutput
	ToCoreRemotePeeringConnectionArrayOutputWithContext(context.Context) CoreRemotePeeringConnectionArrayOutput
}

type CoreRemotePeeringConnectionArray []CoreRemotePeeringConnectionInput

func (CoreRemotePeeringConnectionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CoreRemotePeeringConnection)(nil)).Elem()
}

func (i CoreRemotePeeringConnectionArray) ToCoreRemotePeeringConnectionArrayOutput() CoreRemotePeeringConnectionArrayOutput {
	return i.ToCoreRemotePeeringConnectionArrayOutputWithContext(context.Background())
}

func (i CoreRemotePeeringConnectionArray) ToCoreRemotePeeringConnectionArrayOutputWithContext(ctx context.Context) CoreRemotePeeringConnectionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CoreRemotePeeringConnectionArrayOutput)
}

// CoreRemotePeeringConnectionMapInput is an input type that accepts CoreRemotePeeringConnectionMap and CoreRemotePeeringConnectionMapOutput values.
// You can construct a concrete instance of `CoreRemotePeeringConnectionMapInput` via:
//
//          CoreRemotePeeringConnectionMap{ "key": CoreRemotePeeringConnectionArgs{...} }
type CoreRemotePeeringConnectionMapInput interface {
	pulumi.Input

	ToCoreRemotePeeringConnectionMapOutput() CoreRemotePeeringConnectionMapOutput
	ToCoreRemotePeeringConnectionMapOutputWithContext(context.Context) CoreRemotePeeringConnectionMapOutput
}

type CoreRemotePeeringConnectionMap map[string]CoreRemotePeeringConnectionInput

func (CoreRemotePeeringConnectionMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CoreRemotePeeringConnection)(nil)).Elem()
}

func (i CoreRemotePeeringConnectionMap) ToCoreRemotePeeringConnectionMapOutput() CoreRemotePeeringConnectionMapOutput {
	return i.ToCoreRemotePeeringConnectionMapOutputWithContext(context.Background())
}

func (i CoreRemotePeeringConnectionMap) ToCoreRemotePeeringConnectionMapOutputWithContext(ctx context.Context) CoreRemotePeeringConnectionMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CoreRemotePeeringConnectionMapOutput)
}

type CoreRemotePeeringConnectionOutput struct {
	*pulumi.OutputState
}

func (CoreRemotePeeringConnectionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CoreRemotePeeringConnection)(nil))
}

func (o CoreRemotePeeringConnectionOutput) ToCoreRemotePeeringConnectionOutput() CoreRemotePeeringConnectionOutput {
	return o
}

func (o CoreRemotePeeringConnectionOutput) ToCoreRemotePeeringConnectionOutputWithContext(ctx context.Context) CoreRemotePeeringConnectionOutput {
	return o
}

func (o CoreRemotePeeringConnectionOutput) ToCoreRemotePeeringConnectionPtrOutput() CoreRemotePeeringConnectionPtrOutput {
	return o.ToCoreRemotePeeringConnectionPtrOutputWithContext(context.Background())
}

func (o CoreRemotePeeringConnectionOutput) ToCoreRemotePeeringConnectionPtrOutputWithContext(ctx context.Context) CoreRemotePeeringConnectionPtrOutput {
	return o.ApplyT(func(v CoreRemotePeeringConnection) *CoreRemotePeeringConnection {
		return &v
	}).(CoreRemotePeeringConnectionPtrOutput)
}

type CoreRemotePeeringConnectionPtrOutput struct {
	*pulumi.OutputState
}

func (CoreRemotePeeringConnectionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CoreRemotePeeringConnection)(nil))
}

func (o CoreRemotePeeringConnectionPtrOutput) ToCoreRemotePeeringConnectionPtrOutput() CoreRemotePeeringConnectionPtrOutput {
	return o
}

func (o CoreRemotePeeringConnectionPtrOutput) ToCoreRemotePeeringConnectionPtrOutputWithContext(ctx context.Context) CoreRemotePeeringConnectionPtrOutput {
	return o
}

type CoreRemotePeeringConnectionArrayOutput struct{ *pulumi.OutputState }

func (CoreRemotePeeringConnectionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CoreRemotePeeringConnection)(nil))
}

func (o CoreRemotePeeringConnectionArrayOutput) ToCoreRemotePeeringConnectionArrayOutput() CoreRemotePeeringConnectionArrayOutput {
	return o
}

func (o CoreRemotePeeringConnectionArrayOutput) ToCoreRemotePeeringConnectionArrayOutputWithContext(ctx context.Context) CoreRemotePeeringConnectionArrayOutput {
	return o
}

func (o CoreRemotePeeringConnectionArrayOutput) Index(i pulumi.IntInput) CoreRemotePeeringConnectionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CoreRemotePeeringConnection {
		return vs[0].([]CoreRemotePeeringConnection)[vs[1].(int)]
	}).(CoreRemotePeeringConnectionOutput)
}

type CoreRemotePeeringConnectionMapOutput struct{ *pulumi.OutputState }

func (CoreRemotePeeringConnectionMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]CoreRemotePeeringConnection)(nil))
}

func (o CoreRemotePeeringConnectionMapOutput) ToCoreRemotePeeringConnectionMapOutput() CoreRemotePeeringConnectionMapOutput {
	return o
}

func (o CoreRemotePeeringConnectionMapOutput) ToCoreRemotePeeringConnectionMapOutputWithContext(ctx context.Context) CoreRemotePeeringConnectionMapOutput {
	return o
}

func (o CoreRemotePeeringConnectionMapOutput) MapIndex(k pulumi.StringInput) CoreRemotePeeringConnectionOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) CoreRemotePeeringConnection {
		return vs[0].(map[string]CoreRemotePeeringConnection)[vs[1].(string)]
	}).(CoreRemotePeeringConnectionOutput)
}

func init() {
	pulumi.RegisterOutputType(CoreRemotePeeringConnectionOutput{})
	pulumi.RegisterOutputType(CoreRemotePeeringConnectionPtrOutput{})
	pulumi.RegisterOutputType(CoreRemotePeeringConnectionArrayOutput{})
	pulumi.RegisterOutputType(CoreRemotePeeringConnectionMapOutput{})
}
