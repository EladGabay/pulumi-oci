// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package oci

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource provides the Vlan resource in Oracle Cloud Infrastructure Core service.
//
// Creates a VLAN in the specified VCN and the specified compartment.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-oci/sdk/go/oci"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := oci.NewCoreVlan(ctx, "testVlan", &oci.CoreVlanArgs{
// 			CidrBlock:          pulumi.Any(_var.Vlan_cidr_block),
// 			CompartmentId:      pulumi.Any(_var.Compartment_id),
// 			VcnId:              pulumi.Any(oci_core_vcn.Test_vcn.Id),
// 			AvailabilityDomain: pulumi.Any(_var.Vlan_availability_domain),
// 			DefinedTags: pulumi.AnyMap{
// 				"Operations.CostCenter": pulumi.Any("42"),
// 			},
// 			DisplayName: pulumi.Any(_var.Vlan_display_name),
// 			FreeformTags: pulumi.AnyMap{
// 				"Department": pulumi.Any("Finance"),
// 			},
// 			NsgIds:       pulumi.Any(_var.Vlan_nsg_ids),
// 			RouteTableId: pulumi.Any(oci_core_route_table.Test_route_table.Id),
// 			VlanTag:      pulumi.Any(_var.Vlan_vlan_tag),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// Vlans can be imported using the `id`, e.g.
//
// ```sh
//  $ pulumi import oci:index/coreVlan:CoreVlan test_vlan "id"
// ```
type CoreVlan struct {
	pulumi.CustomResourceState

	// Controls whether the VLAN is regional or specific to an availability domain. A regional VLAN has the flexibility to implement failover across availability domains. Previously, all VLANs were AD-specific.
	AvailabilityDomain pulumi.StringOutput `pulumi:"availabilityDomain"`
	// (Updatable) The range of IPv4 addresses that will be used for layer 3 communication with hosts outside the VLAN. The CIDR must maintain the following rules -
	CidrBlock pulumi.StringOutput `pulumi:"cidrBlock"`
	// (Updatable) The OCID of the compartment to contain the VLAN.
	CompartmentId pulumi.StringOutput `pulumi:"compartmentId"`
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Operations.CostCenter": "42"}`
	DefinedTags pulumi.MapOutput `pulumi:"definedTags"`
	// (Updatable) A descriptive name. Does not have to be unique, and it's changeable. Avoid entering confidential information.
	DisplayName pulumi.StringOutput `pulumi:"displayName"`
	// (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Department": "Finance"}`
	FreeformTags pulumi.MapOutput `pulumi:"freeformTags"`
	// (Updatable) A list of the OCIDs of the network security groups (NSGs) to add all VNICs in the VLAN to. For more information about NSGs, see [NetworkSecurityGroup](https://docs.cloud.oracle.com/iaas/api/#/en/iaas/latest/NetworkSecurityGroup/).
	NsgIds pulumi.StringArrayOutput `pulumi:"nsgIds"`
	// (Updatable) The OCID of the route table the VLAN will use. If you don't provide a value, the VLAN uses the VCN's default route table.
	RouteTableId pulumi.StringOutput `pulumi:"routeTableId"`
	// The VLAN's current state.
	State pulumi.StringOutput `pulumi:"state"`
	// The date and time the VLAN was created, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).  Example: `2016-08-25T21:10:29.600Z`
	TimeCreated pulumi.StringOutput `pulumi:"timeCreated"`
	// The OCID of the VCN to contain the VLAN.
	VcnId pulumi.StringOutput `pulumi:"vcnId"`
	// The IEEE 802.1Q VLAN tag for this VLAN. The value must be unique across all VLANs in the VCN. If you don't provide a value, Oracle assigns one. You cannot change the value later. VLAN tag 0 is reserved for use by Oracle.
	VlanTag pulumi.IntOutput `pulumi:"vlanTag"`
}

// NewCoreVlan registers a new resource with the given unique name, arguments, and options.
func NewCoreVlan(ctx *pulumi.Context,
	name string, args *CoreVlanArgs, opts ...pulumi.ResourceOption) (*CoreVlan, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CidrBlock == nil {
		return nil, errors.New("invalid value for required argument 'CidrBlock'")
	}
	if args.CompartmentId == nil {
		return nil, errors.New("invalid value for required argument 'CompartmentId'")
	}
	if args.VcnId == nil {
		return nil, errors.New("invalid value for required argument 'VcnId'")
	}
	var resource CoreVlan
	err := ctx.RegisterResource("oci:index/coreVlan:CoreVlan", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCoreVlan gets an existing CoreVlan resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCoreVlan(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CoreVlanState, opts ...pulumi.ResourceOption) (*CoreVlan, error) {
	var resource CoreVlan
	err := ctx.ReadResource("oci:index/coreVlan:CoreVlan", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CoreVlan resources.
type coreVlanState struct {
	// Controls whether the VLAN is regional or specific to an availability domain. A regional VLAN has the flexibility to implement failover across availability domains. Previously, all VLANs were AD-specific.
	AvailabilityDomain *string `pulumi:"availabilityDomain"`
	// (Updatable) The range of IPv4 addresses that will be used for layer 3 communication with hosts outside the VLAN. The CIDR must maintain the following rules -
	CidrBlock *string `pulumi:"cidrBlock"`
	// (Updatable) The OCID of the compartment to contain the VLAN.
	CompartmentId *string `pulumi:"compartmentId"`
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Operations.CostCenter": "42"}`
	DefinedTags map[string]interface{} `pulumi:"definedTags"`
	// (Updatable) A descriptive name. Does not have to be unique, and it's changeable. Avoid entering confidential information.
	DisplayName *string `pulumi:"displayName"`
	// (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Department": "Finance"}`
	FreeformTags map[string]interface{} `pulumi:"freeformTags"`
	// (Updatable) A list of the OCIDs of the network security groups (NSGs) to add all VNICs in the VLAN to. For more information about NSGs, see [NetworkSecurityGroup](https://docs.cloud.oracle.com/iaas/api/#/en/iaas/latest/NetworkSecurityGroup/).
	NsgIds []string `pulumi:"nsgIds"`
	// (Updatable) The OCID of the route table the VLAN will use. If you don't provide a value, the VLAN uses the VCN's default route table.
	RouteTableId *string `pulumi:"routeTableId"`
	// The VLAN's current state.
	State *string `pulumi:"state"`
	// The date and time the VLAN was created, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).  Example: `2016-08-25T21:10:29.600Z`
	TimeCreated *string `pulumi:"timeCreated"`
	// The OCID of the VCN to contain the VLAN.
	VcnId *string `pulumi:"vcnId"`
	// The IEEE 802.1Q VLAN tag for this VLAN. The value must be unique across all VLANs in the VCN. If you don't provide a value, Oracle assigns one. You cannot change the value later. VLAN tag 0 is reserved for use by Oracle.
	VlanTag *int `pulumi:"vlanTag"`
}

type CoreVlanState struct {
	// Controls whether the VLAN is regional or specific to an availability domain. A regional VLAN has the flexibility to implement failover across availability domains. Previously, all VLANs were AD-specific.
	AvailabilityDomain pulumi.StringPtrInput
	// (Updatable) The range of IPv4 addresses that will be used for layer 3 communication with hosts outside the VLAN. The CIDR must maintain the following rules -
	CidrBlock pulumi.StringPtrInput
	// (Updatable) The OCID of the compartment to contain the VLAN.
	CompartmentId pulumi.StringPtrInput
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Operations.CostCenter": "42"}`
	DefinedTags pulumi.MapInput
	// (Updatable) A descriptive name. Does not have to be unique, and it's changeable. Avoid entering confidential information.
	DisplayName pulumi.StringPtrInput
	// (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Department": "Finance"}`
	FreeformTags pulumi.MapInput
	// (Updatable) A list of the OCIDs of the network security groups (NSGs) to add all VNICs in the VLAN to. For more information about NSGs, see [NetworkSecurityGroup](https://docs.cloud.oracle.com/iaas/api/#/en/iaas/latest/NetworkSecurityGroup/).
	NsgIds pulumi.StringArrayInput
	// (Updatable) The OCID of the route table the VLAN will use. If you don't provide a value, the VLAN uses the VCN's default route table.
	RouteTableId pulumi.StringPtrInput
	// The VLAN's current state.
	State pulumi.StringPtrInput
	// The date and time the VLAN was created, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).  Example: `2016-08-25T21:10:29.600Z`
	TimeCreated pulumi.StringPtrInput
	// The OCID of the VCN to contain the VLAN.
	VcnId pulumi.StringPtrInput
	// The IEEE 802.1Q VLAN tag for this VLAN. The value must be unique across all VLANs in the VCN. If you don't provide a value, Oracle assigns one. You cannot change the value later. VLAN tag 0 is reserved for use by Oracle.
	VlanTag pulumi.IntPtrInput
}

func (CoreVlanState) ElementType() reflect.Type {
	return reflect.TypeOf((*coreVlanState)(nil)).Elem()
}

type coreVlanArgs struct {
	// Controls whether the VLAN is regional or specific to an availability domain. A regional VLAN has the flexibility to implement failover across availability domains. Previously, all VLANs were AD-specific.
	AvailabilityDomain *string `pulumi:"availabilityDomain"`
	// (Updatable) The range of IPv4 addresses that will be used for layer 3 communication with hosts outside the VLAN. The CIDR must maintain the following rules -
	CidrBlock string `pulumi:"cidrBlock"`
	// (Updatable) The OCID of the compartment to contain the VLAN.
	CompartmentId string `pulumi:"compartmentId"`
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Operations.CostCenter": "42"}`
	DefinedTags map[string]interface{} `pulumi:"definedTags"`
	// (Updatable) A descriptive name. Does not have to be unique, and it's changeable. Avoid entering confidential information.
	DisplayName *string `pulumi:"displayName"`
	// (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Department": "Finance"}`
	FreeformTags map[string]interface{} `pulumi:"freeformTags"`
	// (Updatable) A list of the OCIDs of the network security groups (NSGs) to add all VNICs in the VLAN to. For more information about NSGs, see [NetworkSecurityGroup](https://docs.cloud.oracle.com/iaas/api/#/en/iaas/latest/NetworkSecurityGroup/).
	NsgIds []string `pulumi:"nsgIds"`
	// (Updatable) The OCID of the route table the VLAN will use. If you don't provide a value, the VLAN uses the VCN's default route table.
	RouteTableId *string `pulumi:"routeTableId"`
	// The OCID of the VCN to contain the VLAN.
	VcnId string `pulumi:"vcnId"`
	// The IEEE 802.1Q VLAN tag for this VLAN. The value must be unique across all VLANs in the VCN. If you don't provide a value, Oracle assigns one. You cannot change the value later. VLAN tag 0 is reserved for use by Oracle.
	VlanTag *int `pulumi:"vlanTag"`
}

// The set of arguments for constructing a CoreVlan resource.
type CoreVlanArgs struct {
	// Controls whether the VLAN is regional or specific to an availability domain. A regional VLAN has the flexibility to implement failover across availability domains. Previously, all VLANs were AD-specific.
	AvailabilityDomain pulumi.StringPtrInput
	// (Updatable) The range of IPv4 addresses that will be used for layer 3 communication with hosts outside the VLAN. The CIDR must maintain the following rules -
	CidrBlock pulumi.StringInput
	// (Updatable) The OCID of the compartment to contain the VLAN.
	CompartmentId pulumi.StringInput
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Operations.CostCenter": "42"}`
	DefinedTags pulumi.MapInput
	// (Updatable) A descriptive name. Does not have to be unique, and it's changeable. Avoid entering confidential information.
	DisplayName pulumi.StringPtrInput
	// (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Department": "Finance"}`
	FreeformTags pulumi.MapInput
	// (Updatable) A list of the OCIDs of the network security groups (NSGs) to add all VNICs in the VLAN to. For more information about NSGs, see [NetworkSecurityGroup](https://docs.cloud.oracle.com/iaas/api/#/en/iaas/latest/NetworkSecurityGroup/).
	NsgIds pulumi.StringArrayInput
	// (Updatable) The OCID of the route table the VLAN will use. If you don't provide a value, the VLAN uses the VCN's default route table.
	RouteTableId pulumi.StringPtrInput
	// The OCID of the VCN to contain the VLAN.
	VcnId pulumi.StringInput
	// The IEEE 802.1Q VLAN tag for this VLAN. The value must be unique across all VLANs in the VCN. If you don't provide a value, Oracle assigns one. You cannot change the value later. VLAN tag 0 is reserved for use by Oracle.
	VlanTag pulumi.IntPtrInput
}

func (CoreVlanArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*coreVlanArgs)(nil)).Elem()
}

type CoreVlanInput interface {
	pulumi.Input

	ToCoreVlanOutput() CoreVlanOutput
	ToCoreVlanOutputWithContext(ctx context.Context) CoreVlanOutput
}

func (*CoreVlan) ElementType() reflect.Type {
	return reflect.TypeOf((*CoreVlan)(nil))
}

func (i *CoreVlan) ToCoreVlanOutput() CoreVlanOutput {
	return i.ToCoreVlanOutputWithContext(context.Background())
}

func (i *CoreVlan) ToCoreVlanOutputWithContext(ctx context.Context) CoreVlanOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CoreVlanOutput)
}

func (i *CoreVlan) ToCoreVlanPtrOutput() CoreVlanPtrOutput {
	return i.ToCoreVlanPtrOutputWithContext(context.Background())
}

func (i *CoreVlan) ToCoreVlanPtrOutputWithContext(ctx context.Context) CoreVlanPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CoreVlanPtrOutput)
}

type CoreVlanPtrInput interface {
	pulumi.Input

	ToCoreVlanPtrOutput() CoreVlanPtrOutput
	ToCoreVlanPtrOutputWithContext(ctx context.Context) CoreVlanPtrOutput
}

type coreVlanPtrType CoreVlanArgs

func (*coreVlanPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CoreVlan)(nil))
}

func (i *coreVlanPtrType) ToCoreVlanPtrOutput() CoreVlanPtrOutput {
	return i.ToCoreVlanPtrOutputWithContext(context.Background())
}

func (i *coreVlanPtrType) ToCoreVlanPtrOutputWithContext(ctx context.Context) CoreVlanPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CoreVlanPtrOutput)
}

// CoreVlanArrayInput is an input type that accepts CoreVlanArray and CoreVlanArrayOutput values.
// You can construct a concrete instance of `CoreVlanArrayInput` via:
//
//          CoreVlanArray{ CoreVlanArgs{...} }
type CoreVlanArrayInput interface {
	pulumi.Input

	ToCoreVlanArrayOutput() CoreVlanArrayOutput
	ToCoreVlanArrayOutputWithContext(context.Context) CoreVlanArrayOutput
}

type CoreVlanArray []CoreVlanInput

func (CoreVlanArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CoreVlan)(nil)).Elem()
}

func (i CoreVlanArray) ToCoreVlanArrayOutput() CoreVlanArrayOutput {
	return i.ToCoreVlanArrayOutputWithContext(context.Background())
}

func (i CoreVlanArray) ToCoreVlanArrayOutputWithContext(ctx context.Context) CoreVlanArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CoreVlanArrayOutput)
}

// CoreVlanMapInput is an input type that accepts CoreVlanMap and CoreVlanMapOutput values.
// You can construct a concrete instance of `CoreVlanMapInput` via:
//
//          CoreVlanMap{ "key": CoreVlanArgs{...} }
type CoreVlanMapInput interface {
	pulumi.Input

	ToCoreVlanMapOutput() CoreVlanMapOutput
	ToCoreVlanMapOutputWithContext(context.Context) CoreVlanMapOutput
}

type CoreVlanMap map[string]CoreVlanInput

func (CoreVlanMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CoreVlan)(nil)).Elem()
}

func (i CoreVlanMap) ToCoreVlanMapOutput() CoreVlanMapOutput {
	return i.ToCoreVlanMapOutputWithContext(context.Background())
}

func (i CoreVlanMap) ToCoreVlanMapOutputWithContext(ctx context.Context) CoreVlanMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CoreVlanMapOutput)
}

type CoreVlanOutput struct {
	*pulumi.OutputState
}

func (CoreVlanOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CoreVlan)(nil))
}

func (o CoreVlanOutput) ToCoreVlanOutput() CoreVlanOutput {
	return o
}

func (o CoreVlanOutput) ToCoreVlanOutputWithContext(ctx context.Context) CoreVlanOutput {
	return o
}

func (o CoreVlanOutput) ToCoreVlanPtrOutput() CoreVlanPtrOutput {
	return o.ToCoreVlanPtrOutputWithContext(context.Background())
}

func (o CoreVlanOutput) ToCoreVlanPtrOutputWithContext(ctx context.Context) CoreVlanPtrOutput {
	return o.ApplyT(func(v CoreVlan) *CoreVlan {
		return &v
	}).(CoreVlanPtrOutput)
}

type CoreVlanPtrOutput struct {
	*pulumi.OutputState
}

func (CoreVlanPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CoreVlan)(nil))
}

func (o CoreVlanPtrOutput) ToCoreVlanPtrOutput() CoreVlanPtrOutput {
	return o
}

func (o CoreVlanPtrOutput) ToCoreVlanPtrOutputWithContext(ctx context.Context) CoreVlanPtrOutput {
	return o
}

type CoreVlanArrayOutput struct{ *pulumi.OutputState }

func (CoreVlanArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CoreVlan)(nil))
}

func (o CoreVlanArrayOutput) ToCoreVlanArrayOutput() CoreVlanArrayOutput {
	return o
}

func (o CoreVlanArrayOutput) ToCoreVlanArrayOutputWithContext(ctx context.Context) CoreVlanArrayOutput {
	return o
}

func (o CoreVlanArrayOutput) Index(i pulumi.IntInput) CoreVlanOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CoreVlan {
		return vs[0].([]CoreVlan)[vs[1].(int)]
	}).(CoreVlanOutput)
}

type CoreVlanMapOutput struct{ *pulumi.OutputState }

func (CoreVlanMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]CoreVlan)(nil))
}

func (o CoreVlanMapOutput) ToCoreVlanMapOutput() CoreVlanMapOutput {
	return o
}

func (o CoreVlanMapOutput) ToCoreVlanMapOutputWithContext(ctx context.Context) CoreVlanMapOutput {
	return o
}

func (o CoreVlanMapOutput) MapIndex(k pulumi.StringInput) CoreVlanOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) CoreVlan {
		return vs[0].(map[string]CoreVlan)[vs[1].(string)]
	}).(CoreVlanOutput)
}

func init() {
	pulumi.RegisterOutputType(CoreVlanOutput{})
	pulumi.RegisterOutputType(CoreVlanPtrOutput{})
	pulumi.RegisterOutputType(CoreVlanArrayOutput{})
	pulumi.RegisterOutputType(CoreVlanMapOutput{})
}
