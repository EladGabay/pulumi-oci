// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package oci

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource provides the Catalog resource in Oracle Cloud Infrastructure Data Catalog service.
//
// Creates a new data catalog instance that includes a console and an API URL for managing metadata operations.
// For more information, please see the documentation.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-oci/sdk/go/oci"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := oci.NewDatacatalogCatalog(ctx, "testCatalog", &oci.DatacatalogCatalogArgs{
// 			CompartmentId: pulumi.Any(_var.Compartment_id),
// 			DefinedTags: pulumi.AnyMap{
// 				"foo-namespace.bar-key": pulumi.Any("value"),
// 			},
// 			DisplayName: pulumi.Any(_var.Catalog_display_name),
// 			FreeformTags: pulumi.AnyMap{
// 				"bar-key": pulumi.Any("value"),
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// Catalogs can be imported using the `id`, e.g.
//
// ```sh
//  $ pulumi import oci:index/datacatalogCatalog:DatacatalogCatalog test_catalog "id"
// ```
type DatacatalogCatalog struct {
	pulumi.CustomResourceState

	// (Updatable) The list of private reverse connection endpoints attached to the catalog
	AttachedCatalogPrivateEndpoints pulumi.StringArrayOutput `pulumi:"attachedCatalogPrivateEndpoints"`
	// (Updatable) Compartment identifier.
	CompartmentId pulumi.StringOutput `pulumi:"compartmentId"`
	// (Updatable) Usage of predefined tag keys. These predefined keys are scoped to namespaces. Example: `{"foo-namespace.bar-key": "value"}`
	DefinedTags pulumi.MapOutput `pulumi:"definedTags"`
	// (Updatable) Data catalog identifier.
	DisplayName pulumi.StringOutput `pulumi:"displayName"`
	// (Updatable) Simple key-value pair that is applied without any predefined name, type, or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
	FreeformTags pulumi.MapOutput `pulumi:"freeformTags"`
	// An message describing the current state in more detail.  For example, it can be used to provide actionable information for a resource in 'Failed' state.
	LifecycleDetails pulumi.StringOutput `pulumi:"lifecycleDetails"`
	// The number of data objects added to the data catalog. Please see the data catalog documentation for further information on how this is calculated.
	NumberOfObjects pulumi.IntOutput `pulumi:"numberOfObjects"`
	// The REST front endpoint URL to the data catalog instance.
	ServiceApiUrl pulumi.StringOutput `pulumi:"serviceApiUrl"`
	// The console front endpoint URL to the data catalog instance.
	ServiceConsoleUrl pulumi.StringOutput `pulumi:"serviceConsoleUrl"`
	// The current state of the data catalog resource.
	State pulumi.StringOutput `pulumi:"state"`
	// The time the data catalog was created. An [RFC3339](https://tools.ietf.org/html/rfc3339) formatted datetime string.
	TimeCreated pulumi.StringOutput `pulumi:"timeCreated"`
	// The time the data catalog was updated. An [RFC3339](https://tools.ietf.org/html/rfc3339) formatted datetime string.
	TimeUpdated pulumi.StringOutput `pulumi:"timeUpdated"`
}

// NewDatacatalogCatalog registers a new resource with the given unique name, arguments, and options.
func NewDatacatalogCatalog(ctx *pulumi.Context,
	name string, args *DatacatalogCatalogArgs, opts ...pulumi.ResourceOption) (*DatacatalogCatalog, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CompartmentId == nil {
		return nil, errors.New("invalid value for required argument 'CompartmentId'")
	}
	var resource DatacatalogCatalog
	err := ctx.RegisterResource("oci:index/datacatalogCatalog:DatacatalogCatalog", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDatacatalogCatalog gets an existing DatacatalogCatalog resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDatacatalogCatalog(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DatacatalogCatalogState, opts ...pulumi.ResourceOption) (*DatacatalogCatalog, error) {
	var resource DatacatalogCatalog
	err := ctx.ReadResource("oci:index/datacatalogCatalog:DatacatalogCatalog", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DatacatalogCatalog resources.
type datacatalogCatalogState struct {
	// (Updatable) The list of private reverse connection endpoints attached to the catalog
	AttachedCatalogPrivateEndpoints []string `pulumi:"attachedCatalogPrivateEndpoints"`
	// (Updatable) Compartment identifier.
	CompartmentId *string `pulumi:"compartmentId"`
	// (Updatable) Usage of predefined tag keys. These predefined keys are scoped to namespaces. Example: `{"foo-namespace.bar-key": "value"}`
	DefinedTags map[string]interface{} `pulumi:"definedTags"`
	// (Updatable) Data catalog identifier.
	DisplayName *string `pulumi:"displayName"`
	// (Updatable) Simple key-value pair that is applied without any predefined name, type, or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
	FreeformTags map[string]interface{} `pulumi:"freeformTags"`
	// An message describing the current state in more detail.  For example, it can be used to provide actionable information for a resource in 'Failed' state.
	LifecycleDetails *string `pulumi:"lifecycleDetails"`
	// The number of data objects added to the data catalog. Please see the data catalog documentation for further information on how this is calculated.
	NumberOfObjects *int `pulumi:"numberOfObjects"`
	// The REST front endpoint URL to the data catalog instance.
	ServiceApiUrl *string `pulumi:"serviceApiUrl"`
	// The console front endpoint URL to the data catalog instance.
	ServiceConsoleUrl *string `pulumi:"serviceConsoleUrl"`
	// The current state of the data catalog resource.
	State *string `pulumi:"state"`
	// The time the data catalog was created. An [RFC3339](https://tools.ietf.org/html/rfc3339) formatted datetime string.
	TimeCreated *string `pulumi:"timeCreated"`
	// The time the data catalog was updated. An [RFC3339](https://tools.ietf.org/html/rfc3339) formatted datetime string.
	TimeUpdated *string `pulumi:"timeUpdated"`
}

type DatacatalogCatalogState struct {
	// (Updatable) The list of private reverse connection endpoints attached to the catalog
	AttachedCatalogPrivateEndpoints pulumi.StringArrayInput
	// (Updatable) Compartment identifier.
	CompartmentId pulumi.StringPtrInput
	// (Updatable) Usage of predefined tag keys. These predefined keys are scoped to namespaces. Example: `{"foo-namespace.bar-key": "value"}`
	DefinedTags pulumi.MapInput
	// (Updatable) Data catalog identifier.
	DisplayName pulumi.StringPtrInput
	// (Updatable) Simple key-value pair that is applied without any predefined name, type, or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
	FreeformTags pulumi.MapInput
	// An message describing the current state in more detail.  For example, it can be used to provide actionable information for a resource in 'Failed' state.
	LifecycleDetails pulumi.StringPtrInput
	// The number of data objects added to the data catalog. Please see the data catalog documentation for further information on how this is calculated.
	NumberOfObjects pulumi.IntPtrInput
	// The REST front endpoint URL to the data catalog instance.
	ServiceApiUrl pulumi.StringPtrInput
	// The console front endpoint URL to the data catalog instance.
	ServiceConsoleUrl pulumi.StringPtrInput
	// The current state of the data catalog resource.
	State pulumi.StringPtrInput
	// The time the data catalog was created. An [RFC3339](https://tools.ietf.org/html/rfc3339) formatted datetime string.
	TimeCreated pulumi.StringPtrInput
	// The time the data catalog was updated. An [RFC3339](https://tools.ietf.org/html/rfc3339) formatted datetime string.
	TimeUpdated pulumi.StringPtrInput
}

func (DatacatalogCatalogState) ElementType() reflect.Type {
	return reflect.TypeOf((*datacatalogCatalogState)(nil)).Elem()
}

type datacatalogCatalogArgs struct {
	// (Updatable) The list of private reverse connection endpoints attached to the catalog
	AttachedCatalogPrivateEndpoints []string `pulumi:"attachedCatalogPrivateEndpoints"`
	// (Updatable) Compartment identifier.
	CompartmentId string `pulumi:"compartmentId"`
	// (Updatable) Usage of predefined tag keys. These predefined keys are scoped to namespaces. Example: `{"foo-namespace.bar-key": "value"}`
	DefinedTags map[string]interface{} `pulumi:"definedTags"`
	// (Updatable) Data catalog identifier.
	DisplayName *string `pulumi:"displayName"`
	// (Updatable) Simple key-value pair that is applied without any predefined name, type, or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
	FreeformTags map[string]interface{} `pulumi:"freeformTags"`
}

// The set of arguments for constructing a DatacatalogCatalog resource.
type DatacatalogCatalogArgs struct {
	// (Updatable) The list of private reverse connection endpoints attached to the catalog
	AttachedCatalogPrivateEndpoints pulumi.StringArrayInput
	// (Updatable) Compartment identifier.
	CompartmentId pulumi.StringInput
	// (Updatable) Usage of predefined tag keys. These predefined keys are scoped to namespaces. Example: `{"foo-namespace.bar-key": "value"}`
	DefinedTags pulumi.MapInput
	// (Updatable) Data catalog identifier.
	DisplayName pulumi.StringPtrInput
	// (Updatable) Simple key-value pair that is applied without any predefined name, type, or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
	FreeformTags pulumi.MapInput
}

func (DatacatalogCatalogArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*datacatalogCatalogArgs)(nil)).Elem()
}

type DatacatalogCatalogInput interface {
	pulumi.Input

	ToDatacatalogCatalogOutput() DatacatalogCatalogOutput
	ToDatacatalogCatalogOutputWithContext(ctx context.Context) DatacatalogCatalogOutput
}

func (*DatacatalogCatalog) ElementType() reflect.Type {
	return reflect.TypeOf((*DatacatalogCatalog)(nil))
}

func (i *DatacatalogCatalog) ToDatacatalogCatalogOutput() DatacatalogCatalogOutput {
	return i.ToDatacatalogCatalogOutputWithContext(context.Background())
}

func (i *DatacatalogCatalog) ToDatacatalogCatalogOutputWithContext(ctx context.Context) DatacatalogCatalogOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatacatalogCatalogOutput)
}

func (i *DatacatalogCatalog) ToDatacatalogCatalogPtrOutput() DatacatalogCatalogPtrOutput {
	return i.ToDatacatalogCatalogPtrOutputWithContext(context.Background())
}

func (i *DatacatalogCatalog) ToDatacatalogCatalogPtrOutputWithContext(ctx context.Context) DatacatalogCatalogPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatacatalogCatalogPtrOutput)
}

type DatacatalogCatalogPtrInput interface {
	pulumi.Input

	ToDatacatalogCatalogPtrOutput() DatacatalogCatalogPtrOutput
	ToDatacatalogCatalogPtrOutputWithContext(ctx context.Context) DatacatalogCatalogPtrOutput
}

type datacatalogCatalogPtrType DatacatalogCatalogArgs

func (*datacatalogCatalogPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DatacatalogCatalog)(nil))
}

func (i *datacatalogCatalogPtrType) ToDatacatalogCatalogPtrOutput() DatacatalogCatalogPtrOutput {
	return i.ToDatacatalogCatalogPtrOutputWithContext(context.Background())
}

func (i *datacatalogCatalogPtrType) ToDatacatalogCatalogPtrOutputWithContext(ctx context.Context) DatacatalogCatalogPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatacatalogCatalogPtrOutput)
}

// DatacatalogCatalogArrayInput is an input type that accepts DatacatalogCatalogArray and DatacatalogCatalogArrayOutput values.
// You can construct a concrete instance of `DatacatalogCatalogArrayInput` via:
//
//          DatacatalogCatalogArray{ DatacatalogCatalogArgs{...} }
type DatacatalogCatalogArrayInput interface {
	pulumi.Input

	ToDatacatalogCatalogArrayOutput() DatacatalogCatalogArrayOutput
	ToDatacatalogCatalogArrayOutputWithContext(context.Context) DatacatalogCatalogArrayOutput
}

type DatacatalogCatalogArray []DatacatalogCatalogInput

func (DatacatalogCatalogArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DatacatalogCatalog)(nil)).Elem()
}

func (i DatacatalogCatalogArray) ToDatacatalogCatalogArrayOutput() DatacatalogCatalogArrayOutput {
	return i.ToDatacatalogCatalogArrayOutputWithContext(context.Background())
}

func (i DatacatalogCatalogArray) ToDatacatalogCatalogArrayOutputWithContext(ctx context.Context) DatacatalogCatalogArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatacatalogCatalogArrayOutput)
}

// DatacatalogCatalogMapInput is an input type that accepts DatacatalogCatalogMap and DatacatalogCatalogMapOutput values.
// You can construct a concrete instance of `DatacatalogCatalogMapInput` via:
//
//          DatacatalogCatalogMap{ "key": DatacatalogCatalogArgs{...} }
type DatacatalogCatalogMapInput interface {
	pulumi.Input

	ToDatacatalogCatalogMapOutput() DatacatalogCatalogMapOutput
	ToDatacatalogCatalogMapOutputWithContext(context.Context) DatacatalogCatalogMapOutput
}

type DatacatalogCatalogMap map[string]DatacatalogCatalogInput

func (DatacatalogCatalogMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DatacatalogCatalog)(nil)).Elem()
}

func (i DatacatalogCatalogMap) ToDatacatalogCatalogMapOutput() DatacatalogCatalogMapOutput {
	return i.ToDatacatalogCatalogMapOutputWithContext(context.Background())
}

func (i DatacatalogCatalogMap) ToDatacatalogCatalogMapOutputWithContext(ctx context.Context) DatacatalogCatalogMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatacatalogCatalogMapOutput)
}

type DatacatalogCatalogOutput struct {
	*pulumi.OutputState
}

func (DatacatalogCatalogOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatacatalogCatalog)(nil))
}

func (o DatacatalogCatalogOutput) ToDatacatalogCatalogOutput() DatacatalogCatalogOutput {
	return o
}

func (o DatacatalogCatalogOutput) ToDatacatalogCatalogOutputWithContext(ctx context.Context) DatacatalogCatalogOutput {
	return o
}

func (o DatacatalogCatalogOutput) ToDatacatalogCatalogPtrOutput() DatacatalogCatalogPtrOutput {
	return o.ToDatacatalogCatalogPtrOutputWithContext(context.Background())
}

func (o DatacatalogCatalogOutput) ToDatacatalogCatalogPtrOutputWithContext(ctx context.Context) DatacatalogCatalogPtrOutput {
	return o.ApplyT(func(v DatacatalogCatalog) *DatacatalogCatalog {
		return &v
	}).(DatacatalogCatalogPtrOutput)
}

type DatacatalogCatalogPtrOutput struct {
	*pulumi.OutputState
}

func (DatacatalogCatalogPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DatacatalogCatalog)(nil))
}

func (o DatacatalogCatalogPtrOutput) ToDatacatalogCatalogPtrOutput() DatacatalogCatalogPtrOutput {
	return o
}

func (o DatacatalogCatalogPtrOutput) ToDatacatalogCatalogPtrOutputWithContext(ctx context.Context) DatacatalogCatalogPtrOutput {
	return o
}

type DatacatalogCatalogArrayOutput struct{ *pulumi.OutputState }

func (DatacatalogCatalogArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DatacatalogCatalog)(nil))
}

func (o DatacatalogCatalogArrayOutput) ToDatacatalogCatalogArrayOutput() DatacatalogCatalogArrayOutput {
	return o
}

func (o DatacatalogCatalogArrayOutput) ToDatacatalogCatalogArrayOutputWithContext(ctx context.Context) DatacatalogCatalogArrayOutput {
	return o
}

func (o DatacatalogCatalogArrayOutput) Index(i pulumi.IntInput) DatacatalogCatalogOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DatacatalogCatalog {
		return vs[0].([]DatacatalogCatalog)[vs[1].(int)]
	}).(DatacatalogCatalogOutput)
}

type DatacatalogCatalogMapOutput struct{ *pulumi.OutputState }

func (DatacatalogCatalogMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]DatacatalogCatalog)(nil))
}

func (o DatacatalogCatalogMapOutput) ToDatacatalogCatalogMapOutput() DatacatalogCatalogMapOutput {
	return o
}

func (o DatacatalogCatalogMapOutput) ToDatacatalogCatalogMapOutputWithContext(ctx context.Context) DatacatalogCatalogMapOutput {
	return o
}

func (o DatacatalogCatalogMapOutput) MapIndex(k pulumi.StringInput) DatacatalogCatalogOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) DatacatalogCatalog {
		return vs[0].(map[string]DatacatalogCatalog)[vs[1].(string)]
	}).(DatacatalogCatalogOutput)
}

func init() {
	pulumi.RegisterOutputType(DatacatalogCatalogOutput{})
	pulumi.RegisterOutputType(DatacatalogCatalogPtrOutput{})
	pulumi.RegisterOutputType(DatacatalogCatalogArrayOutput{})
	pulumi.RegisterOutputType(DatacatalogCatalogMapOutput{})
}
