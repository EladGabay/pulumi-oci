// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package oci

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource provides the User Capabilities Management resource in Oracle Cloud Infrastructure Identity service.
//
// Manages the capabilities of the specified user.
//
// **Important:** Deleting the User Capabilities Management leaves the User resource in its existing state (rather than returning to its defaults)
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-oci/sdk/go/oci"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := oci.NewIdentityUserCapabilitiesManagement(ctx, "testUserCapabilitiesManagement", &oci.IdentityUserCapabilitiesManagementArgs{
// 			UserId:                   pulumi.Any(oci_identity_user.User1.Id),
// 			CanUseApiKeys:            pulumi.Bool(true),
// 			CanUseAuthTokens:         pulumi.Bool(true),
// 			CanUseConsolePassword:    pulumi.Bool(false),
// 			CanUseCustomerSecretKeys: pulumi.Bool(true),
// 			CanUseSmtpCredentials:    pulumi.Bool(true),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// Users can be imported using the `id`, e.g.
//
// ```sh
//  $ pulumi import oci:index/identityUserCapabilitiesManagement:IdentityUserCapabilitiesManagement test_user_capabilities_management "capabilities/{userId}"
// ```
type IdentityUserCapabilitiesManagement struct {
	pulumi.CustomResourceState

	// (Updatable) Indicates if the user can use API keys.
	CanUseApiKeys pulumi.BoolOutput `pulumi:"canUseApiKeys"`
	// (Updatable) Indicates if the user can use SWIFT passwords / auth tokens.
	CanUseAuthTokens pulumi.BoolOutput `pulumi:"canUseAuthTokens"`
	// (Updatable) Indicates if the user can log in to the console.
	CanUseConsolePassword pulumi.BoolOutput `pulumi:"canUseConsolePassword"`
	// (Updatable) Indicates if the user can use SigV4 symmetric keys.
	CanUseCustomerSecretKeys pulumi.BoolOutput `pulumi:"canUseCustomerSecretKeys"`
	// (Updatable) Indicates if the user can use SMTP passwords.
	CanUseSmtpCredentials pulumi.BoolOutput `pulumi:"canUseSmtpCredentials"`
	// The OCID of the user.
	UserId pulumi.StringOutput `pulumi:"userId"`
}

// NewIdentityUserCapabilitiesManagement registers a new resource with the given unique name, arguments, and options.
func NewIdentityUserCapabilitiesManagement(ctx *pulumi.Context,
	name string, args *IdentityUserCapabilitiesManagementArgs, opts ...pulumi.ResourceOption) (*IdentityUserCapabilitiesManagement, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.UserId == nil {
		return nil, errors.New("invalid value for required argument 'UserId'")
	}
	var resource IdentityUserCapabilitiesManagement
	err := ctx.RegisterResource("oci:index/identityUserCapabilitiesManagement:IdentityUserCapabilitiesManagement", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIdentityUserCapabilitiesManagement gets an existing IdentityUserCapabilitiesManagement resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIdentityUserCapabilitiesManagement(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *IdentityUserCapabilitiesManagementState, opts ...pulumi.ResourceOption) (*IdentityUserCapabilitiesManagement, error) {
	var resource IdentityUserCapabilitiesManagement
	err := ctx.ReadResource("oci:index/identityUserCapabilitiesManagement:IdentityUserCapabilitiesManagement", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering IdentityUserCapabilitiesManagement resources.
type identityUserCapabilitiesManagementState struct {
	// (Updatable) Indicates if the user can use API keys.
	CanUseApiKeys *bool `pulumi:"canUseApiKeys"`
	// (Updatable) Indicates if the user can use SWIFT passwords / auth tokens.
	CanUseAuthTokens *bool `pulumi:"canUseAuthTokens"`
	// (Updatable) Indicates if the user can log in to the console.
	CanUseConsolePassword *bool `pulumi:"canUseConsolePassword"`
	// (Updatable) Indicates if the user can use SigV4 symmetric keys.
	CanUseCustomerSecretKeys *bool `pulumi:"canUseCustomerSecretKeys"`
	// (Updatable) Indicates if the user can use SMTP passwords.
	CanUseSmtpCredentials *bool `pulumi:"canUseSmtpCredentials"`
	// The OCID of the user.
	UserId *string `pulumi:"userId"`
}

type IdentityUserCapabilitiesManagementState struct {
	// (Updatable) Indicates if the user can use API keys.
	CanUseApiKeys pulumi.BoolPtrInput
	// (Updatable) Indicates if the user can use SWIFT passwords / auth tokens.
	CanUseAuthTokens pulumi.BoolPtrInput
	// (Updatable) Indicates if the user can log in to the console.
	CanUseConsolePassword pulumi.BoolPtrInput
	// (Updatable) Indicates if the user can use SigV4 symmetric keys.
	CanUseCustomerSecretKeys pulumi.BoolPtrInput
	// (Updatable) Indicates if the user can use SMTP passwords.
	CanUseSmtpCredentials pulumi.BoolPtrInput
	// The OCID of the user.
	UserId pulumi.StringPtrInput
}

func (IdentityUserCapabilitiesManagementState) ElementType() reflect.Type {
	return reflect.TypeOf((*identityUserCapabilitiesManagementState)(nil)).Elem()
}

type identityUserCapabilitiesManagementArgs struct {
	// (Updatable) Indicates if the user can use API keys.
	CanUseApiKeys *bool `pulumi:"canUseApiKeys"`
	// (Updatable) Indicates if the user can use SWIFT passwords / auth tokens.
	CanUseAuthTokens *bool `pulumi:"canUseAuthTokens"`
	// (Updatable) Indicates if the user can log in to the console.
	CanUseConsolePassword *bool `pulumi:"canUseConsolePassword"`
	// (Updatable) Indicates if the user can use SigV4 symmetric keys.
	CanUseCustomerSecretKeys *bool `pulumi:"canUseCustomerSecretKeys"`
	// (Updatable) Indicates if the user can use SMTP passwords.
	CanUseSmtpCredentials *bool `pulumi:"canUseSmtpCredentials"`
	// The OCID of the user.
	UserId string `pulumi:"userId"`
}

// The set of arguments for constructing a IdentityUserCapabilitiesManagement resource.
type IdentityUserCapabilitiesManagementArgs struct {
	// (Updatable) Indicates if the user can use API keys.
	CanUseApiKeys pulumi.BoolPtrInput
	// (Updatable) Indicates if the user can use SWIFT passwords / auth tokens.
	CanUseAuthTokens pulumi.BoolPtrInput
	// (Updatable) Indicates if the user can log in to the console.
	CanUseConsolePassword pulumi.BoolPtrInput
	// (Updatable) Indicates if the user can use SigV4 symmetric keys.
	CanUseCustomerSecretKeys pulumi.BoolPtrInput
	// (Updatable) Indicates if the user can use SMTP passwords.
	CanUseSmtpCredentials pulumi.BoolPtrInput
	// The OCID of the user.
	UserId pulumi.StringInput
}

func (IdentityUserCapabilitiesManagementArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*identityUserCapabilitiesManagementArgs)(nil)).Elem()
}

type IdentityUserCapabilitiesManagementInput interface {
	pulumi.Input

	ToIdentityUserCapabilitiesManagementOutput() IdentityUserCapabilitiesManagementOutput
	ToIdentityUserCapabilitiesManagementOutputWithContext(ctx context.Context) IdentityUserCapabilitiesManagementOutput
}

func (*IdentityUserCapabilitiesManagement) ElementType() reflect.Type {
	return reflect.TypeOf((*IdentityUserCapabilitiesManagement)(nil))
}

func (i *IdentityUserCapabilitiesManagement) ToIdentityUserCapabilitiesManagementOutput() IdentityUserCapabilitiesManagementOutput {
	return i.ToIdentityUserCapabilitiesManagementOutputWithContext(context.Background())
}

func (i *IdentityUserCapabilitiesManagement) ToIdentityUserCapabilitiesManagementOutputWithContext(ctx context.Context) IdentityUserCapabilitiesManagementOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdentityUserCapabilitiesManagementOutput)
}

func (i *IdentityUserCapabilitiesManagement) ToIdentityUserCapabilitiesManagementPtrOutput() IdentityUserCapabilitiesManagementPtrOutput {
	return i.ToIdentityUserCapabilitiesManagementPtrOutputWithContext(context.Background())
}

func (i *IdentityUserCapabilitiesManagement) ToIdentityUserCapabilitiesManagementPtrOutputWithContext(ctx context.Context) IdentityUserCapabilitiesManagementPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdentityUserCapabilitiesManagementPtrOutput)
}

type IdentityUserCapabilitiesManagementPtrInput interface {
	pulumi.Input

	ToIdentityUserCapabilitiesManagementPtrOutput() IdentityUserCapabilitiesManagementPtrOutput
	ToIdentityUserCapabilitiesManagementPtrOutputWithContext(ctx context.Context) IdentityUserCapabilitiesManagementPtrOutput
}

type identityUserCapabilitiesManagementPtrType IdentityUserCapabilitiesManagementArgs

func (*identityUserCapabilitiesManagementPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**IdentityUserCapabilitiesManagement)(nil))
}

func (i *identityUserCapabilitiesManagementPtrType) ToIdentityUserCapabilitiesManagementPtrOutput() IdentityUserCapabilitiesManagementPtrOutput {
	return i.ToIdentityUserCapabilitiesManagementPtrOutputWithContext(context.Background())
}

func (i *identityUserCapabilitiesManagementPtrType) ToIdentityUserCapabilitiesManagementPtrOutputWithContext(ctx context.Context) IdentityUserCapabilitiesManagementPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdentityUserCapabilitiesManagementPtrOutput)
}

// IdentityUserCapabilitiesManagementArrayInput is an input type that accepts IdentityUserCapabilitiesManagementArray and IdentityUserCapabilitiesManagementArrayOutput values.
// You can construct a concrete instance of `IdentityUserCapabilitiesManagementArrayInput` via:
//
//          IdentityUserCapabilitiesManagementArray{ IdentityUserCapabilitiesManagementArgs{...} }
type IdentityUserCapabilitiesManagementArrayInput interface {
	pulumi.Input

	ToIdentityUserCapabilitiesManagementArrayOutput() IdentityUserCapabilitiesManagementArrayOutput
	ToIdentityUserCapabilitiesManagementArrayOutputWithContext(context.Context) IdentityUserCapabilitiesManagementArrayOutput
}

type IdentityUserCapabilitiesManagementArray []IdentityUserCapabilitiesManagementInput

func (IdentityUserCapabilitiesManagementArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IdentityUserCapabilitiesManagement)(nil)).Elem()
}

func (i IdentityUserCapabilitiesManagementArray) ToIdentityUserCapabilitiesManagementArrayOutput() IdentityUserCapabilitiesManagementArrayOutput {
	return i.ToIdentityUserCapabilitiesManagementArrayOutputWithContext(context.Background())
}

func (i IdentityUserCapabilitiesManagementArray) ToIdentityUserCapabilitiesManagementArrayOutputWithContext(ctx context.Context) IdentityUserCapabilitiesManagementArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdentityUserCapabilitiesManagementArrayOutput)
}

// IdentityUserCapabilitiesManagementMapInput is an input type that accepts IdentityUserCapabilitiesManagementMap and IdentityUserCapabilitiesManagementMapOutput values.
// You can construct a concrete instance of `IdentityUserCapabilitiesManagementMapInput` via:
//
//          IdentityUserCapabilitiesManagementMap{ "key": IdentityUserCapabilitiesManagementArgs{...} }
type IdentityUserCapabilitiesManagementMapInput interface {
	pulumi.Input

	ToIdentityUserCapabilitiesManagementMapOutput() IdentityUserCapabilitiesManagementMapOutput
	ToIdentityUserCapabilitiesManagementMapOutputWithContext(context.Context) IdentityUserCapabilitiesManagementMapOutput
}

type IdentityUserCapabilitiesManagementMap map[string]IdentityUserCapabilitiesManagementInput

func (IdentityUserCapabilitiesManagementMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IdentityUserCapabilitiesManagement)(nil)).Elem()
}

func (i IdentityUserCapabilitiesManagementMap) ToIdentityUserCapabilitiesManagementMapOutput() IdentityUserCapabilitiesManagementMapOutput {
	return i.ToIdentityUserCapabilitiesManagementMapOutputWithContext(context.Background())
}

func (i IdentityUserCapabilitiesManagementMap) ToIdentityUserCapabilitiesManagementMapOutputWithContext(ctx context.Context) IdentityUserCapabilitiesManagementMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdentityUserCapabilitiesManagementMapOutput)
}

type IdentityUserCapabilitiesManagementOutput struct {
	*pulumi.OutputState
}

func (IdentityUserCapabilitiesManagementOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IdentityUserCapabilitiesManagement)(nil))
}

func (o IdentityUserCapabilitiesManagementOutput) ToIdentityUserCapabilitiesManagementOutput() IdentityUserCapabilitiesManagementOutput {
	return o
}

func (o IdentityUserCapabilitiesManagementOutput) ToIdentityUserCapabilitiesManagementOutputWithContext(ctx context.Context) IdentityUserCapabilitiesManagementOutput {
	return o
}

func (o IdentityUserCapabilitiesManagementOutput) ToIdentityUserCapabilitiesManagementPtrOutput() IdentityUserCapabilitiesManagementPtrOutput {
	return o.ToIdentityUserCapabilitiesManagementPtrOutputWithContext(context.Background())
}

func (o IdentityUserCapabilitiesManagementOutput) ToIdentityUserCapabilitiesManagementPtrOutputWithContext(ctx context.Context) IdentityUserCapabilitiesManagementPtrOutput {
	return o.ApplyT(func(v IdentityUserCapabilitiesManagement) *IdentityUserCapabilitiesManagement {
		return &v
	}).(IdentityUserCapabilitiesManagementPtrOutput)
}

type IdentityUserCapabilitiesManagementPtrOutput struct {
	*pulumi.OutputState
}

func (IdentityUserCapabilitiesManagementPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IdentityUserCapabilitiesManagement)(nil))
}

func (o IdentityUserCapabilitiesManagementPtrOutput) ToIdentityUserCapabilitiesManagementPtrOutput() IdentityUserCapabilitiesManagementPtrOutput {
	return o
}

func (o IdentityUserCapabilitiesManagementPtrOutput) ToIdentityUserCapabilitiesManagementPtrOutputWithContext(ctx context.Context) IdentityUserCapabilitiesManagementPtrOutput {
	return o
}

type IdentityUserCapabilitiesManagementArrayOutput struct{ *pulumi.OutputState }

func (IdentityUserCapabilitiesManagementArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]IdentityUserCapabilitiesManagement)(nil))
}

func (o IdentityUserCapabilitiesManagementArrayOutput) ToIdentityUserCapabilitiesManagementArrayOutput() IdentityUserCapabilitiesManagementArrayOutput {
	return o
}

func (o IdentityUserCapabilitiesManagementArrayOutput) ToIdentityUserCapabilitiesManagementArrayOutputWithContext(ctx context.Context) IdentityUserCapabilitiesManagementArrayOutput {
	return o
}

func (o IdentityUserCapabilitiesManagementArrayOutput) Index(i pulumi.IntInput) IdentityUserCapabilitiesManagementOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) IdentityUserCapabilitiesManagement {
		return vs[0].([]IdentityUserCapabilitiesManagement)[vs[1].(int)]
	}).(IdentityUserCapabilitiesManagementOutput)
}

type IdentityUserCapabilitiesManagementMapOutput struct{ *pulumi.OutputState }

func (IdentityUserCapabilitiesManagementMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]IdentityUserCapabilitiesManagement)(nil))
}

func (o IdentityUserCapabilitiesManagementMapOutput) ToIdentityUserCapabilitiesManagementMapOutput() IdentityUserCapabilitiesManagementMapOutput {
	return o
}

func (o IdentityUserCapabilitiesManagementMapOutput) ToIdentityUserCapabilitiesManagementMapOutputWithContext(ctx context.Context) IdentityUserCapabilitiesManagementMapOutput {
	return o
}

func (o IdentityUserCapabilitiesManagementMapOutput) MapIndex(k pulumi.StringInput) IdentityUserCapabilitiesManagementOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) IdentityUserCapabilitiesManagement {
		return vs[0].(map[string]IdentityUserCapabilitiesManagement)[vs[1].(string)]
	}).(IdentityUserCapabilitiesManagementOutput)
}

func init() {
	pulumi.RegisterOutputType(IdentityUserCapabilitiesManagementOutput{})
	pulumi.RegisterOutputType(IdentityUserCapabilitiesManagementPtrOutput{})
	pulumi.RegisterOutputType(IdentityUserCapabilitiesManagementArrayOutput{})
	pulumi.RegisterOutputType(IdentityUserCapabilitiesManagementMapOutput{})
}
