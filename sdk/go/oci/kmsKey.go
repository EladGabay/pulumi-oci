// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package oci

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource provides the Key resource in Oracle Cloud Infrastructure Kms service.
//
// Creates a new master encryption key.
//
// As a management operation, this call is subject to a Key Management limit that applies to the total
// number of requests across all management write operations. Key Management might throttle this call
// to reject an otherwise valid request when the total rate of management write operations exceeds 10
// requests per second for a given tenancy.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-oci/sdk/go/oci"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := oci.NewKmsKey(ctx, "testKey", &oci.KmsKeyArgs{
// 			CompartmentId: pulumi.Any(_var.Compartment_id),
// 			DisplayName:   pulumi.Any(_var.Key_display_name),
// 			KeyShape: &KmsKeyKeyShapeArgs{
// 				Algorithm: pulumi.Any(_var.Key_key_shape_algorithm),
// 				Length:    pulumi.Any(_var.Key_key_shape_length),
// 				CurveId:   pulumi.Any(oci_kms_curve.Test_curve.Id),
// 			},
// 			ManagementEndpoint: pulumi.Any(_var.Key_management_endpoint),
// 			DefinedTags: pulumi.AnyMap{
// 				"Operations.CostCenter": pulumi.Any("42"),
// 			},
// 			FreeformTags: pulumi.AnyMap{
// 				"Department": pulumi.Any("Finance"),
// 			},
// 			ProtectionMode: pulumi.Any(_var.Key_protection_mode),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// Keys can be imported using the `id`, e.g.
//
// ```sh
//  $ pulumi import oci:index/kmsKey:KmsKey test_key "managementEndpoint/{managementEndpoint}/keys/{keyId}"
// ```
type KmsKey struct {
	pulumi.CustomResourceState

	// (Updatable) The OCID of the compartment where you want to create the master encryption key.
	CompartmentId pulumi.StringOutput `pulumi:"compartmentId"`
	// The OCID of the key version used in cryptographic operations. During key rotation, the service might be in a transitional state where this or a newer key version are used intermittently. The `currentKeyVersion` property is updated when the service is guaranteed to use the new key version for all subsequent encryption operations.
	CurrentKeyVersion pulumi.StringOutput `pulumi:"currentKeyVersion"`
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Operations.CostCenter": "42"}`
	DefinedTags pulumi.MapOutput `pulumi:"definedTags"`
	// (Updatable) Desired state of the key. Possible values : `ENABLED` or `DISABLED`
	DesiredState pulumi.StringOutput `pulumi:"desiredState"`
	// (Updatable) A user-friendly name for the key. It does not have to be unique, and it is changeable. Avoid entering confidential information.
	DisplayName pulumi.StringOutput `pulumi:"displayName"`
	// (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Department": "Finance"}`
	FreeformTags pulumi.MapOutput `pulumi:"freeformTags"`
	// A boolean that will be true when key is primary, and will be false when key is a replica from a primary key.
	IsPrimary pulumi.BoolOutput `pulumi:"isPrimary"`
	// The cryptographic properties of a key.
	KeyShape KmsKeyKeyShapeOutput `pulumi:"keyShape"`
	// The service endpoint to perform management operations against. Management operations include 'Create,' 'Update,' 'List,' 'Get,' and 'Delete' operations. See Vault Management endpoint.
	ManagementEndpoint pulumi.StringOutput `pulumi:"managementEndpoint"`
	// The key's protection mode indicates how the key persists and where cryptographic operations that use the key are performed. A protection mode of `HSM` means that the key persists on a hardware security module (HSM) and all cryptographic operations are performed inside the HSM. A protection mode of `SOFTWARE` means that the key persists on the server, protected by the vault's RSA wrapping key which persists  on the HSM. All cryptographic operations that use a key with a protection mode of `SOFTWARE` are performed on the server. By default,  a key's protection mode is set to `HSM`. You can't change a key's protection mode after the key is created or imported.
	ProtectionMode pulumi.StringOutput `pulumi:"protectionMode"`
	// Key replica details
	ReplicaDetails KmsKeyReplicaDetailsOutput `pulumi:"replicaDetails"`
	// (Updatable) Details where key was backed up.
	RestoreFromFile KmsKeyRestoreFromFilePtrOutput `pulumi:"restoreFromFile"`
	// (Updatable) Details where key was backed up
	RestoreFromObjectStore KmsKeyRestoreFromObjectStorePtrOutput `pulumi:"restoreFromObjectStore"`
	// (Updatable) An optional property when flipped triggers restore from restore option provided in config file.
	RestoreTrigger pulumi.BoolPtrOutput `pulumi:"restoreTrigger"`
	// The OCID of the key from which this key was restored.
	RestoredFromKeyId pulumi.StringOutput `pulumi:"restoredFromKeyId"`
	// The key's current lifecycle state.  Example: `ENABLED`
	State pulumi.StringOutput `pulumi:"state"`
	// The date and time the key was created, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format.  Example: `2018-04-03T21:10:29.600Z`
	TimeCreated pulumi.StringOutput `pulumi:"timeCreated"`
	// (Updatable) An optional property for the deletion time of the key, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: `2019-04-03T21:10:29.600Z`
	TimeOfDeletion pulumi.StringOutput `pulumi:"timeOfDeletion"`
	// The OCID of the vault that contains this key.
	VaultId pulumi.StringOutput `pulumi:"vaultId"`
}

// NewKmsKey registers a new resource with the given unique name, arguments, and options.
func NewKmsKey(ctx *pulumi.Context,
	name string, args *KmsKeyArgs, opts ...pulumi.ResourceOption) (*KmsKey, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CompartmentId == nil {
		return nil, errors.New("invalid value for required argument 'CompartmentId'")
	}
	if args.DisplayName == nil {
		return nil, errors.New("invalid value for required argument 'DisplayName'")
	}
	if args.KeyShape == nil {
		return nil, errors.New("invalid value for required argument 'KeyShape'")
	}
	if args.ManagementEndpoint == nil {
		return nil, errors.New("invalid value for required argument 'ManagementEndpoint'")
	}
	var resource KmsKey
	err := ctx.RegisterResource("oci:index/kmsKey:KmsKey", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetKmsKey gets an existing KmsKey resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetKmsKey(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *KmsKeyState, opts ...pulumi.ResourceOption) (*KmsKey, error) {
	var resource KmsKey
	err := ctx.ReadResource("oci:index/kmsKey:KmsKey", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering KmsKey resources.
type kmsKeyState struct {
	// (Updatable) The OCID of the compartment where you want to create the master encryption key.
	CompartmentId *string `pulumi:"compartmentId"`
	// The OCID of the key version used in cryptographic operations. During key rotation, the service might be in a transitional state where this or a newer key version are used intermittently. The `currentKeyVersion` property is updated when the service is guaranteed to use the new key version for all subsequent encryption operations.
	CurrentKeyVersion *string `pulumi:"currentKeyVersion"`
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Operations.CostCenter": "42"}`
	DefinedTags map[string]interface{} `pulumi:"definedTags"`
	// (Updatable) Desired state of the key. Possible values : `ENABLED` or `DISABLED`
	DesiredState *string `pulumi:"desiredState"`
	// (Updatable) A user-friendly name for the key. It does not have to be unique, and it is changeable. Avoid entering confidential information.
	DisplayName *string `pulumi:"displayName"`
	// (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Department": "Finance"}`
	FreeformTags map[string]interface{} `pulumi:"freeformTags"`
	// A boolean that will be true when key is primary, and will be false when key is a replica from a primary key.
	IsPrimary *bool `pulumi:"isPrimary"`
	// The cryptographic properties of a key.
	KeyShape *KmsKeyKeyShape `pulumi:"keyShape"`
	// The service endpoint to perform management operations against. Management operations include 'Create,' 'Update,' 'List,' 'Get,' and 'Delete' operations. See Vault Management endpoint.
	ManagementEndpoint *string `pulumi:"managementEndpoint"`
	// The key's protection mode indicates how the key persists and where cryptographic operations that use the key are performed. A protection mode of `HSM` means that the key persists on a hardware security module (HSM) and all cryptographic operations are performed inside the HSM. A protection mode of `SOFTWARE` means that the key persists on the server, protected by the vault's RSA wrapping key which persists  on the HSM. All cryptographic operations that use a key with a protection mode of `SOFTWARE` are performed on the server. By default,  a key's protection mode is set to `HSM`. You can't change a key's protection mode after the key is created or imported.
	ProtectionMode *string `pulumi:"protectionMode"`
	// Key replica details
	ReplicaDetails *KmsKeyReplicaDetails `pulumi:"replicaDetails"`
	// (Updatable) Details where key was backed up.
	RestoreFromFile *KmsKeyRestoreFromFile `pulumi:"restoreFromFile"`
	// (Updatable) Details where key was backed up
	RestoreFromObjectStore *KmsKeyRestoreFromObjectStore `pulumi:"restoreFromObjectStore"`
	// (Updatable) An optional property when flipped triggers restore from restore option provided in config file.
	RestoreTrigger *bool `pulumi:"restoreTrigger"`
	// The OCID of the key from which this key was restored.
	RestoredFromKeyId *string `pulumi:"restoredFromKeyId"`
	// The key's current lifecycle state.  Example: `ENABLED`
	State *string `pulumi:"state"`
	// The date and time the key was created, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format.  Example: `2018-04-03T21:10:29.600Z`
	TimeCreated *string `pulumi:"timeCreated"`
	// (Updatable) An optional property for the deletion time of the key, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: `2019-04-03T21:10:29.600Z`
	TimeOfDeletion *string `pulumi:"timeOfDeletion"`
	// The OCID of the vault that contains this key.
	VaultId *string `pulumi:"vaultId"`
}

type KmsKeyState struct {
	// (Updatable) The OCID of the compartment where you want to create the master encryption key.
	CompartmentId pulumi.StringPtrInput
	// The OCID of the key version used in cryptographic operations. During key rotation, the service might be in a transitional state where this or a newer key version are used intermittently. The `currentKeyVersion` property is updated when the service is guaranteed to use the new key version for all subsequent encryption operations.
	CurrentKeyVersion pulumi.StringPtrInput
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Operations.CostCenter": "42"}`
	DefinedTags pulumi.MapInput
	// (Updatable) Desired state of the key. Possible values : `ENABLED` or `DISABLED`
	DesiredState pulumi.StringPtrInput
	// (Updatable) A user-friendly name for the key. It does not have to be unique, and it is changeable. Avoid entering confidential information.
	DisplayName pulumi.StringPtrInput
	// (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Department": "Finance"}`
	FreeformTags pulumi.MapInput
	// A boolean that will be true when key is primary, and will be false when key is a replica from a primary key.
	IsPrimary pulumi.BoolPtrInput
	// The cryptographic properties of a key.
	KeyShape KmsKeyKeyShapePtrInput
	// The service endpoint to perform management operations against. Management operations include 'Create,' 'Update,' 'List,' 'Get,' and 'Delete' operations. See Vault Management endpoint.
	ManagementEndpoint pulumi.StringPtrInput
	// The key's protection mode indicates how the key persists and where cryptographic operations that use the key are performed. A protection mode of `HSM` means that the key persists on a hardware security module (HSM) and all cryptographic operations are performed inside the HSM. A protection mode of `SOFTWARE` means that the key persists on the server, protected by the vault's RSA wrapping key which persists  on the HSM. All cryptographic operations that use a key with a protection mode of `SOFTWARE` are performed on the server. By default,  a key's protection mode is set to `HSM`. You can't change a key's protection mode after the key is created or imported.
	ProtectionMode pulumi.StringPtrInput
	// Key replica details
	ReplicaDetails KmsKeyReplicaDetailsPtrInput
	// (Updatable) Details where key was backed up.
	RestoreFromFile KmsKeyRestoreFromFilePtrInput
	// (Updatable) Details where key was backed up
	RestoreFromObjectStore KmsKeyRestoreFromObjectStorePtrInput
	// (Updatable) An optional property when flipped triggers restore from restore option provided in config file.
	RestoreTrigger pulumi.BoolPtrInput
	// The OCID of the key from which this key was restored.
	RestoredFromKeyId pulumi.StringPtrInput
	// The key's current lifecycle state.  Example: `ENABLED`
	State pulumi.StringPtrInput
	// The date and time the key was created, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format.  Example: `2018-04-03T21:10:29.600Z`
	TimeCreated pulumi.StringPtrInput
	// (Updatable) An optional property for the deletion time of the key, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: `2019-04-03T21:10:29.600Z`
	TimeOfDeletion pulumi.StringPtrInput
	// The OCID of the vault that contains this key.
	VaultId pulumi.StringPtrInput
}

func (KmsKeyState) ElementType() reflect.Type {
	return reflect.TypeOf((*kmsKeyState)(nil)).Elem()
}

type kmsKeyArgs struct {
	// (Updatable) The OCID of the compartment where you want to create the master encryption key.
	CompartmentId string `pulumi:"compartmentId"`
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Operations.CostCenter": "42"}`
	DefinedTags map[string]interface{} `pulumi:"definedTags"`
	// (Updatable) Desired state of the key. Possible values : `ENABLED` or `DISABLED`
	DesiredState *string `pulumi:"desiredState"`
	// (Updatable) A user-friendly name for the key. It does not have to be unique, and it is changeable. Avoid entering confidential information.
	DisplayName string `pulumi:"displayName"`
	// (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Department": "Finance"}`
	FreeformTags map[string]interface{} `pulumi:"freeformTags"`
	// The cryptographic properties of a key.
	KeyShape KmsKeyKeyShape `pulumi:"keyShape"`
	// The service endpoint to perform management operations against. Management operations include 'Create,' 'Update,' 'List,' 'Get,' and 'Delete' operations. See Vault Management endpoint.
	ManagementEndpoint string `pulumi:"managementEndpoint"`
	// The key's protection mode indicates how the key persists and where cryptographic operations that use the key are performed. A protection mode of `HSM` means that the key persists on a hardware security module (HSM) and all cryptographic operations are performed inside the HSM. A protection mode of `SOFTWARE` means that the key persists on the server, protected by the vault's RSA wrapping key which persists  on the HSM. All cryptographic operations that use a key with a protection mode of `SOFTWARE` are performed on the server. By default,  a key's protection mode is set to `HSM`. You can't change a key's protection mode after the key is created or imported.
	ProtectionMode *string `pulumi:"protectionMode"`
	// (Updatable) Details where key was backed up.
	RestoreFromFile *KmsKeyRestoreFromFile `pulumi:"restoreFromFile"`
	// (Updatable) Details where key was backed up
	RestoreFromObjectStore *KmsKeyRestoreFromObjectStore `pulumi:"restoreFromObjectStore"`
	// (Updatable) An optional property when flipped triggers restore from restore option provided in config file.
	RestoreTrigger *bool `pulumi:"restoreTrigger"`
	// (Updatable) An optional property for the deletion time of the key, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: `2019-04-03T21:10:29.600Z`
	TimeOfDeletion *string `pulumi:"timeOfDeletion"`
}

// The set of arguments for constructing a KmsKey resource.
type KmsKeyArgs struct {
	// (Updatable) The OCID of the compartment where you want to create the master encryption key.
	CompartmentId pulumi.StringInput
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Operations.CostCenter": "42"}`
	DefinedTags pulumi.MapInput
	// (Updatable) Desired state of the key. Possible values : `ENABLED` or `DISABLED`
	DesiredState pulumi.StringPtrInput
	// (Updatable) A user-friendly name for the key. It does not have to be unique, and it is changeable. Avoid entering confidential information.
	DisplayName pulumi.StringInput
	// (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm). Example: `{"Department": "Finance"}`
	FreeformTags pulumi.MapInput
	// The cryptographic properties of a key.
	KeyShape KmsKeyKeyShapeInput
	// The service endpoint to perform management operations against. Management operations include 'Create,' 'Update,' 'List,' 'Get,' and 'Delete' operations. See Vault Management endpoint.
	ManagementEndpoint pulumi.StringInput
	// The key's protection mode indicates how the key persists and where cryptographic operations that use the key are performed. A protection mode of `HSM` means that the key persists on a hardware security module (HSM) and all cryptographic operations are performed inside the HSM. A protection mode of `SOFTWARE` means that the key persists on the server, protected by the vault's RSA wrapping key which persists  on the HSM. All cryptographic operations that use a key with a protection mode of `SOFTWARE` are performed on the server. By default,  a key's protection mode is set to `HSM`. You can't change a key's protection mode after the key is created or imported.
	ProtectionMode pulumi.StringPtrInput
	// (Updatable) Details where key was backed up.
	RestoreFromFile KmsKeyRestoreFromFilePtrInput
	// (Updatable) Details where key was backed up
	RestoreFromObjectStore KmsKeyRestoreFromObjectStorePtrInput
	// (Updatable) An optional property when flipped triggers restore from restore option provided in config file.
	RestoreTrigger pulumi.BoolPtrInput
	// (Updatable) An optional property for the deletion time of the key, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: `2019-04-03T21:10:29.600Z`
	TimeOfDeletion pulumi.StringPtrInput
}

func (KmsKeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*kmsKeyArgs)(nil)).Elem()
}

type KmsKeyInput interface {
	pulumi.Input

	ToKmsKeyOutput() KmsKeyOutput
	ToKmsKeyOutputWithContext(ctx context.Context) KmsKeyOutput
}

func (*KmsKey) ElementType() reflect.Type {
	return reflect.TypeOf((*KmsKey)(nil))
}

func (i *KmsKey) ToKmsKeyOutput() KmsKeyOutput {
	return i.ToKmsKeyOutputWithContext(context.Background())
}

func (i *KmsKey) ToKmsKeyOutputWithContext(ctx context.Context) KmsKeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KmsKeyOutput)
}

func (i *KmsKey) ToKmsKeyPtrOutput() KmsKeyPtrOutput {
	return i.ToKmsKeyPtrOutputWithContext(context.Background())
}

func (i *KmsKey) ToKmsKeyPtrOutputWithContext(ctx context.Context) KmsKeyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KmsKeyPtrOutput)
}

type KmsKeyPtrInput interface {
	pulumi.Input

	ToKmsKeyPtrOutput() KmsKeyPtrOutput
	ToKmsKeyPtrOutputWithContext(ctx context.Context) KmsKeyPtrOutput
}

type kmsKeyPtrType KmsKeyArgs

func (*kmsKeyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**KmsKey)(nil))
}

func (i *kmsKeyPtrType) ToKmsKeyPtrOutput() KmsKeyPtrOutput {
	return i.ToKmsKeyPtrOutputWithContext(context.Background())
}

func (i *kmsKeyPtrType) ToKmsKeyPtrOutputWithContext(ctx context.Context) KmsKeyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KmsKeyPtrOutput)
}

// KmsKeyArrayInput is an input type that accepts KmsKeyArray and KmsKeyArrayOutput values.
// You can construct a concrete instance of `KmsKeyArrayInput` via:
//
//          KmsKeyArray{ KmsKeyArgs{...} }
type KmsKeyArrayInput interface {
	pulumi.Input

	ToKmsKeyArrayOutput() KmsKeyArrayOutput
	ToKmsKeyArrayOutputWithContext(context.Context) KmsKeyArrayOutput
}

type KmsKeyArray []KmsKeyInput

func (KmsKeyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*KmsKey)(nil)).Elem()
}

func (i KmsKeyArray) ToKmsKeyArrayOutput() KmsKeyArrayOutput {
	return i.ToKmsKeyArrayOutputWithContext(context.Background())
}

func (i KmsKeyArray) ToKmsKeyArrayOutputWithContext(ctx context.Context) KmsKeyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KmsKeyArrayOutput)
}

// KmsKeyMapInput is an input type that accepts KmsKeyMap and KmsKeyMapOutput values.
// You can construct a concrete instance of `KmsKeyMapInput` via:
//
//          KmsKeyMap{ "key": KmsKeyArgs{...} }
type KmsKeyMapInput interface {
	pulumi.Input

	ToKmsKeyMapOutput() KmsKeyMapOutput
	ToKmsKeyMapOutputWithContext(context.Context) KmsKeyMapOutput
}

type KmsKeyMap map[string]KmsKeyInput

func (KmsKeyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*KmsKey)(nil)).Elem()
}

func (i KmsKeyMap) ToKmsKeyMapOutput() KmsKeyMapOutput {
	return i.ToKmsKeyMapOutputWithContext(context.Background())
}

func (i KmsKeyMap) ToKmsKeyMapOutputWithContext(ctx context.Context) KmsKeyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(KmsKeyMapOutput)
}

type KmsKeyOutput struct {
	*pulumi.OutputState
}

func (KmsKeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*KmsKey)(nil))
}

func (o KmsKeyOutput) ToKmsKeyOutput() KmsKeyOutput {
	return o
}

func (o KmsKeyOutput) ToKmsKeyOutputWithContext(ctx context.Context) KmsKeyOutput {
	return o
}

func (o KmsKeyOutput) ToKmsKeyPtrOutput() KmsKeyPtrOutput {
	return o.ToKmsKeyPtrOutputWithContext(context.Background())
}

func (o KmsKeyOutput) ToKmsKeyPtrOutputWithContext(ctx context.Context) KmsKeyPtrOutput {
	return o.ApplyT(func(v KmsKey) *KmsKey {
		return &v
	}).(KmsKeyPtrOutput)
}

type KmsKeyPtrOutput struct {
	*pulumi.OutputState
}

func (KmsKeyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**KmsKey)(nil))
}

func (o KmsKeyPtrOutput) ToKmsKeyPtrOutput() KmsKeyPtrOutput {
	return o
}

func (o KmsKeyPtrOutput) ToKmsKeyPtrOutputWithContext(ctx context.Context) KmsKeyPtrOutput {
	return o
}

type KmsKeyArrayOutput struct{ *pulumi.OutputState }

func (KmsKeyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]KmsKey)(nil))
}

func (o KmsKeyArrayOutput) ToKmsKeyArrayOutput() KmsKeyArrayOutput {
	return o
}

func (o KmsKeyArrayOutput) ToKmsKeyArrayOutputWithContext(ctx context.Context) KmsKeyArrayOutput {
	return o
}

func (o KmsKeyArrayOutput) Index(i pulumi.IntInput) KmsKeyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) KmsKey {
		return vs[0].([]KmsKey)[vs[1].(int)]
	}).(KmsKeyOutput)
}

type KmsKeyMapOutput struct{ *pulumi.OutputState }

func (KmsKeyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]KmsKey)(nil))
}

func (o KmsKeyMapOutput) ToKmsKeyMapOutput() KmsKeyMapOutput {
	return o
}

func (o KmsKeyMapOutput) ToKmsKeyMapOutputWithContext(ctx context.Context) KmsKeyMapOutput {
	return o
}

func (o KmsKeyMapOutput) MapIndex(k pulumi.StringInput) KmsKeyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) KmsKey {
		return vs[0].(map[string]KmsKey)[vs[1].(string)]
	}).(KmsKeyOutput)
}

func init() {
	pulumi.RegisterOutputType(KmsKeyOutput{})
	pulumi.RegisterOutputType(KmsKeyPtrOutput{})
	pulumi.RegisterOutputType(KmsKeyArrayOutput{})
	pulumi.RegisterOutputType(KmsKeyMapOutput{})
}
