// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci
{
    /// <summary>
    /// This resource provides the Autonomous Database Regional Wallet Management resource in Oracle Cloud Infrastructure Database service.
    /// 
    /// Updates the Autonomous Database regional wallet.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Oci = Pulumi.Oci;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var testAutonomousDatabaseRegionalWalletManagement = new Oci.DatabaseAutonomousDatabaseRegionalWalletManagement("testAutonomousDatabaseRegionalWalletManagement", new Oci.DatabaseAutonomousDatabaseRegionalWalletManagementArgs
    ///         {
    ///             ShouldRotate = @var.Autonomous_database_regional_wallet_management_should_rotate,
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// 
    /// ## Import
    /// 
    /// Import is not supported for this resource.
    /// </summary>
    [OciResourceType("oci:index/databaseAutonomousDatabaseRegionalWalletManagement:DatabaseAutonomousDatabaseRegionalWalletManagement")]
    public partial class DatabaseAutonomousDatabaseRegionalWalletManagement : Pulumi.CustomResource
    {
        /// <summary>
        /// (Updatable) Indicates whether to rotate the wallet or not. If `false`, the wallet will not be rotated. The default is `false`.
        /// </summary>
        [Output("shouldRotate")]
        public Output<bool?> ShouldRotate { get; private set; } = null!;

        /// <summary>
        /// The current lifecycle state of the Autonomous Database wallet.
        /// </summary>
        [Output("state")]
        public Output<string> State { get; private set; } = null!;

        /// <summary>
        /// The date and time the wallet was last rotated.
        /// </summary>
        [Output("timeRotated")]
        public Output<string> TimeRotated { get; private set; } = null!;


        /// <summary>
        /// Create a DatabaseAutonomousDatabaseRegionalWalletManagement resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public DatabaseAutonomousDatabaseRegionalWalletManagement(string name, DatabaseAutonomousDatabaseRegionalWalletManagementArgs? args = null, CustomResourceOptions? options = null)
            : base("oci:index/databaseAutonomousDatabaseRegionalWalletManagement:DatabaseAutonomousDatabaseRegionalWalletManagement", name, args ?? new DatabaseAutonomousDatabaseRegionalWalletManagementArgs(), MakeResourceOptions(options, ""))
        {
        }

        private DatabaseAutonomousDatabaseRegionalWalletManagement(string name, Input<string> id, DatabaseAutonomousDatabaseRegionalWalletManagementState? state = null, CustomResourceOptions? options = null)
            : base("oci:index/databaseAutonomousDatabaseRegionalWalletManagement:DatabaseAutonomousDatabaseRegionalWalletManagement", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing DatabaseAutonomousDatabaseRegionalWalletManagement resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static DatabaseAutonomousDatabaseRegionalWalletManagement Get(string name, Input<string> id, DatabaseAutonomousDatabaseRegionalWalletManagementState? state = null, CustomResourceOptions? options = null)
        {
            return new DatabaseAutonomousDatabaseRegionalWalletManagement(name, id, state, options);
        }
    }

    public sealed class DatabaseAutonomousDatabaseRegionalWalletManagementArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// (Updatable) Indicates whether to rotate the wallet or not. If `false`, the wallet will not be rotated. The default is `false`.
        /// </summary>
        [Input("shouldRotate")]
        public Input<bool>? ShouldRotate { get; set; }

        public DatabaseAutonomousDatabaseRegionalWalletManagementArgs()
        {
        }
    }

    public sealed class DatabaseAutonomousDatabaseRegionalWalletManagementState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// (Updatable) Indicates whether to rotate the wallet or not. If `false`, the wallet will not be rotated. The default is `false`.
        /// </summary>
        [Input("shouldRotate")]
        public Input<bool>? ShouldRotate { get; set; }

        /// <summary>
        /// The current lifecycle state of the Autonomous Database wallet.
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        /// <summary>
        /// The date and time the wallet was last rotated.
        /// </summary>
        [Input("timeRotated")]
        public Input<string>? TimeRotated { get; set; }

        public DatabaseAutonomousDatabaseRegionalWalletManagementState()
        {
        }
    }
}
