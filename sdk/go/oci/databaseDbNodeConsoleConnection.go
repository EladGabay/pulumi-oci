// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package oci

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource provides the Db Node Console Connection resource in Oracle Cloud Infrastructure Database service.
//
// Creates a new console connection to the specified database node.
// After the console connection has been created and is available,
// you connect to the console using SSH.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-oci/sdk/go/oci"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := oci.NewDatabaseDbNodeConsoleConnection(ctx, "testDbNodeConsoleConnection", &oci.DatabaseDbNodeConsoleConnectionArgs{
// 			DbNodeId:  pulumi.Any(oci_database_db_node.Test_db_node.Id),
// 			PublicKey: pulumi.Any(_var.Db_node_console_connection_public_key),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// DbNodeConsoleConnections can be imported using the `id`, e.g.
//
// ```sh
//  $ pulumi import oci:index/databaseDbNodeConsoleConnection:DatabaseDbNodeConsoleConnection test_db_node_console_connection "dbNodes/{dbNodeId}/consoleConnections/{consoleConnectionId}"
// ```
type DatabaseDbNodeConsoleConnection struct {
	pulumi.CustomResourceState

	// The OCID of the compartment to contain the console connection.
	CompartmentId pulumi.StringOutput `pulumi:"compartmentId"`
	// The SSH connection string for the console connection.
	ConnectionString pulumi.StringOutput `pulumi:"connectionString"`
	// The database node [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
	DbNodeId pulumi.StringOutput `pulumi:"dbNodeId"`
	// The SSH public key fingerprint for the console connection.
	Fingerprint pulumi.StringOutput `pulumi:"fingerprint"`
	// The SSH public key used to authenticate the console connection.
	PublicKey pulumi.StringOutput `pulumi:"publicKey"`
	// The current state of the console connection.
	State pulumi.StringOutput `pulumi:"state"`
}

// NewDatabaseDbNodeConsoleConnection registers a new resource with the given unique name, arguments, and options.
func NewDatabaseDbNodeConsoleConnection(ctx *pulumi.Context,
	name string, args *DatabaseDbNodeConsoleConnectionArgs, opts ...pulumi.ResourceOption) (*DatabaseDbNodeConsoleConnection, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DbNodeId == nil {
		return nil, errors.New("invalid value for required argument 'DbNodeId'")
	}
	if args.PublicKey == nil {
		return nil, errors.New("invalid value for required argument 'PublicKey'")
	}
	var resource DatabaseDbNodeConsoleConnection
	err := ctx.RegisterResource("oci:index/databaseDbNodeConsoleConnection:DatabaseDbNodeConsoleConnection", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDatabaseDbNodeConsoleConnection gets an existing DatabaseDbNodeConsoleConnection resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDatabaseDbNodeConsoleConnection(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DatabaseDbNodeConsoleConnectionState, opts ...pulumi.ResourceOption) (*DatabaseDbNodeConsoleConnection, error) {
	var resource DatabaseDbNodeConsoleConnection
	err := ctx.ReadResource("oci:index/databaseDbNodeConsoleConnection:DatabaseDbNodeConsoleConnection", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DatabaseDbNodeConsoleConnection resources.
type databaseDbNodeConsoleConnectionState struct {
	// The OCID of the compartment to contain the console connection.
	CompartmentId *string `pulumi:"compartmentId"`
	// The SSH connection string for the console connection.
	ConnectionString *string `pulumi:"connectionString"`
	// The database node [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
	DbNodeId *string `pulumi:"dbNodeId"`
	// The SSH public key fingerprint for the console connection.
	Fingerprint *string `pulumi:"fingerprint"`
	// The SSH public key used to authenticate the console connection.
	PublicKey *string `pulumi:"publicKey"`
	// The current state of the console connection.
	State *string `pulumi:"state"`
}

type DatabaseDbNodeConsoleConnectionState struct {
	// The OCID of the compartment to contain the console connection.
	CompartmentId pulumi.StringPtrInput
	// The SSH connection string for the console connection.
	ConnectionString pulumi.StringPtrInput
	// The database node [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
	DbNodeId pulumi.StringPtrInput
	// The SSH public key fingerprint for the console connection.
	Fingerprint pulumi.StringPtrInput
	// The SSH public key used to authenticate the console connection.
	PublicKey pulumi.StringPtrInput
	// The current state of the console connection.
	State pulumi.StringPtrInput
}

func (DatabaseDbNodeConsoleConnectionState) ElementType() reflect.Type {
	return reflect.TypeOf((*databaseDbNodeConsoleConnectionState)(nil)).Elem()
}

type databaseDbNodeConsoleConnectionArgs struct {
	// The database node [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
	DbNodeId string `pulumi:"dbNodeId"`
	// The SSH public key used to authenticate the console connection.
	PublicKey string `pulumi:"publicKey"`
}

// The set of arguments for constructing a DatabaseDbNodeConsoleConnection resource.
type DatabaseDbNodeConsoleConnectionArgs struct {
	// The database node [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
	DbNodeId pulumi.StringInput
	// The SSH public key used to authenticate the console connection.
	PublicKey pulumi.StringInput
}

func (DatabaseDbNodeConsoleConnectionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*databaseDbNodeConsoleConnectionArgs)(nil)).Elem()
}

type DatabaseDbNodeConsoleConnectionInput interface {
	pulumi.Input

	ToDatabaseDbNodeConsoleConnectionOutput() DatabaseDbNodeConsoleConnectionOutput
	ToDatabaseDbNodeConsoleConnectionOutputWithContext(ctx context.Context) DatabaseDbNodeConsoleConnectionOutput
}

func (*DatabaseDbNodeConsoleConnection) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseDbNodeConsoleConnection)(nil))
}

func (i *DatabaseDbNodeConsoleConnection) ToDatabaseDbNodeConsoleConnectionOutput() DatabaseDbNodeConsoleConnectionOutput {
	return i.ToDatabaseDbNodeConsoleConnectionOutputWithContext(context.Background())
}

func (i *DatabaseDbNodeConsoleConnection) ToDatabaseDbNodeConsoleConnectionOutputWithContext(ctx context.Context) DatabaseDbNodeConsoleConnectionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseDbNodeConsoleConnectionOutput)
}

func (i *DatabaseDbNodeConsoleConnection) ToDatabaseDbNodeConsoleConnectionPtrOutput() DatabaseDbNodeConsoleConnectionPtrOutput {
	return i.ToDatabaseDbNodeConsoleConnectionPtrOutputWithContext(context.Background())
}

func (i *DatabaseDbNodeConsoleConnection) ToDatabaseDbNodeConsoleConnectionPtrOutputWithContext(ctx context.Context) DatabaseDbNodeConsoleConnectionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseDbNodeConsoleConnectionPtrOutput)
}

type DatabaseDbNodeConsoleConnectionPtrInput interface {
	pulumi.Input

	ToDatabaseDbNodeConsoleConnectionPtrOutput() DatabaseDbNodeConsoleConnectionPtrOutput
	ToDatabaseDbNodeConsoleConnectionPtrOutputWithContext(ctx context.Context) DatabaseDbNodeConsoleConnectionPtrOutput
}

type databaseDbNodeConsoleConnectionPtrType DatabaseDbNodeConsoleConnectionArgs

func (*databaseDbNodeConsoleConnectionPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DatabaseDbNodeConsoleConnection)(nil))
}

func (i *databaseDbNodeConsoleConnectionPtrType) ToDatabaseDbNodeConsoleConnectionPtrOutput() DatabaseDbNodeConsoleConnectionPtrOutput {
	return i.ToDatabaseDbNodeConsoleConnectionPtrOutputWithContext(context.Background())
}

func (i *databaseDbNodeConsoleConnectionPtrType) ToDatabaseDbNodeConsoleConnectionPtrOutputWithContext(ctx context.Context) DatabaseDbNodeConsoleConnectionPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseDbNodeConsoleConnectionPtrOutput)
}

// DatabaseDbNodeConsoleConnectionArrayInput is an input type that accepts DatabaseDbNodeConsoleConnectionArray and DatabaseDbNodeConsoleConnectionArrayOutput values.
// You can construct a concrete instance of `DatabaseDbNodeConsoleConnectionArrayInput` via:
//
//          DatabaseDbNodeConsoleConnectionArray{ DatabaseDbNodeConsoleConnectionArgs{...} }
type DatabaseDbNodeConsoleConnectionArrayInput interface {
	pulumi.Input

	ToDatabaseDbNodeConsoleConnectionArrayOutput() DatabaseDbNodeConsoleConnectionArrayOutput
	ToDatabaseDbNodeConsoleConnectionArrayOutputWithContext(context.Context) DatabaseDbNodeConsoleConnectionArrayOutput
}

type DatabaseDbNodeConsoleConnectionArray []DatabaseDbNodeConsoleConnectionInput

func (DatabaseDbNodeConsoleConnectionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DatabaseDbNodeConsoleConnection)(nil)).Elem()
}

func (i DatabaseDbNodeConsoleConnectionArray) ToDatabaseDbNodeConsoleConnectionArrayOutput() DatabaseDbNodeConsoleConnectionArrayOutput {
	return i.ToDatabaseDbNodeConsoleConnectionArrayOutputWithContext(context.Background())
}

func (i DatabaseDbNodeConsoleConnectionArray) ToDatabaseDbNodeConsoleConnectionArrayOutputWithContext(ctx context.Context) DatabaseDbNodeConsoleConnectionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseDbNodeConsoleConnectionArrayOutput)
}

// DatabaseDbNodeConsoleConnectionMapInput is an input type that accepts DatabaseDbNodeConsoleConnectionMap and DatabaseDbNodeConsoleConnectionMapOutput values.
// You can construct a concrete instance of `DatabaseDbNodeConsoleConnectionMapInput` via:
//
//          DatabaseDbNodeConsoleConnectionMap{ "key": DatabaseDbNodeConsoleConnectionArgs{...} }
type DatabaseDbNodeConsoleConnectionMapInput interface {
	pulumi.Input

	ToDatabaseDbNodeConsoleConnectionMapOutput() DatabaseDbNodeConsoleConnectionMapOutput
	ToDatabaseDbNodeConsoleConnectionMapOutputWithContext(context.Context) DatabaseDbNodeConsoleConnectionMapOutput
}

type DatabaseDbNodeConsoleConnectionMap map[string]DatabaseDbNodeConsoleConnectionInput

func (DatabaseDbNodeConsoleConnectionMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DatabaseDbNodeConsoleConnection)(nil)).Elem()
}

func (i DatabaseDbNodeConsoleConnectionMap) ToDatabaseDbNodeConsoleConnectionMapOutput() DatabaseDbNodeConsoleConnectionMapOutput {
	return i.ToDatabaseDbNodeConsoleConnectionMapOutputWithContext(context.Background())
}

func (i DatabaseDbNodeConsoleConnectionMap) ToDatabaseDbNodeConsoleConnectionMapOutputWithContext(ctx context.Context) DatabaseDbNodeConsoleConnectionMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseDbNodeConsoleConnectionMapOutput)
}

type DatabaseDbNodeConsoleConnectionOutput struct {
	*pulumi.OutputState
}

func (DatabaseDbNodeConsoleConnectionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseDbNodeConsoleConnection)(nil))
}

func (o DatabaseDbNodeConsoleConnectionOutput) ToDatabaseDbNodeConsoleConnectionOutput() DatabaseDbNodeConsoleConnectionOutput {
	return o
}

func (o DatabaseDbNodeConsoleConnectionOutput) ToDatabaseDbNodeConsoleConnectionOutputWithContext(ctx context.Context) DatabaseDbNodeConsoleConnectionOutput {
	return o
}

func (o DatabaseDbNodeConsoleConnectionOutput) ToDatabaseDbNodeConsoleConnectionPtrOutput() DatabaseDbNodeConsoleConnectionPtrOutput {
	return o.ToDatabaseDbNodeConsoleConnectionPtrOutputWithContext(context.Background())
}

func (o DatabaseDbNodeConsoleConnectionOutput) ToDatabaseDbNodeConsoleConnectionPtrOutputWithContext(ctx context.Context) DatabaseDbNodeConsoleConnectionPtrOutput {
	return o.ApplyT(func(v DatabaseDbNodeConsoleConnection) *DatabaseDbNodeConsoleConnection {
		return &v
	}).(DatabaseDbNodeConsoleConnectionPtrOutput)
}

type DatabaseDbNodeConsoleConnectionPtrOutput struct {
	*pulumi.OutputState
}

func (DatabaseDbNodeConsoleConnectionPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DatabaseDbNodeConsoleConnection)(nil))
}

func (o DatabaseDbNodeConsoleConnectionPtrOutput) ToDatabaseDbNodeConsoleConnectionPtrOutput() DatabaseDbNodeConsoleConnectionPtrOutput {
	return o
}

func (o DatabaseDbNodeConsoleConnectionPtrOutput) ToDatabaseDbNodeConsoleConnectionPtrOutputWithContext(ctx context.Context) DatabaseDbNodeConsoleConnectionPtrOutput {
	return o
}

type DatabaseDbNodeConsoleConnectionArrayOutput struct{ *pulumi.OutputState }

func (DatabaseDbNodeConsoleConnectionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DatabaseDbNodeConsoleConnection)(nil))
}

func (o DatabaseDbNodeConsoleConnectionArrayOutput) ToDatabaseDbNodeConsoleConnectionArrayOutput() DatabaseDbNodeConsoleConnectionArrayOutput {
	return o
}

func (o DatabaseDbNodeConsoleConnectionArrayOutput) ToDatabaseDbNodeConsoleConnectionArrayOutputWithContext(ctx context.Context) DatabaseDbNodeConsoleConnectionArrayOutput {
	return o
}

func (o DatabaseDbNodeConsoleConnectionArrayOutput) Index(i pulumi.IntInput) DatabaseDbNodeConsoleConnectionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DatabaseDbNodeConsoleConnection {
		return vs[0].([]DatabaseDbNodeConsoleConnection)[vs[1].(int)]
	}).(DatabaseDbNodeConsoleConnectionOutput)
}

type DatabaseDbNodeConsoleConnectionMapOutput struct{ *pulumi.OutputState }

func (DatabaseDbNodeConsoleConnectionMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]DatabaseDbNodeConsoleConnection)(nil))
}

func (o DatabaseDbNodeConsoleConnectionMapOutput) ToDatabaseDbNodeConsoleConnectionMapOutput() DatabaseDbNodeConsoleConnectionMapOutput {
	return o
}

func (o DatabaseDbNodeConsoleConnectionMapOutput) ToDatabaseDbNodeConsoleConnectionMapOutputWithContext(ctx context.Context) DatabaseDbNodeConsoleConnectionMapOutput {
	return o
}

func (o DatabaseDbNodeConsoleConnectionMapOutput) MapIndex(k pulumi.StringInput) DatabaseDbNodeConsoleConnectionOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) DatabaseDbNodeConsoleConnection {
		return vs[0].(map[string]DatabaseDbNodeConsoleConnection)[vs[1].(string)]
	}).(DatabaseDbNodeConsoleConnectionOutput)
}

func init() {
	pulumi.RegisterOutputType(DatabaseDbNodeConsoleConnectionOutput{})
	pulumi.RegisterOutputType(DatabaseDbNodeConsoleConnectionPtrOutput{})
	pulumi.RegisterOutputType(DatabaseDbNodeConsoleConnectionArrayOutput{})
	pulumi.RegisterOutputType(DatabaseDbNodeConsoleConnectionMapOutput{})
}
