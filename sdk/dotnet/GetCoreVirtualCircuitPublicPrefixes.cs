// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci
{
    public static class GetCoreVirtualCircuitPublicPrefixes
    {
        /// <summary>
        /// This data source provides the list of Virtual Circuit Public Prefixes in Oracle Cloud Infrastructure Core service.
        /// 
        /// Lists the public IP prefixes and their details for the specified
        /// public virtual circuit.
        /// 
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var testVirtualCircuitPublicPrefixes = Output.Create(Oci.GetCoreVirtualCircuitPublicPrefixes.InvokeAsync(new Oci.GetCoreVirtualCircuitPublicPrefixesArgs
        ///         {
        ///             VirtualCircuitId = oci_core_virtual_circuit.Test_virtual_circuit.Id,
        ///             VerificationState = @var.Virtual_circuit_public_prefix_verification_state,
        ///         }));
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetCoreVirtualCircuitPublicPrefixesResult> InvokeAsync(GetCoreVirtualCircuitPublicPrefixesArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetCoreVirtualCircuitPublicPrefixesResult>("oci:index/getCoreVirtualCircuitPublicPrefixes:GetCoreVirtualCircuitPublicPrefixes", args ?? new GetCoreVirtualCircuitPublicPrefixesArgs(), options.WithVersion());
    }


    public sealed class GetCoreVirtualCircuitPublicPrefixesArgs : Pulumi.InvokeArgs
    {
        [Input("filters")]
        private List<Inputs.GetCoreVirtualCircuitPublicPrefixesFilterArgs>? _filters;
        public List<Inputs.GetCoreVirtualCircuitPublicPrefixesFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetCoreVirtualCircuitPublicPrefixesFilterArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// A filter to only return resources that match the given verification state.
        /// </summary>
        [Input("verificationState")]
        public string? VerificationState { get; set; }

        /// <summary>
        /// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the virtual circuit.
        /// </summary>
        [Input("virtualCircuitId", required: true)]
        public string VirtualCircuitId { get; set; } = null!;

        public GetCoreVirtualCircuitPublicPrefixesArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetCoreVirtualCircuitPublicPrefixesResult
    {
        public readonly ImmutableArray<Outputs.GetCoreVirtualCircuitPublicPrefixesFilterResult> Filters;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Oracle must verify that the customer owns the public IP prefix before traffic for that prefix can flow across the virtual circuit. Verification can take a few business days. `IN_PROGRESS` means Oracle is verifying the prefix. `COMPLETED` means verification succeeded. `FAILED` means verification failed and traffic for this prefix will not flow across the connection.
        /// </summary>
        public readonly string? VerificationState;
        public readonly string VirtualCircuitId;
        /// <summary>
        /// The list of virtual_circuit_public_prefixes.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetCoreVirtualCircuitPublicPrefixesVirtualCircuitPublicPrefixResult> VirtualCircuitPublicPrefixes;

        [OutputConstructor]
        private GetCoreVirtualCircuitPublicPrefixesResult(
            ImmutableArray<Outputs.GetCoreVirtualCircuitPublicPrefixesFilterResult> filters,

            string id,

            string? verificationState,

            string virtualCircuitId,

            ImmutableArray<Outputs.GetCoreVirtualCircuitPublicPrefixesVirtualCircuitPublicPrefixResult> virtualCircuitPublicPrefixes)
        {
            Filters = filters;
            Id = id;
            VerificationState = verificationState;
            VirtualCircuitId = virtualCircuitId;
            VirtualCircuitPublicPrefixes = virtualCircuitPublicPrefixes;
        }
    }
}
