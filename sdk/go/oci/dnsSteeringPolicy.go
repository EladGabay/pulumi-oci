// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package oci

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource provides the Steering Policy resource in Oracle Cloud Infrastructure DNS service.
//
// Creates a new steering policy in the specified compartment. For more information on
// creating policies with templates, see [Traffic Management API Guide](https://docs.cloud.oracle.com/iaas/Content/TrafficManagement/Concepts/trafficmanagementapi.htm).
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-oci/sdk/go/oci"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := oci.NewDnsSteeringPolicy(ctx, "testSteeringPolicy", &oci.DnsSteeringPolicyArgs{
// 			CompartmentId: pulumi.Any(_var.Compartment_id),
// 			DisplayName:   pulumi.Any(_var.Steering_policy_display_name),
// 			Template:      pulumi.Any(_var.Steering_policy_template),
// 			Answers: DnsSteeringPolicyAnswerArray{
// 				&DnsSteeringPolicyAnswerArgs{
// 					Name:       pulumi.Any(_var.Steering_policy_answers_name),
// 					Rdata:      pulumi.Any(_var.Steering_policy_answers_rdata),
// 					Rtype:      pulumi.Any(_var.Steering_policy_answers_rtype),
// 					IsDisabled: pulumi.Any(_var.Steering_policy_answers_is_disabled),
// 					Pool:       pulumi.Any(_var.Steering_policy_answers_pool),
// 				},
// 			},
// 			DefinedTags:          pulumi.Any(_var.Steering_policy_defined_tags),
// 			FreeformTags:         pulumi.Any(_var.Steering_policy_freeform_tags),
// 			HealthCheckMonitorId: pulumi.Any(oci_health_checks_http_monitor.Test_http_monitor.Id),
// 			Rules: DnsSteeringPolicyRuleArray{
// 				&DnsSteeringPolicyRuleArgs{
// 					RuleType: pulumi.Any(_var.Steering_policy_rules_rule_type),
// 					Cases: DnsSteeringPolicyRuleCaseArray{
// 						&DnsSteeringPolicyRuleCaseArgs{
// 							AnswerDatas: DnsSteeringPolicyRuleCaseAnswerDataArray{
// 								&DnsSteeringPolicyRuleCaseAnswerDataArgs{
// 									AnswerCondition: pulumi.Any(_var.Steering_policy_rules_cases_answer_data_answer_condition),
// 									ShouldKeep:      pulumi.Any(_var.Steering_policy_rules_cases_answer_data_should_keep),
// 									Value:           pulumi.Any(_var.Steering_policy_rules_cases_answer_data_value),
// 								},
// 							},
// 							CaseCondition: pulumi.Any(_var.Steering_policy_rules_cases_case_condition),
// 							Count:         pulumi.Any(_var.Steering_policy_rules_cases_count),
// 						},
// 					},
// 					DefaultAnswerDatas: DnsSteeringPolicyRuleDefaultAnswerDataArray{
// 						&DnsSteeringPolicyRuleDefaultAnswerDataArgs{
// 							AnswerCondition: pulumi.Any(_var.Steering_policy_rules_default_answer_data_answer_condition),
// 							ShouldKeep:      pulumi.Any(_var.Steering_policy_rules_default_answer_data_should_keep),
// 							Value:           pulumi.Any(_var.Steering_policy_rules_default_answer_data_value),
// 						},
// 					},
// 					DefaultCount: pulumi.Any(_var.Steering_policy_rules_default_count),
// 					Description:  pulumi.Any(_var.Steering_policy_rules_description),
// 				},
// 			},
// 			Ttl: pulumi.Any(_var.Steering_policy_ttl),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// SteeringPolicies can be imported using the `id`, e.g.
//
// ```sh
//  $ pulumi import oci:index/dnsSteeringPolicy:DnsSteeringPolicy test_steering_policy "id"
// ```
type DnsSteeringPolicy struct {
	pulumi.CustomResourceState

	// The set of all answers that can potentially issue from the steering policy.
	Answers DnsSteeringPolicyAnswerArrayOutput `pulumi:"answers"`
	// (Updatable) The OCID of the compartment containing the steering policy.
	CompartmentId pulumi.StringOutput `pulumi:"compartmentId"`
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
	DefinedTags pulumi.MapOutput `pulumi:"definedTags"`
	// (Updatable) A user-friendly name for the steering policy. Does not have to be unique and can be changed. Avoid entering confidential information.
	DisplayName pulumi.StringOutput `pulumi:"displayName"`
	// (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
	FreeformTags pulumi.MapOutput `pulumi:"freeformTags"`
	// (Updatable) The OCID of the health check monitor providing health data about the answers of the steering policy. A steering policy answer with `rdata` matching a monitored endpoint will use the health data of that endpoint. A steering policy answer with `rdata` not matching any monitored endpoint will be assumed healthy.
	HealthCheckMonitorId pulumi.StringOutput `pulumi:"healthCheckMonitorId"`
	// The series of rules that will be processed in sequence to reduce the pool of answers to a response for any given request.
	Rules DnsSteeringPolicyRuleArrayOutput `pulumi:"rules"`
	// The canonical absolute URL of the resource.
	Self pulumi.StringOutput `pulumi:"self"`
	// The current state of the resource.
	State pulumi.StringOutput `pulumi:"state"`
	// (Updatable) A set of predefined rules based on the desired purpose of the steering policy. Each template utilizes Traffic Management's rules in a different order to produce the desired results when answering DNS queries.
	Template pulumi.StringOutput `pulumi:"template"`
	// The date and time the resource was created, expressed in RFC 3339 timestamp format.
	TimeCreated pulumi.StringOutput `pulumi:"timeCreated"`
	// (Updatable) The Time To Live (TTL) for responses from the steering policy, in seconds. If not specified during creation, a value of 30 seconds will be used.
	Ttl pulumi.IntOutput `pulumi:"ttl"`
}

// NewDnsSteeringPolicy registers a new resource with the given unique name, arguments, and options.
func NewDnsSteeringPolicy(ctx *pulumi.Context,
	name string, args *DnsSteeringPolicyArgs, opts ...pulumi.ResourceOption) (*DnsSteeringPolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CompartmentId == nil {
		return nil, errors.New("invalid value for required argument 'CompartmentId'")
	}
	if args.DisplayName == nil {
		return nil, errors.New("invalid value for required argument 'DisplayName'")
	}
	if args.Template == nil {
		return nil, errors.New("invalid value for required argument 'Template'")
	}
	var resource DnsSteeringPolicy
	err := ctx.RegisterResource("oci:index/dnsSteeringPolicy:DnsSteeringPolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDnsSteeringPolicy gets an existing DnsSteeringPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDnsSteeringPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DnsSteeringPolicyState, opts ...pulumi.ResourceOption) (*DnsSteeringPolicy, error) {
	var resource DnsSteeringPolicy
	err := ctx.ReadResource("oci:index/dnsSteeringPolicy:DnsSteeringPolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DnsSteeringPolicy resources.
type dnsSteeringPolicyState struct {
	// The set of all answers that can potentially issue from the steering policy.
	Answers []DnsSteeringPolicyAnswer `pulumi:"answers"`
	// (Updatable) The OCID of the compartment containing the steering policy.
	CompartmentId *string `pulumi:"compartmentId"`
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
	DefinedTags map[string]interface{} `pulumi:"definedTags"`
	// (Updatable) A user-friendly name for the steering policy. Does not have to be unique and can be changed. Avoid entering confidential information.
	DisplayName *string `pulumi:"displayName"`
	// (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
	FreeformTags map[string]interface{} `pulumi:"freeformTags"`
	// (Updatable) The OCID of the health check monitor providing health data about the answers of the steering policy. A steering policy answer with `rdata` matching a monitored endpoint will use the health data of that endpoint. A steering policy answer with `rdata` not matching any monitored endpoint will be assumed healthy.
	HealthCheckMonitorId *string `pulumi:"healthCheckMonitorId"`
	// The series of rules that will be processed in sequence to reduce the pool of answers to a response for any given request.
	Rules []DnsSteeringPolicyRule `pulumi:"rules"`
	// The canonical absolute URL of the resource.
	Self *string `pulumi:"self"`
	// The current state of the resource.
	State *string `pulumi:"state"`
	// (Updatable) A set of predefined rules based on the desired purpose of the steering policy. Each template utilizes Traffic Management's rules in a different order to produce the desired results when answering DNS queries.
	Template *string `pulumi:"template"`
	// The date and time the resource was created, expressed in RFC 3339 timestamp format.
	TimeCreated *string `pulumi:"timeCreated"`
	// (Updatable) The Time To Live (TTL) for responses from the steering policy, in seconds. If not specified during creation, a value of 30 seconds will be used.
	Ttl *int `pulumi:"ttl"`
}

type DnsSteeringPolicyState struct {
	// The set of all answers that can potentially issue from the steering policy.
	Answers DnsSteeringPolicyAnswerArrayInput
	// (Updatable) The OCID of the compartment containing the steering policy.
	CompartmentId pulumi.StringPtrInput
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
	DefinedTags pulumi.MapInput
	// (Updatable) A user-friendly name for the steering policy. Does not have to be unique and can be changed. Avoid entering confidential information.
	DisplayName pulumi.StringPtrInput
	// (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
	FreeformTags pulumi.MapInput
	// (Updatable) The OCID of the health check monitor providing health data about the answers of the steering policy. A steering policy answer with `rdata` matching a monitored endpoint will use the health data of that endpoint. A steering policy answer with `rdata` not matching any monitored endpoint will be assumed healthy.
	HealthCheckMonitorId pulumi.StringPtrInput
	// The series of rules that will be processed in sequence to reduce the pool of answers to a response for any given request.
	Rules DnsSteeringPolicyRuleArrayInput
	// The canonical absolute URL of the resource.
	Self pulumi.StringPtrInput
	// The current state of the resource.
	State pulumi.StringPtrInput
	// (Updatable) A set of predefined rules based on the desired purpose of the steering policy. Each template utilizes Traffic Management's rules in a different order to produce the desired results when answering DNS queries.
	Template pulumi.StringPtrInput
	// The date and time the resource was created, expressed in RFC 3339 timestamp format.
	TimeCreated pulumi.StringPtrInput
	// (Updatable) The Time To Live (TTL) for responses from the steering policy, in seconds. If not specified during creation, a value of 30 seconds will be used.
	Ttl pulumi.IntPtrInput
}

func (DnsSteeringPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*dnsSteeringPolicyState)(nil)).Elem()
}

type dnsSteeringPolicyArgs struct {
	// The set of all answers that can potentially issue from the steering policy.
	Answers []DnsSteeringPolicyAnswer `pulumi:"answers"`
	// (Updatable) The OCID of the compartment containing the steering policy.
	CompartmentId string `pulumi:"compartmentId"`
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
	DefinedTags map[string]interface{} `pulumi:"definedTags"`
	// (Updatable) A user-friendly name for the steering policy. Does not have to be unique and can be changed. Avoid entering confidential information.
	DisplayName string `pulumi:"displayName"`
	// (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
	FreeformTags map[string]interface{} `pulumi:"freeformTags"`
	// (Updatable) The OCID of the health check monitor providing health data about the answers of the steering policy. A steering policy answer with `rdata` matching a monitored endpoint will use the health data of that endpoint. A steering policy answer with `rdata` not matching any monitored endpoint will be assumed healthy.
	HealthCheckMonitorId *string `pulumi:"healthCheckMonitorId"`
	// The series of rules that will be processed in sequence to reduce the pool of answers to a response for any given request.
	Rules []DnsSteeringPolicyRule `pulumi:"rules"`
	// (Updatable) A set of predefined rules based on the desired purpose of the steering policy. Each template utilizes Traffic Management's rules in a different order to produce the desired results when answering DNS queries.
	Template string `pulumi:"template"`
	// (Updatable) The Time To Live (TTL) for responses from the steering policy, in seconds. If not specified during creation, a value of 30 seconds will be used.
	Ttl *int `pulumi:"ttl"`
}

// The set of arguments for constructing a DnsSteeringPolicy resource.
type DnsSteeringPolicyArgs struct {
	// The set of all answers that can potentially issue from the steering policy.
	Answers DnsSteeringPolicyAnswerArrayInput
	// (Updatable) The OCID of the compartment containing the steering policy.
	CompartmentId pulumi.StringInput
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
	DefinedTags pulumi.MapInput
	// (Updatable) A user-friendly name for the steering policy. Does not have to be unique and can be changed. Avoid entering confidential information.
	DisplayName pulumi.StringInput
	// (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
	FreeformTags pulumi.MapInput
	// (Updatable) The OCID of the health check monitor providing health data about the answers of the steering policy. A steering policy answer with `rdata` matching a monitored endpoint will use the health data of that endpoint. A steering policy answer with `rdata` not matching any monitored endpoint will be assumed healthy.
	HealthCheckMonitorId pulumi.StringPtrInput
	// The series of rules that will be processed in sequence to reduce the pool of answers to a response for any given request.
	Rules DnsSteeringPolicyRuleArrayInput
	// (Updatable) A set of predefined rules based on the desired purpose of the steering policy. Each template utilizes Traffic Management's rules in a different order to produce the desired results when answering DNS queries.
	Template pulumi.StringInput
	// (Updatable) The Time To Live (TTL) for responses from the steering policy, in seconds. If not specified during creation, a value of 30 seconds will be used.
	Ttl pulumi.IntPtrInput
}

func (DnsSteeringPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*dnsSteeringPolicyArgs)(nil)).Elem()
}

type DnsSteeringPolicyInput interface {
	pulumi.Input

	ToDnsSteeringPolicyOutput() DnsSteeringPolicyOutput
	ToDnsSteeringPolicyOutputWithContext(ctx context.Context) DnsSteeringPolicyOutput
}

func (*DnsSteeringPolicy) ElementType() reflect.Type {
	return reflect.TypeOf((*DnsSteeringPolicy)(nil))
}

func (i *DnsSteeringPolicy) ToDnsSteeringPolicyOutput() DnsSteeringPolicyOutput {
	return i.ToDnsSteeringPolicyOutputWithContext(context.Background())
}

func (i *DnsSteeringPolicy) ToDnsSteeringPolicyOutputWithContext(ctx context.Context) DnsSteeringPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DnsSteeringPolicyOutput)
}

func (i *DnsSteeringPolicy) ToDnsSteeringPolicyPtrOutput() DnsSteeringPolicyPtrOutput {
	return i.ToDnsSteeringPolicyPtrOutputWithContext(context.Background())
}

func (i *DnsSteeringPolicy) ToDnsSteeringPolicyPtrOutputWithContext(ctx context.Context) DnsSteeringPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DnsSteeringPolicyPtrOutput)
}

type DnsSteeringPolicyPtrInput interface {
	pulumi.Input

	ToDnsSteeringPolicyPtrOutput() DnsSteeringPolicyPtrOutput
	ToDnsSteeringPolicyPtrOutputWithContext(ctx context.Context) DnsSteeringPolicyPtrOutput
}

type dnsSteeringPolicyPtrType DnsSteeringPolicyArgs

func (*dnsSteeringPolicyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DnsSteeringPolicy)(nil))
}

func (i *dnsSteeringPolicyPtrType) ToDnsSteeringPolicyPtrOutput() DnsSteeringPolicyPtrOutput {
	return i.ToDnsSteeringPolicyPtrOutputWithContext(context.Background())
}

func (i *dnsSteeringPolicyPtrType) ToDnsSteeringPolicyPtrOutputWithContext(ctx context.Context) DnsSteeringPolicyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DnsSteeringPolicyPtrOutput)
}

// DnsSteeringPolicyArrayInput is an input type that accepts DnsSteeringPolicyArray and DnsSteeringPolicyArrayOutput values.
// You can construct a concrete instance of `DnsSteeringPolicyArrayInput` via:
//
//          DnsSteeringPolicyArray{ DnsSteeringPolicyArgs{...} }
type DnsSteeringPolicyArrayInput interface {
	pulumi.Input

	ToDnsSteeringPolicyArrayOutput() DnsSteeringPolicyArrayOutput
	ToDnsSteeringPolicyArrayOutputWithContext(context.Context) DnsSteeringPolicyArrayOutput
}

type DnsSteeringPolicyArray []DnsSteeringPolicyInput

func (DnsSteeringPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DnsSteeringPolicy)(nil)).Elem()
}

func (i DnsSteeringPolicyArray) ToDnsSteeringPolicyArrayOutput() DnsSteeringPolicyArrayOutput {
	return i.ToDnsSteeringPolicyArrayOutputWithContext(context.Background())
}

func (i DnsSteeringPolicyArray) ToDnsSteeringPolicyArrayOutputWithContext(ctx context.Context) DnsSteeringPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DnsSteeringPolicyArrayOutput)
}

// DnsSteeringPolicyMapInput is an input type that accepts DnsSteeringPolicyMap and DnsSteeringPolicyMapOutput values.
// You can construct a concrete instance of `DnsSteeringPolicyMapInput` via:
//
//          DnsSteeringPolicyMap{ "key": DnsSteeringPolicyArgs{...} }
type DnsSteeringPolicyMapInput interface {
	pulumi.Input

	ToDnsSteeringPolicyMapOutput() DnsSteeringPolicyMapOutput
	ToDnsSteeringPolicyMapOutputWithContext(context.Context) DnsSteeringPolicyMapOutput
}

type DnsSteeringPolicyMap map[string]DnsSteeringPolicyInput

func (DnsSteeringPolicyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DnsSteeringPolicy)(nil)).Elem()
}

func (i DnsSteeringPolicyMap) ToDnsSteeringPolicyMapOutput() DnsSteeringPolicyMapOutput {
	return i.ToDnsSteeringPolicyMapOutputWithContext(context.Background())
}

func (i DnsSteeringPolicyMap) ToDnsSteeringPolicyMapOutputWithContext(ctx context.Context) DnsSteeringPolicyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DnsSteeringPolicyMapOutput)
}

type DnsSteeringPolicyOutput struct {
	*pulumi.OutputState
}

func (DnsSteeringPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DnsSteeringPolicy)(nil))
}

func (o DnsSteeringPolicyOutput) ToDnsSteeringPolicyOutput() DnsSteeringPolicyOutput {
	return o
}

func (o DnsSteeringPolicyOutput) ToDnsSteeringPolicyOutputWithContext(ctx context.Context) DnsSteeringPolicyOutput {
	return o
}

func (o DnsSteeringPolicyOutput) ToDnsSteeringPolicyPtrOutput() DnsSteeringPolicyPtrOutput {
	return o.ToDnsSteeringPolicyPtrOutputWithContext(context.Background())
}

func (o DnsSteeringPolicyOutput) ToDnsSteeringPolicyPtrOutputWithContext(ctx context.Context) DnsSteeringPolicyPtrOutput {
	return o.ApplyT(func(v DnsSteeringPolicy) *DnsSteeringPolicy {
		return &v
	}).(DnsSteeringPolicyPtrOutput)
}

type DnsSteeringPolicyPtrOutput struct {
	*pulumi.OutputState
}

func (DnsSteeringPolicyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DnsSteeringPolicy)(nil))
}

func (o DnsSteeringPolicyPtrOutput) ToDnsSteeringPolicyPtrOutput() DnsSteeringPolicyPtrOutput {
	return o
}

func (o DnsSteeringPolicyPtrOutput) ToDnsSteeringPolicyPtrOutputWithContext(ctx context.Context) DnsSteeringPolicyPtrOutput {
	return o
}

type DnsSteeringPolicyArrayOutput struct{ *pulumi.OutputState }

func (DnsSteeringPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DnsSteeringPolicy)(nil))
}

func (o DnsSteeringPolicyArrayOutput) ToDnsSteeringPolicyArrayOutput() DnsSteeringPolicyArrayOutput {
	return o
}

func (o DnsSteeringPolicyArrayOutput) ToDnsSteeringPolicyArrayOutputWithContext(ctx context.Context) DnsSteeringPolicyArrayOutput {
	return o
}

func (o DnsSteeringPolicyArrayOutput) Index(i pulumi.IntInput) DnsSteeringPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DnsSteeringPolicy {
		return vs[0].([]DnsSteeringPolicy)[vs[1].(int)]
	}).(DnsSteeringPolicyOutput)
}

type DnsSteeringPolicyMapOutput struct{ *pulumi.OutputState }

func (DnsSteeringPolicyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]DnsSteeringPolicy)(nil))
}

func (o DnsSteeringPolicyMapOutput) ToDnsSteeringPolicyMapOutput() DnsSteeringPolicyMapOutput {
	return o
}

func (o DnsSteeringPolicyMapOutput) ToDnsSteeringPolicyMapOutputWithContext(ctx context.Context) DnsSteeringPolicyMapOutput {
	return o
}

func (o DnsSteeringPolicyMapOutput) MapIndex(k pulumi.StringInput) DnsSteeringPolicyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) DnsSteeringPolicy {
		return vs[0].(map[string]DnsSteeringPolicy)[vs[1].(string)]
	}).(DnsSteeringPolicyOutput)
}

func init() {
	pulumi.RegisterOutputType(DnsSteeringPolicyOutput{})
	pulumi.RegisterOutputType(DnsSteeringPolicyPtrOutput{})
	pulumi.RegisterOutputType(DnsSteeringPolicyArrayOutput{})
	pulumi.RegisterOutputType(DnsSteeringPolicyMapOutput{})
}
