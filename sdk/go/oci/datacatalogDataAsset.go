// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package oci

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource provides the Data Asset resource in Oracle Cloud Infrastructure Data Catalog service.
//
// Create a new data asset.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-oci/sdk/go/oci"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := oci.NewDatacatalogDataAsset(ctx, "testDataAsset", &oci.DatacatalogDataAssetArgs{
// 			CatalogId:   pulumi.Any(oci_datacatalog_catalog.Test_catalog.Id),
// 			DisplayName: pulumi.Any(_var.Data_asset_display_name),
// 			TypeKey:     pulumi.Any(_var.Data_asset_type_key),
// 			Description: pulumi.Any(_var.Data_asset_description),
// 			Properties:  pulumi.Any(_var.Data_asset_properties),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// DataAssets can be imported using the `id`, e.g.
//
// ```sh
//  $ pulumi import oci:index/datacatalogDataAsset:DatacatalogDataAsset test_data_asset "catalogs/{catalogId}/dataAssets/{dataAssetKey}"
// ```
type DatacatalogDataAsset struct {
	pulumi.CustomResourceState

	// Unique catalog identifier.
	CatalogId pulumi.StringOutput `pulumi:"catalogId"`
	// OCID of the user who created the data asset.
	CreatedById pulumi.StringOutput `pulumi:"createdById"`
	// (Updatable) Detailed description of the data asset.
	Description pulumi.StringOutput `pulumi:"description"`
	// (Updatable) A user-friendly display name. Does not have to be unique, and it's changeable. Avoid entering confidential information.
	DisplayName pulumi.StringOutput `pulumi:"displayName"`
	// External URI that can be used to reference the object. Format will differ based on the type of object.
	ExternalKey pulumi.StringOutput `pulumi:"externalKey"`
	// Unique data asset key that is immutable.
	Key pulumi.StringOutput `pulumi:"key"`
	// A map of maps that contains the properties which are specific to the asset type. Each data asset type definition defines it's set of required and optional properties. The map keys are category names and the values are maps of property name to property value. Every property is contained inside of a category. Most data assets have required properties within the "default" category. Example: `{"properties": { "default": { "host": "host1", "port": "1521", "database": "orcl"}}}`
	Properties pulumi.MapOutput `pulumi:"properties"`
	// The current state of the data asset.
	State pulumi.StringOutput `pulumi:"state"`
	// The date and time the data asset was created, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339). Example: `2019-03-25T21:10:29.600Z`
	TimeCreated pulumi.StringOutput `pulumi:"timeCreated"`
	// The last time that any change was made to the data asset. An [RFC3339](https://tools.ietf.org/html/rfc3339) formatted datetime string.
	TimeUpdated pulumi.StringOutput `pulumi:"timeUpdated"`
	// The key of the data asset type. This can be obtained via the '/types' endpoint.
	TypeKey pulumi.StringOutput `pulumi:"typeKey"`
	// OCID of the user who last modified the data asset.
	UpdatedById pulumi.StringOutput `pulumi:"updatedById"`
	// URI to the data asset instance in the API.
	Uri pulumi.StringOutput `pulumi:"uri"`
}

// NewDatacatalogDataAsset registers a new resource with the given unique name, arguments, and options.
func NewDatacatalogDataAsset(ctx *pulumi.Context,
	name string, args *DatacatalogDataAssetArgs, opts ...pulumi.ResourceOption) (*DatacatalogDataAsset, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CatalogId == nil {
		return nil, errors.New("invalid value for required argument 'CatalogId'")
	}
	if args.DisplayName == nil {
		return nil, errors.New("invalid value for required argument 'DisplayName'")
	}
	if args.TypeKey == nil {
		return nil, errors.New("invalid value for required argument 'TypeKey'")
	}
	var resource DatacatalogDataAsset
	err := ctx.RegisterResource("oci:index/datacatalogDataAsset:DatacatalogDataAsset", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDatacatalogDataAsset gets an existing DatacatalogDataAsset resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDatacatalogDataAsset(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DatacatalogDataAssetState, opts ...pulumi.ResourceOption) (*DatacatalogDataAsset, error) {
	var resource DatacatalogDataAsset
	err := ctx.ReadResource("oci:index/datacatalogDataAsset:DatacatalogDataAsset", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DatacatalogDataAsset resources.
type datacatalogDataAssetState struct {
	// Unique catalog identifier.
	CatalogId *string `pulumi:"catalogId"`
	// OCID of the user who created the data asset.
	CreatedById *string `pulumi:"createdById"`
	// (Updatable) Detailed description of the data asset.
	Description *string `pulumi:"description"`
	// (Updatable) A user-friendly display name. Does not have to be unique, and it's changeable. Avoid entering confidential information.
	DisplayName *string `pulumi:"displayName"`
	// External URI that can be used to reference the object. Format will differ based on the type of object.
	ExternalKey *string `pulumi:"externalKey"`
	// Unique data asset key that is immutable.
	Key *string `pulumi:"key"`
	// A map of maps that contains the properties which are specific to the asset type. Each data asset type definition defines it's set of required and optional properties. The map keys are category names and the values are maps of property name to property value. Every property is contained inside of a category. Most data assets have required properties within the "default" category. Example: `{"properties": { "default": { "host": "host1", "port": "1521", "database": "orcl"}}}`
	Properties map[string]interface{} `pulumi:"properties"`
	// The current state of the data asset.
	State *string `pulumi:"state"`
	// The date and time the data asset was created, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339). Example: `2019-03-25T21:10:29.600Z`
	TimeCreated *string `pulumi:"timeCreated"`
	// The last time that any change was made to the data asset. An [RFC3339](https://tools.ietf.org/html/rfc3339) formatted datetime string.
	TimeUpdated *string `pulumi:"timeUpdated"`
	// The key of the data asset type. This can be obtained via the '/types' endpoint.
	TypeKey *string `pulumi:"typeKey"`
	// OCID of the user who last modified the data asset.
	UpdatedById *string `pulumi:"updatedById"`
	// URI to the data asset instance in the API.
	Uri *string `pulumi:"uri"`
}

type DatacatalogDataAssetState struct {
	// Unique catalog identifier.
	CatalogId pulumi.StringPtrInput
	// OCID of the user who created the data asset.
	CreatedById pulumi.StringPtrInput
	// (Updatable) Detailed description of the data asset.
	Description pulumi.StringPtrInput
	// (Updatable) A user-friendly display name. Does not have to be unique, and it's changeable. Avoid entering confidential information.
	DisplayName pulumi.StringPtrInput
	// External URI that can be used to reference the object. Format will differ based on the type of object.
	ExternalKey pulumi.StringPtrInput
	// Unique data asset key that is immutable.
	Key pulumi.StringPtrInput
	// A map of maps that contains the properties which are specific to the asset type. Each data asset type definition defines it's set of required and optional properties. The map keys are category names and the values are maps of property name to property value. Every property is contained inside of a category. Most data assets have required properties within the "default" category. Example: `{"properties": { "default": { "host": "host1", "port": "1521", "database": "orcl"}}}`
	Properties pulumi.MapInput
	// The current state of the data asset.
	State pulumi.StringPtrInput
	// The date and time the data asset was created, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339). Example: `2019-03-25T21:10:29.600Z`
	TimeCreated pulumi.StringPtrInput
	// The last time that any change was made to the data asset. An [RFC3339](https://tools.ietf.org/html/rfc3339) formatted datetime string.
	TimeUpdated pulumi.StringPtrInput
	// The key of the data asset type. This can be obtained via the '/types' endpoint.
	TypeKey pulumi.StringPtrInput
	// OCID of the user who last modified the data asset.
	UpdatedById pulumi.StringPtrInput
	// URI to the data asset instance in the API.
	Uri pulumi.StringPtrInput
}

func (DatacatalogDataAssetState) ElementType() reflect.Type {
	return reflect.TypeOf((*datacatalogDataAssetState)(nil)).Elem()
}

type datacatalogDataAssetArgs struct {
	// Unique catalog identifier.
	CatalogId string `pulumi:"catalogId"`
	// (Updatable) Detailed description of the data asset.
	Description *string `pulumi:"description"`
	// (Updatable) A user-friendly display name. Does not have to be unique, and it's changeable. Avoid entering confidential information.
	DisplayName string `pulumi:"displayName"`
	// A map of maps that contains the properties which are specific to the asset type. Each data asset type definition defines it's set of required and optional properties. The map keys are category names and the values are maps of property name to property value. Every property is contained inside of a category. Most data assets have required properties within the "default" category. Example: `{"properties": { "default": { "host": "host1", "port": "1521", "database": "orcl"}}}`
	Properties map[string]interface{} `pulumi:"properties"`
	// The key of the data asset type. This can be obtained via the '/types' endpoint.
	TypeKey string `pulumi:"typeKey"`
}

// The set of arguments for constructing a DatacatalogDataAsset resource.
type DatacatalogDataAssetArgs struct {
	// Unique catalog identifier.
	CatalogId pulumi.StringInput
	// (Updatable) Detailed description of the data asset.
	Description pulumi.StringPtrInput
	// (Updatable) A user-friendly display name. Does not have to be unique, and it's changeable. Avoid entering confidential information.
	DisplayName pulumi.StringInput
	// A map of maps that contains the properties which are specific to the asset type. Each data asset type definition defines it's set of required and optional properties. The map keys are category names and the values are maps of property name to property value. Every property is contained inside of a category. Most data assets have required properties within the "default" category. Example: `{"properties": { "default": { "host": "host1", "port": "1521", "database": "orcl"}}}`
	Properties pulumi.MapInput
	// The key of the data asset type. This can be obtained via the '/types' endpoint.
	TypeKey pulumi.StringInput
}

func (DatacatalogDataAssetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*datacatalogDataAssetArgs)(nil)).Elem()
}

type DatacatalogDataAssetInput interface {
	pulumi.Input

	ToDatacatalogDataAssetOutput() DatacatalogDataAssetOutput
	ToDatacatalogDataAssetOutputWithContext(ctx context.Context) DatacatalogDataAssetOutput
}

func (*DatacatalogDataAsset) ElementType() reflect.Type {
	return reflect.TypeOf((*DatacatalogDataAsset)(nil))
}

func (i *DatacatalogDataAsset) ToDatacatalogDataAssetOutput() DatacatalogDataAssetOutput {
	return i.ToDatacatalogDataAssetOutputWithContext(context.Background())
}

func (i *DatacatalogDataAsset) ToDatacatalogDataAssetOutputWithContext(ctx context.Context) DatacatalogDataAssetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatacatalogDataAssetOutput)
}

func (i *DatacatalogDataAsset) ToDatacatalogDataAssetPtrOutput() DatacatalogDataAssetPtrOutput {
	return i.ToDatacatalogDataAssetPtrOutputWithContext(context.Background())
}

func (i *DatacatalogDataAsset) ToDatacatalogDataAssetPtrOutputWithContext(ctx context.Context) DatacatalogDataAssetPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatacatalogDataAssetPtrOutput)
}

type DatacatalogDataAssetPtrInput interface {
	pulumi.Input

	ToDatacatalogDataAssetPtrOutput() DatacatalogDataAssetPtrOutput
	ToDatacatalogDataAssetPtrOutputWithContext(ctx context.Context) DatacatalogDataAssetPtrOutput
}

type datacatalogDataAssetPtrType DatacatalogDataAssetArgs

func (*datacatalogDataAssetPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DatacatalogDataAsset)(nil))
}

func (i *datacatalogDataAssetPtrType) ToDatacatalogDataAssetPtrOutput() DatacatalogDataAssetPtrOutput {
	return i.ToDatacatalogDataAssetPtrOutputWithContext(context.Background())
}

func (i *datacatalogDataAssetPtrType) ToDatacatalogDataAssetPtrOutputWithContext(ctx context.Context) DatacatalogDataAssetPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatacatalogDataAssetPtrOutput)
}

// DatacatalogDataAssetArrayInput is an input type that accepts DatacatalogDataAssetArray and DatacatalogDataAssetArrayOutput values.
// You can construct a concrete instance of `DatacatalogDataAssetArrayInput` via:
//
//          DatacatalogDataAssetArray{ DatacatalogDataAssetArgs{...} }
type DatacatalogDataAssetArrayInput interface {
	pulumi.Input

	ToDatacatalogDataAssetArrayOutput() DatacatalogDataAssetArrayOutput
	ToDatacatalogDataAssetArrayOutputWithContext(context.Context) DatacatalogDataAssetArrayOutput
}

type DatacatalogDataAssetArray []DatacatalogDataAssetInput

func (DatacatalogDataAssetArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DatacatalogDataAsset)(nil)).Elem()
}

func (i DatacatalogDataAssetArray) ToDatacatalogDataAssetArrayOutput() DatacatalogDataAssetArrayOutput {
	return i.ToDatacatalogDataAssetArrayOutputWithContext(context.Background())
}

func (i DatacatalogDataAssetArray) ToDatacatalogDataAssetArrayOutputWithContext(ctx context.Context) DatacatalogDataAssetArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatacatalogDataAssetArrayOutput)
}

// DatacatalogDataAssetMapInput is an input type that accepts DatacatalogDataAssetMap and DatacatalogDataAssetMapOutput values.
// You can construct a concrete instance of `DatacatalogDataAssetMapInput` via:
//
//          DatacatalogDataAssetMap{ "key": DatacatalogDataAssetArgs{...} }
type DatacatalogDataAssetMapInput interface {
	pulumi.Input

	ToDatacatalogDataAssetMapOutput() DatacatalogDataAssetMapOutput
	ToDatacatalogDataAssetMapOutputWithContext(context.Context) DatacatalogDataAssetMapOutput
}

type DatacatalogDataAssetMap map[string]DatacatalogDataAssetInput

func (DatacatalogDataAssetMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DatacatalogDataAsset)(nil)).Elem()
}

func (i DatacatalogDataAssetMap) ToDatacatalogDataAssetMapOutput() DatacatalogDataAssetMapOutput {
	return i.ToDatacatalogDataAssetMapOutputWithContext(context.Background())
}

func (i DatacatalogDataAssetMap) ToDatacatalogDataAssetMapOutputWithContext(ctx context.Context) DatacatalogDataAssetMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatacatalogDataAssetMapOutput)
}

type DatacatalogDataAssetOutput struct {
	*pulumi.OutputState
}

func (DatacatalogDataAssetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatacatalogDataAsset)(nil))
}

func (o DatacatalogDataAssetOutput) ToDatacatalogDataAssetOutput() DatacatalogDataAssetOutput {
	return o
}

func (o DatacatalogDataAssetOutput) ToDatacatalogDataAssetOutputWithContext(ctx context.Context) DatacatalogDataAssetOutput {
	return o
}

func (o DatacatalogDataAssetOutput) ToDatacatalogDataAssetPtrOutput() DatacatalogDataAssetPtrOutput {
	return o.ToDatacatalogDataAssetPtrOutputWithContext(context.Background())
}

func (o DatacatalogDataAssetOutput) ToDatacatalogDataAssetPtrOutputWithContext(ctx context.Context) DatacatalogDataAssetPtrOutput {
	return o.ApplyT(func(v DatacatalogDataAsset) *DatacatalogDataAsset {
		return &v
	}).(DatacatalogDataAssetPtrOutput)
}

type DatacatalogDataAssetPtrOutput struct {
	*pulumi.OutputState
}

func (DatacatalogDataAssetPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DatacatalogDataAsset)(nil))
}

func (o DatacatalogDataAssetPtrOutput) ToDatacatalogDataAssetPtrOutput() DatacatalogDataAssetPtrOutput {
	return o
}

func (o DatacatalogDataAssetPtrOutput) ToDatacatalogDataAssetPtrOutputWithContext(ctx context.Context) DatacatalogDataAssetPtrOutput {
	return o
}

type DatacatalogDataAssetArrayOutput struct{ *pulumi.OutputState }

func (DatacatalogDataAssetArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DatacatalogDataAsset)(nil))
}

func (o DatacatalogDataAssetArrayOutput) ToDatacatalogDataAssetArrayOutput() DatacatalogDataAssetArrayOutput {
	return o
}

func (o DatacatalogDataAssetArrayOutput) ToDatacatalogDataAssetArrayOutputWithContext(ctx context.Context) DatacatalogDataAssetArrayOutput {
	return o
}

func (o DatacatalogDataAssetArrayOutput) Index(i pulumi.IntInput) DatacatalogDataAssetOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DatacatalogDataAsset {
		return vs[0].([]DatacatalogDataAsset)[vs[1].(int)]
	}).(DatacatalogDataAssetOutput)
}

type DatacatalogDataAssetMapOutput struct{ *pulumi.OutputState }

func (DatacatalogDataAssetMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]DatacatalogDataAsset)(nil))
}

func (o DatacatalogDataAssetMapOutput) ToDatacatalogDataAssetMapOutput() DatacatalogDataAssetMapOutput {
	return o
}

func (o DatacatalogDataAssetMapOutput) ToDatacatalogDataAssetMapOutputWithContext(ctx context.Context) DatacatalogDataAssetMapOutput {
	return o
}

func (o DatacatalogDataAssetMapOutput) MapIndex(k pulumi.StringInput) DatacatalogDataAssetOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) DatacatalogDataAsset {
		return vs[0].(map[string]DatacatalogDataAsset)[vs[1].(string)]
	}).(DatacatalogDataAssetOutput)
}

func init() {
	pulumi.RegisterOutputType(DatacatalogDataAssetOutput{})
	pulumi.RegisterOutputType(DatacatalogDataAssetPtrOutput{})
	pulumi.RegisterOutputType(DatacatalogDataAssetArrayOutput{})
	pulumi.RegisterOutputType(DatacatalogDataAssetMapOutput{})
}
