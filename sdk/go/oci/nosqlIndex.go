// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package oci

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource provides the Index resource in Oracle Cloud Infrastructure NoSQL Database service.
//
// Create a new index on the table identified by tableNameOrId.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-oci/sdk/go/oci"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := oci.NewNosqlIndex(ctx, "testIndex", &oci.NosqlIndexArgs{
// 			Keys: NosqlIndexKeyArray{
// 				&NosqlIndexKeyArgs{
// 					ColumnName:    pulumi.Any(_var.Index_keys_column_name),
// 					JsonFieldType: pulumi.Any(_var.Index_keys_json_field_type),
// 					JsonPath:      pulumi.Any(_var.Index_keys_json_path),
// 				},
// 			},
// 			TableNameOrId: pulumi.Any(oci_nosql_table_name_or.Test_table_name_or.Id),
// 			CompartmentId: pulumi.Any(_var.Compartment_id),
// 			IsIfNotExists: pulumi.Any(_var.Index_is_if_not_exists),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// Indexes can be imported using the `id`, e.g.
//
// ```sh
//  $ pulumi import oci:index/nosqlIndex:NosqlIndex test_index "tables/{tableNameOrId}/indexes/{indexName}"
// ```
type NosqlIndex struct {
	pulumi.CustomResourceState

	// The OCID of the table's compartment.  Required if the tableNameOrId path parameter is a table name. Optional if tableNameOrId is an OCID.  If tableNameOrId is an OCID, and compartmentId is supplied, the latter must match the identified table's compartmentId.
	CompartmentId pulumi.StringOutput `pulumi:"compartmentId"`
	// If true, the operation completes successfully even when the index exists.  Otherwise, an attempt to create an index that already exists will return an error.
	IsIfNotExists pulumi.BoolOutput `pulumi:"isIfNotExists"`
	// A set of keys for a secondary index.
	Keys NosqlIndexKeyArrayOutput `pulumi:"keys"`
	// A message describing the current state in more detail.
	LifecycleDetails pulumi.StringOutput `pulumi:"lifecycleDetails"`
	// Index name.
	Name pulumi.StringOutput `pulumi:"name"`
	// The state of an index.
	State pulumi.StringOutput `pulumi:"state"`
	// the OCID of the table to which this index belongs.
	TableId pulumi.StringOutput `pulumi:"tableId"`
	// The name of the table to which this index belongs.
	TableName pulumi.StringOutput `pulumi:"tableName"`
	// A table name within the compartment, or a table OCID.
	TableNameOrId pulumi.StringOutput `pulumi:"tableNameOrId"`
}

// NewNosqlIndex registers a new resource with the given unique name, arguments, and options.
func NewNosqlIndex(ctx *pulumi.Context,
	name string, args *NosqlIndexArgs, opts ...pulumi.ResourceOption) (*NosqlIndex, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Keys == nil {
		return nil, errors.New("invalid value for required argument 'Keys'")
	}
	if args.TableNameOrId == nil {
		return nil, errors.New("invalid value for required argument 'TableNameOrId'")
	}
	var resource NosqlIndex
	err := ctx.RegisterResource("oci:index/nosqlIndex:NosqlIndex", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetNosqlIndex gets an existing NosqlIndex resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetNosqlIndex(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *NosqlIndexState, opts ...pulumi.ResourceOption) (*NosqlIndex, error) {
	var resource NosqlIndex
	err := ctx.ReadResource("oci:index/nosqlIndex:NosqlIndex", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering NosqlIndex resources.
type nosqlIndexState struct {
	// The OCID of the table's compartment.  Required if the tableNameOrId path parameter is a table name. Optional if tableNameOrId is an OCID.  If tableNameOrId is an OCID, and compartmentId is supplied, the latter must match the identified table's compartmentId.
	CompartmentId *string `pulumi:"compartmentId"`
	// If true, the operation completes successfully even when the index exists.  Otherwise, an attempt to create an index that already exists will return an error.
	IsIfNotExists *bool `pulumi:"isIfNotExists"`
	// A set of keys for a secondary index.
	Keys []NosqlIndexKey `pulumi:"keys"`
	// A message describing the current state in more detail.
	LifecycleDetails *string `pulumi:"lifecycleDetails"`
	// Index name.
	Name *string `pulumi:"name"`
	// The state of an index.
	State *string `pulumi:"state"`
	// the OCID of the table to which this index belongs.
	TableId *string `pulumi:"tableId"`
	// The name of the table to which this index belongs.
	TableName *string `pulumi:"tableName"`
	// A table name within the compartment, or a table OCID.
	TableNameOrId *string `pulumi:"tableNameOrId"`
}

type NosqlIndexState struct {
	// The OCID of the table's compartment.  Required if the tableNameOrId path parameter is a table name. Optional if tableNameOrId is an OCID.  If tableNameOrId is an OCID, and compartmentId is supplied, the latter must match the identified table's compartmentId.
	CompartmentId pulumi.StringPtrInput
	// If true, the operation completes successfully even when the index exists.  Otherwise, an attempt to create an index that already exists will return an error.
	IsIfNotExists pulumi.BoolPtrInput
	// A set of keys for a secondary index.
	Keys NosqlIndexKeyArrayInput
	// A message describing the current state in more detail.
	LifecycleDetails pulumi.StringPtrInput
	// Index name.
	Name pulumi.StringPtrInput
	// The state of an index.
	State pulumi.StringPtrInput
	// the OCID of the table to which this index belongs.
	TableId pulumi.StringPtrInput
	// The name of the table to which this index belongs.
	TableName pulumi.StringPtrInput
	// A table name within the compartment, or a table OCID.
	TableNameOrId pulumi.StringPtrInput
}

func (NosqlIndexState) ElementType() reflect.Type {
	return reflect.TypeOf((*nosqlIndexState)(nil)).Elem()
}

type nosqlIndexArgs struct {
	// The OCID of the table's compartment.  Required if the tableNameOrId path parameter is a table name. Optional if tableNameOrId is an OCID.  If tableNameOrId is an OCID, and compartmentId is supplied, the latter must match the identified table's compartmentId.
	CompartmentId *string `pulumi:"compartmentId"`
	// If true, the operation completes successfully even when the index exists.  Otherwise, an attempt to create an index that already exists will return an error.
	IsIfNotExists *bool `pulumi:"isIfNotExists"`
	// A set of keys for a secondary index.
	Keys []NosqlIndexKey `pulumi:"keys"`
	// Index name.
	Name *string `pulumi:"name"`
	// A table name within the compartment, or a table OCID.
	TableNameOrId string `pulumi:"tableNameOrId"`
}

// The set of arguments for constructing a NosqlIndex resource.
type NosqlIndexArgs struct {
	// The OCID of the table's compartment.  Required if the tableNameOrId path parameter is a table name. Optional if tableNameOrId is an OCID.  If tableNameOrId is an OCID, and compartmentId is supplied, the latter must match the identified table's compartmentId.
	CompartmentId pulumi.StringPtrInput
	// If true, the operation completes successfully even when the index exists.  Otherwise, an attempt to create an index that already exists will return an error.
	IsIfNotExists pulumi.BoolPtrInput
	// A set of keys for a secondary index.
	Keys NosqlIndexKeyArrayInput
	// Index name.
	Name pulumi.StringPtrInput
	// A table name within the compartment, or a table OCID.
	TableNameOrId pulumi.StringInput
}

func (NosqlIndexArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*nosqlIndexArgs)(nil)).Elem()
}

type NosqlIndexInput interface {
	pulumi.Input

	ToNosqlIndexOutput() NosqlIndexOutput
	ToNosqlIndexOutputWithContext(ctx context.Context) NosqlIndexOutput
}

func (*NosqlIndex) ElementType() reflect.Type {
	return reflect.TypeOf((*NosqlIndex)(nil))
}

func (i *NosqlIndex) ToNosqlIndexOutput() NosqlIndexOutput {
	return i.ToNosqlIndexOutputWithContext(context.Background())
}

func (i *NosqlIndex) ToNosqlIndexOutputWithContext(ctx context.Context) NosqlIndexOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NosqlIndexOutput)
}

func (i *NosqlIndex) ToNosqlIndexPtrOutput() NosqlIndexPtrOutput {
	return i.ToNosqlIndexPtrOutputWithContext(context.Background())
}

func (i *NosqlIndex) ToNosqlIndexPtrOutputWithContext(ctx context.Context) NosqlIndexPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NosqlIndexPtrOutput)
}

type NosqlIndexPtrInput interface {
	pulumi.Input

	ToNosqlIndexPtrOutput() NosqlIndexPtrOutput
	ToNosqlIndexPtrOutputWithContext(ctx context.Context) NosqlIndexPtrOutput
}

type nosqlIndexPtrType NosqlIndexArgs

func (*nosqlIndexPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**NosqlIndex)(nil))
}

func (i *nosqlIndexPtrType) ToNosqlIndexPtrOutput() NosqlIndexPtrOutput {
	return i.ToNosqlIndexPtrOutputWithContext(context.Background())
}

func (i *nosqlIndexPtrType) ToNosqlIndexPtrOutputWithContext(ctx context.Context) NosqlIndexPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NosqlIndexPtrOutput)
}

// NosqlIndexArrayInput is an input type that accepts NosqlIndexArray and NosqlIndexArrayOutput values.
// You can construct a concrete instance of `NosqlIndexArrayInput` via:
//
//          NosqlIndexArray{ NosqlIndexArgs{...} }
type NosqlIndexArrayInput interface {
	pulumi.Input

	ToNosqlIndexArrayOutput() NosqlIndexArrayOutput
	ToNosqlIndexArrayOutputWithContext(context.Context) NosqlIndexArrayOutput
}

type NosqlIndexArray []NosqlIndexInput

func (NosqlIndexArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*NosqlIndex)(nil)).Elem()
}

func (i NosqlIndexArray) ToNosqlIndexArrayOutput() NosqlIndexArrayOutput {
	return i.ToNosqlIndexArrayOutputWithContext(context.Background())
}

func (i NosqlIndexArray) ToNosqlIndexArrayOutputWithContext(ctx context.Context) NosqlIndexArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NosqlIndexArrayOutput)
}

// NosqlIndexMapInput is an input type that accepts NosqlIndexMap and NosqlIndexMapOutput values.
// You can construct a concrete instance of `NosqlIndexMapInput` via:
//
//          NosqlIndexMap{ "key": NosqlIndexArgs{...} }
type NosqlIndexMapInput interface {
	pulumi.Input

	ToNosqlIndexMapOutput() NosqlIndexMapOutput
	ToNosqlIndexMapOutputWithContext(context.Context) NosqlIndexMapOutput
}

type NosqlIndexMap map[string]NosqlIndexInput

func (NosqlIndexMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*NosqlIndex)(nil)).Elem()
}

func (i NosqlIndexMap) ToNosqlIndexMapOutput() NosqlIndexMapOutput {
	return i.ToNosqlIndexMapOutputWithContext(context.Background())
}

func (i NosqlIndexMap) ToNosqlIndexMapOutputWithContext(ctx context.Context) NosqlIndexMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(NosqlIndexMapOutput)
}

type NosqlIndexOutput struct {
	*pulumi.OutputState
}

func (NosqlIndexOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*NosqlIndex)(nil))
}

func (o NosqlIndexOutput) ToNosqlIndexOutput() NosqlIndexOutput {
	return o
}

func (o NosqlIndexOutput) ToNosqlIndexOutputWithContext(ctx context.Context) NosqlIndexOutput {
	return o
}

func (o NosqlIndexOutput) ToNosqlIndexPtrOutput() NosqlIndexPtrOutput {
	return o.ToNosqlIndexPtrOutputWithContext(context.Background())
}

func (o NosqlIndexOutput) ToNosqlIndexPtrOutputWithContext(ctx context.Context) NosqlIndexPtrOutput {
	return o.ApplyT(func(v NosqlIndex) *NosqlIndex {
		return &v
	}).(NosqlIndexPtrOutput)
}

type NosqlIndexPtrOutput struct {
	*pulumi.OutputState
}

func (NosqlIndexPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**NosqlIndex)(nil))
}

func (o NosqlIndexPtrOutput) ToNosqlIndexPtrOutput() NosqlIndexPtrOutput {
	return o
}

func (o NosqlIndexPtrOutput) ToNosqlIndexPtrOutputWithContext(ctx context.Context) NosqlIndexPtrOutput {
	return o
}

type NosqlIndexArrayOutput struct{ *pulumi.OutputState }

func (NosqlIndexArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]NosqlIndex)(nil))
}

func (o NosqlIndexArrayOutput) ToNosqlIndexArrayOutput() NosqlIndexArrayOutput {
	return o
}

func (o NosqlIndexArrayOutput) ToNosqlIndexArrayOutputWithContext(ctx context.Context) NosqlIndexArrayOutput {
	return o
}

func (o NosqlIndexArrayOutput) Index(i pulumi.IntInput) NosqlIndexOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) NosqlIndex {
		return vs[0].([]NosqlIndex)[vs[1].(int)]
	}).(NosqlIndexOutput)
}

type NosqlIndexMapOutput struct{ *pulumi.OutputState }

func (NosqlIndexMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]NosqlIndex)(nil))
}

func (o NosqlIndexMapOutput) ToNosqlIndexMapOutput() NosqlIndexMapOutput {
	return o
}

func (o NosqlIndexMapOutput) ToNosqlIndexMapOutputWithContext(ctx context.Context) NosqlIndexMapOutput {
	return o
}

func (o NosqlIndexMapOutput) MapIndex(k pulumi.StringInput) NosqlIndexOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) NosqlIndex {
		return vs[0].(map[string]NosqlIndex)[vs[1].(string)]
	}).(NosqlIndexOutput)
}

func init() {
	pulumi.RegisterOutputType(NosqlIndexOutput{})
	pulumi.RegisterOutputType(NosqlIndexPtrOutput{})
	pulumi.RegisterOutputType(NosqlIndexArrayOutput{})
	pulumi.RegisterOutputType(NosqlIndexMapOutput{})
}
