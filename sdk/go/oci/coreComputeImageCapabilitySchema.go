// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package oci

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource provides the Compute Image Capability Schema resource in Oracle Cloud Infrastructure Core service.
//
// Creates compute image capability schema.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-oci/sdk/go/oci"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := oci.NewCoreComputeImageCapabilitySchema(ctx, "testComputeImageCapabilitySchema", &oci.CoreComputeImageCapabilitySchemaArgs{
// 			CompartmentId: pulumi.Any(_var.Compartment_id),
// 			ComputeGlobalImageCapabilitySchemaVersionName: pulumi.Any(_var.Compute_image_capability_schema_compute_global_image_capability_schema_version_name),
// 			ImageId: pulumi.Any(oci_core_image.Test_image.Id),
// 			SchemaData: pulumi.AnyMap{
// 				pulumi.Any{
// 					DescriptorType: _var.Compute_image_capability_schema_schema_data_descriptor_type,
// 					Source:         _var.Compute_image_capability_schema_schema_data_source,
// 					DefaultValue:   _var.Compute_image_capability_schema_schema_data_default_value,
// 					Values:         _var.Compute_image_capability_schema_schema_data_values,
// 				},
// 			},
// 			DefinedTags: pulumi.AnyMap{
// 				"Operations.CostCenter": pulumi.Any("42"),
// 			},
// 			DisplayName: pulumi.Any(_var.Compute_image_capability_schema_display_name),
// 			FreeformTags: pulumi.AnyMap{
// 				"Department": pulumi.Any("Finance"),
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// ComputeImageCapabilitySchemas can be imported using the `id`, e.g.
//
// ```sh
//  $ pulumi import oci:index/coreComputeImageCapabilitySchema:CoreComputeImageCapabilitySchema test_compute_image_capability_schema "id"
// ```
type CoreComputeImageCapabilitySchema struct {
	pulumi.CustomResourceState

	// (Updatable) The OCID of the compartment that contains the resource.
	CompartmentId pulumi.StringOutput `pulumi:"compartmentId"`
	// The ocid of the compute global image capability schema
	ComputeGlobalImageCapabilitySchemaId pulumi.StringOutput `pulumi:"computeGlobalImageCapabilitySchemaId"`
	// The name of the compute global image capability schema version
	ComputeGlobalImageCapabilitySchemaVersionName pulumi.StringOutput `pulumi:"computeGlobalImageCapabilitySchemaVersionName"`
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Operations.CostCenter": "42"}`
	DefinedTags pulumi.MapOutput `pulumi:"definedTags"`
	// (Updatable) A user-friendly name for the compute image capability schema
	DisplayName pulumi.StringOutput `pulumi:"displayName"`
	// (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Department": "Finance"}`
	FreeformTags pulumi.MapOutput `pulumi:"freeformTags"`
	// The ocid of the image
	ImageId pulumi.StringOutput `pulumi:"imageId"`
	// (Updatable) The map of each capability name to its ImageCapabilitySchemaDescriptor.
	SchemaData pulumi.MapOutput `pulumi:"schemaData"`
	// The date and time the compute image capability schema was created, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).  Example: `2016-08-25T21:10:29.600Z`
	TimeCreated pulumi.StringOutput `pulumi:"timeCreated"`
}

// NewCoreComputeImageCapabilitySchema registers a new resource with the given unique name, arguments, and options.
func NewCoreComputeImageCapabilitySchema(ctx *pulumi.Context,
	name string, args *CoreComputeImageCapabilitySchemaArgs, opts ...pulumi.ResourceOption) (*CoreComputeImageCapabilitySchema, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CompartmentId == nil {
		return nil, errors.New("invalid value for required argument 'CompartmentId'")
	}
	if args.ComputeGlobalImageCapabilitySchemaVersionName == nil {
		return nil, errors.New("invalid value for required argument 'ComputeGlobalImageCapabilitySchemaVersionName'")
	}
	if args.ImageId == nil {
		return nil, errors.New("invalid value for required argument 'ImageId'")
	}
	if args.SchemaData == nil {
		return nil, errors.New("invalid value for required argument 'SchemaData'")
	}
	var resource CoreComputeImageCapabilitySchema
	err := ctx.RegisterResource("oci:index/coreComputeImageCapabilitySchema:CoreComputeImageCapabilitySchema", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCoreComputeImageCapabilitySchema gets an existing CoreComputeImageCapabilitySchema resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCoreComputeImageCapabilitySchema(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CoreComputeImageCapabilitySchemaState, opts ...pulumi.ResourceOption) (*CoreComputeImageCapabilitySchema, error) {
	var resource CoreComputeImageCapabilitySchema
	err := ctx.ReadResource("oci:index/coreComputeImageCapabilitySchema:CoreComputeImageCapabilitySchema", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CoreComputeImageCapabilitySchema resources.
type coreComputeImageCapabilitySchemaState struct {
	// (Updatable) The OCID of the compartment that contains the resource.
	CompartmentId *string `pulumi:"compartmentId"`
	// The ocid of the compute global image capability schema
	ComputeGlobalImageCapabilitySchemaId *string `pulumi:"computeGlobalImageCapabilitySchemaId"`
	// The name of the compute global image capability schema version
	ComputeGlobalImageCapabilitySchemaVersionName *string `pulumi:"computeGlobalImageCapabilitySchemaVersionName"`
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Operations.CostCenter": "42"}`
	DefinedTags map[string]interface{} `pulumi:"definedTags"`
	// (Updatable) A user-friendly name for the compute image capability schema
	DisplayName *string `pulumi:"displayName"`
	// (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Department": "Finance"}`
	FreeformTags map[string]interface{} `pulumi:"freeformTags"`
	// The ocid of the image
	ImageId *string `pulumi:"imageId"`
	// (Updatable) The map of each capability name to its ImageCapabilitySchemaDescriptor.
	SchemaData map[string]interface{} `pulumi:"schemaData"`
	// The date and time the compute image capability schema was created, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).  Example: `2016-08-25T21:10:29.600Z`
	TimeCreated *string `pulumi:"timeCreated"`
}

type CoreComputeImageCapabilitySchemaState struct {
	// (Updatable) The OCID of the compartment that contains the resource.
	CompartmentId pulumi.StringPtrInput
	// The ocid of the compute global image capability schema
	ComputeGlobalImageCapabilitySchemaId pulumi.StringPtrInput
	// The name of the compute global image capability schema version
	ComputeGlobalImageCapabilitySchemaVersionName pulumi.StringPtrInput
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Operations.CostCenter": "42"}`
	DefinedTags pulumi.MapInput
	// (Updatable) A user-friendly name for the compute image capability schema
	DisplayName pulumi.StringPtrInput
	// (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Department": "Finance"}`
	FreeformTags pulumi.MapInput
	// The ocid of the image
	ImageId pulumi.StringPtrInput
	// (Updatable) The map of each capability name to its ImageCapabilitySchemaDescriptor.
	SchemaData pulumi.MapInput
	// The date and time the compute image capability schema was created, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).  Example: `2016-08-25T21:10:29.600Z`
	TimeCreated pulumi.StringPtrInput
}

func (CoreComputeImageCapabilitySchemaState) ElementType() reflect.Type {
	return reflect.TypeOf((*coreComputeImageCapabilitySchemaState)(nil)).Elem()
}

type coreComputeImageCapabilitySchemaArgs struct {
	// (Updatable) The OCID of the compartment that contains the resource.
	CompartmentId string `pulumi:"compartmentId"`
	// The name of the compute global image capability schema version
	ComputeGlobalImageCapabilitySchemaVersionName string `pulumi:"computeGlobalImageCapabilitySchemaVersionName"`
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Operations.CostCenter": "42"}`
	DefinedTags map[string]interface{} `pulumi:"definedTags"`
	// (Updatable) A user-friendly name for the compute image capability schema
	DisplayName *string `pulumi:"displayName"`
	// (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Department": "Finance"}`
	FreeformTags map[string]interface{} `pulumi:"freeformTags"`
	// The ocid of the image
	ImageId string `pulumi:"imageId"`
	// (Updatable) The map of each capability name to its ImageCapabilitySchemaDescriptor.
	SchemaData map[string]interface{} `pulumi:"schemaData"`
}

// The set of arguments for constructing a CoreComputeImageCapabilitySchema resource.
type CoreComputeImageCapabilitySchemaArgs struct {
	// (Updatable) The OCID of the compartment that contains the resource.
	CompartmentId pulumi.StringInput
	// The name of the compute global image capability schema version
	ComputeGlobalImageCapabilitySchemaVersionName pulumi.StringInput
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Operations.CostCenter": "42"}`
	DefinedTags pulumi.MapInput
	// (Updatable) A user-friendly name for the compute image capability schema
	DisplayName pulumi.StringPtrInput
	// (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Department": "Finance"}`
	FreeformTags pulumi.MapInput
	// The ocid of the image
	ImageId pulumi.StringInput
	// (Updatable) The map of each capability name to its ImageCapabilitySchemaDescriptor.
	SchemaData pulumi.MapInput
}

func (CoreComputeImageCapabilitySchemaArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*coreComputeImageCapabilitySchemaArgs)(nil)).Elem()
}

type CoreComputeImageCapabilitySchemaInput interface {
	pulumi.Input

	ToCoreComputeImageCapabilitySchemaOutput() CoreComputeImageCapabilitySchemaOutput
	ToCoreComputeImageCapabilitySchemaOutputWithContext(ctx context.Context) CoreComputeImageCapabilitySchemaOutput
}

func (*CoreComputeImageCapabilitySchema) ElementType() reflect.Type {
	return reflect.TypeOf((*CoreComputeImageCapabilitySchema)(nil))
}

func (i *CoreComputeImageCapabilitySchema) ToCoreComputeImageCapabilitySchemaOutput() CoreComputeImageCapabilitySchemaOutput {
	return i.ToCoreComputeImageCapabilitySchemaOutputWithContext(context.Background())
}

func (i *CoreComputeImageCapabilitySchema) ToCoreComputeImageCapabilitySchemaOutputWithContext(ctx context.Context) CoreComputeImageCapabilitySchemaOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CoreComputeImageCapabilitySchemaOutput)
}

func (i *CoreComputeImageCapabilitySchema) ToCoreComputeImageCapabilitySchemaPtrOutput() CoreComputeImageCapabilitySchemaPtrOutput {
	return i.ToCoreComputeImageCapabilitySchemaPtrOutputWithContext(context.Background())
}

func (i *CoreComputeImageCapabilitySchema) ToCoreComputeImageCapabilitySchemaPtrOutputWithContext(ctx context.Context) CoreComputeImageCapabilitySchemaPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CoreComputeImageCapabilitySchemaPtrOutput)
}

type CoreComputeImageCapabilitySchemaPtrInput interface {
	pulumi.Input

	ToCoreComputeImageCapabilitySchemaPtrOutput() CoreComputeImageCapabilitySchemaPtrOutput
	ToCoreComputeImageCapabilitySchemaPtrOutputWithContext(ctx context.Context) CoreComputeImageCapabilitySchemaPtrOutput
}

type coreComputeImageCapabilitySchemaPtrType CoreComputeImageCapabilitySchemaArgs

func (*coreComputeImageCapabilitySchemaPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CoreComputeImageCapabilitySchema)(nil))
}

func (i *coreComputeImageCapabilitySchemaPtrType) ToCoreComputeImageCapabilitySchemaPtrOutput() CoreComputeImageCapabilitySchemaPtrOutput {
	return i.ToCoreComputeImageCapabilitySchemaPtrOutputWithContext(context.Background())
}

func (i *coreComputeImageCapabilitySchemaPtrType) ToCoreComputeImageCapabilitySchemaPtrOutputWithContext(ctx context.Context) CoreComputeImageCapabilitySchemaPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CoreComputeImageCapabilitySchemaPtrOutput)
}

// CoreComputeImageCapabilitySchemaArrayInput is an input type that accepts CoreComputeImageCapabilitySchemaArray and CoreComputeImageCapabilitySchemaArrayOutput values.
// You can construct a concrete instance of `CoreComputeImageCapabilitySchemaArrayInput` via:
//
//          CoreComputeImageCapabilitySchemaArray{ CoreComputeImageCapabilitySchemaArgs{...} }
type CoreComputeImageCapabilitySchemaArrayInput interface {
	pulumi.Input

	ToCoreComputeImageCapabilitySchemaArrayOutput() CoreComputeImageCapabilitySchemaArrayOutput
	ToCoreComputeImageCapabilitySchemaArrayOutputWithContext(context.Context) CoreComputeImageCapabilitySchemaArrayOutput
}

type CoreComputeImageCapabilitySchemaArray []CoreComputeImageCapabilitySchemaInput

func (CoreComputeImageCapabilitySchemaArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CoreComputeImageCapabilitySchema)(nil)).Elem()
}

func (i CoreComputeImageCapabilitySchemaArray) ToCoreComputeImageCapabilitySchemaArrayOutput() CoreComputeImageCapabilitySchemaArrayOutput {
	return i.ToCoreComputeImageCapabilitySchemaArrayOutputWithContext(context.Background())
}

func (i CoreComputeImageCapabilitySchemaArray) ToCoreComputeImageCapabilitySchemaArrayOutputWithContext(ctx context.Context) CoreComputeImageCapabilitySchemaArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CoreComputeImageCapabilitySchemaArrayOutput)
}

// CoreComputeImageCapabilitySchemaMapInput is an input type that accepts CoreComputeImageCapabilitySchemaMap and CoreComputeImageCapabilitySchemaMapOutput values.
// You can construct a concrete instance of `CoreComputeImageCapabilitySchemaMapInput` via:
//
//          CoreComputeImageCapabilitySchemaMap{ "key": CoreComputeImageCapabilitySchemaArgs{...} }
type CoreComputeImageCapabilitySchemaMapInput interface {
	pulumi.Input

	ToCoreComputeImageCapabilitySchemaMapOutput() CoreComputeImageCapabilitySchemaMapOutput
	ToCoreComputeImageCapabilitySchemaMapOutputWithContext(context.Context) CoreComputeImageCapabilitySchemaMapOutput
}

type CoreComputeImageCapabilitySchemaMap map[string]CoreComputeImageCapabilitySchemaInput

func (CoreComputeImageCapabilitySchemaMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CoreComputeImageCapabilitySchema)(nil)).Elem()
}

func (i CoreComputeImageCapabilitySchemaMap) ToCoreComputeImageCapabilitySchemaMapOutput() CoreComputeImageCapabilitySchemaMapOutput {
	return i.ToCoreComputeImageCapabilitySchemaMapOutputWithContext(context.Background())
}

func (i CoreComputeImageCapabilitySchemaMap) ToCoreComputeImageCapabilitySchemaMapOutputWithContext(ctx context.Context) CoreComputeImageCapabilitySchemaMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CoreComputeImageCapabilitySchemaMapOutput)
}

type CoreComputeImageCapabilitySchemaOutput struct {
	*pulumi.OutputState
}

func (CoreComputeImageCapabilitySchemaOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CoreComputeImageCapabilitySchema)(nil))
}

func (o CoreComputeImageCapabilitySchemaOutput) ToCoreComputeImageCapabilitySchemaOutput() CoreComputeImageCapabilitySchemaOutput {
	return o
}

func (o CoreComputeImageCapabilitySchemaOutput) ToCoreComputeImageCapabilitySchemaOutputWithContext(ctx context.Context) CoreComputeImageCapabilitySchemaOutput {
	return o
}

func (o CoreComputeImageCapabilitySchemaOutput) ToCoreComputeImageCapabilitySchemaPtrOutput() CoreComputeImageCapabilitySchemaPtrOutput {
	return o.ToCoreComputeImageCapabilitySchemaPtrOutputWithContext(context.Background())
}

func (o CoreComputeImageCapabilitySchemaOutput) ToCoreComputeImageCapabilitySchemaPtrOutputWithContext(ctx context.Context) CoreComputeImageCapabilitySchemaPtrOutput {
	return o.ApplyT(func(v CoreComputeImageCapabilitySchema) *CoreComputeImageCapabilitySchema {
		return &v
	}).(CoreComputeImageCapabilitySchemaPtrOutput)
}

type CoreComputeImageCapabilitySchemaPtrOutput struct {
	*pulumi.OutputState
}

func (CoreComputeImageCapabilitySchemaPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CoreComputeImageCapabilitySchema)(nil))
}

func (o CoreComputeImageCapabilitySchemaPtrOutput) ToCoreComputeImageCapabilitySchemaPtrOutput() CoreComputeImageCapabilitySchemaPtrOutput {
	return o
}

func (o CoreComputeImageCapabilitySchemaPtrOutput) ToCoreComputeImageCapabilitySchemaPtrOutputWithContext(ctx context.Context) CoreComputeImageCapabilitySchemaPtrOutput {
	return o
}

type CoreComputeImageCapabilitySchemaArrayOutput struct{ *pulumi.OutputState }

func (CoreComputeImageCapabilitySchemaArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CoreComputeImageCapabilitySchema)(nil))
}

func (o CoreComputeImageCapabilitySchemaArrayOutput) ToCoreComputeImageCapabilitySchemaArrayOutput() CoreComputeImageCapabilitySchemaArrayOutput {
	return o
}

func (o CoreComputeImageCapabilitySchemaArrayOutput) ToCoreComputeImageCapabilitySchemaArrayOutputWithContext(ctx context.Context) CoreComputeImageCapabilitySchemaArrayOutput {
	return o
}

func (o CoreComputeImageCapabilitySchemaArrayOutput) Index(i pulumi.IntInput) CoreComputeImageCapabilitySchemaOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CoreComputeImageCapabilitySchema {
		return vs[0].([]CoreComputeImageCapabilitySchema)[vs[1].(int)]
	}).(CoreComputeImageCapabilitySchemaOutput)
}

type CoreComputeImageCapabilitySchemaMapOutput struct{ *pulumi.OutputState }

func (CoreComputeImageCapabilitySchemaMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]CoreComputeImageCapabilitySchema)(nil))
}

func (o CoreComputeImageCapabilitySchemaMapOutput) ToCoreComputeImageCapabilitySchemaMapOutput() CoreComputeImageCapabilitySchemaMapOutput {
	return o
}

func (o CoreComputeImageCapabilitySchemaMapOutput) ToCoreComputeImageCapabilitySchemaMapOutputWithContext(ctx context.Context) CoreComputeImageCapabilitySchemaMapOutput {
	return o
}

func (o CoreComputeImageCapabilitySchemaMapOutput) MapIndex(k pulumi.StringInput) CoreComputeImageCapabilitySchemaOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) CoreComputeImageCapabilitySchema {
		return vs[0].(map[string]CoreComputeImageCapabilitySchema)[vs[1].(string)]
	}).(CoreComputeImageCapabilitySchemaOutput)
}

func init() {
	pulumi.RegisterOutputType(CoreComputeImageCapabilitySchemaOutput{})
	pulumi.RegisterOutputType(CoreComputeImageCapabilitySchemaPtrOutput{})
	pulumi.RegisterOutputType(CoreComputeImageCapabilitySchemaArrayOutput{})
	pulumi.RegisterOutputType(CoreComputeImageCapabilitySchemaMapOutput{})
}
