// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci
{
    public static class GetCoreInstanceDevices
    {
        /// <summary>
        /// This data source provides the list of Instance Devices in Oracle Cloud Infrastructure Core service.
        /// 
        /// Gets a list of all the devices for given instance. You can optionally filter results by device availability.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var testInstanceDevices = Output.Create(Oci.GetCoreInstanceDevices.InvokeAsync(new Oci.GetCoreInstanceDevicesArgs
        ///         {
        ///             InstanceId = oci_core_instance.Test_instance.Id,
        ///             IsAvailable = @var.Instance_device_is_available,
        ///             Name = @var.Instance_device_name,
        ///         }));
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetCoreInstanceDevicesResult> InvokeAsync(GetCoreInstanceDevicesArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetCoreInstanceDevicesResult>("oci:index/getCoreInstanceDevices:GetCoreInstanceDevices", args ?? new GetCoreInstanceDevicesArgs(), options.WithVersion());
    }


    public sealed class GetCoreInstanceDevicesArgs : Pulumi.InvokeArgs
    {
        [Input("filters")]
        private List<Inputs.GetCoreInstanceDevicesFilterArgs>? _filters;
        public List<Inputs.GetCoreInstanceDevicesFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetCoreInstanceDevicesFilterArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the instance.
        /// </summary>
        [Input("instanceId", required: true)]
        public string InstanceId { get; set; } = null!;

        /// <summary>
        /// A filter to return only available devices or only used devices.
        /// </summary>
        [Input("isAvailable")]
        public bool? IsAvailable { get; set; }

        /// <summary>
        /// A filter to return only devices that match the given name exactly.
        /// </summary>
        [Input("name")]
        public string? Name { get; set; }

        public GetCoreInstanceDevicesArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetCoreInstanceDevicesResult
    {
        /// <summary>
        /// The list of devices.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetCoreInstanceDevicesDeviceResult> Devices;
        public readonly ImmutableArray<Outputs.GetCoreInstanceDevicesFilterResult> Filters;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string InstanceId;
        /// <summary>
        /// The flag denoting whether device is available.
        /// </summary>
        public readonly bool? IsAvailable;
        /// <summary>
        /// The device name.
        /// </summary>
        public readonly string? Name;

        [OutputConstructor]
        private GetCoreInstanceDevicesResult(
            ImmutableArray<Outputs.GetCoreInstanceDevicesDeviceResult> devices,

            ImmutableArray<Outputs.GetCoreInstanceDevicesFilterResult> filters,

            string id,

            string instanceId,

            bool? isAvailable,

            string? name)
        {
            Devices = devices;
            Filters = filters;
            Id = id;
            InstanceId = instanceId;
            IsAvailable = isAvailable;
            Name = name;
        }
    }
}
