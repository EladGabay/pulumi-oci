// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci
{
    /// <summary>
    /// This resource provides the Query resource in Oracle Cloud Infrastructure Metering Computation service.
    /// 
    /// Returns the created query.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Oci = Pulumi.Oci;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var testQuery = new Oci.MeteringComputationQuery("testQuery", new Oci.MeteringComputationQueryArgs
    ///         {
    ///             CompartmentId = @var.Compartment_id,
    ///             QueryDefinition = new Oci.Inputs.MeteringComputationQueryQueryDefinitionArgs
    ///             {
    ///                 CostAnalysisUi = new Oci.Inputs.MeteringComputationQueryQueryDefinitionCostAnalysisUiArgs
    ///                 {
    ///                     Graph = @var.Query_query_definition_cost_analysis_ui_graph,
    ///                     IsCumulativeGraph = @var.Query_query_definition_cost_analysis_ui_is_cumulative_graph,
    ///                 },
    ///                 DisplayName = @var.Query_query_definition_display_name,
    ///                 ReportQuery = new Oci.Inputs.MeteringComputationQueryQueryDefinitionReportQueryArgs
    ///                 {
    ///                     Granularity = @var.Query_query_definition_report_query_granularity,
    ///                     TenantId = oci_metering_computation_tenant.Test_tenant.Id,
    ///                     CompartmentDepth = @var.Query_query_definition_report_query_compartment_depth,
    ///                     DateRangeName = @var.Query_query_definition_report_query_date_range_name,
    ///                     Filter = @var.Query_query_definition_report_query_filter,
    ///                     Forecast = new Oci.Inputs.MeteringComputationQueryQueryDefinitionReportQueryForecastArgs
    ///                     {
    ///                         TimeForecastEnded = @var.Query_query_definition_report_query_forecast_time_forecast_ended,
    ///                         ForecastType = @var.Query_query_definition_report_query_forecast_forecast_type,
    ///                         TimeForecastStarted = @var.Query_query_definition_report_query_forecast_time_forecast_started,
    ///                     },
    ///                     GroupBies = @var.Query_query_definition_report_query_group_by,
    ///                     GroupByTags = 
    ///                     {
    ///                         new Oci.Inputs.MeteringComputationQueryQueryDefinitionReportQueryGroupByTagArgs
    ///                         {
    ///                             Key = @var.Query_query_definition_report_query_group_by_tag_key,
    ///                             Namespace = @var.Query_query_definition_report_query_group_by_tag_namespace,
    ///                             Value = @var.Query_query_definition_report_query_group_by_tag_value,
    ///                         },
    ///                     },
    ///                     IsAggregateByTime = @var.Query_query_definition_report_query_is_aggregate_by_time,
    ///                     QueryType = @var.Query_query_definition_report_query_query_type,
    ///                     TimeUsageEnded = @var.Query_query_definition_report_query_time_usage_ended,
    ///                     TimeUsageStarted = @var.Query_query_definition_report_query_time_usage_started,
    ///                 },
    ///                 Version = @var.Query_query_definition_version,
    ///             },
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// 
    /// ## Import
    /// 
    /// Queries can be imported using the `id`, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import oci:index/meteringComputationQuery:MeteringComputationQuery test_query "id"
    /// ```
    /// </summary>
    [OciResourceType("oci:index/meteringComputationQuery:MeteringComputationQuery")]
    public partial class MeteringComputationQuery : Pulumi.CustomResource
    {
        /// <summary>
        /// The compartment OCID.
        /// </summary>
        [Output("compartmentId")]
        public Output<string> CompartmentId { get; private set; } = null!;

        /// <summary>
        /// (Updatable) The common fields for queries.
        /// </summary>
        [Output("queryDefinition")]
        public Output<Outputs.MeteringComputationQueryQueryDefinition> QueryDefinition { get; private set; } = null!;


        /// <summary>
        /// Create a MeteringComputationQuery resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public MeteringComputationQuery(string name, MeteringComputationQueryArgs args, CustomResourceOptions? options = null)
            : base("oci:index/meteringComputationQuery:MeteringComputationQuery", name, args ?? new MeteringComputationQueryArgs(), MakeResourceOptions(options, ""))
        {
        }

        private MeteringComputationQuery(string name, Input<string> id, MeteringComputationQueryState? state = null, CustomResourceOptions? options = null)
            : base("oci:index/meteringComputationQuery:MeteringComputationQuery", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing MeteringComputationQuery resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static MeteringComputationQuery Get(string name, Input<string> id, MeteringComputationQueryState? state = null, CustomResourceOptions? options = null)
        {
            return new MeteringComputationQuery(name, id, state, options);
        }
    }

    public sealed class MeteringComputationQueryArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The compartment OCID.
        /// </summary>
        [Input("compartmentId", required: true)]
        public Input<string> CompartmentId { get; set; } = null!;

        /// <summary>
        /// (Updatable) The common fields for queries.
        /// </summary>
        [Input("queryDefinition", required: true)]
        public Input<Inputs.MeteringComputationQueryQueryDefinitionArgs> QueryDefinition { get; set; } = null!;

        public MeteringComputationQueryArgs()
        {
        }
    }

    public sealed class MeteringComputationQueryState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The compartment OCID.
        /// </summary>
        [Input("compartmentId")]
        public Input<string>? CompartmentId { get; set; }

        /// <summary>
        /// (Updatable) The common fields for queries.
        /// </summary>
        [Input("queryDefinition")]
        public Input<Inputs.MeteringComputationQueryQueryDefinitionGetArgs>? QueryDefinition { get; set; }

        public MeteringComputationQueryState()
        {
        }
    }
}
