// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package oci

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Import
//
// PublicIpPoolCapacity can be imported using the `id`, e.g.
//
// ```sh
//  $ pulumi import oci:index/corePublicIpPoolCapacity:CorePublicIpPoolCapacity test_public_ip_pool_capacity "publicIpPoolId/{publicIpPoolId}/byoipId/{byoipId}/cidrBlock/{cidrBlock}"
// ```
type CorePublicIpPoolCapacity struct {
	pulumi.CustomResourceState

	// The OCID of the Byoip Range Id object to which the cidr block belongs.
	ByoipId pulumi.StringOutput `pulumi:"byoipId"`
	// The CIDR IP address range to be added to the Public Ip Pool. Example: `10.0.1.0/24`
	CidrBlock pulumi.StringOutput `pulumi:"cidrBlock"`
	// The OCID of the pool object created by the current tenancy
	PublicIpPoolId pulumi.StringOutput `pulumi:"publicIpPoolId"`
}

// NewCorePublicIpPoolCapacity registers a new resource with the given unique name, arguments, and options.
func NewCorePublicIpPoolCapacity(ctx *pulumi.Context,
	name string, args *CorePublicIpPoolCapacityArgs, opts ...pulumi.ResourceOption) (*CorePublicIpPoolCapacity, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ByoipId == nil {
		return nil, errors.New("invalid value for required argument 'ByoipId'")
	}
	if args.CidrBlock == nil {
		return nil, errors.New("invalid value for required argument 'CidrBlock'")
	}
	if args.PublicIpPoolId == nil {
		return nil, errors.New("invalid value for required argument 'PublicIpPoolId'")
	}
	var resource CorePublicIpPoolCapacity
	err := ctx.RegisterResource("oci:index/corePublicIpPoolCapacity:CorePublicIpPoolCapacity", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCorePublicIpPoolCapacity gets an existing CorePublicIpPoolCapacity resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCorePublicIpPoolCapacity(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CorePublicIpPoolCapacityState, opts ...pulumi.ResourceOption) (*CorePublicIpPoolCapacity, error) {
	var resource CorePublicIpPoolCapacity
	err := ctx.ReadResource("oci:index/corePublicIpPoolCapacity:CorePublicIpPoolCapacity", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CorePublicIpPoolCapacity resources.
type corePublicIpPoolCapacityState struct {
	// The OCID of the Byoip Range Id object to which the cidr block belongs.
	ByoipId *string `pulumi:"byoipId"`
	// The CIDR IP address range to be added to the Public Ip Pool. Example: `10.0.1.0/24`
	CidrBlock *string `pulumi:"cidrBlock"`
	// The OCID of the pool object created by the current tenancy
	PublicIpPoolId *string `pulumi:"publicIpPoolId"`
}

type CorePublicIpPoolCapacityState struct {
	// The OCID of the Byoip Range Id object to which the cidr block belongs.
	ByoipId pulumi.StringPtrInput
	// The CIDR IP address range to be added to the Public Ip Pool. Example: `10.0.1.0/24`
	CidrBlock pulumi.StringPtrInput
	// The OCID of the pool object created by the current tenancy
	PublicIpPoolId pulumi.StringPtrInput
}

func (CorePublicIpPoolCapacityState) ElementType() reflect.Type {
	return reflect.TypeOf((*corePublicIpPoolCapacityState)(nil)).Elem()
}

type corePublicIpPoolCapacityArgs struct {
	// The OCID of the Byoip Range Id object to which the cidr block belongs.
	ByoipId string `pulumi:"byoipId"`
	// The CIDR IP address range to be added to the Public Ip Pool. Example: `10.0.1.0/24`
	CidrBlock string `pulumi:"cidrBlock"`
	// The OCID of the pool object created by the current tenancy
	PublicIpPoolId string `pulumi:"publicIpPoolId"`
}

// The set of arguments for constructing a CorePublicIpPoolCapacity resource.
type CorePublicIpPoolCapacityArgs struct {
	// The OCID of the Byoip Range Id object to which the cidr block belongs.
	ByoipId pulumi.StringInput
	// The CIDR IP address range to be added to the Public Ip Pool. Example: `10.0.1.0/24`
	CidrBlock pulumi.StringInput
	// The OCID of the pool object created by the current tenancy
	PublicIpPoolId pulumi.StringInput
}

func (CorePublicIpPoolCapacityArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*corePublicIpPoolCapacityArgs)(nil)).Elem()
}

type CorePublicIpPoolCapacityInput interface {
	pulumi.Input

	ToCorePublicIpPoolCapacityOutput() CorePublicIpPoolCapacityOutput
	ToCorePublicIpPoolCapacityOutputWithContext(ctx context.Context) CorePublicIpPoolCapacityOutput
}

func (*CorePublicIpPoolCapacity) ElementType() reflect.Type {
	return reflect.TypeOf((*CorePublicIpPoolCapacity)(nil))
}

func (i *CorePublicIpPoolCapacity) ToCorePublicIpPoolCapacityOutput() CorePublicIpPoolCapacityOutput {
	return i.ToCorePublicIpPoolCapacityOutputWithContext(context.Background())
}

func (i *CorePublicIpPoolCapacity) ToCorePublicIpPoolCapacityOutputWithContext(ctx context.Context) CorePublicIpPoolCapacityOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CorePublicIpPoolCapacityOutput)
}

func (i *CorePublicIpPoolCapacity) ToCorePublicIpPoolCapacityPtrOutput() CorePublicIpPoolCapacityPtrOutput {
	return i.ToCorePublicIpPoolCapacityPtrOutputWithContext(context.Background())
}

func (i *CorePublicIpPoolCapacity) ToCorePublicIpPoolCapacityPtrOutputWithContext(ctx context.Context) CorePublicIpPoolCapacityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CorePublicIpPoolCapacityPtrOutput)
}

type CorePublicIpPoolCapacityPtrInput interface {
	pulumi.Input

	ToCorePublicIpPoolCapacityPtrOutput() CorePublicIpPoolCapacityPtrOutput
	ToCorePublicIpPoolCapacityPtrOutputWithContext(ctx context.Context) CorePublicIpPoolCapacityPtrOutput
}

type corePublicIpPoolCapacityPtrType CorePublicIpPoolCapacityArgs

func (*corePublicIpPoolCapacityPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CorePublicIpPoolCapacity)(nil))
}

func (i *corePublicIpPoolCapacityPtrType) ToCorePublicIpPoolCapacityPtrOutput() CorePublicIpPoolCapacityPtrOutput {
	return i.ToCorePublicIpPoolCapacityPtrOutputWithContext(context.Background())
}

func (i *corePublicIpPoolCapacityPtrType) ToCorePublicIpPoolCapacityPtrOutputWithContext(ctx context.Context) CorePublicIpPoolCapacityPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CorePublicIpPoolCapacityPtrOutput)
}

// CorePublicIpPoolCapacityArrayInput is an input type that accepts CorePublicIpPoolCapacityArray and CorePublicIpPoolCapacityArrayOutput values.
// You can construct a concrete instance of `CorePublicIpPoolCapacityArrayInput` via:
//
//          CorePublicIpPoolCapacityArray{ CorePublicIpPoolCapacityArgs{...} }
type CorePublicIpPoolCapacityArrayInput interface {
	pulumi.Input

	ToCorePublicIpPoolCapacityArrayOutput() CorePublicIpPoolCapacityArrayOutput
	ToCorePublicIpPoolCapacityArrayOutputWithContext(context.Context) CorePublicIpPoolCapacityArrayOutput
}

type CorePublicIpPoolCapacityArray []CorePublicIpPoolCapacityInput

func (CorePublicIpPoolCapacityArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CorePublicIpPoolCapacity)(nil)).Elem()
}

func (i CorePublicIpPoolCapacityArray) ToCorePublicIpPoolCapacityArrayOutput() CorePublicIpPoolCapacityArrayOutput {
	return i.ToCorePublicIpPoolCapacityArrayOutputWithContext(context.Background())
}

func (i CorePublicIpPoolCapacityArray) ToCorePublicIpPoolCapacityArrayOutputWithContext(ctx context.Context) CorePublicIpPoolCapacityArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CorePublicIpPoolCapacityArrayOutput)
}

// CorePublicIpPoolCapacityMapInput is an input type that accepts CorePublicIpPoolCapacityMap and CorePublicIpPoolCapacityMapOutput values.
// You can construct a concrete instance of `CorePublicIpPoolCapacityMapInput` via:
//
//          CorePublicIpPoolCapacityMap{ "key": CorePublicIpPoolCapacityArgs{...} }
type CorePublicIpPoolCapacityMapInput interface {
	pulumi.Input

	ToCorePublicIpPoolCapacityMapOutput() CorePublicIpPoolCapacityMapOutput
	ToCorePublicIpPoolCapacityMapOutputWithContext(context.Context) CorePublicIpPoolCapacityMapOutput
}

type CorePublicIpPoolCapacityMap map[string]CorePublicIpPoolCapacityInput

func (CorePublicIpPoolCapacityMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CorePublicIpPoolCapacity)(nil)).Elem()
}

func (i CorePublicIpPoolCapacityMap) ToCorePublicIpPoolCapacityMapOutput() CorePublicIpPoolCapacityMapOutput {
	return i.ToCorePublicIpPoolCapacityMapOutputWithContext(context.Background())
}

func (i CorePublicIpPoolCapacityMap) ToCorePublicIpPoolCapacityMapOutputWithContext(ctx context.Context) CorePublicIpPoolCapacityMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CorePublicIpPoolCapacityMapOutput)
}

type CorePublicIpPoolCapacityOutput struct {
	*pulumi.OutputState
}

func (CorePublicIpPoolCapacityOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CorePublicIpPoolCapacity)(nil))
}

func (o CorePublicIpPoolCapacityOutput) ToCorePublicIpPoolCapacityOutput() CorePublicIpPoolCapacityOutput {
	return o
}

func (o CorePublicIpPoolCapacityOutput) ToCorePublicIpPoolCapacityOutputWithContext(ctx context.Context) CorePublicIpPoolCapacityOutput {
	return o
}

func (o CorePublicIpPoolCapacityOutput) ToCorePublicIpPoolCapacityPtrOutput() CorePublicIpPoolCapacityPtrOutput {
	return o.ToCorePublicIpPoolCapacityPtrOutputWithContext(context.Background())
}

func (o CorePublicIpPoolCapacityOutput) ToCorePublicIpPoolCapacityPtrOutputWithContext(ctx context.Context) CorePublicIpPoolCapacityPtrOutput {
	return o.ApplyT(func(v CorePublicIpPoolCapacity) *CorePublicIpPoolCapacity {
		return &v
	}).(CorePublicIpPoolCapacityPtrOutput)
}

type CorePublicIpPoolCapacityPtrOutput struct {
	*pulumi.OutputState
}

func (CorePublicIpPoolCapacityPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CorePublicIpPoolCapacity)(nil))
}

func (o CorePublicIpPoolCapacityPtrOutput) ToCorePublicIpPoolCapacityPtrOutput() CorePublicIpPoolCapacityPtrOutput {
	return o
}

func (o CorePublicIpPoolCapacityPtrOutput) ToCorePublicIpPoolCapacityPtrOutputWithContext(ctx context.Context) CorePublicIpPoolCapacityPtrOutput {
	return o
}

type CorePublicIpPoolCapacityArrayOutput struct{ *pulumi.OutputState }

func (CorePublicIpPoolCapacityArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CorePublicIpPoolCapacity)(nil))
}

func (o CorePublicIpPoolCapacityArrayOutput) ToCorePublicIpPoolCapacityArrayOutput() CorePublicIpPoolCapacityArrayOutput {
	return o
}

func (o CorePublicIpPoolCapacityArrayOutput) ToCorePublicIpPoolCapacityArrayOutputWithContext(ctx context.Context) CorePublicIpPoolCapacityArrayOutput {
	return o
}

func (o CorePublicIpPoolCapacityArrayOutput) Index(i pulumi.IntInput) CorePublicIpPoolCapacityOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CorePublicIpPoolCapacity {
		return vs[0].([]CorePublicIpPoolCapacity)[vs[1].(int)]
	}).(CorePublicIpPoolCapacityOutput)
}

type CorePublicIpPoolCapacityMapOutput struct{ *pulumi.OutputState }

func (CorePublicIpPoolCapacityMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]CorePublicIpPoolCapacity)(nil))
}

func (o CorePublicIpPoolCapacityMapOutput) ToCorePublicIpPoolCapacityMapOutput() CorePublicIpPoolCapacityMapOutput {
	return o
}

func (o CorePublicIpPoolCapacityMapOutput) ToCorePublicIpPoolCapacityMapOutputWithContext(ctx context.Context) CorePublicIpPoolCapacityMapOutput {
	return o
}

func (o CorePublicIpPoolCapacityMapOutput) MapIndex(k pulumi.StringInput) CorePublicIpPoolCapacityOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) CorePublicIpPoolCapacity {
		return vs[0].(map[string]CorePublicIpPoolCapacity)[vs[1].(string)]
	}).(CorePublicIpPoolCapacityOutput)
}

func init() {
	pulumi.RegisterOutputType(CorePublicIpPoolCapacityOutput{})
	pulumi.RegisterOutputType(CorePublicIpPoolCapacityPtrOutput{})
	pulumi.RegisterOutputType(CorePublicIpPoolCapacityArrayOutput{})
	pulumi.RegisterOutputType(CorePublicIpPoolCapacityMapOutput{})
}
