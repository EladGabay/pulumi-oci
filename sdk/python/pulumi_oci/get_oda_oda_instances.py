# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = [
    'GetOdaOdaInstancesResult',
    'AwaitableGetOdaOdaInstancesResult',
    'get_oda_oda_instances',
]

@pulumi.output_type
class GetOdaOdaInstancesResult:
    """
    A collection of values returned by GetOdaOdaInstances.
    """
    def __init__(__self__, compartment_id=None, display_name=None, filters=None, id=None, oda_instances=None, state=None):
        if compartment_id and not isinstance(compartment_id, str):
            raise TypeError("Expected argument 'compartment_id' to be a str")
        pulumi.set(__self__, "compartment_id", compartment_id)
        if display_name and not isinstance(display_name, str):
            raise TypeError("Expected argument 'display_name' to be a str")
        pulumi.set(__self__, "display_name", display_name)
        if filters and not isinstance(filters, list):
            raise TypeError("Expected argument 'filters' to be a list")
        pulumi.set(__self__, "filters", filters)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if oda_instances and not isinstance(oda_instances, list):
            raise TypeError("Expected argument 'oda_instances' to be a list")
        pulumi.set(__self__, "oda_instances", oda_instances)
        if state and not isinstance(state, str):
            raise TypeError("Expected argument 'state' to be a str")
        pulumi.set(__self__, "state", state)

    @property
    @pulumi.getter(name="compartmentId")
    def compartment_id(self) -> str:
        """
        Identifier of the compartment that the instance belongs to.
        """
        return pulumi.get(self, "compartment_id")

    @property
    @pulumi.getter(name="displayName")
    def display_name(self) -> Optional[str]:
        """
        User-defined name for the Digital Assistant instance. Avoid entering confidential information. You can change this value.
        """
        return pulumi.get(self, "display_name")

    @property
    @pulumi.getter
    def filters(self) -> Optional[Sequence['outputs.GetOdaOdaInstancesFilterResult']]:
        return pulumi.get(self, "filters")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="odaInstances")
    def oda_instances(self) -> Sequence['outputs.GetOdaOdaInstancesOdaInstanceResult']:
        """
        The list of oda_instances.
        """
        return pulumi.get(self, "oda_instances")

    @property
    @pulumi.getter
    def state(self) -> Optional[str]:
        """
        The current state of the Digital Assistant instance.
        """
        return pulumi.get(self, "state")


class AwaitableGetOdaOdaInstancesResult(GetOdaOdaInstancesResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetOdaOdaInstancesResult(
            compartment_id=self.compartment_id,
            display_name=self.display_name,
            filters=self.filters,
            id=self.id,
            oda_instances=self.oda_instances,
            state=self.state)


def get_oda_oda_instances(compartment_id: Optional[str] = None,
                          display_name: Optional[str] = None,
                          filters: Optional[Sequence[pulumi.InputType['GetOdaOdaInstancesFilterArgs']]] = None,
                          state: Optional[str] = None,
                          opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetOdaOdaInstancesResult:
    """
    This data source provides the list of Oda Instances in Oracle Cloud Infrastructure Digital Assistant service.

    Returns a page of Digital Assistant instances that belong to the specified
    compartment.

    If the `opc-next-page` header appears in the response, then
    there are more items to retrieve. To get the next page in the subsequent
    GET request, include the header's value as the `page` query parameter.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_oci as oci

    test_oda_instances = oci.get_oda_oda_instances(compartment_id=var["compartment_id"],
        display_name=var["oda_instance_display_name"],
        state=var["oda_instance_state"])
    ```


    :param str compartment_id: List the Digital Assistant instances that belong to this compartment.
    :param str display_name: List only the information for the Digital Assistant instance with this user-friendly name. These names don't have to be unique and may change.  Example: `My new resource`
    :param str state: List only the Digital Assistant instances that are in this lifecycle state.
    """
    __args__ = dict()
    __args__['compartmentId'] = compartment_id
    __args__['displayName'] = display_name
    __args__['filters'] = filters
    __args__['state'] = state
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = _utilities.get_version()
    __ret__ = pulumi.runtime.invoke('oci:index/getOdaOdaInstances:GetOdaOdaInstances', __args__, opts=opts, typ=GetOdaOdaInstancesResult).value

    return AwaitableGetOdaOdaInstancesResult(
        compartment_id=__ret__.compartment_id,
        display_name=__ret__.display_name,
        filters=__ret__.filters,
        id=__ret__.id,
        oda_instances=__ret__.oda_instances,
        state=__ret__.state)
