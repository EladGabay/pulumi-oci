// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package oci

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource provides the Monitor resource in Oracle Cloud Infrastructure Apm Synthetics service.
//
// Creates a new monitor.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-oci/sdk/go/oci"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := oci.NewApmSyntheticsMonitor(ctx, "testMonitor", &oci.ApmSyntheticsMonitorArgs{
// 			ApmDomainId:             pulumi.Any(oci_apm_synthetics_apm_domain.Test_apm_domain.Id),
// 			DisplayName:             pulumi.Any(_var.Monitor_display_name),
// 			MonitorType:             pulumi.Any(_var.Monitor_monitor_type),
// 			RepeatIntervalInSeconds: pulumi.Any(_var.Monitor_repeat_interval_in_seconds),
// 			VantagePoints: pulumi.StringArray{
// 				nil,
// 			},
// 			Configuration: &ApmSyntheticsMonitorConfigurationArgs{
// 				ConfigType:                     pulumi.Any(_var.Monitor_configuration_config_type),
// 				IsCertificateValidationEnabled: pulumi.Any(_var.Monitor_configuration_is_certificate_validation_enabled),
// 				IsFailureRetried:               pulumi.Any(_var.Monitor_configuration_is_failure_retried),
// 				IsRedirectionEnabled:           pulumi.Any(_var.Monitor_configuration_is_redirection_enabled),
// 				ReqAuthenticationDetails: &ApmSyntheticsMonitorConfigurationReqAuthenticationDetailsArgs{
// 					AuthHeaders: ApmSyntheticsMonitorConfigurationReqAuthenticationDetailsAuthHeaderArray{
// 						&ApmSyntheticsMonitorConfigurationReqAuthenticationDetailsAuthHeaderArgs{
// 							HeaderName:  pulumi.Any(_var.Monitor_configuration_req_authentication_details_auth_headers_header_name),
// 							HeaderValue: pulumi.Any(_var.Monitor_configuration_req_authentication_details_auth_headers_header_value),
// 						},
// 					},
// 					AuthRequestMethod:   pulumi.Any(_var.Monitor_configuration_req_authentication_details_auth_request_method),
// 					AuthRequestPostBody: pulumi.Any(_var.Monitor_configuration_req_authentication_details_auth_request_post_body),
// 					AuthToken:           pulumi.Any(_var.Monitor_configuration_req_authentication_details_auth_token),
// 					AuthUrl:             pulumi.Any(_var.Monitor_configuration_req_authentication_details_auth_url),
// 					AuthUserName:        pulumi.Any(oci_identity_user.Test_user.Name),
// 					AuthUserPassword:    pulumi.Any(_var.Monitor_configuration_req_authentication_details_auth_user_password),
// 					OauthScheme:         pulumi.Any(_var.Monitor_configuration_req_authentication_details_oauth_scheme),
// 				},
// 				ReqAuthenticationScheme: pulumi.Any(_var.Monitor_configuration_req_authentication_scheme),
// 				RequestHeaders: ApmSyntheticsMonitorConfigurationRequestHeaderArray{
// 					&ApmSyntheticsMonitorConfigurationRequestHeaderArgs{
// 						HeaderName:  pulumi.Any(_var.Monitor_configuration_request_headers_header_name),
// 						HeaderValue: pulumi.Any(_var.Monitor_configuration_request_headers_header_value),
// 					},
// 				},
// 				RequestMethod:   pulumi.Any(_var.Monitor_configuration_request_method),
// 				RequestPostBody: pulumi.Any(_var.Monitor_configuration_request_post_body),
// 				RequestQueryParams: ApmSyntheticsMonitorConfigurationRequestQueryParamArray{
// 					&ApmSyntheticsMonitorConfigurationRequestQueryParamArgs{
// 						ParamName:  pulumi.Any(_var.Monitor_configuration_request_query_params_param_name),
// 						ParamValue: pulumi.Any(_var.Monitor_configuration_request_query_params_param_value),
// 					},
// 				},
// 				VerifyResponseCodes:   pulumi.Any(_var.Monitor_configuration_verify_response_codes),
// 				VerifyResponseContent: pulumi.Any(_var.Monitor_configuration_verify_response_content),
// 				VerifyTexts: ApmSyntheticsMonitorConfigurationVerifyTextArray{
// 					&ApmSyntheticsMonitorConfigurationVerifyTextArgs{
// 						Text: pulumi.Any(_var.Monitor_configuration_verify_texts_text),
// 					},
// 				},
// 			},
// 			DefinedTags: pulumi.AnyMap{
// 				"foo-namespace.bar-key": pulumi.Any("value"),
// 			},
// 			FreeformTags: pulumi.AnyMap{
// 				"bar-key": pulumi.Any("value"),
// 			},
// 			ScriptId: pulumi.Any(oci_apm_synthetics_script.Test_script.Id),
// 			ScriptParameters: ApmSyntheticsMonitorScriptParameterArray{
// 				&ApmSyntheticsMonitorScriptParameterArgs{
// 					ParamName:  pulumi.Any(_var.Monitor_script_parameters_param_name),
// 					ParamValue: pulumi.Any(_var.Monitor_script_parameters_param_value),
// 				},
// 			},
// 			Status:           pulumi.Any(_var.Monitor_status),
// 			Target:           pulumi.Any(_var.Monitor_target),
// 			TimeoutInSeconds: pulumi.Any(_var.Monitor_timeout_in_seconds),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// Monitors can be imported using the `id`, e.g.
//
// ```sh
//  $ pulumi import oci:index/apmSyntheticsMonitor:ApmSyntheticsMonitor test_monitor "monitors/{monitorId}/apmDomainId/{apmDomainId}"
// ```
type ApmSyntheticsMonitor struct {
	pulumi.CustomResourceState

	// (Updatable) The APM domain ID the request is intended for.
	ApmDomainId pulumi.StringOutput `pulumi:"apmDomainId"`
	// (Updatable) Details of monitor configuration.
	Configuration ApmSyntheticsMonitorConfigurationOutput `pulumi:"configuration"`
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
	DefinedTags pulumi.MapOutput `pulumi:"definedTags"`
	// (Updatable) Unique name that can be edited. The name should not contain any confidential information.
	DisplayName pulumi.StringOutput `pulumi:"displayName"`
	// (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
	FreeformTags pulumi.MapOutput `pulumi:"freeformTags"`
	// Type of monitor.
	MonitorType pulumi.StringOutput `pulumi:"monitorType"`
	// (Updatable) Interval in seconds after the start time when the job should be repeated. Minimum repeatIntervalInSeconds should be 300 seconds.
	RepeatIntervalInSeconds pulumi.IntOutput `pulumi:"repeatIntervalInSeconds"`
	// (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the script. scriptId is mandatory for creation of SCRIPTED_BROWSER and SCRIPTED_REST monitor types. For other monitor types, it should be set to null.
	ScriptId pulumi.StringOutput `pulumi:"scriptId"`
	// Name of the script.
	ScriptName pulumi.StringOutput `pulumi:"scriptName"`
	// (Updatable) List of script parameters in the monitor. This is valid only for SCRIPTED_BROWSER and SCRIPTED_REST monitor types. For other monitor types, it should be set to null. Example: `[{"paramName": "userid", "paramValue":"testuser"}]`
	ScriptParameters ApmSyntheticsMonitorScriptParameterArrayOutput `pulumi:"scriptParameters"`
	// (Updatable) Enables or disables the monitor.
	Status pulumi.StringOutput `pulumi:"status"`
	// (Updatable) Specify the endpoint on which to run the monitor. For BROWSER and REST monitor types, target is mandatory. If target is specified in the SCRIPTED_BROWSER monitor type, then the monitor will run the selected script (specified by scriptId in monitor) against the specified target endpoint. If target is not specified in the SCRIPTED_BROWSER monitor type, then the monitor will run the selected script as it is.
	Target pulumi.StringOutput `pulumi:"target"`
	// The time the resource was created, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: `2020-02-12T22:47:12.613Z`
	TimeCreated pulumi.StringOutput `pulumi:"timeCreated"`
	// The time the resource was updated, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: `2020-02-13T22:47:12.613Z`
	TimeUpdated pulumi.StringOutput `pulumi:"timeUpdated"`
	// (Updatable) Timeout in seconds. Timeout cannot be more than 30% of repeatIntervalInSeconds time for monitors. Also, timeoutInSeconds should be a multiple of 60. Monitor will be allowed to run only for timeoutInSeconds time. It would be terminated after that.
	TimeoutInSeconds pulumi.IntOutput `pulumi:"timeoutInSeconds"`
	// Number of vantage points where monitor is running.
	VantagePointCount pulumi.IntOutput `pulumi:"vantagePointCount"`
	// (Updatable) A list of vantage points from which to execute the monitor. Use /publicVantagePoints to fetch public vantage points.
	VantagePoints pulumi.StringArrayOutput `pulumi:"vantagePoints"`
}

// NewApmSyntheticsMonitor registers a new resource with the given unique name, arguments, and options.
func NewApmSyntheticsMonitor(ctx *pulumi.Context,
	name string, args *ApmSyntheticsMonitorArgs, opts ...pulumi.ResourceOption) (*ApmSyntheticsMonitor, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ApmDomainId == nil {
		return nil, errors.New("invalid value for required argument 'ApmDomainId'")
	}
	if args.DisplayName == nil {
		return nil, errors.New("invalid value for required argument 'DisplayName'")
	}
	if args.MonitorType == nil {
		return nil, errors.New("invalid value for required argument 'MonitorType'")
	}
	if args.RepeatIntervalInSeconds == nil {
		return nil, errors.New("invalid value for required argument 'RepeatIntervalInSeconds'")
	}
	if args.VantagePoints == nil {
		return nil, errors.New("invalid value for required argument 'VantagePoints'")
	}
	var resource ApmSyntheticsMonitor
	err := ctx.RegisterResource("oci:index/apmSyntheticsMonitor:ApmSyntheticsMonitor", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetApmSyntheticsMonitor gets an existing ApmSyntheticsMonitor resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetApmSyntheticsMonitor(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ApmSyntheticsMonitorState, opts ...pulumi.ResourceOption) (*ApmSyntheticsMonitor, error) {
	var resource ApmSyntheticsMonitor
	err := ctx.ReadResource("oci:index/apmSyntheticsMonitor:ApmSyntheticsMonitor", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ApmSyntheticsMonitor resources.
type apmSyntheticsMonitorState struct {
	// (Updatable) The APM domain ID the request is intended for.
	ApmDomainId *string `pulumi:"apmDomainId"`
	// (Updatable) Details of monitor configuration.
	Configuration *ApmSyntheticsMonitorConfiguration `pulumi:"configuration"`
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
	DefinedTags map[string]interface{} `pulumi:"definedTags"`
	// (Updatable) Unique name that can be edited. The name should not contain any confidential information.
	DisplayName *string `pulumi:"displayName"`
	// (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
	FreeformTags map[string]interface{} `pulumi:"freeformTags"`
	// Type of monitor.
	MonitorType *string `pulumi:"monitorType"`
	// (Updatable) Interval in seconds after the start time when the job should be repeated. Minimum repeatIntervalInSeconds should be 300 seconds.
	RepeatIntervalInSeconds *int `pulumi:"repeatIntervalInSeconds"`
	// (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the script. scriptId is mandatory for creation of SCRIPTED_BROWSER and SCRIPTED_REST monitor types. For other monitor types, it should be set to null.
	ScriptId *string `pulumi:"scriptId"`
	// Name of the script.
	ScriptName *string `pulumi:"scriptName"`
	// (Updatable) List of script parameters in the monitor. This is valid only for SCRIPTED_BROWSER and SCRIPTED_REST monitor types. For other monitor types, it should be set to null. Example: `[{"paramName": "userid", "paramValue":"testuser"}]`
	ScriptParameters []ApmSyntheticsMonitorScriptParameter `pulumi:"scriptParameters"`
	// (Updatable) Enables or disables the monitor.
	Status *string `pulumi:"status"`
	// (Updatable) Specify the endpoint on which to run the monitor. For BROWSER and REST monitor types, target is mandatory. If target is specified in the SCRIPTED_BROWSER monitor type, then the monitor will run the selected script (specified by scriptId in monitor) against the specified target endpoint. If target is not specified in the SCRIPTED_BROWSER monitor type, then the monitor will run the selected script as it is.
	Target *string `pulumi:"target"`
	// The time the resource was created, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: `2020-02-12T22:47:12.613Z`
	TimeCreated *string `pulumi:"timeCreated"`
	// The time the resource was updated, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: `2020-02-13T22:47:12.613Z`
	TimeUpdated *string `pulumi:"timeUpdated"`
	// (Updatable) Timeout in seconds. Timeout cannot be more than 30% of repeatIntervalInSeconds time for monitors. Also, timeoutInSeconds should be a multiple of 60. Monitor will be allowed to run only for timeoutInSeconds time. It would be terminated after that.
	TimeoutInSeconds *int `pulumi:"timeoutInSeconds"`
	// Number of vantage points where monitor is running.
	VantagePointCount *int `pulumi:"vantagePointCount"`
	// (Updatable) A list of vantage points from which to execute the monitor. Use /publicVantagePoints to fetch public vantage points.
	VantagePoints []string `pulumi:"vantagePoints"`
}

type ApmSyntheticsMonitorState struct {
	// (Updatable) The APM domain ID the request is intended for.
	ApmDomainId pulumi.StringPtrInput
	// (Updatable) Details of monitor configuration.
	Configuration ApmSyntheticsMonitorConfigurationPtrInput
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
	DefinedTags pulumi.MapInput
	// (Updatable) Unique name that can be edited. The name should not contain any confidential information.
	DisplayName pulumi.StringPtrInput
	// (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
	FreeformTags pulumi.MapInput
	// Type of monitor.
	MonitorType pulumi.StringPtrInput
	// (Updatable) Interval in seconds after the start time when the job should be repeated. Minimum repeatIntervalInSeconds should be 300 seconds.
	RepeatIntervalInSeconds pulumi.IntPtrInput
	// (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the script. scriptId is mandatory for creation of SCRIPTED_BROWSER and SCRIPTED_REST monitor types. For other monitor types, it should be set to null.
	ScriptId pulumi.StringPtrInput
	// Name of the script.
	ScriptName pulumi.StringPtrInput
	// (Updatable) List of script parameters in the monitor. This is valid only for SCRIPTED_BROWSER and SCRIPTED_REST monitor types. For other monitor types, it should be set to null. Example: `[{"paramName": "userid", "paramValue":"testuser"}]`
	ScriptParameters ApmSyntheticsMonitorScriptParameterArrayInput
	// (Updatable) Enables or disables the monitor.
	Status pulumi.StringPtrInput
	// (Updatable) Specify the endpoint on which to run the monitor. For BROWSER and REST monitor types, target is mandatory. If target is specified in the SCRIPTED_BROWSER monitor type, then the monitor will run the selected script (specified by scriptId in monitor) against the specified target endpoint. If target is not specified in the SCRIPTED_BROWSER monitor type, then the monitor will run the selected script as it is.
	Target pulumi.StringPtrInput
	// The time the resource was created, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: `2020-02-12T22:47:12.613Z`
	TimeCreated pulumi.StringPtrInput
	// The time the resource was updated, expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format. Example: `2020-02-13T22:47:12.613Z`
	TimeUpdated pulumi.StringPtrInput
	// (Updatable) Timeout in seconds. Timeout cannot be more than 30% of repeatIntervalInSeconds time for monitors. Also, timeoutInSeconds should be a multiple of 60. Monitor will be allowed to run only for timeoutInSeconds time. It would be terminated after that.
	TimeoutInSeconds pulumi.IntPtrInput
	// Number of vantage points where monitor is running.
	VantagePointCount pulumi.IntPtrInput
	// (Updatable) A list of vantage points from which to execute the monitor. Use /publicVantagePoints to fetch public vantage points.
	VantagePoints pulumi.StringArrayInput
}

func (ApmSyntheticsMonitorState) ElementType() reflect.Type {
	return reflect.TypeOf((*apmSyntheticsMonitorState)(nil)).Elem()
}

type apmSyntheticsMonitorArgs struct {
	// (Updatable) The APM domain ID the request is intended for.
	ApmDomainId string `pulumi:"apmDomainId"`
	// (Updatable) Details of monitor configuration.
	Configuration *ApmSyntheticsMonitorConfiguration `pulumi:"configuration"`
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
	DefinedTags map[string]interface{} `pulumi:"definedTags"`
	// (Updatable) Unique name that can be edited. The name should not contain any confidential information.
	DisplayName string `pulumi:"displayName"`
	// (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
	FreeformTags map[string]interface{} `pulumi:"freeformTags"`
	// Type of monitor.
	MonitorType string `pulumi:"monitorType"`
	// (Updatable) Interval in seconds after the start time when the job should be repeated. Minimum repeatIntervalInSeconds should be 300 seconds.
	RepeatIntervalInSeconds int `pulumi:"repeatIntervalInSeconds"`
	// (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the script. scriptId is mandatory for creation of SCRIPTED_BROWSER and SCRIPTED_REST monitor types. For other monitor types, it should be set to null.
	ScriptId *string `pulumi:"scriptId"`
	// Name of the script.
	ScriptName *string `pulumi:"scriptName"`
	// (Updatable) List of script parameters in the monitor. This is valid only for SCRIPTED_BROWSER and SCRIPTED_REST monitor types. For other monitor types, it should be set to null. Example: `[{"paramName": "userid", "paramValue":"testuser"}]`
	ScriptParameters []ApmSyntheticsMonitorScriptParameter `pulumi:"scriptParameters"`
	// (Updatable) Enables or disables the monitor.
	Status *string `pulumi:"status"`
	// (Updatable) Specify the endpoint on which to run the monitor. For BROWSER and REST monitor types, target is mandatory. If target is specified in the SCRIPTED_BROWSER monitor type, then the monitor will run the selected script (specified by scriptId in monitor) against the specified target endpoint. If target is not specified in the SCRIPTED_BROWSER monitor type, then the monitor will run the selected script as it is.
	Target *string `pulumi:"target"`
	// (Updatable) Timeout in seconds. Timeout cannot be more than 30% of repeatIntervalInSeconds time for monitors. Also, timeoutInSeconds should be a multiple of 60. Monitor will be allowed to run only for timeoutInSeconds time. It would be terminated after that.
	TimeoutInSeconds *int `pulumi:"timeoutInSeconds"`
	// (Updatable) A list of vantage points from which to execute the monitor. Use /publicVantagePoints to fetch public vantage points.
	VantagePoints []string `pulumi:"vantagePoints"`
}

// The set of arguments for constructing a ApmSyntheticsMonitor resource.
type ApmSyntheticsMonitorArgs struct {
	// (Updatable) The APM domain ID the request is intended for.
	ApmDomainId pulumi.StringInput
	// (Updatable) Details of monitor configuration.
	Configuration ApmSyntheticsMonitorConfigurationPtrInput
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
	DefinedTags pulumi.MapInput
	// (Updatable) Unique name that can be edited. The name should not contain any confidential information.
	DisplayName pulumi.StringInput
	// (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
	FreeformTags pulumi.MapInput
	// Type of monitor.
	MonitorType pulumi.StringInput
	// (Updatable) Interval in seconds after the start time when the job should be repeated. Minimum repeatIntervalInSeconds should be 300 seconds.
	RepeatIntervalInSeconds pulumi.IntInput
	// (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the script. scriptId is mandatory for creation of SCRIPTED_BROWSER and SCRIPTED_REST monitor types. For other monitor types, it should be set to null.
	ScriptId pulumi.StringPtrInput
	// Name of the script.
	ScriptName pulumi.StringPtrInput
	// (Updatable) List of script parameters in the monitor. This is valid only for SCRIPTED_BROWSER and SCRIPTED_REST monitor types. For other monitor types, it should be set to null. Example: `[{"paramName": "userid", "paramValue":"testuser"}]`
	ScriptParameters ApmSyntheticsMonitorScriptParameterArrayInput
	// (Updatable) Enables or disables the monitor.
	Status pulumi.StringPtrInput
	// (Updatable) Specify the endpoint on which to run the monitor. For BROWSER and REST monitor types, target is mandatory. If target is specified in the SCRIPTED_BROWSER monitor type, then the monitor will run the selected script (specified by scriptId in monitor) against the specified target endpoint. If target is not specified in the SCRIPTED_BROWSER monitor type, then the monitor will run the selected script as it is.
	Target pulumi.StringPtrInput
	// (Updatable) Timeout in seconds. Timeout cannot be more than 30% of repeatIntervalInSeconds time for monitors. Also, timeoutInSeconds should be a multiple of 60. Monitor will be allowed to run only for timeoutInSeconds time. It would be terminated after that.
	TimeoutInSeconds pulumi.IntPtrInput
	// (Updatable) A list of vantage points from which to execute the monitor. Use /publicVantagePoints to fetch public vantage points.
	VantagePoints pulumi.StringArrayInput
}

func (ApmSyntheticsMonitorArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*apmSyntheticsMonitorArgs)(nil)).Elem()
}

type ApmSyntheticsMonitorInput interface {
	pulumi.Input

	ToApmSyntheticsMonitorOutput() ApmSyntheticsMonitorOutput
	ToApmSyntheticsMonitorOutputWithContext(ctx context.Context) ApmSyntheticsMonitorOutput
}

func (*ApmSyntheticsMonitor) ElementType() reflect.Type {
	return reflect.TypeOf((*ApmSyntheticsMonitor)(nil))
}

func (i *ApmSyntheticsMonitor) ToApmSyntheticsMonitorOutput() ApmSyntheticsMonitorOutput {
	return i.ToApmSyntheticsMonitorOutputWithContext(context.Background())
}

func (i *ApmSyntheticsMonitor) ToApmSyntheticsMonitorOutputWithContext(ctx context.Context) ApmSyntheticsMonitorOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApmSyntheticsMonitorOutput)
}

func (i *ApmSyntheticsMonitor) ToApmSyntheticsMonitorPtrOutput() ApmSyntheticsMonitorPtrOutput {
	return i.ToApmSyntheticsMonitorPtrOutputWithContext(context.Background())
}

func (i *ApmSyntheticsMonitor) ToApmSyntheticsMonitorPtrOutputWithContext(ctx context.Context) ApmSyntheticsMonitorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApmSyntheticsMonitorPtrOutput)
}

type ApmSyntheticsMonitorPtrInput interface {
	pulumi.Input

	ToApmSyntheticsMonitorPtrOutput() ApmSyntheticsMonitorPtrOutput
	ToApmSyntheticsMonitorPtrOutputWithContext(ctx context.Context) ApmSyntheticsMonitorPtrOutput
}

type apmSyntheticsMonitorPtrType ApmSyntheticsMonitorArgs

func (*apmSyntheticsMonitorPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**ApmSyntheticsMonitor)(nil))
}

func (i *apmSyntheticsMonitorPtrType) ToApmSyntheticsMonitorPtrOutput() ApmSyntheticsMonitorPtrOutput {
	return i.ToApmSyntheticsMonitorPtrOutputWithContext(context.Background())
}

func (i *apmSyntheticsMonitorPtrType) ToApmSyntheticsMonitorPtrOutputWithContext(ctx context.Context) ApmSyntheticsMonitorPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApmSyntheticsMonitorPtrOutput)
}

// ApmSyntheticsMonitorArrayInput is an input type that accepts ApmSyntheticsMonitorArray and ApmSyntheticsMonitorArrayOutput values.
// You can construct a concrete instance of `ApmSyntheticsMonitorArrayInput` via:
//
//          ApmSyntheticsMonitorArray{ ApmSyntheticsMonitorArgs{...} }
type ApmSyntheticsMonitorArrayInput interface {
	pulumi.Input

	ToApmSyntheticsMonitorArrayOutput() ApmSyntheticsMonitorArrayOutput
	ToApmSyntheticsMonitorArrayOutputWithContext(context.Context) ApmSyntheticsMonitorArrayOutput
}

type ApmSyntheticsMonitorArray []ApmSyntheticsMonitorInput

func (ApmSyntheticsMonitorArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ApmSyntheticsMonitor)(nil)).Elem()
}

func (i ApmSyntheticsMonitorArray) ToApmSyntheticsMonitorArrayOutput() ApmSyntheticsMonitorArrayOutput {
	return i.ToApmSyntheticsMonitorArrayOutputWithContext(context.Background())
}

func (i ApmSyntheticsMonitorArray) ToApmSyntheticsMonitorArrayOutputWithContext(ctx context.Context) ApmSyntheticsMonitorArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApmSyntheticsMonitorArrayOutput)
}

// ApmSyntheticsMonitorMapInput is an input type that accepts ApmSyntheticsMonitorMap and ApmSyntheticsMonitorMapOutput values.
// You can construct a concrete instance of `ApmSyntheticsMonitorMapInput` via:
//
//          ApmSyntheticsMonitorMap{ "key": ApmSyntheticsMonitorArgs{...} }
type ApmSyntheticsMonitorMapInput interface {
	pulumi.Input

	ToApmSyntheticsMonitorMapOutput() ApmSyntheticsMonitorMapOutput
	ToApmSyntheticsMonitorMapOutputWithContext(context.Context) ApmSyntheticsMonitorMapOutput
}

type ApmSyntheticsMonitorMap map[string]ApmSyntheticsMonitorInput

func (ApmSyntheticsMonitorMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ApmSyntheticsMonitor)(nil)).Elem()
}

func (i ApmSyntheticsMonitorMap) ToApmSyntheticsMonitorMapOutput() ApmSyntheticsMonitorMapOutput {
	return i.ToApmSyntheticsMonitorMapOutputWithContext(context.Background())
}

func (i ApmSyntheticsMonitorMap) ToApmSyntheticsMonitorMapOutputWithContext(ctx context.Context) ApmSyntheticsMonitorMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApmSyntheticsMonitorMapOutput)
}

type ApmSyntheticsMonitorOutput struct {
	*pulumi.OutputState
}

func (ApmSyntheticsMonitorOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*ApmSyntheticsMonitor)(nil))
}

func (o ApmSyntheticsMonitorOutput) ToApmSyntheticsMonitorOutput() ApmSyntheticsMonitorOutput {
	return o
}

func (o ApmSyntheticsMonitorOutput) ToApmSyntheticsMonitorOutputWithContext(ctx context.Context) ApmSyntheticsMonitorOutput {
	return o
}

func (o ApmSyntheticsMonitorOutput) ToApmSyntheticsMonitorPtrOutput() ApmSyntheticsMonitorPtrOutput {
	return o.ToApmSyntheticsMonitorPtrOutputWithContext(context.Background())
}

func (o ApmSyntheticsMonitorOutput) ToApmSyntheticsMonitorPtrOutputWithContext(ctx context.Context) ApmSyntheticsMonitorPtrOutput {
	return o.ApplyT(func(v ApmSyntheticsMonitor) *ApmSyntheticsMonitor {
		return &v
	}).(ApmSyntheticsMonitorPtrOutput)
}

type ApmSyntheticsMonitorPtrOutput struct {
	*pulumi.OutputState
}

func (ApmSyntheticsMonitorPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApmSyntheticsMonitor)(nil))
}

func (o ApmSyntheticsMonitorPtrOutput) ToApmSyntheticsMonitorPtrOutput() ApmSyntheticsMonitorPtrOutput {
	return o
}

func (o ApmSyntheticsMonitorPtrOutput) ToApmSyntheticsMonitorPtrOutputWithContext(ctx context.Context) ApmSyntheticsMonitorPtrOutput {
	return o
}

type ApmSyntheticsMonitorArrayOutput struct{ *pulumi.OutputState }

func (ApmSyntheticsMonitorArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]ApmSyntheticsMonitor)(nil))
}

func (o ApmSyntheticsMonitorArrayOutput) ToApmSyntheticsMonitorArrayOutput() ApmSyntheticsMonitorArrayOutput {
	return o
}

func (o ApmSyntheticsMonitorArrayOutput) ToApmSyntheticsMonitorArrayOutputWithContext(ctx context.Context) ApmSyntheticsMonitorArrayOutput {
	return o
}

func (o ApmSyntheticsMonitorArrayOutput) Index(i pulumi.IntInput) ApmSyntheticsMonitorOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) ApmSyntheticsMonitor {
		return vs[0].([]ApmSyntheticsMonitor)[vs[1].(int)]
	}).(ApmSyntheticsMonitorOutput)
}

type ApmSyntheticsMonitorMapOutput struct{ *pulumi.OutputState }

func (ApmSyntheticsMonitorMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]ApmSyntheticsMonitor)(nil))
}

func (o ApmSyntheticsMonitorMapOutput) ToApmSyntheticsMonitorMapOutput() ApmSyntheticsMonitorMapOutput {
	return o
}

func (o ApmSyntheticsMonitorMapOutput) ToApmSyntheticsMonitorMapOutputWithContext(ctx context.Context) ApmSyntheticsMonitorMapOutput {
	return o
}

func (o ApmSyntheticsMonitorMapOutput) MapIndex(k pulumi.StringInput) ApmSyntheticsMonitorOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) ApmSyntheticsMonitor {
		return vs[0].(map[string]ApmSyntheticsMonitor)[vs[1].(string)]
	}).(ApmSyntheticsMonitorOutput)
}

func init() {
	pulumi.RegisterOutputType(ApmSyntheticsMonitorOutput{})
	pulumi.RegisterOutputType(ApmSyntheticsMonitorPtrOutput{})
	pulumi.RegisterOutputType(ApmSyntheticsMonitorArrayOutput{})
	pulumi.RegisterOutputType(ApmSyntheticsMonitorMapOutput{})
}
