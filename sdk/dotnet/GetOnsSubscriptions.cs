// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci
{
    public static class GetOnsSubscriptions
    {
        /// <summary>
        /// This data source provides the list of Subscriptions in Oracle Cloud Infrastructure Notifications service.
        /// 
        /// Lists the subscriptions in the specified compartment or topic.
        /// 
        /// Transactions Per Minute (TPM) per-tenancy limit for this operation: 60.
        /// 
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var testSubscriptions = Output.Create(Oci.GetOnsSubscriptions.InvokeAsync(new Oci.GetOnsSubscriptionsArgs
        ///         {
        ///             CompartmentId = @var.Compartment_id,
        ///             TopicId = oci_ons_notification_topic.Test_notification_topic.Id,
        ///         }));
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetOnsSubscriptionsResult> InvokeAsync(GetOnsSubscriptionsArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetOnsSubscriptionsResult>("oci:index/getOnsSubscriptions:GetOnsSubscriptions", args ?? new GetOnsSubscriptionsArgs(), options.WithVersion());
    }


    public sealed class GetOnsSubscriptionsArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment.
        /// </summary>
        [Input("compartmentId", required: true)]
        public string CompartmentId { get; set; } = null!;

        [Input("filters")]
        private List<Inputs.GetOnsSubscriptionsFilterArgs>? _filters;
        public List<Inputs.GetOnsSubscriptionsFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetOnsSubscriptionsFilterArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// Return all subscriptions that are subscribed to the given topic OCID. Either this query parameter or the compartmentId query parameter must be set.
        /// </summary>
        [Input("topicId")]
        public string? TopicId { get; set; }

        public GetOnsSubscriptionsArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetOnsSubscriptionsResult
    {
        /// <summary>
        /// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment for the subscription.
        /// </summary>
        public readonly string CompartmentId;
        public readonly ImmutableArray<Outputs.GetOnsSubscriptionsFilterResult> Filters;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// The list of subscriptions.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetOnsSubscriptionsSubscriptionResult> Subscriptions;
        /// <summary>
        /// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the associated topic.
        /// </summary>
        public readonly string? TopicId;

        [OutputConstructor]
        private GetOnsSubscriptionsResult(
            string compartmentId,

            ImmutableArray<Outputs.GetOnsSubscriptionsFilterResult> filters,

            string id,

            ImmutableArray<Outputs.GetOnsSubscriptionsSubscriptionResult> subscriptions,

            string? topicId)
        {
            CompartmentId = compartmentId;
            Filters = filters;
            Id = id;
            Subscriptions = subscriptions;
            TopicId = topicId;
        }
    }
}
