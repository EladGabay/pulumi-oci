// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci.Outputs
{

    [OutputType]
    public sealed class GetApigatewayApiDeploymentSpecificationRouteRequestPoliciesResult
    {
        /// <summary>
        /// If authentication has been performed, validate whether the request scope (if any) applies to this route. If no RouteAuthorizationPolicy is defined for a route, a policy with a type of AUTHENTICATION_ONLY is applied.
        /// </summary>
        public readonly Outputs.GetApigatewayApiDeploymentSpecificationRouteRequestPoliciesAuthorizationResult Authorization;
        /// <summary>
        /// Validate the payload body of the incoming API requests on a specific route.
        /// </summary>
        public readonly Outputs.GetApigatewayApiDeploymentSpecificationRouteRequestPoliciesBodyValidationResult BodyValidation;
        /// <summary>
        /// Enable CORS (Cross-Origin-Resource-Sharing) request handling.
        /// </summary>
        public readonly Outputs.GetApigatewayApiDeploymentSpecificationRouteRequestPoliciesCorsResult Cors;
        /// <summary>
        /// A set of transformations to apply to HTTP headers that pass through the gateway.
        /// </summary>
        public readonly Outputs.GetApigatewayApiDeploymentSpecificationRouteRequestPoliciesHeaderTransformationsResult HeaderTransformations;
        /// <summary>
        /// Validate the HTTP headers on the incoming API requests on a specific route.
        /// </summary>
        public readonly Outputs.GetApigatewayApiDeploymentSpecificationRouteRequestPoliciesHeaderValidationsResult HeaderValidations;
        /// <summary>
        /// A set of transformations to apply to query parameters that pass through the gateway.
        /// </summary>
        public readonly Outputs.GetApigatewayApiDeploymentSpecificationRouteRequestPoliciesQueryParameterTransformationsResult QueryParameterTransformations;
        /// <summary>
        /// Validate the URL query parameters on the incoming API requests on a specific route.
        /// </summary>
        public readonly Outputs.GetApigatewayApiDeploymentSpecificationRouteRequestPoliciesQueryParameterValidationsResult QueryParameterValidations;
        /// <summary>
        /// Base policy for Response Cache lookup.
        /// </summary>
        public readonly Outputs.GetApigatewayApiDeploymentSpecificationRouteRequestPoliciesResponseCacheLookupResult ResponseCacheLookup;

        [OutputConstructor]
        private GetApigatewayApiDeploymentSpecificationRouteRequestPoliciesResult(
            Outputs.GetApigatewayApiDeploymentSpecificationRouteRequestPoliciesAuthorizationResult authorization,

            Outputs.GetApigatewayApiDeploymentSpecificationRouteRequestPoliciesBodyValidationResult bodyValidation,

            Outputs.GetApigatewayApiDeploymentSpecificationRouteRequestPoliciesCorsResult cors,

            Outputs.GetApigatewayApiDeploymentSpecificationRouteRequestPoliciesHeaderTransformationsResult headerTransformations,

            Outputs.GetApigatewayApiDeploymentSpecificationRouteRequestPoliciesHeaderValidationsResult headerValidations,

            Outputs.GetApigatewayApiDeploymentSpecificationRouteRequestPoliciesQueryParameterTransformationsResult queryParameterTransformations,

            Outputs.GetApigatewayApiDeploymentSpecificationRouteRequestPoliciesQueryParameterValidationsResult queryParameterValidations,

            Outputs.GetApigatewayApiDeploymentSpecificationRouteRequestPoliciesResponseCacheLookupResult responseCacheLookup)
        {
            Authorization = authorization;
            BodyValidation = bodyValidation;
            Cors = cors;
            HeaderTransformations = headerTransformations;
            HeaderValidations = headerValidations;
            QueryParameterTransformations = queryParameterTransformations;
            QueryParameterValidations = queryParameterValidations;
            ResponseCacheLookup = responseCacheLookup;
        }
    }
}
