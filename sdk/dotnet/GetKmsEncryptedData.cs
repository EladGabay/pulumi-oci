// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci
{
    public static class GetKmsEncryptedData
    {
        /// <summary>
        /// The `oci.KmsEncryptedData` data source provides details about a specific EncryptedData
        /// 
        /// Encrypts data using the given EncryptDataDetails resource. 
        /// Plaintext included in the example request is a base64-encoded value 
        /// of a UTF-8 string.
        /// 
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var testEncryptedData = Output.Create(Oci.GetKmsEncryptedData.InvokeAsync(new Oci.GetKmsEncryptedDataArgs
        ///         {
        ///             CryptoEndpoint = @var.Encrypted_data_crypto_endpoint,
        ///             KeyId = oci_kms_key.Test_key.Id,
        ///             Plaintext = @var.Encrypted_data_plaintext,
        ///             AssociatedData = @var.Encrypted_data_associated_data,
        ///         }));
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetKmsEncryptedDataResult> InvokeAsync(GetKmsEncryptedDataArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetKmsEncryptedDataResult>("oci:index/getKmsEncryptedData:GetKmsEncryptedData", args ?? new GetKmsEncryptedDataArgs(), options.WithVersion());
    }


    public sealed class GetKmsEncryptedDataArgs : Pulumi.InvokeArgs
    {
        [Input("associatedData")]
        private Dictionary<string, object>? _associatedData;

        /// <summary>
        /// Information that can be used to provide an encryption context for the encrypted data. The length of the string representation of the associatedData must be fewer than 4096 characters.
        /// </summary>
        public Dictionary<string, object> AssociatedData
        {
            get => _associatedData ?? (_associatedData = new Dictionary<string, object>());
            set => _associatedData = value;
        }

        /// <summary>
        /// The service endpoint to perform cryptographic operations against. Cryptographic operations include 'Encrypt,' 'Decrypt,' and 'GenerateDataEncryptionKey' operations. see Vault Crypto endpoint.
        /// </summary>
        [Input("cryptoEndpoint", required: true)]
        public string CryptoEndpoint { get; set; } = null!;

        /// <summary>
        /// The OCID of the key to encrypt with.
        /// </summary>
        [Input("keyId", required: true)]
        public string KeyId { get; set; } = null!;

        /// <summary>
        /// The plaintext data to encrypt.
        /// </summary>
        [Input("plaintext", required: true)]
        public string Plaintext { get; set; } = null!;

        public GetKmsEncryptedDataArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetKmsEncryptedDataResult
    {
        public readonly ImmutableDictionary<string, object>? AssociatedData;
        /// <summary>
        /// The encrypted data.
        /// </summary>
        public readonly string Ciphertext;
        public readonly string CryptoEndpoint;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string KeyId;
        public readonly string Plaintext;

        [OutputConstructor]
        private GetKmsEncryptedDataResult(
            ImmutableDictionary<string, object>? associatedData,

            string ciphertext,

            string cryptoEndpoint,

            string id,

            string keyId,

            string plaintext)
        {
            AssociatedData = associatedData;
            Ciphertext = ciphertext;
            CryptoEndpoint = cryptoEndpoint;
            Id = id;
            KeyId = keyId;
            Plaintext = plaintext;
        }
    }
}
