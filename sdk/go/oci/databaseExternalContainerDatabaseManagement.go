// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package oci

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource provides the External Container Database Management resource in Oracle Cloud Infrastructure Database service.
//
// Enables Database Management Service for the external container database.
// For more information about the Database Management Service, see
// [Database Management Service](https://docs.cloud.oracle.com/iaas/Content/ExternalDatabase/Concepts/databasemanagementservice.htm).
//
// ## Import
//
// Import is not supported for this resource.
type DatabaseExternalContainerDatabaseManagement struct {
	pulumi.CustomResourceState

	EnableManagement pulumi.BoolOutput `pulumi:"enableManagement"`
	// The ExternalContainerDatabase [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
	ExternalContainerDatabaseId pulumi.StringOutput `pulumi:"externalContainerDatabaseId"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the [external database connector](https://docs.cloud.oracle.com/iaas/api/#/en/database/latest/datatypes/CreateExternalDatabaseConnectorDetails).
	ExternalDatabaseConnectorId pulumi.StringOutput `pulumi:"externalDatabaseConnectorId"`
	// The Oracle license model that applies to the external database. Required only for enabling database management.
	LicenseModel pulumi.StringOutput `pulumi:"licenseModel"`
}

// NewDatabaseExternalContainerDatabaseManagement registers a new resource with the given unique name, arguments, and options.
func NewDatabaseExternalContainerDatabaseManagement(ctx *pulumi.Context,
	name string, args *DatabaseExternalContainerDatabaseManagementArgs, opts ...pulumi.ResourceOption) (*DatabaseExternalContainerDatabaseManagement, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.EnableManagement == nil {
		return nil, errors.New("invalid value for required argument 'EnableManagement'")
	}
	if args.ExternalContainerDatabaseId == nil {
		return nil, errors.New("invalid value for required argument 'ExternalContainerDatabaseId'")
	}
	if args.ExternalDatabaseConnectorId == nil {
		return nil, errors.New("invalid value for required argument 'ExternalDatabaseConnectorId'")
	}
	var resource DatabaseExternalContainerDatabaseManagement
	err := ctx.RegisterResource("oci:index/databaseExternalContainerDatabaseManagement:DatabaseExternalContainerDatabaseManagement", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDatabaseExternalContainerDatabaseManagement gets an existing DatabaseExternalContainerDatabaseManagement resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDatabaseExternalContainerDatabaseManagement(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DatabaseExternalContainerDatabaseManagementState, opts ...pulumi.ResourceOption) (*DatabaseExternalContainerDatabaseManagement, error) {
	var resource DatabaseExternalContainerDatabaseManagement
	err := ctx.ReadResource("oci:index/databaseExternalContainerDatabaseManagement:DatabaseExternalContainerDatabaseManagement", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DatabaseExternalContainerDatabaseManagement resources.
type databaseExternalContainerDatabaseManagementState struct {
	EnableManagement *bool `pulumi:"enableManagement"`
	// The ExternalContainerDatabase [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
	ExternalContainerDatabaseId *string `pulumi:"externalContainerDatabaseId"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the [external database connector](https://docs.cloud.oracle.com/iaas/api/#/en/database/latest/datatypes/CreateExternalDatabaseConnectorDetails).
	ExternalDatabaseConnectorId *string `pulumi:"externalDatabaseConnectorId"`
	// The Oracle license model that applies to the external database. Required only for enabling database management.
	LicenseModel *string `pulumi:"licenseModel"`
}

type DatabaseExternalContainerDatabaseManagementState struct {
	EnableManagement pulumi.BoolPtrInput
	// The ExternalContainerDatabase [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
	ExternalContainerDatabaseId pulumi.StringPtrInput
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the [external database connector](https://docs.cloud.oracle.com/iaas/api/#/en/database/latest/datatypes/CreateExternalDatabaseConnectorDetails).
	ExternalDatabaseConnectorId pulumi.StringPtrInput
	// The Oracle license model that applies to the external database. Required only for enabling database management.
	LicenseModel pulumi.StringPtrInput
}

func (DatabaseExternalContainerDatabaseManagementState) ElementType() reflect.Type {
	return reflect.TypeOf((*databaseExternalContainerDatabaseManagementState)(nil)).Elem()
}

type databaseExternalContainerDatabaseManagementArgs struct {
	EnableManagement bool `pulumi:"enableManagement"`
	// The ExternalContainerDatabase [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
	ExternalContainerDatabaseId string `pulumi:"externalContainerDatabaseId"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the [external database connector](https://docs.cloud.oracle.com/iaas/api/#/en/database/latest/datatypes/CreateExternalDatabaseConnectorDetails).
	ExternalDatabaseConnectorId string `pulumi:"externalDatabaseConnectorId"`
	// The Oracle license model that applies to the external database. Required only for enabling database management.
	LicenseModel *string `pulumi:"licenseModel"`
}

// The set of arguments for constructing a DatabaseExternalContainerDatabaseManagement resource.
type DatabaseExternalContainerDatabaseManagementArgs struct {
	EnableManagement pulumi.BoolInput
	// The ExternalContainerDatabase [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
	ExternalContainerDatabaseId pulumi.StringInput
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the [external database connector](https://docs.cloud.oracle.com/iaas/api/#/en/database/latest/datatypes/CreateExternalDatabaseConnectorDetails).
	ExternalDatabaseConnectorId pulumi.StringInput
	// The Oracle license model that applies to the external database. Required only for enabling database management.
	LicenseModel pulumi.StringPtrInput
}

func (DatabaseExternalContainerDatabaseManagementArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*databaseExternalContainerDatabaseManagementArgs)(nil)).Elem()
}

type DatabaseExternalContainerDatabaseManagementInput interface {
	pulumi.Input

	ToDatabaseExternalContainerDatabaseManagementOutput() DatabaseExternalContainerDatabaseManagementOutput
	ToDatabaseExternalContainerDatabaseManagementOutputWithContext(ctx context.Context) DatabaseExternalContainerDatabaseManagementOutput
}

func (*DatabaseExternalContainerDatabaseManagement) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseExternalContainerDatabaseManagement)(nil))
}

func (i *DatabaseExternalContainerDatabaseManagement) ToDatabaseExternalContainerDatabaseManagementOutput() DatabaseExternalContainerDatabaseManagementOutput {
	return i.ToDatabaseExternalContainerDatabaseManagementOutputWithContext(context.Background())
}

func (i *DatabaseExternalContainerDatabaseManagement) ToDatabaseExternalContainerDatabaseManagementOutputWithContext(ctx context.Context) DatabaseExternalContainerDatabaseManagementOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseExternalContainerDatabaseManagementOutput)
}

func (i *DatabaseExternalContainerDatabaseManagement) ToDatabaseExternalContainerDatabaseManagementPtrOutput() DatabaseExternalContainerDatabaseManagementPtrOutput {
	return i.ToDatabaseExternalContainerDatabaseManagementPtrOutputWithContext(context.Background())
}

func (i *DatabaseExternalContainerDatabaseManagement) ToDatabaseExternalContainerDatabaseManagementPtrOutputWithContext(ctx context.Context) DatabaseExternalContainerDatabaseManagementPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseExternalContainerDatabaseManagementPtrOutput)
}

type DatabaseExternalContainerDatabaseManagementPtrInput interface {
	pulumi.Input

	ToDatabaseExternalContainerDatabaseManagementPtrOutput() DatabaseExternalContainerDatabaseManagementPtrOutput
	ToDatabaseExternalContainerDatabaseManagementPtrOutputWithContext(ctx context.Context) DatabaseExternalContainerDatabaseManagementPtrOutput
}

type databaseExternalContainerDatabaseManagementPtrType DatabaseExternalContainerDatabaseManagementArgs

func (*databaseExternalContainerDatabaseManagementPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DatabaseExternalContainerDatabaseManagement)(nil))
}

func (i *databaseExternalContainerDatabaseManagementPtrType) ToDatabaseExternalContainerDatabaseManagementPtrOutput() DatabaseExternalContainerDatabaseManagementPtrOutput {
	return i.ToDatabaseExternalContainerDatabaseManagementPtrOutputWithContext(context.Background())
}

func (i *databaseExternalContainerDatabaseManagementPtrType) ToDatabaseExternalContainerDatabaseManagementPtrOutputWithContext(ctx context.Context) DatabaseExternalContainerDatabaseManagementPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseExternalContainerDatabaseManagementPtrOutput)
}

// DatabaseExternalContainerDatabaseManagementArrayInput is an input type that accepts DatabaseExternalContainerDatabaseManagementArray and DatabaseExternalContainerDatabaseManagementArrayOutput values.
// You can construct a concrete instance of `DatabaseExternalContainerDatabaseManagementArrayInput` via:
//
//          DatabaseExternalContainerDatabaseManagementArray{ DatabaseExternalContainerDatabaseManagementArgs{...} }
type DatabaseExternalContainerDatabaseManagementArrayInput interface {
	pulumi.Input

	ToDatabaseExternalContainerDatabaseManagementArrayOutput() DatabaseExternalContainerDatabaseManagementArrayOutput
	ToDatabaseExternalContainerDatabaseManagementArrayOutputWithContext(context.Context) DatabaseExternalContainerDatabaseManagementArrayOutput
}

type DatabaseExternalContainerDatabaseManagementArray []DatabaseExternalContainerDatabaseManagementInput

func (DatabaseExternalContainerDatabaseManagementArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DatabaseExternalContainerDatabaseManagement)(nil)).Elem()
}

func (i DatabaseExternalContainerDatabaseManagementArray) ToDatabaseExternalContainerDatabaseManagementArrayOutput() DatabaseExternalContainerDatabaseManagementArrayOutput {
	return i.ToDatabaseExternalContainerDatabaseManagementArrayOutputWithContext(context.Background())
}

func (i DatabaseExternalContainerDatabaseManagementArray) ToDatabaseExternalContainerDatabaseManagementArrayOutputWithContext(ctx context.Context) DatabaseExternalContainerDatabaseManagementArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseExternalContainerDatabaseManagementArrayOutput)
}

// DatabaseExternalContainerDatabaseManagementMapInput is an input type that accepts DatabaseExternalContainerDatabaseManagementMap and DatabaseExternalContainerDatabaseManagementMapOutput values.
// You can construct a concrete instance of `DatabaseExternalContainerDatabaseManagementMapInput` via:
//
//          DatabaseExternalContainerDatabaseManagementMap{ "key": DatabaseExternalContainerDatabaseManagementArgs{...} }
type DatabaseExternalContainerDatabaseManagementMapInput interface {
	pulumi.Input

	ToDatabaseExternalContainerDatabaseManagementMapOutput() DatabaseExternalContainerDatabaseManagementMapOutput
	ToDatabaseExternalContainerDatabaseManagementMapOutputWithContext(context.Context) DatabaseExternalContainerDatabaseManagementMapOutput
}

type DatabaseExternalContainerDatabaseManagementMap map[string]DatabaseExternalContainerDatabaseManagementInput

func (DatabaseExternalContainerDatabaseManagementMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DatabaseExternalContainerDatabaseManagement)(nil)).Elem()
}

func (i DatabaseExternalContainerDatabaseManagementMap) ToDatabaseExternalContainerDatabaseManagementMapOutput() DatabaseExternalContainerDatabaseManagementMapOutput {
	return i.ToDatabaseExternalContainerDatabaseManagementMapOutputWithContext(context.Background())
}

func (i DatabaseExternalContainerDatabaseManagementMap) ToDatabaseExternalContainerDatabaseManagementMapOutputWithContext(ctx context.Context) DatabaseExternalContainerDatabaseManagementMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseExternalContainerDatabaseManagementMapOutput)
}

type DatabaseExternalContainerDatabaseManagementOutput struct {
	*pulumi.OutputState
}

func (DatabaseExternalContainerDatabaseManagementOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseExternalContainerDatabaseManagement)(nil))
}

func (o DatabaseExternalContainerDatabaseManagementOutput) ToDatabaseExternalContainerDatabaseManagementOutput() DatabaseExternalContainerDatabaseManagementOutput {
	return o
}

func (o DatabaseExternalContainerDatabaseManagementOutput) ToDatabaseExternalContainerDatabaseManagementOutputWithContext(ctx context.Context) DatabaseExternalContainerDatabaseManagementOutput {
	return o
}

func (o DatabaseExternalContainerDatabaseManagementOutput) ToDatabaseExternalContainerDatabaseManagementPtrOutput() DatabaseExternalContainerDatabaseManagementPtrOutput {
	return o.ToDatabaseExternalContainerDatabaseManagementPtrOutputWithContext(context.Background())
}

func (o DatabaseExternalContainerDatabaseManagementOutput) ToDatabaseExternalContainerDatabaseManagementPtrOutputWithContext(ctx context.Context) DatabaseExternalContainerDatabaseManagementPtrOutput {
	return o.ApplyT(func(v DatabaseExternalContainerDatabaseManagement) *DatabaseExternalContainerDatabaseManagement {
		return &v
	}).(DatabaseExternalContainerDatabaseManagementPtrOutput)
}

type DatabaseExternalContainerDatabaseManagementPtrOutput struct {
	*pulumi.OutputState
}

func (DatabaseExternalContainerDatabaseManagementPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DatabaseExternalContainerDatabaseManagement)(nil))
}

func (o DatabaseExternalContainerDatabaseManagementPtrOutput) ToDatabaseExternalContainerDatabaseManagementPtrOutput() DatabaseExternalContainerDatabaseManagementPtrOutput {
	return o
}

func (o DatabaseExternalContainerDatabaseManagementPtrOutput) ToDatabaseExternalContainerDatabaseManagementPtrOutputWithContext(ctx context.Context) DatabaseExternalContainerDatabaseManagementPtrOutput {
	return o
}

type DatabaseExternalContainerDatabaseManagementArrayOutput struct{ *pulumi.OutputState }

func (DatabaseExternalContainerDatabaseManagementArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DatabaseExternalContainerDatabaseManagement)(nil))
}

func (o DatabaseExternalContainerDatabaseManagementArrayOutput) ToDatabaseExternalContainerDatabaseManagementArrayOutput() DatabaseExternalContainerDatabaseManagementArrayOutput {
	return o
}

func (o DatabaseExternalContainerDatabaseManagementArrayOutput) ToDatabaseExternalContainerDatabaseManagementArrayOutputWithContext(ctx context.Context) DatabaseExternalContainerDatabaseManagementArrayOutput {
	return o
}

func (o DatabaseExternalContainerDatabaseManagementArrayOutput) Index(i pulumi.IntInput) DatabaseExternalContainerDatabaseManagementOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DatabaseExternalContainerDatabaseManagement {
		return vs[0].([]DatabaseExternalContainerDatabaseManagement)[vs[1].(int)]
	}).(DatabaseExternalContainerDatabaseManagementOutput)
}

type DatabaseExternalContainerDatabaseManagementMapOutput struct{ *pulumi.OutputState }

func (DatabaseExternalContainerDatabaseManagementMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]DatabaseExternalContainerDatabaseManagement)(nil))
}

func (o DatabaseExternalContainerDatabaseManagementMapOutput) ToDatabaseExternalContainerDatabaseManagementMapOutput() DatabaseExternalContainerDatabaseManagementMapOutput {
	return o
}

func (o DatabaseExternalContainerDatabaseManagementMapOutput) ToDatabaseExternalContainerDatabaseManagementMapOutputWithContext(ctx context.Context) DatabaseExternalContainerDatabaseManagementMapOutput {
	return o
}

func (o DatabaseExternalContainerDatabaseManagementMapOutput) MapIndex(k pulumi.StringInput) DatabaseExternalContainerDatabaseManagementOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) DatabaseExternalContainerDatabaseManagement {
		return vs[0].(map[string]DatabaseExternalContainerDatabaseManagement)[vs[1].(string)]
	}).(DatabaseExternalContainerDatabaseManagementOutput)
}

func init() {
	pulumi.RegisterOutputType(DatabaseExternalContainerDatabaseManagementOutput{})
	pulumi.RegisterOutputType(DatabaseExternalContainerDatabaseManagementPtrOutput{})
	pulumi.RegisterOutputType(DatabaseExternalContainerDatabaseManagementArrayOutput{})
	pulumi.RegisterOutputType(DatabaseExternalContainerDatabaseManagementMapOutput{})
}
