// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package oci

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource provides the Dkim resource in Oracle Cloud Infrastructure Email service.
//
// Creates a new DKIM for a email domain.
// This DKIM will sign all approved senders in the tenancy that are in this email domain.
// Best security practices indicate to periodically rotate the DKIM that is doing the signing.
// When a second DKIM is applied, all senders will seamlessly pick up the new key
// without interruption in signing.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-oci/sdk/go/oci"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := oci.NewEmailDkim(ctx, "testDkim", &oci.EmailDkimArgs{
// 			EmailDomainId: pulumi.Any(oci_email_email_domain.Test_email_domain.Id),
// 			DefinedTags: pulumi.AnyMap{
// 				"Operations.CostCenter": pulumi.Any("42"),
// 			},
// 			Description: pulumi.Any(_var.Dkim_description),
// 			FreeformTags: pulumi.AnyMap{
// 				"Department": pulumi.Any("Finance"),
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// Dkims can be imported using the `id`, e.g.
//
// ```sh
//  $ pulumi import oci:index/emailDkim:EmailDkim test_dkim "id"
// ```
type EmailDkim struct {
	pulumi.CustomResourceState

	// The DNS CNAME record value to provision to the DKIM DNS subdomain, when using the CNAME method for DKIM setup (preferred).
	CnameRecordValue pulumi.StringOutput `pulumi:"cnameRecordValue"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment that contains this DKIM.
	CompartmentId pulumi.StringOutput `pulumi:"compartmentId"`
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Operations.CostCenter": "42"}`
	DefinedTags pulumi.MapOutput `pulumi:"definedTags"`
	// (Updatable) A string that describes the details about the DKIM. It does not have to be unique, and you can change it. Avoid entering confidential information.
	Description pulumi.StringOutput `pulumi:"description"`
	// The name of the DNS subdomain that must be provisioned to enable email recipients to verify DKIM signatures. It is usually created with a CNAME record set to the cnameRecordValue
	DnsSubdomainName pulumi.StringOutput `pulumi:"dnsSubdomainName"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the EmailDomain for this DKIM.
	EmailDomainId pulumi.StringOutput `pulumi:"emailDomainId"`
	// (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Department": "Finance"}`
	FreeformTags pulumi.MapOutput `pulumi:"freeformTags"`
	// A message describing the current state in more detail. For example, can be used to provide actionable information for a resource.
	LifecycleDetails pulumi.StringOutput `pulumi:"lifecycleDetails"`
	// The DKIM selector. This selector is required to be globally unique for this email domain. If you do not provide the selector, we will generate one for you. If you do provide the selector, we suggest adding a short region indicator to differentiate from your signing of emails in other regions you may be subscribed to. Selectors limited to ASCII characters may use alphanumeric, dash ("-"), and dot (".") characters. Non-ASCII selector names should adopt IDNA2008 normalization (RFC 5891-5892).
	Name pulumi.StringOutput `pulumi:"name"`
	// The current state of the DKIM.
	State pulumi.StringOutput `pulumi:"state"`
	// Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{"orcl-cloud.free-tier-retained": "true"}`
	SystemTags pulumi.MapOutput `pulumi:"systemTags"`
	// The time the DKIM was created. Times are expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format, "YYYY-MM-ddThh:mmZ".  Example: `2021-02-12T22:47:12.613Z`
	TimeCreated pulumi.StringOutput `pulumi:"timeCreated"`
	// The time of the last change to the DKIM configuration, due to a state change or an update operation. Times are expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format, "YYYY-MM-ddThh:mmZ".
	TimeUpdated pulumi.StringOutput `pulumi:"timeUpdated"`
	// The DNS TXT record value to provision to the DKIM DNS subdomain in place of using a CNAME record. This is used in cases where a CNAME can not be used, such as when the cnameRecordValue would exceed the maximum length for a DNS entry. This can also be used by customers who have an existing procedure to directly provision TXT records for DKIM. Be aware that many DNS APIs will require you to break this string into segments of less than 255 characters.
	TxtRecordValue pulumi.StringOutput `pulumi:"txtRecordValue"`
}

// NewEmailDkim registers a new resource with the given unique name, arguments, and options.
func NewEmailDkim(ctx *pulumi.Context,
	name string, args *EmailDkimArgs, opts ...pulumi.ResourceOption) (*EmailDkim, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.EmailDomainId == nil {
		return nil, errors.New("invalid value for required argument 'EmailDomainId'")
	}
	var resource EmailDkim
	err := ctx.RegisterResource("oci:index/emailDkim:EmailDkim", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetEmailDkim gets an existing EmailDkim resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEmailDkim(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *EmailDkimState, opts ...pulumi.ResourceOption) (*EmailDkim, error) {
	var resource EmailDkim
	err := ctx.ReadResource("oci:index/emailDkim:EmailDkim", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering EmailDkim resources.
type emailDkimState struct {
	// The DNS CNAME record value to provision to the DKIM DNS subdomain, when using the CNAME method for DKIM setup (preferred).
	CnameRecordValue *string `pulumi:"cnameRecordValue"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment that contains this DKIM.
	CompartmentId *string `pulumi:"compartmentId"`
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Operations.CostCenter": "42"}`
	DefinedTags map[string]interface{} `pulumi:"definedTags"`
	// (Updatable) A string that describes the details about the DKIM. It does not have to be unique, and you can change it. Avoid entering confidential information.
	Description *string `pulumi:"description"`
	// The name of the DNS subdomain that must be provisioned to enable email recipients to verify DKIM signatures. It is usually created with a CNAME record set to the cnameRecordValue
	DnsSubdomainName *string `pulumi:"dnsSubdomainName"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the EmailDomain for this DKIM.
	EmailDomainId *string `pulumi:"emailDomainId"`
	// (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Department": "Finance"}`
	FreeformTags map[string]interface{} `pulumi:"freeformTags"`
	// A message describing the current state in more detail. For example, can be used to provide actionable information for a resource.
	LifecycleDetails *string `pulumi:"lifecycleDetails"`
	// The DKIM selector. This selector is required to be globally unique for this email domain. If you do not provide the selector, we will generate one for you. If you do provide the selector, we suggest adding a short region indicator to differentiate from your signing of emails in other regions you may be subscribed to. Selectors limited to ASCII characters may use alphanumeric, dash ("-"), and dot (".") characters. Non-ASCII selector names should adopt IDNA2008 normalization (RFC 5891-5892).
	Name *string `pulumi:"name"`
	// The current state of the DKIM.
	State *string `pulumi:"state"`
	// Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{"orcl-cloud.free-tier-retained": "true"}`
	SystemTags map[string]interface{} `pulumi:"systemTags"`
	// The time the DKIM was created. Times are expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format, "YYYY-MM-ddThh:mmZ".  Example: `2021-02-12T22:47:12.613Z`
	TimeCreated *string `pulumi:"timeCreated"`
	// The time of the last change to the DKIM configuration, due to a state change or an update operation. Times are expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format, "YYYY-MM-ddThh:mmZ".
	TimeUpdated *string `pulumi:"timeUpdated"`
	// The DNS TXT record value to provision to the DKIM DNS subdomain in place of using a CNAME record. This is used in cases where a CNAME can not be used, such as when the cnameRecordValue would exceed the maximum length for a DNS entry. This can also be used by customers who have an existing procedure to directly provision TXT records for DKIM. Be aware that many DNS APIs will require you to break this string into segments of less than 255 characters.
	TxtRecordValue *string `pulumi:"txtRecordValue"`
}

type EmailDkimState struct {
	// The DNS CNAME record value to provision to the DKIM DNS subdomain, when using the CNAME method for DKIM setup (preferred).
	CnameRecordValue pulumi.StringPtrInput
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment that contains this DKIM.
	CompartmentId pulumi.StringPtrInput
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Operations.CostCenter": "42"}`
	DefinedTags pulumi.MapInput
	// (Updatable) A string that describes the details about the DKIM. It does not have to be unique, and you can change it. Avoid entering confidential information.
	Description pulumi.StringPtrInput
	// The name of the DNS subdomain that must be provisioned to enable email recipients to verify DKIM signatures. It is usually created with a CNAME record set to the cnameRecordValue
	DnsSubdomainName pulumi.StringPtrInput
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the EmailDomain for this DKIM.
	EmailDomainId pulumi.StringPtrInput
	// (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Department": "Finance"}`
	FreeformTags pulumi.MapInput
	// A message describing the current state in more detail. For example, can be used to provide actionable information for a resource.
	LifecycleDetails pulumi.StringPtrInput
	// The DKIM selector. This selector is required to be globally unique for this email domain. If you do not provide the selector, we will generate one for you. If you do provide the selector, we suggest adding a short region indicator to differentiate from your signing of emails in other regions you may be subscribed to. Selectors limited to ASCII characters may use alphanumeric, dash ("-"), and dot (".") characters. Non-ASCII selector names should adopt IDNA2008 normalization (RFC 5891-5892).
	Name pulumi.StringPtrInput
	// The current state of the DKIM.
	State pulumi.StringPtrInput
	// Usage of system tag keys. These predefined keys are scoped to namespaces. Example: `{"orcl-cloud.free-tier-retained": "true"}`
	SystemTags pulumi.MapInput
	// The time the DKIM was created. Times are expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format, "YYYY-MM-ddThh:mmZ".  Example: `2021-02-12T22:47:12.613Z`
	TimeCreated pulumi.StringPtrInput
	// The time of the last change to the DKIM configuration, due to a state change or an update operation. Times are expressed in [RFC 3339](https://tools.ietf.org/html/rfc3339) timestamp format, "YYYY-MM-ddThh:mmZ".
	TimeUpdated pulumi.StringPtrInput
	// The DNS TXT record value to provision to the DKIM DNS subdomain in place of using a CNAME record. This is used in cases where a CNAME can not be used, such as when the cnameRecordValue would exceed the maximum length for a DNS entry. This can also be used by customers who have an existing procedure to directly provision TXT records for DKIM. Be aware that many DNS APIs will require you to break this string into segments of less than 255 characters.
	TxtRecordValue pulumi.StringPtrInput
}

func (EmailDkimState) ElementType() reflect.Type {
	return reflect.TypeOf((*emailDkimState)(nil)).Elem()
}

type emailDkimArgs struct {
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Operations.CostCenter": "42"}`
	DefinedTags map[string]interface{} `pulumi:"definedTags"`
	// (Updatable) A string that describes the details about the DKIM. It does not have to be unique, and you can change it. Avoid entering confidential information.
	Description *string `pulumi:"description"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the EmailDomain for this DKIM.
	EmailDomainId string `pulumi:"emailDomainId"`
	// (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Department": "Finance"}`
	FreeformTags map[string]interface{} `pulumi:"freeformTags"`
	// The DKIM selector. This selector is required to be globally unique for this email domain. If you do not provide the selector, we will generate one for you. If you do provide the selector, we suggest adding a short region indicator to differentiate from your signing of emails in other regions you may be subscribed to. Selectors limited to ASCII characters may use alphanumeric, dash ("-"), and dot (".") characters. Non-ASCII selector names should adopt IDNA2008 normalization (RFC 5891-5892).
	Name *string `pulumi:"name"`
}

// The set of arguments for constructing a EmailDkim resource.
type EmailDkimArgs struct {
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Operations.CostCenter": "42"}`
	DefinedTags pulumi.MapInput
	// (Updatable) A string that describes the details about the DKIM. It does not have to be unique, and you can change it. Avoid entering confidential information.
	Description pulumi.StringPtrInput
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the EmailDomain for this DKIM.
	EmailDomainId pulumi.StringInput
	// (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Department": "Finance"}`
	FreeformTags pulumi.MapInput
	// The DKIM selector. This selector is required to be globally unique for this email domain. If you do not provide the selector, we will generate one for you. If you do provide the selector, we suggest adding a short region indicator to differentiate from your signing of emails in other regions you may be subscribed to. Selectors limited to ASCII characters may use alphanumeric, dash ("-"), and dot (".") characters. Non-ASCII selector names should adopt IDNA2008 normalization (RFC 5891-5892).
	Name pulumi.StringPtrInput
}

func (EmailDkimArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*emailDkimArgs)(nil)).Elem()
}

type EmailDkimInput interface {
	pulumi.Input

	ToEmailDkimOutput() EmailDkimOutput
	ToEmailDkimOutputWithContext(ctx context.Context) EmailDkimOutput
}

func (*EmailDkim) ElementType() reflect.Type {
	return reflect.TypeOf((*EmailDkim)(nil))
}

func (i *EmailDkim) ToEmailDkimOutput() EmailDkimOutput {
	return i.ToEmailDkimOutputWithContext(context.Background())
}

func (i *EmailDkim) ToEmailDkimOutputWithContext(ctx context.Context) EmailDkimOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EmailDkimOutput)
}

func (i *EmailDkim) ToEmailDkimPtrOutput() EmailDkimPtrOutput {
	return i.ToEmailDkimPtrOutputWithContext(context.Background())
}

func (i *EmailDkim) ToEmailDkimPtrOutputWithContext(ctx context.Context) EmailDkimPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EmailDkimPtrOutput)
}

type EmailDkimPtrInput interface {
	pulumi.Input

	ToEmailDkimPtrOutput() EmailDkimPtrOutput
	ToEmailDkimPtrOutputWithContext(ctx context.Context) EmailDkimPtrOutput
}

type emailDkimPtrType EmailDkimArgs

func (*emailDkimPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**EmailDkim)(nil))
}

func (i *emailDkimPtrType) ToEmailDkimPtrOutput() EmailDkimPtrOutput {
	return i.ToEmailDkimPtrOutputWithContext(context.Background())
}

func (i *emailDkimPtrType) ToEmailDkimPtrOutputWithContext(ctx context.Context) EmailDkimPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EmailDkimPtrOutput)
}

// EmailDkimArrayInput is an input type that accepts EmailDkimArray and EmailDkimArrayOutput values.
// You can construct a concrete instance of `EmailDkimArrayInput` via:
//
//          EmailDkimArray{ EmailDkimArgs{...} }
type EmailDkimArrayInput interface {
	pulumi.Input

	ToEmailDkimArrayOutput() EmailDkimArrayOutput
	ToEmailDkimArrayOutputWithContext(context.Context) EmailDkimArrayOutput
}

type EmailDkimArray []EmailDkimInput

func (EmailDkimArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*EmailDkim)(nil)).Elem()
}

func (i EmailDkimArray) ToEmailDkimArrayOutput() EmailDkimArrayOutput {
	return i.ToEmailDkimArrayOutputWithContext(context.Background())
}

func (i EmailDkimArray) ToEmailDkimArrayOutputWithContext(ctx context.Context) EmailDkimArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EmailDkimArrayOutput)
}

// EmailDkimMapInput is an input type that accepts EmailDkimMap and EmailDkimMapOutput values.
// You can construct a concrete instance of `EmailDkimMapInput` via:
//
//          EmailDkimMap{ "key": EmailDkimArgs{...} }
type EmailDkimMapInput interface {
	pulumi.Input

	ToEmailDkimMapOutput() EmailDkimMapOutput
	ToEmailDkimMapOutputWithContext(context.Context) EmailDkimMapOutput
}

type EmailDkimMap map[string]EmailDkimInput

func (EmailDkimMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*EmailDkim)(nil)).Elem()
}

func (i EmailDkimMap) ToEmailDkimMapOutput() EmailDkimMapOutput {
	return i.ToEmailDkimMapOutputWithContext(context.Background())
}

func (i EmailDkimMap) ToEmailDkimMapOutputWithContext(ctx context.Context) EmailDkimMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EmailDkimMapOutput)
}

type EmailDkimOutput struct {
	*pulumi.OutputState
}

func (EmailDkimOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*EmailDkim)(nil))
}

func (o EmailDkimOutput) ToEmailDkimOutput() EmailDkimOutput {
	return o
}

func (o EmailDkimOutput) ToEmailDkimOutputWithContext(ctx context.Context) EmailDkimOutput {
	return o
}

func (o EmailDkimOutput) ToEmailDkimPtrOutput() EmailDkimPtrOutput {
	return o.ToEmailDkimPtrOutputWithContext(context.Background())
}

func (o EmailDkimOutput) ToEmailDkimPtrOutputWithContext(ctx context.Context) EmailDkimPtrOutput {
	return o.ApplyT(func(v EmailDkim) *EmailDkim {
		return &v
	}).(EmailDkimPtrOutput)
}

type EmailDkimPtrOutput struct {
	*pulumi.OutputState
}

func (EmailDkimPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EmailDkim)(nil))
}

func (o EmailDkimPtrOutput) ToEmailDkimPtrOutput() EmailDkimPtrOutput {
	return o
}

func (o EmailDkimPtrOutput) ToEmailDkimPtrOutputWithContext(ctx context.Context) EmailDkimPtrOutput {
	return o
}

type EmailDkimArrayOutput struct{ *pulumi.OutputState }

func (EmailDkimArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]EmailDkim)(nil))
}

func (o EmailDkimArrayOutput) ToEmailDkimArrayOutput() EmailDkimArrayOutput {
	return o
}

func (o EmailDkimArrayOutput) ToEmailDkimArrayOutputWithContext(ctx context.Context) EmailDkimArrayOutput {
	return o
}

func (o EmailDkimArrayOutput) Index(i pulumi.IntInput) EmailDkimOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) EmailDkim {
		return vs[0].([]EmailDkim)[vs[1].(int)]
	}).(EmailDkimOutput)
}

type EmailDkimMapOutput struct{ *pulumi.OutputState }

func (EmailDkimMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]EmailDkim)(nil))
}

func (o EmailDkimMapOutput) ToEmailDkimMapOutput() EmailDkimMapOutput {
	return o
}

func (o EmailDkimMapOutput) ToEmailDkimMapOutputWithContext(ctx context.Context) EmailDkimMapOutput {
	return o
}

func (o EmailDkimMapOutput) MapIndex(k pulumi.StringInput) EmailDkimOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) EmailDkim {
		return vs[0].(map[string]EmailDkim)[vs[1].(string)]
	}).(EmailDkimOutput)
}

func init() {
	pulumi.RegisterOutputType(EmailDkimOutput{})
	pulumi.RegisterOutputType(EmailDkimPtrOutput{})
	pulumi.RegisterOutputType(EmailDkimArrayOutput{})
	pulumi.RegisterOutputType(EmailDkimMapOutput{})
}
