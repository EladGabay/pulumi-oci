// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package oci

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource provides the Ui Password resource in Oracle Cloud Infrastructure Identity service.
//
// Creates a new Console one-time password for the specified user. For more information about user
// credentials, see [User Credentials](https://docs.cloud.oracle.com/iaas/Content/Identity/Concepts/usercredentials.htm).
//
// Use this operation after creating a new user, or if a user forgets their password. The new one-time
// password is returned to you in the response, and you must securely deliver it to the user. They'll
// be prompted to change this password the next time they sign in to the Console. If they don't change
// it within 7 days, the password will expire and you'll need to create a new one-time password for the
// user.
//
// **Note:** The user's Console login is the unique name you specified when you created the user
// (see [CreateUser](https://docs.cloud.oracle.com/iaas/api/#/en/identity/20160918/User/CreateUser)).
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-oci/sdk/go/oci"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := oci.NewIdentityUiPassword(ctx, "testUiPassword", &oci.IdentityUiPasswordArgs{
// 			UserId: pulumi.Any(oci_identity_user.Test_user.Id),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// Import is not supported for this resource.
type IdentityUiPassword struct {
	pulumi.CustomResourceState

	// The detailed status of INACTIVE lifecycleState.
	InactiveStatus pulumi.StringOutput `pulumi:"inactiveStatus"`
	// The user's password for the Console.
	Password pulumi.StringOutput `pulumi:"password"`
	// The password's current state.
	State pulumi.StringOutput `pulumi:"state"`
	// Date and time the password was created, in the format defined by RFC3339.  Example: `2016-08-25T21:10:29.600Z`
	TimeCreated pulumi.StringOutput `pulumi:"timeCreated"`
	// The OCID of the user.
	UserId pulumi.StringOutput `pulumi:"userId"`
}

// NewIdentityUiPassword registers a new resource with the given unique name, arguments, and options.
func NewIdentityUiPassword(ctx *pulumi.Context,
	name string, args *IdentityUiPasswordArgs, opts ...pulumi.ResourceOption) (*IdentityUiPassword, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.UserId == nil {
		return nil, errors.New("invalid value for required argument 'UserId'")
	}
	var resource IdentityUiPassword
	err := ctx.RegisterResource("oci:index/identityUiPassword:IdentityUiPassword", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIdentityUiPassword gets an existing IdentityUiPassword resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIdentityUiPassword(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *IdentityUiPasswordState, opts ...pulumi.ResourceOption) (*IdentityUiPassword, error) {
	var resource IdentityUiPassword
	err := ctx.ReadResource("oci:index/identityUiPassword:IdentityUiPassword", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering IdentityUiPassword resources.
type identityUiPasswordState struct {
	// The detailed status of INACTIVE lifecycleState.
	InactiveStatus *string `pulumi:"inactiveStatus"`
	// The user's password for the Console.
	Password *string `pulumi:"password"`
	// The password's current state.
	State *string `pulumi:"state"`
	// Date and time the password was created, in the format defined by RFC3339.  Example: `2016-08-25T21:10:29.600Z`
	TimeCreated *string `pulumi:"timeCreated"`
	// The OCID of the user.
	UserId *string `pulumi:"userId"`
}

type IdentityUiPasswordState struct {
	// The detailed status of INACTIVE lifecycleState.
	InactiveStatus pulumi.StringPtrInput
	// The user's password for the Console.
	Password pulumi.StringPtrInput
	// The password's current state.
	State pulumi.StringPtrInput
	// Date and time the password was created, in the format defined by RFC3339.  Example: `2016-08-25T21:10:29.600Z`
	TimeCreated pulumi.StringPtrInput
	// The OCID of the user.
	UserId pulumi.StringPtrInput
}

func (IdentityUiPasswordState) ElementType() reflect.Type {
	return reflect.TypeOf((*identityUiPasswordState)(nil)).Elem()
}

type identityUiPasswordArgs struct {
	// The OCID of the user.
	UserId string `pulumi:"userId"`
}

// The set of arguments for constructing a IdentityUiPassword resource.
type IdentityUiPasswordArgs struct {
	// The OCID of the user.
	UserId pulumi.StringInput
}

func (IdentityUiPasswordArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*identityUiPasswordArgs)(nil)).Elem()
}

type IdentityUiPasswordInput interface {
	pulumi.Input

	ToIdentityUiPasswordOutput() IdentityUiPasswordOutput
	ToIdentityUiPasswordOutputWithContext(ctx context.Context) IdentityUiPasswordOutput
}

func (*IdentityUiPassword) ElementType() reflect.Type {
	return reflect.TypeOf((*IdentityUiPassword)(nil))
}

func (i *IdentityUiPassword) ToIdentityUiPasswordOutput() IdentityUiPasswordOutput {
	return i.ToIdentityUiPasswordOutputWithContext(context.Background())
}

func (i *IdentityUiPassword) ToIdentityUiPasswordOutputWithContext(ctx context.Context) IdentityUiPasswordOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdentityUiPasswordOutput)
}

func (i *IdentityUiPassword) ToIdentityUiPasswordPtrOutput() IdentityUiPasswordPtrOutput {
	return i.ToIdentityUiPasswordPtrOutputWithContext(context.Background())
}

func (i *IdentityUiPassword) ToIdentityUiPasswordPtrOutputWithContext(ctx context.Context) IdentityUiPasswordPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdentityUiPasswordPtrOutput)
}

type IdentityUiPasswordPtrInput interface {
	pulumi.Input

	ToIdentityUiPasswordPtrOutput() IdentityUiPasswordPtrOutput
	ToIdentityUiPasswordPtrOutputWithContext(ctx context.Context) IdentityUiPasswordPtrOutput
}

type identityUiPasswordPtrType IdentityUiPasswordArgs

func (*identityUiPasswordPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**IdentityUiPassword)(nil))
}

func (i *identityUiPasswordPtrType) ToIdentityUiPasswordPtrOutput() IdentityUiPasswordPtrOutput {
	return i.ToIdentityUiPasswordPtrOutputWithContext(context.Background())
}

func (i *identityUiPasswordPtrType) ToIdentityUiPasswordPtrOutputWithContext(ctx context.Context) IdentityUiPasswordPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdentityUiPasswordPtrOutput)
}

// IdentityUiPasswordArrayInput is an input type that accepts IdentityUiPasswordArray and IdentityUiPasswordArrayOutput values.
// You can construct a concrete instance of `IdentityUiPasswordArrayInput` via:
//
//          IdentityUiPasswordArray{ IdentityUiPasswordArgs{...} }
type IdentityUiPasswordArrayInput interface {
	pulumi.Input

	ToIdentityUiPasswordArrayOutput() IdentityUiPasswordArrayOutput
	ToIdentityUiPasswordArrayOutputWithContext(context.Context) IdentityUiPasswordArrayOutput
}

type IdentityUiPasswordArray []IdentityUiPasswordInput

func (IdentityUiPasswordArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IdentityUiPassword)(nil)).Elem()
}

func (i IdentityUiPasswordArray) ToIdentityUiPasswordArrayOutput() IdentityUiPasswordArrayOutput {
	return i.ToIdentityUiPasswordArrayOutputWithContext(context.Background())
}

func (i IdentityUiPasswordArray) ToIdentityUiPasswordArrayOutputWithContext(ctx context.Context) IdentityUiPasswordArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdentityUiPasswordArrayOutput)
}

// IdentityUiPasswordMapInput is an input type that accepts IdentityUiPasswordMap and IdentityUiPasswordMapOutput values.
// You can construct a concrete instance of `IdentityUiPasswordMapInput` via:
//
//          IdentityUiPasswordMap{ "key": IdentityUiPasswordArgs{...} }
type IdentityUiPasswordMapInput interface {
	pulumi.Input

	ToIdentityUiPasswordMapOutput() IdentityUiPasswordMapOutput
	ToIdentityUiPasswordMapOutputWithContext(context.Context) IdentityUiPasswordMapOutput
}

type IdentityUiPasswordMap map[string]IdentityUiPasswordInput

func (IdentityUiPasswordMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IdentityUiPassword)(nil)).Elem()
}

func (i IdentityUiPasswordMap) ToIdentityUiPasswordMapOutput() IdentityUiPasswordMapOutput {
	return i.ToIdentityUiPasswordMapOutputWithContext(context.Background())
}

func (i IdentityUiPasswordMap) ToIdentityUiPasswordMapOutputWithContext(ctx context.Context) IdentityUiPasswordMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdentityUiPasswordMapOutput)
}

type IdentityUiPasswordOutput struct {
	*pulumi.OutputState
}

func (IdentityUiPasswordOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IdentityUiPassword)(nil))
}

func (o IdentityUiPasswordOutput) ToIdentityUiPasswordOutput() IdentityUiPasswordOutput {
	return o
}

func (o IdentityUiPasswordOutput) ToIdentityUiPasswordOutputWithContext(ctx context.Context) IdentityUiPasswordOutput {
	return o
}

func (o IdentityUiPasswordOutput) ToIdentityUiPasswordPtrOutput() IdentityUiPasswordPtrOutput {
	return o.ToIdentityUiPasswordPtrOutputWithContext(context.Background())
}

func (o IdentityUiPasswordOutput) ToIdentityUiPasswordPtrOutputWithContext(ctx context.Context) IdentityUiPasswordPtrOutput {
	return o.ApplyT(func(v IdentityUiPassword) *IdentityUiPassword {
		return &v
	}).(IdentityUiPasswordPtrOutput)
}

type IdentityUiPasswordPtrOutput struct {
	*pulumi.OutputState
}

func (IdentityUiPasswordPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IdentityUiPassword)(nil))
}

func (o IdentityUiPasswordPtrOutput) ToIdentityUiPasswordPtrOutput() IdentityUiPasswordPtrOutput {
	return o
}

func (o IdentityUiPasswordPtrOutput) ToIdentityUiPasswordPtrOutputWithContext(ctx context.Context) IdentityUiPasswordPtrOutput {
	return o
}

type IdentityUiPasswordArrayOutput struct{ *pulumi.OutputState }

func (IdentityUiPasswordArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]IdentityUiPassword)(nil))
}

func (o IdentityUiPasswordArrayOutput) ToIdentityUiPasswordArrayOutput() IdentityUiPasswordArrayOutput {
	return o
}

func (o IdentityUiPasswordArrayOutput) ToIdentityUiPasswordArrayOutputWithContext(ctx context.Context) IdentityUiPasswordArrayOutput {
	return o
}

func (o IdentityUiPasswordArrayOutput) Index(i pulumi.IntInput) IdentityUiPasswordOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) IdentityUiPassword {
		return vs[0].([]IdentityUiPassword)[vs[1].(int)]
	}).(IdentityUiPasswordOutput)
}

type IdentityUiPasswordMapOutput struct{ *pulumi.OutputState }

func (IdentityUiPasswordMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]IdentityUiPassword)(nil))
}

func (o IdentityUiPasswordMapOutput) ToIdentityUiPasswordMapOutput() IdentityUiPasswordMapOutput {
	return o
}

func (o IdentityUiPasswordMapOutput) ToIdentityUiPasswordMapOutputWithContext(ctx context.Context) IdentityUiPasswordMapOutput {
	return o
}

func (o IdentityUiPasswordMapOutput) MapIndex(k pulumi.StringInput) IdentityUiPasswordOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) IdentityUiPassword {
		return vs[0].(map[string]IdentityUiPassword)[vs[1].(string)]
	}).(IdentityUiPasswordOutput)
}

func init() {
	pulumi.RegisterOutputType(IdentityUiPasswordOutput{})
	pulumi.RegisterOutputType(IdentityUiPasswordPtrOutput{})
	pulumi.RegisterOutputType(IdentityUiPasswordArrayOutput{})
	pulumi.RegisterOutputType(IdentityUiPasswordMapOutput{})
}
