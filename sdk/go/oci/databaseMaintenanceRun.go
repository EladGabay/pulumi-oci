// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package oci

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource provides the Maintenance Run resource in Oracle Cloud Infrastructure Database service.
//
// Updates the properties of a maintenance run, such as the state of a maintenance run.
//
// ## Import
//
// MaintenanceRuns can be imported using the `id`, e.g.
//
// ```sh
//  $ pulumi import oci:index/databaseMaintenanceRun:DatabaseMaintenanceRun test_maintenance_run "id"
// ```
type DatabaseMaintenanceRun struct {
	pulumi.CustomResourceState

	// The OCID of the compartment.
	CompartmentId pulumi.StringOutput `pulumi:"compartmentId"`
	// Description of the maintenance run.
	Description pulumi.StringOutput `pulumi:"description"`
	// The user-friendly name for the maintenance run.
	DisplayName pulumi.StringOutput `pulumi:"displayName"`
	// (Updatable) If `FALSE`, skips the maintenance run.
	IsEnabled pulumi.BoolOutput `pulumi:"isEnabled"`
	// (Updatable) If set to `TRUE`, starts patching immediately.
	IsPatchNowEnabled pulumi.BoolOutput `pulumi:"isPatchNowEnabled"`
	// Additional information about the current lifecycle state.
	LifecycleDetails pulumi.StringOutput `pulumi:"lifecycleDetails"`
	// The maintenance run OCID.
	MaintenanceRunId pulumi.StringOutput `pulumi:"maintenanceRunId"`
	// Maintenance sub-type.
	MaintenanceSubtype pulumi.StringOutput `pulumi:"maintenanceSubtype"`
	// Maintenance type.
	MaintenanceType pulumi.StringOutput `pulumi:"maintenanceType"`
	// Contain the patch failure count.
	PatchFailureCount pulumi.IntOutput `pulumi:"patchFailureCount"`
	// (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the patch to be applied in the maintenance run.
	PatchId pulumi.StringOutput `pulumi:"patchId"`
	// (Updatable) Cloud Exadata infrastructure node patching method, either "ROLLING" or "NONROLLING". Default value is ROLLING.
	PatchingMode pulumi.StringOutput `pulumi:"patchingMode"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the maintenance run for the Autonomous Data Guard association's peer container database.
	PeerMaintenanceRunId pulumi.StringOutput `pulumi:"peerMaintenanceRunId"`
	// The current state of the maintenance run. For Autonomous Database on shared Exadata infrastructure, valid states are IN_PROGRESS, SUCCEEDED and FAILED.
	State pulumi.StringOutput `pulumi:"state"`
	// The ID of the target resource on which the maintenance run occurs.
	TargetResourceId pulumi.StringOutput `pulumi:"targetResourceId"`
	// The type of the target resource on which the maintenance run occurs.
	TargetResourceType pulumi.StringOutput `pulumi:"targetResourceType"`
	// The date and time the maintenance run was completed.
	TimeEnded pulumi.StringOutput `pulumi:"timeEnded"`
	// (Updatable) The scheduled date and time of the maintenance run to update.
	TimeScheduled pulumi.StringOutput `pulumi:"timeScheduled"`
	// The date and time the maintenance run starts.
	TimeStarted pulumi.StringOutput `pulumi:"timeStarted"`
}

// NewDatabaseMaintenanceRun registers a new resource with the given unique name, arguments, and options.
func NewDatabaseMaintenanceRun(ctx *pulumi.Context,
	name string, args *DatabaseMaintenanceRunArgs, opts ...pulumi.ResourceOption) (*DatabaseMaintenanceRun, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.MaintenanceRunId == nil {
		return nil, errors.New("invalid value for required argument 'MaintenanceRunId'")
	}
	var resource DatabaseMaintenanceRun
	err := ctx.RegisterResource("oci:index/databaseMaintenanceRun:DatabaseMaintenanceRun", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDatabaseMaintenanceRun gets an existing DatabaseMaintenanceRun resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDatabaseMaintenanceRun(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DatabaseMaintenanceRunState, opts ...pulumi.ResourceOption) (*DatabaseMaintenanceRun, error) {
	var resource DatabaseMaintenanceRun
	err := ctx.ReadResource("oci:index/databaseMaintenanceRun:DatabaseMaintenanceRun", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DatabaseMaintenanceRun resources.
type databaseMaintenanceRunState struct {
	// The OCID of the compartment.
	CompartmentId *string `pulumi:"compartmentId"`
	// Description of the maintenance run.
	Description *string `pulumi:"description"`
	// The user-friendly name for the maintenance run.
	DisplayName *string `pulumi:"displayName"`
	// (Updatable) If `FALSE`, skips the maintenance run.
	IsEnabled *bool `pulumi:"isEnabled"`
	// (Updatable) If set to `TRUE`, starts patching immediately.
	IsPatchNowEnabled *bool `pulumi:"isPatchNowEnabled"`
	// Additional information about the current lifecycle state.
	LifecycleDetails *string `pulumi:"lifecycleDetails"`
	// The maintenance run OCID.
	MaintenanceRunId *string `pulumi:"maintenanceRunId"`
	// Maintenance sub-type.
	MaintenanceSubtype *string `pulumi:"maintenanceSubtype"`
	// Maintenance type.
	MaintenanceType *string `pulumi:"maintenanceType"`
	// Contain the patch failure count.
	PatchFailureCount *int `pulumi:"patchFailureCount"`
	// (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the patch to be applied in the maintenance run.
	PatchId *string `pulumi:"patchId"`
	// (Updatable) Cloud Exadata infrastructure node patching method, either "ROLLING" or "NONROLLING". Default value is ROLLING.
	PatchingMode *string `pulumi:"patchingMode"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the maintenance run for the Autonomous Data Guard association's peer container database.
	PeerMaintenanceRunId *string `pulumi:"peerMaintenanceRunId"`
	// The current state of the maintenance run. For Autonomous Database on shared Exadata infrastructure, valid states are IN_PROGRESS, SUCCEEDED and FAILED.
	State *string `pulumi:"state"`
	// The ID of the target resource on which the maintenance run occurs.
	TargetResourceId *string `pulumi:"targetResourceId"`
	// The type of the target resource on which the maintenance run occurs.
	TargetResourceType *string `pulumi:"targetResourceType"`
	// The date and time the maintenance run was completed.
	TimeEnded *string `pulumi:"timeEnded"`
	// (Updatable) The scheduled date and time of the maintenance run to update.
	TimeScheduled *string `pulumi:"timeScheduled"`
	// The date and time the maintenance run starts.
	TimeStarted *string `pulumi:"timeStarted"`
}

type DatabaseMaintenanceRunState struct {
	// The OCID of the compartment.
	CompartmentId pulumi.StringPtrInput
	// Description of the maintenance run.
	Description pulumi.StringPtrInput
	// The user-friendly name for the maintenance run.
	DisplayName pulumi.StringPtrInput
	// (Updatable) If `FALSE`, skips the maintenance run.
	IsEnabled pulumi.BoolPtrInput
	// (Updatable) If set to `TRUE`, starts patching immediately.
	IsPatchNowEnabled pulumi.BoolPtrInput
	// Additional information about the current lifecycle state.
	LifecycleDetails pulumi.StringPtrInput
	// The maintenance run OCID.
	MaintenanceRunId pulumi.StringPtrInput
	// Maintenance sub-type.
	MaintenanceSubtype pulumi.StringPtrInput
	// Maintenance type.
	MaintenanceType pulumi.StringPtrInput
	// Contain the patch failure count.
	PatchFailureCount pulumi.IntPtrInput
	// (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the patch to be applied in the maintenance run.
	PatchId pulumi.StringPtrInput
	// (Updatable) Cloud Exadata infrastructure node patching method, either "ROLLING" or "NONROLLING". Default value is ROLLING.
	PatchingMode pulumi.StringPtrInput
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the maintenance run for the Autonomous Data Guard association's peer container database.
	PeerMaintenanceRunId pulumi.StringPtrInput
	// The current state of the maintenance run. For Autonomous Database on shared Exadata infrastructure, valid states are IN_PROGRESS, SUCCEEDED and FAILED.
	State pulumi.StringPtrInput
	// The ID of the target resource on which the maintenance run occurs.
	TargetResourceId pulumi.StringPtrInput
	// The type of the target resource on which the maintenance run occurs.
	TargetResourceType pulumi.StringPtrInput
	// The date and time the maintenance run was completed.
	TimeEnded pulumi.StringPtrInput
	// (Updatable) The scheduled date and time of the maintenance run to update.
	TimeScheduled pulumi.StringPtrInput
	// The date and time the maintenance run starts.
	TimeStarted pulumi.StringPtrInput
}

func (DatabaseMaintenanceRunState) ElementType() reflect.Type {
	return reflect.TypeOf((*databaseMaintenanceRunState)(nil)).Elem()
}

type databaseMaintenanceRunArgs struct {
	// (Updatable) If `FALSE`, skips the maintenance run.
	IsEnabled *bool `pulumi:"isEnabled"`
	// (Updatable) If set to `TRUE`, starts patching immediately.
	IsPatchNowEnabled *bool `pulumi:"isPatchNowEnabled"`
	// The maintenance run OCID.
	MaintenanceRunId string `pulumi:"maintenanceRunId"`
	// (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the patch to be applied in the maintenance run.
	PatchId *string `pulumi:"patchId"`
	// (Updatable) Cloud Exadata infrastructure node patching method, either "ROLLING" or "NONROLLING". Default value is ROLLING.
	PatchingMode *string `pulumi:"patchingMode"`
	// (Updatable) The scheduled date and time of the maintenance run to update.
	TimeScheduled *string `pulumi:"timeScheduled"`
}

// The set of arguments for constructing a DatabaseMaintenanceRun resource.
type DatabaseMaintenanceRunArgs struct {
	// (Updatable) If `FALSE`, skips the maintenance run.
	IsEnabled pulumi.BoolPtrInput
	// (Updatable) If set to `TRUE`, starts patching immediately.
	IsPatchNowEnabled pulumi.BoolPtrInput
	// The maintenance run OCID.
	MaintenanceRunId pulumi.StringInput
	// (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the patch to be applied in the maintenance run.
	PatchId pulumi.StringPtrInput
	// (Updatable) Cloud Exadata infrastructure node patching method, either "ROLLING" or "NONROLLING". Default value is ROLLING.
	PatchingMode pulumi.StringPtrInput
	// (Updatable) The scheduled date and time of the maintenance run to update.
	TimeScheduled pulumi.StringPtrInput
}

func (DatabaseMaintenanceRunArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*databaseMaintenanceRunArgs)(nil)).Elem()
}

type DatabaseMaintenanceRunInput interface {
	pulumi.Input

	ToDatabaseMaintenanceRunOutput() DatabaseMaintenanceRunOutput
	ToDatabaseMaintenanceRunOutputWithContext(ctx context.Context) DatabaseMaintenanceRunOutput
}

func (*DatabaseMaintenanceRun) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseMaintenanceRun)(nil))
}

func (i *DatabaseMaintenanceRun) ToDatabaseMaintenanceRunOutput() DatabaseMaintenanceRunOutput {
	return i.ToDatabaseMaintenanceRunOutputWithContext(context.Background())
}

func (i *DatabaseMaintenanceRun) ToDatabaseMaintenanceRunOutputWithContext(ctx context.Context) DatabaseMaintenanceRunOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseMaintenanceRunOutput)
}

func (i *DatabaseMaintenanceRun) ToDatabaseMaintenanceRunPtrOutput() DatabaseMaintenanceRunPtrOutput {
	return i.ToDatabaseMaintenanceRunPtrOutputWithContext(context.Background())
}

func (i *DatabaseMaintenanceRun) ToDatabaseMaintenanceRunPtrOutputWithContext(ctx context.Context) DatabaseMaintenanceRunPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseMaintenanceRunPtrOutput)
}

type DatabaseMaintenanceRunPtrInput interface {
	pulumi.Input

	ToDatabaseMaintenanceRunPtrOutput() DatabaseMaintenanceRunPtrOutput
	ToDatabaseMaintenanceRunPtrOutputWithContext(ctx context.Context) DatabaseMaintenanceRunPtrOutput
}

type databaseMaintenanceRunPtrType DatabaseMaintenanceRunArgs

func (*databaseMaintenanceRunPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DatabaseMaintenanceRun)(nil))
}

func (i *databaseMaintenanceRunPtrType) ToDatabaseMaintenanceRunPtrOutput() DatabaseMaintenanceRunPtrOutput {
	return i.ToDatabaseMaintenanceRunPtrOutputWithContext(context.Background())
}

func (i *databaseMaintenanceRunPtrType) ToDatabaseMaintenanceRunPtrOutputWithContext(ctx context.Context) DatabaseMaintenanceRunPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseMaintenanceRunPtrOutput)
}

// DatabaseMaintenanceRunArrayInput is an input type that accepts DatabaseMaintenanceRunArray and DatabaseMaintenanceRunArrayOutput values.
// You can construct a concrete instance of `DatabaseMaintenanceRunArrayInput` via:
//
//          DatabaseMaintenanceRunArray{ DatabaseMaintenanceRunArgs{...} }
type DatabaseMaintenanceRunArrayInput interface {
	pulumi.Input

	ToDatabaseMaintenanceRunArrayOutput() DatabaseMaintenanceRunArrayOutput
	ToDatabaseMaintenanceRunArrayOutputWithContext(context.Context) DatabaseMaintenanceRunArrayOutput
}

type DatabaseMaintenanceRunArray []DatabaseMaintenanceRunInput

func (DatabaseMaintenanceRunArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DatabaseMaintenanceRun)(nil)).Elem()
}

func (i DatabaseMaintenanceRunArray) ToDatabaseMaintenanceRunArrayOutput() DatabaseMaintenanceRunArrayOutput {
	return i.ToDatabaseMaintenanceRunArrayOutputWithContext(context.Background())
}

func (i DatabaseMaintenanceRunArray) ToDatabaseMaintenanceRunArrayOutputWithContext(ctx context.Context) DatabaseMaintenanceRunArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseMaintenanceRunArrayOutput)
}

// DatabaseMaintenanceRunMapInput is an input type that accepts DatabaseMaintenanceRunMap and DatabaseMaintenanceRunMapOutput values.
// You can construct a concrete instance of `DatabaseMaintenanceRunMapInput` via:
//
//          DatabaseMaintenanceRunMap{ "key": DatabaseMaintenanceRunArgs{...} }
type DatabaseMaintenanceRunMapInput interface {
	pulumi.Input

	ToDatabaseMaintenanceRunMapOutput() DatabaseMaintenanceRunMapOutput
	ToDatabaseMaintenanceRunMapOutputWithContext(context.Context) DatabaseMaintenanceRunMapOutput
}

type DatabaseMaintenanceRunMap map[string]DatabaseMaintenanceRunInput

func (DatabaseMaintenanceRunMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DatabaseMaintenanceRun)(nil)).Elem()
}

func (i DatabaseMaintenanceRunMap) ToDatabaseMaintenanceRunMapOutput() DatabaseMaintenanceRunMapOutput {
	return i.ToDatabaseMaintenanceRunMapOutputWithContext(context.Background())
}

func (i DatabaseMaintenanceRunMap) ToDatabaseMaintenanceRunMapOutputWithContext(ctx context.Context) DatabaseMaintenanceRunMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseMaintenanceRunMapOutput)
}

type DatabaseMaintenanceRunOutput struct {
	*pulumi.OutputState
}

func (DatabaseMaintenanceRunOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseMaintenanceRun)(nil))
}

func (o DatabaseMaintenanceRunOutput) ToDatabaseMaintenanceRunOutput() DatabaseMaintenanceRunOutput {
	return o
}

func (o DatabaseMaintenanceRunOutput) ToDatabaseMaintenanceRunOutputWithContext(ctx context.Context) DatabaseMaintenanceRunOutput {
	return o
}

func (o DatabaseMaintenanceRunOutput) ToDatabaseMaintenanceRunPtrOutput() DatabaseMaintenanceRunPtrOutput {
	return o.ToDatabaseMaintenanceRunPtrOutputWithContext(context.Background())
}

func (o DatabaseMaintenanceRunOutput) ToDatabaseMaintenanceRunPtrOutputWithContext(ctx context.Context) DatabaseMaintenanceRunPtrOutput {
	return o.ApplyT(func(v DatabaseMaintenanceRun) *DatabaseMaintenanceRun {
		return &v
	}).(DatabaseMaintenanceRunPtrOutput)
}

type DatabaseMaintenanceRunPtrOutput struct {
	*pulumi.OutputState
}

func (DatabaseMaintenanceRunPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DatabaseMaintenanceRun)(nil))
}

func (o DatabaseMaintenanceRunPtrOutput) ToDatabaseMaintenanceRunPtrOutput() DatabaseMaintenanceRunPtrOutput {
	return o
}

func (o DatabaseMaintenanceRunPtrOutput) ToDatabaseMaintenanceRunPtrOutputWithContext(ctx context.Context) DatabaseMaintenanceRunPtrOutput {
	return o
}

type DatabaseMaintenanceRunArrayOutput struct{ *pulumi.OutputState }

func (DatabaseMaintenanceRunArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DatabaseMaintenanceRun)(nil))
}

func (o DatabaseMaintenanceRunArrayOutput) ToDatabaseMaintenanceRunArrayOutput() DatabaseMaintenanceRunArrayOutput {
	return o
}

func (o DatabaseMaintenanceRunArrayOutput) ToDatabaseMaintenanceRunArrayOutputWithContext(ctx context.Context) DatabaseMaintenanceRunArrayOutput {
	return o
}

func (o DatabaseMaintenanceRunArrayOutput) Index(i pulumi.IntInput) DatabaseMaintenanceRunOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DatabaseMaintenanceRun {
		return vs[0].([]DatabaseMaintenanceRun)[vs[1].(int)]
	}).(DatabaseMaintenanceRunOutput)
}

type DatabaseMaintenanceRunMapOutput struct{ *pulumi.OutputState }

func (DatabaseMaintenanceRunMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]DatabaseMaintenanceRun)(nil))
}

func (o DatabaseMaintenanceRunMapOutput) ToDatabaseMaintenanceRunMapOutput() DatabaseMaintenanceRunMapOutput {
	return o
}

func (o DatabaseMaintenanceRunMapOutput) ToDatabaseMaintenanceRunMapOutputWithContext(ctx context.Context) DatabaseMaintenanceRunMapOutput {
	return o
}

func (o DatabaseMaintenanceRunMapOutput) MapIndex(k pulumi.StringInput) DatabaseMaintenanceRunOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) DatabaseMaintenanceRun {
		return vs[0].(map[string]DatabaseMaintenanceRun)[vs[1].(string)]
	}).(DatabaseMaintenanceRunOutput)
}

func init() {
	pulumi.RegisterOutputType(DatabaseMaintenanceRunOutput{})
	pulumi.RegisterOutputType(DatabaseMaintenanceRunPtrOutput{})
	pulumi.RegisterOutputType(DatabaseMaintenanceRunArrayOutput{})
	pulumi.RegisterOutputType(DatabaseMaintenanceRunMapOutput{})
}
