// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package oci

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource provides the Software Source resource in Oracle Cloud Infrastructure OS Management service.
//
// Creates a new custom Software Source on the management system.
// This will not contain any packages after it is first created,
// and they must be added later.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-oci/sdk/go/oci"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := oci.NewOsmanagementSoftwareSource(ctx, "testSoftwareSource", &oci.OsmanagementSoftwareSourceArgs{
// 			ArchType:      pulumi.Any(_var.Software_source_arch_type),
// 			CompartmentId: pulumi.Any(_var.Compartment_id),
// 			DisplayName:   pulumi.Any(_var.Software_source_display_name),
// 			ChecksumType:  pulumi.Any(_var.Software_source_checksum_type),
// 			DefinedTags: pulumi.AnyMap{
// 				"foo-namespace.bar-key": pulumi.Any("value"),
// 			},
// 			Description: pulumi.Any(_var.Software_source_description),
// 			FreeformTags: pulumi.AnyMap{
// 				"bar-key": pulumi.Any("value"),
// 			},
// 			MaintainerEmail: pulumi.Any(_var.Software_source_maintainer_email),
// 			MaintainerName:  pulumi.Any(_var.Software_source_maintainer_name),
// 			MaintainerPhone: pulumi.Any(_var.Software_source_maintainer_phone),
// 			ParentId:        pulumi.Any(oci_osmanagement_parent.Test_parent.Id),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// SoftwareSources can be imported using the `id`, e.g.
//
// ```sh
//  $ pulumi import oci:index/osmanagementSoftwareSource:OsmanagementSoftwareSource test_software_source "id"
// ```
type OsmanagementSoftwareSource struct {
	pulumi.CustomResourceState

	// The architecture type supported by the Software Source
	ArchType pulumi.StringOutput `pulumi:"archType"`
	// list of the Managed Instances associated with this Software Sources
	AssociatedManagedInstances OsmanagementSoftwareSourceAssociatedManagedInstanceArrayOutput `pulumi:"associatedManagedInstances"`
	// (Updatable) The yum repository checksum type used by this software source
	ChecksumType pulumi.StringOutput `pulumi:"checksumType"`
	// (Updatable) OCID for the Compartment
	CompartmentId pulumi.StringOutput `pulumi:"compartmentId"`
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
	DefinedTags pulumi.MapOutput `pulumi:"definedTags"`
	// (Updatable) Information specified by the user about the software source
	Description pulumi.StringOutput `pulumi:"description"`
	// (Updatable) User friendly name for the software source
	DisplayName pulumi.StringOutput `pulumi:"displayName"`
	// (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
	FreeformTags pulumi.MapOutput `pulumi:"freeformTags"`
	// Fingerprint of the GPG key for this software source
	GpgKeyFingerprint pulumi.StringOutput `pulumi:"gpgKeyFingerprint"`
	// ID of the GPG key for this software source
	GpgKeyId pulumi.StringOutput `pulumi:"gpgKeyId"`
	// URL of the GPG key for this software source
	GpgKeyUrl pulumi.StringOutput `pulumi:"gpgKeyUrl"`
	// (Updatable) Email address of the person maintaining this software source
	MaintainerEmail pulumi.StringOutput `pulumi:"maintainerEmail"`
	// (Updatable) Name of the person maintaining this software source
	MaintainerName pulumi.StringOutput `pulumi:"maintainerName"`
	// (Updatable) Phone number of the person maintaining this software source
	MaintainerPhone pulumi.StringOutput `pulumi:"maintainerPhone"`
	// Number of packages
	Packages pulumi.IntOutput `pulumi:"packages"`
	// OCID for the parent software source, if there is one
	ParentId pulumi.StringOutput `pulumi:"parentId"`
	// Display name the parent software source, if there is one
	ParentName pulumi.StringOutput `pulumi:"parentName"`
	// Type of the Software Source
	RepoType pulumi.StringOutput `pulumi:"repoType"`
	// The current state of the Software Source.
	State pulumi.StringOutput `pulumi:"state"`
	// status of the software source.
	Status pulumi.StringOutput `pulumi:"status"`
	// URL for the repostiory
	Url pulumi.StringOutput `pulumi:"url"`
}

// NewOsmanagementSoftwareSource registers a new resource with the given unique name, arguments, and options.
func NewOsmanagementSoftwareSource(ctx *pulumi.Context,
	name string, args *OsmanagementSoftwareSourceArgs, opts ...pulumi.ResourceOption) (*OsmanagementSoftwareSource, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ArchType == nil {
		return nil, errors.New("invalid value for required argument 'ArchType'")
	}
	if args.CompartmentId == nil {
		return nil, errors.New("invalid value for required argument 'CompartmentId'")
	}
	if args.DisplayName == nil {
		return nil, errors.New("invalid value for required argument 'DisplayName'")
	}
	var resource OsmanagementSoftwareSource
	err := ctx.RegisterResource("oci:index/osmanagementSoftwareSource:OsmanagementSoftwareSource", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetOsmanagementSoftwareSource gets an existing OsmanagementSoftwareSource resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetOsmanagementSoftwareSource(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *OsmanagementSoftwareSourceState, opts ...pulumi.ResourceOption) (*OsmanagementSoftwareSource, error) {
	var resource OsmanagementSoftwareSource
	err := ctx.ReadResource("oci:index/osmanagementSoftwareSource:OsmanagementSoftwareSource", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering OsmanagementSoftwareSource resources.
type osmanagementSoftwareSourceState struct {
	// The architecture type supported by the Software Source
	ArchType *string `pulumi:"archType"`
	// list of the Managed Instances associated with this Software Sources
	AssociatedManagedInstances []OsmanagementSoftwareSourceAssociatedManagedInstance `pulumi:"associatedManagedInstances"`
	// (Updatable) The yum repository checksum type used by this software source
	ChecksumType *string `pulumi:"checksumType"`
	// (Updatable) OCID for the Compartment
	CompartmentId *string `pulumi:"compartmentId"`
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
	DefinedTags map[string]interface{} `pulumi:"definedTags"`
	// (Updatable) Information specified by the user about the software source
	Description *string `pulumi:"description"`
	// (Updatable) User friendly name for the software source
	DisplayName *string `pulumi:"displayName"`
	// (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
	FreeformTags map[string]interface{} `pulumi:"freeformTags"`
	// Fingerprint of the GPG key for this software source
	GpgKeyFingerprint *string `pulumi:"gpgKeyFingerprint"`
	// ID of the GPG key for this software source
	GpgKeyId *string `pulumi:"gpgKeyId"`
	// URL of the GPG key for this software source
	GpgKeyUrl *string `pulumi:"gpgKeyUrl"`
	// (Updatable) Email address of the person maintaining this software source
	MaintainerEmail *string `pulumi:"maintainerEmail"`
	// (Updatable) Name of the person maintaining this software source
	MaintainerName *string `pulumi:"maintainerName"`
	// (Updatable) Phone number of the person maintaining this software source
	MaintainerPhone *string `pulumi:"maintainerPhone"`
	// Number of packages
	Packages *int `pulumi:"packages"`
	// OCID for the parent software source, if there is one
	ParentId *string `pulumi:"parentId"`
	// Display name the parent software source, if there is one
	ParentName *string `pulumi:"parentName"`
	// Type of the Software Source
	RepoType *string `pulumi:"repoType"`
	// The current state of the Software Source.
	State *string `pulumi:"state"`
	// status of the software source.
	Status *string `pulumi:"status"`
	// URL for the repostiory
	Url *string `pulumi:"url"`
}

type OsmanagementSoftwareSourceState struct {
	// The architecture type supported by the Software Source
	ArchType pulumi.StringPtrInput
	// list of the Managed Instances associated with this Software Sources
	AssociatedManagedInstances OsmanagementSoftwareSourceAssociatedManagedInstanceArrayInput
	// (Updatable) The yum repository checksum type used by this software source
	ChecksumType pulumi.StringPtrInput
	// (Updatable) OCID for the Compartment
	CompartmentId pulumi.StringPtrInput
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
	DefinedTags pulumi.MapInput
	// (Updatable) Information specified by the user about the software source
	Description pulumi.StringPtrInput
	// (Updatable) User friendly name for the software source
	DisplayName pulumi.StringPtrInput
	// (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
	FreeformTags pulumi.MapInput
	// Fingerprint of the GPG key for this software source
	GpgKeyFingerprint pulumi.StringPtrInput
	// ID of the GPG key for this software source
	GpgKeyId pulumi.StringPtrInput
	// URL of the GPG key for this software source
	GpgKeyUrl pulumi.StringPtrInput
	// (Updatable) Email address of the person maintaining this software source
	MaintainerEmail pulumi.StringPtrInput
	// (Updatable) Name of the person maintaining this software source
	MaintainerName pulumi.StringPtrInput
	// (Updatable) Phone number of the person maintaining this software source
	MaintainerPhone pulumi.StringPtrInput
	// Number of packages
	Packages pulumi.IntPtrInput
	// OCID for the parent software source, if there is one
	ParentId pulumi.StringPtrInput
	// Display name the parent software source, if there is one
	ParentName pulumi.StringPtrInput
	// Type of the Software Source
	RepoType pulumi.StringPtrInput
	// The current state of the Software Source.
	State pulumi.StringPtrInput
	// status of the software source.
	Status pulumi.StringPtrInput
	// URL for the repostiory
	Url pulumi.StringPtrInput
}

func (OsmanagementSoftwareSourceState) ElementType() reflect.Type {
	return reflect.TypeOf((*osmanagementSoftwareSourceState)(nil)).Elem()
}

type osmanagementSoftwareSourceArgs struct {
	// The architecture type supported by the Software Source
	ArchType string `pulumi:"archType"`
	// (Updatable) The yum repository checksum type used by this software source
	ChecksumType *string `pulumi:"checksumType"`
	// (Updatable) OCID for the Compartment
	CompartmentId string `pulumi:"compartmentId"`
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
	DefinedTags map[string]interface{} `pulumi:"definedTags"`
	// (Updatable) Information specified by the user about the software source
	Description *string `pulumi:"description"`
	// (Updatable) User friendly name for the software source
	DisplayName string `pulumi:"displayName"`
	// (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
	FreeformTags map[string]interface{} `pulumi:"freeformTags"`
	// (Updatable) Email address of the person maintaining this software source
	MaintainerEmail *string `pulumi:"maintainerEmail"`
	// (Updatable) Name of the person maintaining this software source
	MaintainerName *string `pulumi:"maintainerName"`
	// (Updatable) Phone number of the person maintaining this software source
	MaintainerPhone *string `pulumi:"maintainerPhone"`
	// OCID for the parent software source, if there is one
	ParentId *string `pulumi:"parentId"`
}

// The set of arguments for constructing a OsmanagementSoftwareSource resource.
type OsmanagementSoftwareSourceArgs struct {
	// The architecture type supported by the Software Source
	ArchType pulumi.StringInput
	// (Updatable) The yum repository checksum type used by this software source
	ChecksumType pulumi.StringPtrInput
	// (Updatable) OCID for the Compartment
	CompartmentId pulumi.StringInput
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. Example: `{"foo-namespace.bar-key": "value"}`
	DefinedTags pulumi.MapInput
	// (Updatable) Information specified by the user about the software source
	Description pulumi.StringPtrInput
	// (Updatable) User friendly name for the software source
	DisplayName pulumi.StringInput
	// (Updatable) Simple key-value pair that is applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
	FreeformTags pulumi.MapInput
	// (Updatable) Email address of the person maintaining this software source
	MaintainerEmail pulumi.StringPtrInput
	// (Updatable) Name of the person maintaining this software source
	MaintainerName pulumi.StringPtrInput
	// (Updatable) Phone number of the person maintaining this software source
	MaintainerPhone pulumi.StringPtrInput
	// OCID for the parent software source, if there is one
	ParentId pulumi.StringPtrInput
}

func (OsmanagementSoftwareSourceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*osmanagementSoftwareSourceArgs)(nil)).Elem()
}

type OsmanagementSoftwareSourceInput interface {
	pulumi.Input

	ToOsmanagementSoftwareSourceOutput() OsmanagementSoftwareSourceOutput
	ToOsmanagementSoftwareSourceOutputWithContext(ctx context.Context) OsmanagementSoftwareSourceOutput
}

func (*OsmanagementSoftwareSource) ElementType() reflect.Type {
	return reflect.TypeOf((*OsmanagementSoftwareSource)(nil))
}

func (i *OsmanagementSoftwareSource) ToOsmanagementSoftwareSourceOutput() OsmanagementSoftwareSourceOutput {
	return i.ToOsmanagementSoftwareSourceOutputWithContext(context.Background())
}

func (i *OsmanagementSoftwareSource) ToOsmanagementSoftwareSourceOutputWithContext(ctx context.Context) OsmanagementSoftwareSourceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OsmanagementSoftwareSourceOutput)
}

func (i *OsmanagementSoftwareSource) ToOsmanagementSoftwareSourcePtrOutput() OsmanagementSoftwareSourcePtrOutput {
	return i.ToOsmanagementSoftwareSourcePtrOutputWithContext(context.Background())
}

func (i *OsmanagementSoftwareSource) ToOsmanagementSoftwareSourcePtrOutputWithContext(ctx context.Context) OsmanagementSoftwareSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OsmanagementSoftwareSourcePtrOutput)
}

type OsmanagementSoftwareSourcePtrInput interface {
	pulumi.Input

	ToOsmanagementSoftwareSourcePtrOutput() OsmanagementSoftwareSourcePtrOutput
	ToOsmanagementSoftwareSourcePtrOutputWithContext(ctx context.Context) OsmanagementSoftwareSourcePtrOutput
}

type osmanagementSoftwareSourcePtrType OsmanagementSoftwareSourceArgs

func (*osmanagementSoftwareSourcePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**OsmanagementSoftwareSource)(nil))
}

func (i *osmanagementSoftwareSourcePtrType) ToOsmanagementSoftwareSourcePtrOutput() OsmanagementSoftwareSourcePtrOutput {
	return i.ToOsmanagementSoftwareSourcePtrOutputWithContext(context.Background())
}

func (i *osmanagementSoftwareSourcePtrType) ToOsmanagementSoftwareSourcePtrOutputWithContext(ctx context.Context) OsmanagementSoftwareSourcePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OsmanagementSoftwareSourcePtrOutput)
}

// OsmanagementSoftwareSourceArrayInput is an input type that accepts OsmanagementSoftwareSourceArray and OsmanagementSoftwareSourceArrayOutput values.
// You can construct a concrete instance of `OsmanagementSoftwareSourceArrayInput` via:
//
//          OsmanagementSoftwareSourceArray{ OsmanagementSoftwareSourceArgs{...} }
type OsmanagementSoftwareSourceArrayInput interface {
	pulumi.Input

	ToOsmanagementSoftwareSourceArrayOutput() OsmanagementSoftwareSourceArrayOutput
	ToOsmanagementSoftwareSourceArrayOutputWithContext(context.Context) OsmanagementSoftwareSourceArrayOutput
}

type OsmanagementSoftwareSourceArray []OsmanagementSoftwareSourceInput

func (OsmanagementSoftwareSourceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*OsmanagementSoftwareSource)(nil)).Elem()
}

func (i OsmanagementSoftwareSourceArray) ToOsmanagementSoftwareSourceArrayOutput() OsmanagementSoftwareSourceArrayOutput {
	return i.ToOsmanagementSoftwareSourceArrayOutputWithContext(context.Background())
}

func (i OsmanagementSoftwareSourceArray) ToOsmanagementSoftwareSourceArrayOutputWithContext(ctx context.Context) OsmanagementSoftwareSourceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OsmanagementSoftwareSourceArrayOutput)
}

// OsmanagementSoftwareSourceMapInput is an input type that accepts OsmanagementSoftwareSourceMap and OsmanagementSoftwareSourceMapOutput values.
// You can construct a concrete instance of `OsmanagementSoftwareSourceMapInput` via:
//
//          OsmanagementSoftwareSourceMap{ "key": OsmanagementSoftwareSourceArgs{...} }
type OsmanagementSoftwareSourceMapInput interface {
	pulumi.Input

	ToOsmanagementSoftwareSourceMapOutput() OsmanagementSoftwareSourceMapOutput
	ToOsmanagementSoftwareSourceMapOutputWithContext(context.Context) OsmanagementSoftwareSourceMapOutput
}

type OsmanagementSoftwareSourceMap map[string]OsmanagementSoftwareSourceInput

func (OsmanagementSoftwareSourceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*OsmanagementSoftwareSource)(nil)).Elem()
}

func (i OsmanagementSoftwareSourceMap) ToOsmanagementSoftwareSourceMapOutput() OsmanagementSoftwareSourceMapOutput {
	return i.ToOsmanagementSoftwareSourceMapOutputWithContext(context.Background())
}

func (i OsmanagementSoftwareSourceMap) ToOsmanagementSoftwareSourceMapOutputWithContext(ctx context.Context) OsmanagementSoftwareSourceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(OsmanagementSoftwareSourceMapOutput)
}

type OsmanagementSoftwareSourceOutput struct {
	*pulumi.OutputState
}

func (OsmanagementSoftwareSourceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*OsmanagementSoftwareSource)(nil))
}

func (o OsmanagementSoftwareSourceOutput) ToOsmanagementSoftwareSourceOutput() OsmanagementSoftwareSourceOutput {
	return o
}

func (o OsmanagementSoftwareSourceOutput) ToOsmanagementSoftwareSourceOutputWithContext(ctx context.Context) OsmanagementSoftwareSourceOutput {
	return o
}

func (o OsmanagementSoftwareSourceOutput) ToOsmanagementSoftwareSourcePtrOutput() OsmanagementSoftwareSourcePtrOutput {
	return o.ToOsmanagementSoftwareSourcePtrOutputWithContext(context.Background())
}

func (o OsmanagementSoftwareSourceOutput) ToOsmanagementSoftwareSourcePtrOutputWithContext(ctx context.Context) OsmanagementSoftwareSourcePtrOutput {
	return o.ApplyT(func(v OsmanagementSoftwareSource) *OsmanagementSoftwareSource {
		return &v
	}).(OsmanagementSoftwareSourcePtrOutput)
}

type OsmanagementSoftwareSourcePtrOutput struct {
	*pulumi.OutputState
}

func (OsmanagementSoftwareSourcePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**OsmanagementSoftwareSource)(nil))
}

func (o OsmanagementSoftwareSourcePtrOutput) ToOsmanagementSoftwareSourcePtrOutput() OsmanagementSoftwareSourcePtrOutput {
	return o
}

func (o OsmanagementSoftwareSourcePtrOutput) ToOsmanagementSoftwareSourcePtrOutputWithContext(ctx context.Context) OsmanagementSoftwareSourcePtrOutput {
	return o
}

type OsmanagementSoftwareSourceArrayOutput struct{ *pulumi.OutputState }

func (OsmanagementSoftwareSourceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]OsmanagementSoftwareSource)(nil))
}

func (o OsmanagementSoftwareSourceArrayOutput) ToOsmanagementSoftwareSourceArrayOutput() OsmanagementSoftwareSourceArrayOutput {
	return o
}

func (o OsmanagementSoftwareSourceArrayOutput) ToOsmanagementSoftwareSourceArrayOutputWithContext(ctx context.Context) OsmanagementSoftwareSourceArrayOutput {
	return o
}

func (o OsmanagementSoftwareSourceArrayOutput) Index(i pulumi.IntInput) OsmanagementSoftwareSourceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) OsmanagementSoftwareSource {
		return vs[0].([]OsmanagementSoftwareSource)[vs[1].(int)]
	}).(OsmanagementSoftwareSourceOutput)
}

type OsmanagementSoftwareSourceMapOutput struct{ *pulumi.OutputState }

func (OsmanagementSoftwareSourceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]OsmanagementSoftwareSource)(nil))
}

func (o OsmanagementSoftwareSourceMapOutput) ToOsmanagementSoftwareSourceMapOutput() OsmanagementSoftwareSourceMapOutput {
	return o
}

func (o OsmanagementSoftwareSourceMapOutput) ToOsmanagementSoftwareSourceMapOutputWithContext(ctx context.Context) OsmanagementSoftwareSourceMapOutput {
	return o
}

func (o OsmanagementSoftwareSourceMapOutput) MapIndex(k pulumi.StringInput) OsmanagementSoftwareSourceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) OsmanagementSoftwareSource {
		return vs[0].(map[string]OsmanagementSoftwareSource)[vs[1].(string)]
	}).(OsmanagementSoftwareSourceOutput)
}

func init() {
	pulumi.RegisterOutputType(OsmanagementSoftwareSourceOutput{})
	pulumi.RegisterOutputType(OsmanagementSoftwareSourcePtrOutput{})
	pulumi.RegisterOutputType(OsmanagementSoftwareSourceArrayOutput{})
	pulumi.RegisterOutputType(OsmanagementSoftwareSourceMapOutput{})
}
