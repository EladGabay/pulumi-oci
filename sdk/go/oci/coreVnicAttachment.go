// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package oci

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource provides the Vnic Attachment resource in Oracle Cloud Infrastructure Core service.
//
// Creates a secondary VNIC and attaches it to the specified instance.
// For more information about secondary VNICs, see
// [Virtual Network Interface Cards (VNICs)](https://docs.cloud.oracle.com/iaas/Content/Network/Tasks/managingVNICs.htm).
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-oci/sdk/go/oci"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := oci.NewCoreVnicAttachment(ctx, "testVnicAttachment", &oci.CoreVnicAttachmentArgs{
// 			CreateVnicDetails: &CoreVnicAttachmentCreateVnicDetailsArgs{
// 				AssignPrivateDnsRecord: pulumi.Any(_var.Vnic_attachment_create_vnic_details_assign_private_dns_record),
// 				AssignPublicIp:         pulumi.Any(_var.Vnic_attachment_create_vnic_details_assign_public_ip),
// 				DefinedTags:            pulumi.Any(_var.Vnic_attachment_create_vnic_details_defined_tags),
// 				DisplayName:            pulumi.Any(_var.Vnic_attachment_create_vnic_details_display_name),
// 				FreeformTags:           pulumi.Any(_var.Vnic_attachment_create_vnic_details_freeform_tags),
// 				HostnameLabel:          pulumi.Any(_var.Vnic_attachment_create_vnic_details_hostname_label),
// 				NsgIds:                 pulumi.Any(_var.Vnic_attachment_create_vnic_details_nsg_ids),
// 				PrivateIp:              pulumi.Any(_var.Vnic_attachment_create_vnic_details_private_ip),
// 				SkipSourceDestCheck:    pulumi.Any(_var.Vnic_attachment_create_vnic_details_skip_source_dest_check),
// 				SubnetId:               pulumi.Any(oci_core_subnet.Test_subnet.Id),
// 				VlanId:                 pulumi.Any(oci_core_vlan.Test_vlan.Id),
// 			},
// 			InstanceId:  pulumi.Any(oci_core_instance.Test_instance.Id),
// 			DisplayName: pulumi.Any(_var.Vnic_attachment_display_name),
// 			NicIndex:    pulumi.Any(_var.Vnic_attachment_nic_index),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// VnicAttachments can be imported using the `id`, e.g.
//
// ```sh
//  $ pulumi import oci:index/coreVnicAttachment:CoreVnicAttachment test_vnic_attachment "id"
// ```
type CoreVnicAttachment struct {
	pulumi.CustomResourceState

	// The availability domain of the instance.  Example: `Uocm:PHX-AD-1`
	AvailabilityDomain pulumi.StringOutput `pulumi:"availabilityDomain"`
	// The OCID of the compartment the VNIC attachment is in, which is the same compartment the instance is in.
	CompartmentId pulumi.StringOutput `pulumi:"compartmentId"`
	// (Updatable) Contains properties for a VNIC. You use this object when creating the primary VNIC during instance launch or when creating a secondary VNIC. For more information about VNICs, see [Virtual Network Interface Cards (VNICs)](https://docs.cloud.oracle.com/iaas/Content/Network/Tasks/managingVNICs.htm).
	CreateVnicDetails CoreVnicAttachmentCreateVnicDetailsOutput `pulumi:"createVnicDetails"`
	// A user-friendly name for the attachment. Does not have to be unique, and it cannot be changed. Avoid entering confidential information.
	DisplayName pulumi.StringOutput `pulumi:"displayName"`
	// The OCID of the instance.
	InstanceId pulumi.StringOutput `pulumi:"instanceId"`
	// Which physical network interface card (NIC) the VNIC will use. Defaults to 0. Certain bare metal instance shapes have two active physical NICs (0 and 1). If you add a secondary VNIC to one of these instances, you can specify which NIC the VNIC will use. For more information, see [Virtual Network Interface Cards (VNICs)](https://docs.cloud.oracle.com/iaas/Content/Network/Tasks/managingVNICs.htm).
	NicIndex pulumi.IntOutput `pulumi:"nicIndex"`
	// The current state of the VNIC attachment.
	State pulumi.StringOutput `pulumi:"state"`
	// The OCID of the subnet to create the VNIC in. When launching an instance, use this `subnetId` instead of the deprecated `subnetId` in [LaunchInstanceDetails](https://docs.cloud.oracle.com/iaas/api/#/en/iaas/latest/requests/LaunchInstanceDetails). At least one of them is required; if you provide both, the values must match.
	SubnetId pulumi.StringOutput `pulumi:"subnetId"`
	// The date and time the VNIC attachment was created, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).  Example: `2016-08-25T21:10:29.600Z`
	TimeCreated pulumi.StringOutput `pulumi:"timeCreated"`
	// Provide this attribute only if you are an Oracle Cloud VMware Solution customer and creating a secondary VNIC in a VLAN. The value is the OCID of the VLAN. See [Vlan](https://docs.cloud.oracle.com/iaas/api/#/en/iaas/latest/Vlan).
	VlanId pulumi.StringOutput `pulumi:"vlanId"`
	// The Oracle-assigned VLAN tag of the attached VNIC. Available after the attachment process is complete.
	VlanTag pulumi.IntOutput `pulumi:"vlanTag"`
	// The OCID of the VNIC. Available after the attachment process is complete.
	VnicId pulumi.StringOutput `pulumi:"vnicId"`
}

// NewCoreVnicAttachment registers a new resource with the given unique name, arguments, and options.
func NewCoreVnicAttachment(ctx *pulumi.Context,
	name string, args *CoreVnicAttachmentArgs, opts ...pulumi.ResourceOption) (*CoreVnicAttachment, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CreateVnicDetails == nil {
		return nil, errors.New("invalid value for required argument 'CreateVnicDetails'")
	}
	if args.InstanceId == nil {
		return nil, errors.New("invalid value for required argument 'InstanceId'")
	}
	var resource CoreVnicAttachment
	err := ctx.RegisterResource("oci:index/coreVnicAttachment:CoreVnicAttachment", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCoreVnicAttachment gets an existing CoreVnicAttachment resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCoreVnicAttachment(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CoreVnicAttachmentState, opts ...pulumi.ResourceOption) (*CoreVnicAttachment, error) {
	var resource CoreVnicAttachment
	err := ctx.ReadResource("oci:index/coreVnicAttachment:CoreVnicAttachment", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CoreVnicAttachment resources.
type coreVnicAttachmentState struct {
	// The availability domain of the instance.  Example: `Uocm:PHX-AD-1`
	AvailabilityDomain *string `pulumi:"availabilityDomain"`
	// The OCID of the compartment the VNIC attachment is in, which is the same compartment the instance is in.
	CompartmentId *string `pulumi:"compartmentId"`
	// (Updatable) Contains properties for a VNIC. You use this object when creating the primary VNIC during instance launch or when creating a secondary VNIC. For more information about VNICs, see [Virtual Network Interface Cards (VNICs)](https://docs.cloud.oracle.com/iaas/Content/Network/Tasks/managingVNICs.htm).
	CreateVnicDetails *CoreVnicAttachmentCreateVnicDetails `pulumi:"createVnicDetails"`
	// A user-friendly name for the attachment. Does not have to be unique, and it cannot be changed. Avoid entering confidential information.
	DisplayName *string `pulumi:"displayName"`
	// The OCID of the instance.
	InstanceId *string `pulumi:"instanceId"`
	// Which physical network interface card (NIC) the VNIC will use. Defaults to 0. Certain bare metal instance shapes have two active physical NICs (0 and 1). If you add a secondary VNIC to one of these instances, you can specify which NIC the VNIC will use. For more information, see [Virtual Network Interface Cards (VNICs)](https://docs.cloud.oracle.com/iaas/Content/Network/Tasks/managingVNICs.htm).
	NicIndex *int `pulumi:"nicIndex"`
	// The current state of the VNIC attachment.
	State *string `pulumi:"state"`
	// The OCID of the subnet to create the VNIC in. When launching an instance, use this `subnetId` instead of the deprecated `subnetId` in [LaunchInstanceDetails](https://docs.cloud.oracle.com/iaas/api/#/en/iaas/latest/requests/LaunchInstanceDetails). At least one of them is required; if you provide both, the values must match.
	SubnetId *string `pulumi:"subnetId"`
	// The date and time the VNIC attachment was created, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).  Example: `2016-08-25T21:10:29.600Z`
	TimeCreated *string `pulumi:"timeCreated"`
	// Provide this attribute only if you are an Oracle Cloud VMware Solution customer and creating a secondary VNIC in a VLAN. The value is the OCID of the VLAN. See [Vlan](https://docs.cloud.oracle.com/iaas/api/#/en/iaas/latest/Vlan).
	VlanId *string `pulumi:"vlanId"`
	// The Oracle-assigned VLAN tag of the attached VNIC. Available after the attachment process is complete.
	VlanTag *int `pulumi:"vlanTag"`
	// The OCID of the VNIC. Available after the attachment process is complete.
	VnicId *string `pulumi:"vnicId"`
}

type CoreVnicAttachmentState struct {
	// The availability domain of the instance.  Example: `Uocm:PHX-AD-1`
	AvailabilityDomain pulumi.StringPtrInput
	// The OCID of the compartment the VNIC attachment is in, which is the same compartment the instance is in.
	CompartmentId pulumi.StringPtrInput
	// (Updatable) Contains properties for a VNIC. You use this object when creating the primary VNIC during instance launch or when creating a secondary VNIC. For more information about VNICs, see [Virtual Network Interface Cards (VNICs)](https://docs.cloud.oracle.com/iaas/Content/Network/Tasks/managingVNICs.htm).
	CreateVnicDetails CoreVnicAttachmentCreateVnicDetailsPtrInput
	// A user-friendly name for the attachment. Does not have to be unique, and it cannot be changed. Avoid entering confidential information.
	DisplayName pulumi.StringPtrInput
	// The OCID of the instance.
	InstanceId pulumi.StringPtrInput
	// Which physical network interface card (NIC) the VNIC will use. Defaults to 0. Certain bare metal instance shapes have two active physical NICs (0 and 1). If you add a secondary VNIC to one of these instances, you can specify which NIC the VNIC will use. For more information, see [Virtual Network Interface Cards (VNICs)](https://docs.cloud.oracle.com/iaas/Content/Network/Tasks/managingVNICs.htm).
	NicIndex pulumi.IntPtrInput
	// The current state of the VNIC attachment.
	State pulumi.StringPtrInput
	// The OCID of the subnet to create the VNIC in. When launching an instance, use this `subnetId` instead of the deprecated `subnetId` in [LaunchInstanceDetails](https://docs.cloud.oracle.com/iaas/api/#/en/iaas/latest/requests/LaunchInstanceDetails). At least one of them is required; if you provide both, the values must match.
	SubnetId pulumi.StringPtrInput
	// The date and time the VNIC attachment was created, in the format defined by [RFC3339](https://tools.ietf.org/html/rfc3339).  Example: `2016-08-25T21:10:29.600Z`
	TimeCreated pulumi.StringPtrInput
	// Provide this attribute only if you are an Oracle Cloud VMware Solution customer and creating a secondary VNIC in a VLAN. The value is the OCID of the VLAN. See [Vlan](https://docs.cloud.oracle.com/iaas/api/#/en/iaas/latest/Vlan).
	VlanId pulumi.StringPtrInput
	// The Oracle-assigned VLAN tag of the attached VNIC. Available after the attachment process is complete.
	VlanTag pulumi.IntPtrInput
	// The OCID of the VNIC. Available after the attachment process is complete.
	VnicId pulumi.StringPtrInput
}

func (CoreVnicAttachmentState) ElementType() reflect.Type {
	return reflect.TypeOf((*coreVnicAttachmentState)(nil)).Elem()
}

type coreVnicAttachmentArgs struct {
	// (Updatable) Contains properties for a VNIC. You use this object when creating the primary VNIC during instance launch or when creating a secondary VNIC. For more information about VNICs, see [Virtual Network Interface Cards (VNICs)](https://docs.cloud.oracle.com/iaas/Content/Network/Tasks/managingVNICs.htm).
	CreateVnicDetails CoreVnicAttachmentCreateVnicDetails `pulumi:"createVnicDetails"`
	// A user-friendly name for the attachment. Does not have to be unique, and it cannot be changed. Avoid entering confidential information.
	DisplayName *string `pulumi:"displayName"`
	// The OCID of the instance.
	InstanceId string `pulumi:"instanceId"`
	// Which physical network interface card (NIC) the VNIC will use. Defaults to 0. Certain bare metal instance shapes have two active physical NICs (0 and 1). If you add a secondary VNIC to one of these instances, you can specify which NIC the VNIC will use. For more information, see [Virtual Network Interface Cards (VNICs)](https://docs.cloud.oracle.com/iaas/Content/Network/Tasks/managingVNICs.htm).
	NicIndex *int `pulumi:"nicIndex"`
}

// The set of arguments for constructing a CoreVnicAttachment resource.
type CoreVnicAttachmentArgs struct {
	// (Updatable) Contains properties for a VNIC. You use this object when creating the primary VNIC during instance launch or when creating a secondary VNIC. For more information about VNICs, see [Virtual Network Interface Cards (VNICs)](https://docs.cloud.oracle.com/iaas/Content/Network/Tasks/managingVNICs.htm).
	CreateVnicDetails CoreVnicAttachmentCreateVnicDetailsInput
	// A user-friendly name for the attachment. Does not have to be unique, and it cannot be changed. Avoid entering confidential information.
	DisplayName pulumi.StringPtrInput
	// The OCID of the instance.
	InstanceId pulumi.StringInput
	// Which physical network interface card (NIC) the VNIC will use. Defaults to 0. Certain bare metal instance shapes have two active physical NICs (0 and 1). If you add a secondary VNIC to one of these instances, you can specify which NIC the VNIC will use. For more information, see [Virtual Network Interface Cards (VNICs)](https://docs.cloud.oracle.com/iaas/Content/Network/Tasks/managingVNICs.htm).
	NicIndex pulumi.IntPtrInput
}

func (CoreVnicAttachmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*coreVnicAttachmentArgs)(nil)).Elem()
}

type CoreVnicAttachmentInput interface {
	pulumi.Input

	ToCoreVnicAttachmentOutput() CoreVnicAttachmentOutput
	ToCoreVnicAttachmentOutputWithContext(ctx context.Context) CoreVnicAttachmentOutput
}

func (*CoreVnicAttachment) ElementType() reflect.Type {
	return reflect.TypeOf((*CoreVnicAttachment)(nil))
}

func (i *CoreVnicAttachment) ToCoreVnicAttachmentOutput() CoreVnicAttachmentOutput {
	return i.ToCoreVnicAttachmentOutputWithContext(context.Background())
}

func (i *CoreVnicAttachment) ToCoreVnicAttachmentOutputWithContext(ctx context.Context) CoreVnicAttachmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CoreVnicAttachmentOutput)
}

func (i *CoreVnicAttachment) ToCoreVnicAttachmentPtrOutput() CoreVnicAttachmentPtrOutput {
	return i.ToCoreVnicAttachmentPtrOutputWithContext(context.Background())
}

func (i *CoreVnicAttachment) ToCoreVnicAttachmentPtrOutputWithContext(ctx context.Context) CoreVnicAttachmentPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CoreVnicAttachmentPtrOutput)
}

type CoreVnicAttachmentPtrInput interface {
	pulumi.Input

	ToCoreVnicAttachmentPtrOutput() CoreVnicAttachmentPtrOutput
	ToCoreVnicAttachmentPtrOutputWithContext(ctx context.Context) CoreVnicAttachmentPtrOutput
}

type coreVnicAttachmentPtrType CoreVnicAttachmentArgs

func (*coreVnicAttachmentPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CoreVnicAttachment)(nil))
}

func (i *coreVnicAttachmentPtrType) ToCoreVnicAttachmentPtrOutput() CoreVnicAttachmentPtrOutput {
	return i.ToCoreVnicAttachmentPtrOutputWithContext(context.Background())
}

func (i *coreVnicAttachmentPtrType) ToCoreVnicAttachmentPtrOutputWithContext(ctx context.Context) CoreVnicAttachmentPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CoreVnicAttachmentPtrOutput)
}

// CoreVnicAttachmentArrayInput is an input type that accepts CoreVnicAttachmentArray and CoreVnicAttachmentArrayOutput values.
// You can construct a concrete instance of `CoreVnicAttachmentArrayInput` via:
//
//          CoreVnicAttachmentArray{ CoreVnicAttachmentArgs{...} }
type CoreVnicAttachmentArrayInput interface {
	pulumi.Input

	ToCoreVnicAttachmentArrayOutput() CoreVnicAttachmentArrayOutput
	ToCoreVnicAttachmentArrayOutputWithContext(context.Context) CoreVnicAttachmentArrayOutput
}

type CoreVnicAttachmentArray []CoreVnicAttachmentInput

func (CoreVnicAttachmentArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CoreVnicAttachment)(nil)).Elem()
}

func (i CoreVnicAttachmentArray) ToCoreVnicAttachmentArrayOutput() CoreVnicAttachmentArrayOutput {
	return i.ToCoreVnicAttachmentArrayOutputWithContext(context.Background())
}

func (i CoreVnicAttachmentArray) ToCoreVnicAttachmentArrayOutputWithContext(ctx context.Context) CoreVnicAttachmentArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CoreVnicAttachmentArrayOutput)
}

// CoreVnicAttachmentMapInput is an input type that accepts CoreVnicAttachmentMap and CoreVnicAttachmentMapOutput values.
// You can construct a concrete instance of `CoreVnicAttachmentMapInput` via:
//
//          CoreVnicAttachmentMap{ "key": CoreVnicAttachmentArgs{...} }
type CoreVnicAttachmentMapInput interface {
	pulumi.Input

	ToCoreVnicAttachmentMapOutput() CoreVnicAttachmentMapOutput
	ToCoreVnicAttachmentMapOutputWithContext(context.Context) CoreVnicAttachmentMapOutput
}

type CoreVnicAttachmentMap map[string]CoreVnicAttachmentInput

func (CoreVnicAttachmentMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CoreVnicAttachment)(nil)).Elem()
}

func (i CoreVnicAttachmentMap) ToCoreVnicAttachmentMapOutput() CoreVnicAttachmentMapOutput {
	return i.ToCoreVnicAttachmentMapOutputWithContext(context.Background())
}

func (i CoreVnicAttachmentMap) ToCoreVnicAttachmentMapOutputWithContext(ctx context.Context) CoreVnicAttachmentMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CoreVnicAttachmentMapOutput)
}

type CoreVnicAttachmentOutput struct {
	*pulumi.OutputState
}

func (CoreVnicAttachmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CoreVnicAttachment)(nil))
}

func (o CoreVnicAttachmentOutput) ToCoreVnicAttachmentOutput() CoreVnicAttachmentOutput {
	return o
}

func (o CoreVnicAttachmentOutput) ToCoreVnicAttachmentOutputWithContext(ctx context.Context) CoreVnicAttachmentOutput {
	return o
}

func (o CoreVnicAttachmentOutput) ToCoreVnicAttachmentPtrOutput() CoreVnicAttachmentPtrOutput {
	return o.ToCoreVnicAttachmentPtrOutputWithContext(context.Background())
}

func (o CoreVnicAttachmentOutput) ToCoreVnicAttachmentPtrOutputWithContext(ctx context.Context) CoreVnicAttachmentPtrOutput {
	return o.ApplyT(func(v CoreVnicAttachment) *CoreVnicAttachment {
		return &v
	}).(CoreVnicAttachmentPtrOutput)
}

type CoreVnicAttachmentPtrOutput struct {
	*pulumi.OutputState
}

func (CoreVnicAttachmentPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CoreVnicAttachment)(nil))
}

func (o CoreVnicAttachmentPtrOutput) ToCoreVnicAttachmentPtrOutput() CoreVnicAttachmentPtrOutput {
	return o
}

func (o CoreVnicAttachmentPtrOutput) ToCoreVnicAttachmentPtrOutputWithContext(ctx context.Context) CoreVnicAttachmentPtrOutput {
	return o
}

type CoreVnicAttachmentArrayOutput struct{ *pulumi.OutputState }

func (CoreVnicAttachmentArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CoreVnicAttachment)(nil))
}

func (o CoreVnicAttachmentArrayOutput) ToCoreVnicAttachmentArrayOutput() CoreVnicAttachmentArrayOutput {
	return o
}

func (o CoreVnicAttachmentArrayOutput) ToCoreVnicAttachmentArrayOutputWithContext(ctx context.Context) CoreVnicAttachmentArrayOutput {
	return o
}

func (o CoreVnicAttachmentArrayOutput) Index(i pulumi.IntInput) CoreVnicAttachmentOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CoreVnicAttachment {
		return vs[0].([]CoreVnicAttachment)[vs[1].(int)]
	}).(CoreVnicAttachmentOutput)
}

type CoreVnicAttachmentMapOutput struct{ *pulumi.OutputState }

func (CoreVnicAttachmentMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]CoreVnicAttachment)(nil))
}

func (o CoreVnicAttachmentMapOutput) ToCoreVnicAttachmentMapOutput() CoreVnicAttachmentMapOutput {
	return o
}

func (o CoreVnicAttachmentMapOutput) ToCoreVnicAttachmentMapOutputWithContext(ctx context.Context) CoreVnicAttachmentMapOutput {
	return o
}

func (o CoreVnicAttachmentMapOutput) MapIndex(k pulumi.StringInput) CoreVnicAttachmentOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) CoreVnicAttachment {
		return vs[0].(map[string]CoreVnicAttachment)[vs[1].(string)]
	}).(CoreVnicAttachmentOutput)
}

func init() {
	pulumi.RegisterOutputType(CoreVnicAttachmentOutput{})
	pulumi.RegisterOutputType(CoreVnicAttachmentPtrOutput{})
	pulumi.RegisterOutputType(CoreVnicAttachmentArrayOutput{})
	pulumi.RegisterOutputType(CoreVnicAttachmentMapOutput{})
}
