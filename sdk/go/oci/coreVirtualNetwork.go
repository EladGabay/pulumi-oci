// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package oci

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

type CoreVirtualNetwork struct {
	pulumi.CustomResourceState

	CidrBlock             pulumi.StringOutput      `pulumi:"cidrBlock"`
	CidrBlocks            pulumi.StringArrayOutput `pulumi:"cidrBlocks"`
	CompartmentId         pulumi.StringOutput      `pulumi:"compartmentId"`
	DefaultDhcpOptionsId  pulumi.StringOutput      `pulumi:"defaultDhcpOptionsId"`
	DefaultRouteTableId   pulumi.StringOutput      `pulumi:"defaultRouteTableId"`
	DefaultSecurityListId pulumi.StringOutput      `pulumi:"defaultSecurityListId"`
	DefinedTags           pulumi.MapOutput         `pulumi:"definedTags"`
	DisplayName           pulumi.StringOutput      `pulumi:"displayName"`
	DnsLabel              pulumi.StringOutput      `pulumi:"dnsLabel"`
	FreeformTags          pulumi.MapOutput         `pulumi:"freeformTags"`
	Ipv6cidrBlocks        pulumi.StringArrayOutput `pulumi:"ipv6cidrBlocks"`
	IsIpv6enabled         pulumi.BoolOutput        `pulumi:"isIpv6enabled"`
	State                 pulumi.StringOutput      `pulumi:"state"`
	TimeCreated           pulumi.StringOutput      `pulumi:"timeCreated"`
	VcnDomainName         pulumi.StringOutput      `pulumi:"vcnDomainName"`
}

// NewCoreVirtualNetwork registers a new resource with the given unique name, arguments, and options.
func NewCoreVirtualNetwork(ctx *pulumi.Context,
	name string, args *CoreVirtualNetworkArgs, opts ...pulumi.ResourceOption) (*CoreVirtualNetwork, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CompartmentId == nil {
		return nil, errors.New("invalid value for required argument 'CompartmentId'")
	}
	var resource CoreVirtualNetwork
	err := ctx.RegisterResource("oci:index/coreVirtualNetwork:CoreVirtualNetwork", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCoreVirtualNetwork gets an existing CoreVirtualNetwork resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCoreVirtualNetwork(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CoreVirtualNetworkState, opts ...pulumi.ResourceOption) (*CoreVirtualNetwork, error) {
	var resource CoreVirtualNetwork
	err := ctx.ReadResource("oci:index/coreVirtualNetwork:CoreVirtualNetwork", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CoreVirtualNetwork resources.
type coreVirtualNetworkState struct {
	CidrBlock             *string                `pulumi:"cidrBlock"`
	CidrBlocks            []string               `pulumi:"cidrBlocks"`
	CompartmentId         *string                `pulumi:"compartmentId"`
	DefaultDhcpOptionsId  *string                `pulumi:"defaultDhcpOptionsId"`
	DefaultRouteTableId   *string                `pulumi:"defaultRouteTableId"`
	DefaultSecurityListId *string                `pulumi:"defaultSecurityListId"`
	DefinedTags           map[string]interface{} `pulumi:"definedTags"`
	DisplayName           *string                `pulumi:"displayName"`
	DnsLabel              *string                `pulumi:"dnsLabel"`
	FreeformTags          map[string]interface{} `pulumi:"freeformTags"`
	Ipv6cidrBlocks        []string               `pulumi:"ipv6cidrBlocks"`
	IsIpv6enabled         *bool                  `pulumi:"isIpv6enabled"`
	State                 *string                `pulumi:"state"`
	TimeCreated           *string                `pulumi:"timeCreated"`
	VcnDomainName         *string                `pulumi:"vcnDomainName"`
}

type CoreVirtualNetworkState struct {
	CidrBlock             pulumi.StringPtrInput
	CidrBlocks            pulumi.StringArrayInput
	CompartmentId         pulumi.StringPtrInput
	DefaultDhcpOptionsId  pulumi.StringPtrInput
	DefaultRouteTableId   pulumi.StringPtrInput
	DefaultSecurityListId pulumi.StringPtrInput
	DefinedTags           pulumi.MapInput
	DisplayName           pulumi.StringPtrInput
	DnsLabel              pulumi.StringPtrInput
	FreeformTags          pulumi.MapInput
	Ipv6cidrBlocks        pulumi.StringArrayInput
	IsIpv6enabled         pulumi.BoolPtrInput
	State                 pulumi.StringPtrInput
	TimeCreated           pulumi.StringPtrInput
	VcnDomainName         pulumi.StringPtrInput
}

func (CoreVirtualNetworkState) ElementType() reflect.Type {
	return reflect.TypeOf((*coreVirtualNetworkState)(nil)).Elem()
}

type coreVirtualNetworkArgs struct {
	CidrBlock     *string                `pulumi:"cidrBlock"`
	CidrBlocks    []string               `pulumi:"cidrBlocks"`
	CompartmentId string                 `pulumi:"compartmentId"`
	DefinedTags   map[string]interface{} `pulumi:"definedTags"`
	DisplayName   *string                `pulumi:"displayName"`
	DnsLabel      *string                `pulumi:"dnsLabel"`
	FreeformTags  map[string]interface{} `pulumi:"freeformTags"`
	IsIpv6enabled *bool                  `pulumi:"isIpv6enabled"`
}

// The set of arguments for constructing a CoreVirtualNetwork resource.
type CoreVirtualNetworkArgs struct {
	CidrBlock     pulumi.StringPtrInput
	CidrBlocks    pulumi.StringArrayInput
	CompartmentId pulumi.StringInput
	DefinedTags   pulumi.MapInput
	DisplayName   pulumi.StringPtrInput
	DnsLabel      pulumi.StringPtrInput
	FreeformTags  pulumi.MapInput
	IsIpv6enabled pulumi.BoolPtrInput
}

func (CoreVirtualNetworkArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*coreVirtualNetworkArgs)(nil)).Elem()
}

type CoreVirtualNetworkInput interface {
	pulumi.Input

	ToCoreVirtualNetworkOutput() CoreVirtualNetworkOutput
	ToCoreVirtualNetworkOutputWithContext(ctx context.Context) CoreVirtualNetworkOutput
}

func (*CoreVirtualNetwork) ElementType() reflect.Type {
	return reflect.TypeOf((*CoreVirtualNetwork)(nil))
}

func (i *CoreVirtualNetwork) ToCoreVirtualNetworkOutput() CoreVirtualNetworkOutput {
	return i.ToCoreVirtualNetworkOutputWithContext(context.Background())
}

func (i *CoreVirtualNetwork) ToCoreVirtualNetworkOutputWithContext(ctx context.Context) CoreVirtualNetworkOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CoreVirtualNetworkOutput)
}

func (i *CoreVirtualNetwork) ToCoreVirtualNetworkPtrOutput() CoreVirtualNetworkPtrOutput {
	return i.ToCoreVirtualNetworkPtrOutputWithContext(context.Background())
}

func (i *CoreVirtualNetwork) ToCoreVirtualNetworkPtrOutputWithContext(ctx context.Context) CoreVirtualNetworkPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CoreVirtualNetworkPtrOutput)
}

type CoreVirtualNetworkPtrInput interface {
	pulumi.Input

	ToCoreVirtualNetworkPtrOutput() CoreVirtualNetworkPtrOutput
	ToCoreVirtualNetworkPtrOutputWithContext(ctx context.Context) CoreVirtualNetworkPtrOutput
}

type coreVirtualNetworkPtrType CoreVirtualNetworkArgs

func (*coreVirtualNetworkPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**CoreVirtualNetwork)(nil))
}

func (i *coreVirtualNetworkPtrType) ToCoreVirtualNetworkPtrOutput() CoreVirtualNetworkPtrOutput {
	return i.ToCoreVirtualNetworkPtrOutputWithContext(context.Background())
}

func (i *coreVirtualNetworkPtrType) ToCoreVirtualNetworkPtrOutputWithContext(ctx context.Context) CoreVirtualNetworkPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CoreVirtualNetworkPtrOutput)
}

// CoreVirtualNetworkArrayInput is an input type that accepts CoreVirtualNetworkArray and CoreVirtualNetworkArrayOutput values.
// You can construct a concrete instance of `CoreVirtualNetworkArrayInput` via:
//
//          CoreVirtualNetworkArray{ CoreVirtualNetworkArgs{...} }
type CoreVirtualNetworkArrayInput interface {
	pulumi.Input

	ToCoreVirtualNetworkArrayOutput() CoreVirtualNetworkArrayOutput
	ToCoreVirtualNetworkArrayOutputWithContext(context.Context) CoreVirtualNetworkArrayOutput
}

type CoreVirtualNetworkArray []CoreVirtualNetworkInput

func (CoreVirtualNetworkArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CoreVirtualNetwork)(nil)).Elem()
}

func (i CoreVirtualNetworkArray) ToCoreVirtualNetworkArrayOutput() CoreVirtualNetworkArrayOutput {
	return i.ToCoreVirtualNetworkArrayOutputWithContext(context.Background())
}

func (i CoreVirtualNetworkArray) ToCoreVirtualNetworkArrayOutputWithContext(ctx context.Context) CoreVirtualNetworkArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CoreVirtualNetworkArrayOutput)
}

// CoreVirtualNetworkMapInput is an input type that accepts CoreVirtualNetworkMap and CoreVirtualNetworkMapOutput values.
// You can construct a concrete instance of `CoreVirtualNetworkMapInput` via:
//
//          CoreVirtualNetworkMap{ "key": CoreVirtualNetworkArgs{...} }
type CoreVirtualNetworkMapInput interface {
	pulumi.Input

	ToCoreVirtualNetworkMapOutput() CoreVirtualNetworkMapOutput
	ToCoreVirtualNetworkMapOutputWithContext(context.Context) CoreVirtualNetworkMapOutput
}

type CoreVirtualNetworkMap map[string]CoreVirtualNetworkInput

func (CoreVirtualNetworkMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CoreVirtualNetwork)(nil)).Elem()
}

func (i CoreVirtualNetworkMap) ToCoreVirtualNetworkMapOutput() CoreVirtualNetworkMapOutput {
	return i.ToCoreVirtualNetworkMapOutputWithContext(context.Background())
}

func (i CoreVirtualNetworkMap) ToCoreVirtualNetworkMapOutputWithContext(ctx context.Context) CoreVirtualNetworkMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CoreVirtualNetworkMapOutput)
}

type CoreVirtualNetworkOutput struct {
	*pulumi.OutputState
}

func (CoreVirtualNetworkOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*CoreVirtualNetwork)(nil))
}

func (o CoreVirtualNetworkOutput) ToCoreVirtualNetworkOutput() CoreVirtualNetworkOutput {
	return o
}

func (o CoreVirtualNetworkOutput) ToCoreVirtualNetworkOutputWithContext(ctx context.Context) CoreVirtualNetworkOutput {
	return o
}

func (o CoreVirtualNetworkOutput) ToCoreVirtualNetworkPtrOutput() CoreVirtualNetworkPtrOutput {
	return o.ToCoreVirtualNetworkPtrOutputWithContext(context.Background())
}

func (o CoreVirtualNetworkOutput) ToCoreVirtualNetworkPtrOutputWithContext(ctx context.Context) CoreVirtualNetworkPtrOutput {
	return o.ApplyT(func(v CoreVirtualNetwork) *CoreVirtualNetwork {
		return &v
	}).(CoreVirtualNetworkPtrOutput)
}

type CoreVirtualNetworkPtrOutput struct {
	*pulumi.OutputState
}

func (CoreVirtualNetworkPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CoreVirtualNetwork)(nil))
}

func (o CoreVirtualNetworkPtrOutput) ToCoreVirtualNetworkPtrOutput() CoreVirtualNetworkPtrOutput {
	return o
}

func (o CoreVirtualNetworkPtrOutput) ToCoreVirtualNetworkPtrOutputWithContext(ctx context.Context) CoreVirtualNetworkPtrOutput {
	return o
}

type CoreVirtualNetworkArrayOutput struct{ *pulumi.OutputState }

func (CoreVirtualNetworkArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]CoreVirtualNetwork)(nil))
}

func (o CoreVirtualNetworkArrayOutput) ToCoreVirtualNetworkArrayOutput() CoreVirtualNetworkArrayOutput {
	return o
}

func (o CoreVirtualNetworkArrayOutput) ToCoreVirtualNetworkArrayOutputWithContext(ctx context.Context) CoreVirtualNetworkArrayOutput {
	return o
}

func (o CoreVirtualNetworkArrayOutput) Index(i pulumi.IntInput) CoreVirtualNetworkOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) CoreVirtualNetwork {
		return vs[0].([]CoreVirtualNetwork)[vs[1].(int)]
	}).(CoreVirtualNetworkOutput)
}

type CoreVirtualNetworkMapOutput struct{ *pulumi.OutputState }

func (CoreVirtualNetworkMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]CoreVirtualNetwork)(nil))
}

func (o CoreVirtualNetworkMapOutput) ToCoreVirtualNetworkMapOutput() CoreVirtualNetworkMapOutput {
	return o
}

func (o CoreVirtualNetworkMapOutput) ToCoreVirtualNetworkMapOutputWithContext(ctx context.Context) CoreVirtualNetworkMapOutput {
	return o
}

func (o CoreVirtualNetworkMapOutput) MapIndex(k pulumi.StringInput) CoreVirtualNetworkOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) CoreVirtualNetwork {
		return vs[0].(map[string]CoreVirtualNetwork)[vs[1].(string)]
	}).(CoreVirtualNetworkOutput)
}

func init() {
	pulumi.RegisterOutputType(CoreVirtualNetworkOutput{})
	pulumi.RegisterOutputType(CoreVirtualNetworkPtrOutput{})
	pulumi.RegisterOutputType(CoreVirtualNetworkArrayOutput{})
	pulumi.RegisterOutputType(CoreVirtualNetworkMapOutput{})
}
