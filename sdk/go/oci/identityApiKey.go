// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package oci

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource provides the Api Key resource in Oracle Cloud Infrastructure Identity service.
//
// Uploads an API signing key for the specified user.
//
// Every user has permission to use this operation to upload a key for *their own user ID*. An
// administrator in your organization does not need to write a policy to give users this ability.
// To compare, administrators who have permission to the tenancy can use this operation to upload a
// key for any user, including themselves.
//
// **Important:** Even though you have permission to upload an API key, you might not yet
// have permission to do much else. If you try calling an operation unrelated to your own credential
// management (e.g., `ListUsers`, `LaunchInstance`) and receive an "unauthorized" error,
// check with an administrator to confirm which IAM Service group(s) you're in and what access
// you have. Also confirm you're working in the correct compartment.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-oci/sdk/go/oci"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := oci.NewIdentityApiKey(ctx, "testApiKey", &oci.IdentityApiKeyArgs{
// 			KeyValue: pulumi.Any(_var.Api_key_key_value),
// 			UserId:   pulumi.Any(oci_identity_user.Test_user.Id),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// ApiKeys can be imported using the `id`, e.g.
//
// ```sh
//  $ pulumi import oci:index/identityApiKey:IdentityApiKey test_api_key "users/{userId}/apiKeys/{fingerprint}"
// ```
type IdentityApiKey struct {
	pulumi.CustomResourceState

	// The key's fingerprint (e.g., 12:34:56:78:90:ab:cd:ef:12:34:56:78:90:ab:cd:ef).
	Fingerprint pulumi.StringOutput `pulumi:"fingerprint"`
	// The detailed status of INACTIVE lifecycleState.
	InactiveStatus pulumi.StringOutput `pulumi:"inactiveStatus"`
	// The public key.  Must be an RSA key in PEM format.
	KeyValue pulumi.StringOutput `pulumi:"keyValue"`
	// The API key's current state.
	State pulumi.StringOutput `pulumi:"state"`
	// Date and time the `ApiKey` object was created, in the format defined by RFC3339.  Example: `2016-08-25T21:10:29.600Z`
	TimeCreated pulumi.StringOutput `pulumi:"timeCreated"`
	// The OCID of the user.
	UserId pulumi.StringOutput `pulumi:"userId"`
}

// NewIdentityApiKey registers a new resource with the given unique name, arguments, and options.
func NewIdentityApiKey(ctx *pulumi.Context,
	name string, args *IdentityApiKeyArgs, opts ...pulumi.ResourceOption) (*IdentityApiKey, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.KeyValue == nil {
		return nil, errors.New("invalid value for required argument 'KeyValue'")
	}
	if args.UserId == nil {
		return nil, errors.New("invalid value for required argument 'UserId'")
	}
	var resource IdentityApiKey
	err := ctx.RegisterResource("oci:index/identityApiKey:IdentityApiKey", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIdentityApiKey gets an existing IdentityApiKey resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIdentityApiKey(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *IdentityApiKeyState, opts ...pulumi.ResourceOption) (*IdentityApiKey, error) {
	var resource IdentityApiKey
	err := ctx.ReadResource("oci:index/identityApiKey:IdentityApiKey", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering IdentityApiKey resources.
type identityApiKeyState struct {
	// The key's fingerprint (e.g., 12:34:56:78:90:ab:cd:ef:12:34:56:78:90:ab:cd:ef).
	Fingerprint *string `pulumi:"fingerprint"`
	// The detailed status of INACTIVE lifecycleState.
	InactiveStatus *string `pulumi:"inactiveStatus"`
	// The public key.  Must be an RSA key in PEM format.
	KeyValue *string `pulumi:"keyValue"`
	// The API key's current state.
	State *string `pulumi:"state"`
	// Date and time the `ApiKey` object was created, in the format defined by RFC3339.  Example: `2016-08-25T21:10:29.600Z`
	TimeCreated *string `pulumi:"timeCreated"`
	// The OCID of the user.
	UserId *string `pulumi:"userId"`
}

type IdentityApiKeyState struct {
	// The key's fingerprint (e.g., 12:34:56:78:90:ab:cd:ef:12:34:56:78:90:ab:cd:ef).
	Fingerprint pulumi.StringPtrInput
	// The detailed status of INACTIVE lifecycleState.
	InactiveStatus pulumi.StringPtrInput
	// The public key.  Must be an RSA key in PEM format.
	KeyValue pulumi.StringPtrInput
	// The API key's current state.
	State pulumi.StringPtrInput
	// Date and time the `ApiKey` object was created, in the format defined by RFC3339.  Example: `2016-08-25T21:10:29.600Z`
	TimeCreated pulumi.StringPtrInput
	// The OCID of the user.
	UserId pulumi.StringPtrInput
}

func (IdentityApiKeyState) ElementType() reflect.Type {
	return reflect.TypeOf((*identityApiKeyState)(nil)).Elem()
}

type identityApiKeyArgs struct {
	// The public key.  Must be an RSA key in PEM format.
	KeyValue string `pulumi:"keyValue"`
	// The OCID of the user.
	UserId string `pulumi:"userId"`
}

// The set of arguments for constructing a IdentityApiKey resource.
type IdentityApiKeyArgs struct {
	// The public key.  Must be an RSA key in PEM format.
	KeyValue pulumi.StringInput
	// The OCID of the user.
	UserId pulumi.StringInput
}

func (IdentityApiKeyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*identityApiKeyArgs)(nil)).Elem()
}

type IdentityApiKeyInput interface {
	pulumi.Input

	ToIdentityApiKeyOutput() IdentityApiKeyOutput
	ToIdentityApiKeyOutputWithContext(ctx context.Context) IdentityApiKeyOutput
}

func (*IdentityApiKey) ElementType() reflect.Type {
	return reflect.TypeOf((*IdentityApiKey)(nil))
}

func (i *IdentityApiKey) ToIdentityApiKeyOutput() IdentityApiKeyOutput {
	return i.ToIdentityApiKeyOutputWithContext(context.Background())
}

func (i *IdentityApiKey) ToIdentityApiKeyOutputWithContext(ctx context.Context) IdentityApiKeyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdentityApiKeyOutput)
}

func (i *IdentityApiKey) ToIdentityApiKeyPtrOutput() IdentityApiKeyPtrOutput {
	return i.ToIdentityApiKeyPtrOutputWithContext(context.Background())
}

func (i *IdentityApiKey) ToIdentityApiKeyPtrOutputWithContext(ctx context.Context) IdentityApiKeyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdentityApiKeyPtrOutput)
}

type IdentityApiKeyPtrInput interface {
	pulumi.Input

	ToIdentityApiKeyPtrOutput() IdentityApiKeyPtrOutput
	ToIdentityApiKeyPtrOutputWithContext(ctx context.Context) IdentityApiKeyPtrOutput
}

type identityApiKeyPtrType IdentityApiKeyArgs

func (*identityApiKeyPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**IdentityApiKey)(nil))
}

func (i *identityApiKeyPtrType) ToIdentityApiKeyPtrOutput() IdentityApiKeyPtrOutput {
	return i.ToIdentityApiKeyPtrOutputWithContext(context.Background())
}

func (i *identityApiKeyPtrType) ToIdentityApiKeyPtrOutputWithContext(ctx context.Context) IdentityApiKeyPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdentityApiKeyPtrOutput)
}

// IdentityApiKeyArrayInput is an input type that accepts IdentityApiKeyArray and IdentityApiKeyArrayOutput values.
// You can construct a concrete instance of `IdentityApiKeyArrayInput` via:
//
//          IdentityApiKeyArray{ IdentityApiKeyArgs{...} }
type IdentityApiKeyArrayInput interface {
	pulumi.Input

	ToIdentityApiKeyArrayOutput() IdentityApiKeyArrayOutput
	ToIdentityApiKeyArrayOutputWithContext(context.Context) IdentityApiKeyArrayOutput
}

type IdentityApiKeyArray []IdentityApiKeyInput

func (IdentityApiKeyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IdentityApiKey)(nil)).Elem()
}

func (i IdentityApiKeyArray) ToIdentityApiKeyArrayOutput() IdentityApiKeyArrayOutput {
	return i.ToIdentityApiKeyArrayOutputWithContext(context.Background())
}

func (i IdentityApiKeyArray) ToIdentityApiKeyArrayOutputWithContext(ctx context.Context) IdentityApiKeyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdentityApiKeyArrayOutput)
}

// IdentityApiKeyMapInput is an input type that accepts IdentityApiKeyMap and IdentityApiKeyMapOutput values.
// You can construct a concrete instance of `IdentityApiKeyMapInput` via:
//
//          IdentityApiKeyMap{ "key": IdentityApiKeyArgs{...} }
type IdentityApiKeyMapInput interface {
	pulumi.Input

	ToIdentityApiKeyMapOutput() IdentityApiKeyMapOutput
	ToIdentityApiKeyMapOutputWithContext(context.Context) IdentityApiKeyMapOutput
}

type IdentityApiKeyMap map[string]IdentityApiKeyInput

func (IdentityApiKeyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IdentityApiKey)(nil)).Elem()
}

func (i IdentityApiKeyMap) ToIdentityApiKeyMapOutput() IdentityApiKeyMapOutput {
	return i.ToIdentityApiKeyMapOutputWithContext(context.Background())
}

func (i IdentityApiKeyMap) ToIdentityApiKeyMapOutputWithContext(ctx context.Context) IdentityApiKeyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IdentityApiKeyMapOutput)
}

type IdentityApiKeyOutput struct {
	*pulumi.OutputState
}

func (IdentityApiKeyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*IdentityApiKey)(nil))
}

func (o IdentityApiKeyOutput) ToIdentityApiKeyOutput() IdentityApiKeyOutput {
	return o
}

func (o IdentityApiKeyOutput) ToIdentityApiKeyOutputWithContext(ctx context.Context) IdentityApiKeyOutput {
	return o
}

func (o IdentityApiKeyOutput) ToIdentityApiKeyPtrOutput() IdentityApiKeyPtrOutput {
	return o.ToIdentityApiKeyPtrOutputWithContext(context.Background())
}

func (o IdentityApiKeyOutput) ToIdentityApiKeyPtrOutputWithContext(ctx context.Context) IdentityApiKeyPtrOutput {
	return o.ApplyT(func(v IdentityApiKey) *IdentityApiKey {
		return &v
	}).(IdentityApiKeyPtrOutput)
}

type IdentityApiKeyPtrOutput struct {
	*pulumi.OutputState
}

func (IdentityApiKeyPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IdentityApiKey)(nil))
}

func (o IdentityApiKeyPtrOutput) ToIdentityApiKeyPtrOutput() IdentityApiKeyPtrOutput {
	return o
}

func (o IdentityApiKeyPtrOutput) ToIdentityApiKeyPtrOutputWithContext(ctx context.Context) IdentityApiKeyPtrOutput {
	return o
}

type IdentityApiKeyArrayOutput struct{ *pulumi.OutputState }

func (IdentityApiKeyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]IdentityApiKey)(nil))
}

func (o IdentityApiKeyArrayOutput) ToIdentityApiKeyArrayOutput() IdentityApiKeyArrayOutput {
	return o
}

func (o IdentityApiKeyArrayOutput) ToIdentityApiKeyArrayOutputWithContext(ctx context.Context) IdentityApiKeyArrayOutput {
	return o
}

func (o IdentityApiKeyArrayOutput) Index(i pulumi.IntInput) IdentityApiKeyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) IdentityApiKey {
		return vs[0].([]IdentityApiKey)[vs[1].(int)]
	}).(IdentityApiKeyOutput)
}

type IdentityApiKeyMapOutput struct{ *pulumi.OutputState }

func (IdentityApiKeyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]IdentityApiKey)(nil))
}

func (o IdentityApiKeyMapOutput) ToIdentityApiKeyMapOutput() IdentityApiKeyMapOutput {
	return o
}

func (o IdentityApiKeyMapOutput) ToIdentityApiKeyMapOutputWithContext(ctx context.Context) IdentityApiKeyMapOutput {
	return o
}

func (o IdentityApiKeyMapOutput) MapIndex(k pulumi.StringInput) IdentityApiKeyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) IdentityApiKey {
		return vs[0].(map[string]IdentityApiKey)[vs[1].(string)]
	}).(IdentityApiKeyOutput)
}

func init() {
	pulumi.RegisterOutputType(IdentityApiKeyOutput{})
	pulumi.RegisterOutputType(IdentityApiKeyPtrOutput{})
	pulumi.RegisterOutputType(IdentityApiKeyArrayOutput{})
	pulumi.RegisterOutputType(IdentityApiKeyMapOutput{})
}
