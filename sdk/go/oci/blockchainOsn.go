// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package oci

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource provides the Osn resource in Oracle Cloud Infrastructure Blockchain service.
//
// Create Blockchain Platform Osn
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-oci/sdk/go/oci"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := oci.NewBlockchainOsn(ctx, "testOsn", &oci.BlockchainOsnArgs{
// 			Ad:                   pulumi.Any(_var.Osn_ad),
// 			BlockchainPlatformId: pulumi.Any(oci_blockchain_blockchain_platform.Test_blockchain_platform.Id),
// 			OcpuAllocationParam: &BlockchainOsnOcpuAllocationParamArgs{
// 				OcpuAllocationNumber: pulumi.Any(_var.Osn_ocpu_allocation_param_ocpu_allocation_number),
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// Osns can be imported using the `id`, e.g.
//
// ```sh
//  $ pulumi import oci:index/blockchainOsn:BlockchainOsn test_osn "blockchainPlatforms/{blockchainPlatformId}/osns/{osnId}"
// ```
type BlockchainOsn struct {
	pulumi.CustomResourceState

	// Availability Domain to place new OSN
	Ad pulumi.StringOutput `pulumi:"ad"`
	// Unique service identifier.
	BlockchainPlatformId pulumi.StringOutput `pulumi:"blockchainPlatformId"`
	// (Updatable) OCPU allocation parameter
	OcpuAllocationParam BlockchainOsnOcpuAllocationParamOutput `pulumi:"ocpuAllocationParam"`
	// OSN identifier
	OsnKey pulumi.StringOutput `pulumi:"osnKey"`
	// The current state of the OSN.
	State pulumi.StringOutput `pulumi:"state"`
}

// NewBlockchainOsn registers a new resource with the given unique name, arguments, and options.
func NewBlockchainOsn(ctx *pulumi.Context,
	name string, args *BlockchainOsnArgs, opts ...pulumi.ResourceOption) (*BlockchainOsn, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Ad == nil {
		return nil, errors.New("invalid value for required argument 'Ad'")
	}
	if args.BlockchainPlatformId == nil {
		return nil, errors.New("invalid value for required argument 'BlockchainPlatformId'")
	}
	var resource BlockchainOsn
	err := ctx.RegisterResource("oci:index/blockchainOsn:BlockchainOsn", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetBlockchainOsn gets an existing BlockchainOsn resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetBlockchainOsn(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *BlockchainOsnState, opts ...pulumi.ResourceOption) (*BlockchainOsn, error) {
	var resource BlockchainOsn
	err := ctx.ReadResource("oci:index/blockchainOsn:BlockchainOsn", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering BlockchainOsn resources.
type blockchainOsnState struct {
	// Availability Domain to place new OSN
	Ad *string `pulumi:"ad"`
	// Unique service identifier.
	BlockchainPlatformId *string `pulumi:"blockchainPlatformId"`
	// (Updatable) OCPU allocation parameter
	OcpuAllocationParam *BlockchainOsnOcpuAllocationParam `pulumi:"ocpuAllocationParam"`
	// OSN identifier
	OsnKey *string `pulumi:"osnKey"`
	// The current state of the OSN.
	State *string `pulumi:"state"`
}

type BlockchainOsnState struct {
	// Availability Domain to place new OSN
	Ad pulumi.StringPtrInput
	// Unique service identifier.
	BlockchainPlatformId pulumi.StringPtrInput
	// (Updatable) OCPU allocation parameter
	OcpuAllocationParam BlockchainOsnOcpuAllocationParamPtrInput
	// OSN identifier
	OsnKey pulumi.StringPtrInput
	// The current state of the OSN.
	State pulumi.StringPtrInput
}

func (BlockchainOsnState) ElementType() reflect.Type {
	return reflect.TypeOf((*blockchainOsnState)(nil)).Elem()
}

type blockchainOsnArgs struct {
	// Availability Domain to place new OSN
	Ad string `pulumi:"ad"`
	// Unique service identifier.
	BlockchainPlatformId string `pulumi:"blockchainPlatformId"`
	// (Updatable) OCPU allocation parameter
	OcpuAllocationParam *BlockchainOsnOcpuAllocationParam `pulumi:"ocpuAllocationParam"`
}

// The set of arguments for constructing a BlockchainOsn resource.
type BlockchainOsnArgs struct {
	// Availability Domain to place new OSN
	Ad pulumi.StringInput
	// Unique service identifier.
	BlockchainPlatformId pulumi.StringInput
	// (Updatable) OCPU allocation parameter
	OcpuAllocationParam BlockchainOsnOcpuAllocationParamPtrInput
}

func (BlockchainOsnArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*blockchainOsnArgs)(nil)).Elem()
}

type BlockchainOsnInput interface {
	pulumi.Input

	ToBlockchainOsnOutput() BlockchainOsnOutput
	ToBlockchainOsnOutputWithContext(ctx context.Context) BlockchainOsnOutput
}

func (*BlockchainOsn) ElementType() reflect.Type {
	return reflect.TypeOf((*BlockchainOsn)(nil))
}

func (i *BlockchainOsn) ToBlockchainOsnOutput() BlockchainOsnOutput {
	return i.ToBlockchainOsnOutputWithContext(context.Background())
}

func (i *BlockchainOsn) ToBlockchainOsnOutputWithContext(ctx context.Context) BlockchainOsnOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BlockchainOsnOutput)
}

func (i *BlockchainOsn) ToBlockchainOsnPtrOutput() BlockchainOsnPtrOutput {
	return i.ToBlockchainOsnPtrOutputWithContext(context.Background())
}

func (i *BlockchainOsn) ToBlockchainOsnPtrOutputWithContext(ctx context.Context) BlockchainOsnPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BlockchainOsnPtrOutput)
}

type BlockchainOsnPtrInput interface {
	pulumi.Input

	ToBlockchainOsnPtrOutput() BlockchainOsnPtrOutput
	ToBlockchainOsnPtrOutputWithContext(ctx context.Context) BlockchainOsnPtrOutput
}

type blockchainOsnPtrType BlockchainOsnArgs

func (*blockchainOsnPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**BlockchainOsn)(nil))
}

func (i *blockchainOsnPtrType) ToBlockchainOsnPtrOutput() BlockchainOsnPtrOutput {
	return i.ToBlockchainOsnPtrOutputWithContext(context.Background())
}

func (i *blockchainOsnPtrType) ToBlockchainOsnPtrOutputWithContext(ctx context.Context) BlockchainOsnPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BlockchainOsnPtrOutput)
}

// BlockchainOsnArrayInput is an input type that accepts BlockchainOsnArray and BlockchainOsnArrayOutput values.
// You can construct a concrete instance of `BlockchainOsnArrayInput` via:
//
//          BlockchainOsnArray{ BlockchainOsnArgs{...} }
type BlockchainOsnArrayInput interface {
	pulumi.Input

	ToBlockchainOsnArrayOutput() BlockchainOsnArrayOutput
	ToBlockchainOsnArrayOutputWithContext(context.Context) BlockchainOsnArrayOutput
}

type BlockchainOsnArray []BlockchainOsnInput

func (BlockchainOsnArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*BlockchainOsn)(nil)).Elem()
}

func (i BlockchainOsnArray) ToBlockchainOsnArrayOutput() BlockchainOsnArrayOutput {
	return i.ToBlockchainOsnArrayOutputWithContext(context.Background())
}

func (i BlockchainOsnArray) ToBlockchainOsnArrayOutputWithContext(ctx context.Context) BlockchainOsnArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BlockchainOsnArrayOutput)
}

// BlockchainOsnMapInput is an input type that accepts BlockchainOsnMap and BlockchainOsnMapOutput values.
// You can construct a concrete instance of `BlockchainOsnMapInput` via:
//
//          BlockchainOsnMap{ "key": BlockchainOsnArgs{...} }
type BlockchainOsnMapInput interface {
	pulumi.Input

	ToBlockchainOsnMapOutput() BlockchainOsnMapOutput
	ToBlockchainOsnMapOutputWithContext(context.Context) BlockchainOsnMapOutput
}

type BlockchainOsnMap map[string]BlockchainOsnInput

func (BlockchainOsnMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*BlockchainOsn)(nil)).Elem()
}

func (i BlockchainOsnMap) ToBlockchainOsnMapOutput() BlockchainOsnMapOutput {
	return i.ToBlockchainOsnMapOutputWithContext(context.Background())
}

func (i BlockchainOsnMap) ToBlockchainOsnMapOutputWithContext(ctx context.Context) BlockchainOsnMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(BlockchainOsnMapOutput)
}

type BlockchainOsnOutput struct {
	*pulumi.OutputState
}

func (BlockchainOsnOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*BlockchainOsn)(nil))
}

func (o BlockchainOsnOutput) ToBlockchainOsnOutput() BlockchainOsnOutput {
	return o
}

func (o BlockchainOsnOutput) ToBlockchainOsnOutputWithContext(ctx context.Context) BlockchainOsnOutput {
	return o
}

func (o BlockchainOsnOutput) ToBlockchainOsnPtrOutput() BlockchainOsnPtrOutput {
	return o.ToBlockchainOsnPtrOutputWithContext(context.Background())
}

func (o BlockchainOsnOutput) ToBlockchainOsnPtrOutputWithContext(ctx context.Context) BlockchainOsnPtrOutput {
	return o.ApplyT(func(v BlockchainOsn) *BlockchainOsn {
		return &v
	}).(BlockchainOsnPtrOutput)
}

type BlockchainOsnPtrOutput struct {
	*pulumi.OutputState
}

func (BlockchainOsnPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**BlockchainOsn)(nil))
}

func (o BlockchainOsnPtrOutput) ToBlockchainOsnPtrOutput() BlockchainOsnPtrOutput {
	return o
}

func (o BlockchainOsnPtrOutput) ToBlockchainOsnPtrOutputWithContext(ctx context.Context) BlockchainOsnPtrOutput {
	return o
}

type BlockchainOsnArrayOutput struct{ *pulumi.OutputState }

func (BlockchainOsnArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]BlockchainOsn)(nil))
}

func (o BlockchainOsnArrayOutput) ToBlockchainOsnArrayOutput() BlockchainOsnArrayOutput {
	return o
}

func (o BlockchainOsnArrayOutput) ToBlockchainOsnArrayOutputWithContext(ctx context.Context) BlockchainOsnArrayOutput {
	return o
}

func (o BlockchainOsnArrayOutput) Index(i pulumi.IntInput) BlockchainOsnOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) BlockchainOsn {
		return vs[0].([]BlockchainOsn)[vs[1].(int)]
	}).(BlockchainOsnOutput)
}

type BlockchainOsnMapOutput struct{ *pulumi.OutputState }

func (BlockchainOsnMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]BlockchainOsn)(nil))
}

func (o BlockchainOsnMapOutput) ToBlockchainOsnMapOutput() BlockchainOsnMapOutput {
	return o
}

func (o BlockchainOsnMapOutput) ToBlockchainOsnMapOutputWithContext(ctx context.Context) BlockchainOsnMapOutput {
	return o
}

func (o BlockchainOsnMapOutput) MapIndex(k pulumi.StringInput) BlockchainOsnOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) BlockchainOsn {
		return vs[0].(map[string]BlockchainOsn)[vs[1].(string)]
	}).(BlockchainOsnOutput)
}

func init() {
	pulumi.RegisterOutputType(BlockchainOsnOutput{})
	pulumi.RegisterOutputType(BlockchainOsnPtrOutput{})
	pulumi.RegisterOutputType(BlockchainOsnArrayOutput{})
	pulumi.RegisterOutputType(BlockchainOsnMapOutput{})
}
