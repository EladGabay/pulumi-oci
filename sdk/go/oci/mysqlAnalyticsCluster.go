// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package oci

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource provides the Analytics Cluster resource in Oracle Cloud Infrastructure MySQL Database service.
//
// DEPRECATED -- please use HeatWave API instead.
// Updates the Analytics Cluster.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-oci/sdk/go/oci"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := oci.NewMysqlAnalyticsCluster(ctx, "testAnalyticsCluster", &oci.MysqlAnalyticsClusterArgs{
// 			DbSystemId:  pulumi.Any(oci_database_db_system.Test_db_system.Id),
// 			ClusterSize: pulumi.Any(_var.Analytics_cluster_cluster_size),
// 			ShapeName:   pulumi.Any(oci_mysql_shape.Test_shape.Name),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// AnalyticsCluster can be imported using the `id`, e.g.
//
// ```sh
//  $ pulumi import oci:index/mysqlAnalyticsCluster:MysqlAnalyticsCluster test_analytics_cluster "dbSystems/{dbSystemId}/analyticsCluster"
// ```
type MysqlAnalyticsCluster struct {
	pulumi.CustomResourceState

	// An Analytics Cluster Node is a compute host that is part of an Analytics Cluster.
	ClusterNodes MysqlAnalyticsClusterClusterNodeArrayOutput `pulumi:"clusterNodes"`
	// (Updatable) A change to the number of nodes in the Analytics Cluster will result in the entire cluster being torn down and re-created with the new cluster of nodes. This may result in a significant downtime for the analytics capability while the Analytics Cluster is re-provisioned.
	ClusterSize pulumi.IntOutput `pulumi:"clusterSize"`
	// The DB System [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
	DbSystemId pulumi.StringOutput `pulumi:"dbSystemId"`
	// Additional information about the current lifecycleState.
	LifecycleDetails pulumi.StringOutput `pulumi:"lifecycleDetails"`
	// (Updatable) A change to the shape of the nodes in the Analytics Cluster will result in the entire cluster being torn down and re-created with Compute instances of the new Shape. This may result in significant downtime for the analytics capability while the Analytics Cluster is re-provisioned.
	ShapeName pulumi.StringOutput `pulumi:"shapeName"`
	// (Updatable) The target state for the Analytics Cluster. Could be set to `ACTIVE` or `INACTIVE`.
	State pulumi.StringOutput `pulumi:"state"`
	// The date and time the Analytics Cluster was created, as described by [RFC 3339](https://tools.ietf.org/rfc/rfc3339).
	TimeCreated pulumi.StringOutput `pulumi:"timeCreated"`
	// The time the Analytics Cluster was last updated, as described by [RFC 3339](https://tools.ietf.org/rfc/rfc3339).
	TimeUpdated pulumi.StringOutput `pulumi:"timeUpdated"`
}

// NewMysqlAnalyticsCluster registers a new resource with the given unique name, arguments, and options.
func NewMysqlAnalyticsCluster(ctx *pulumi.Context,
	name string, args *MysqlAnalyticsClusterArgs, opts ...pulumi.ResourceOption) (*MysqlAnalyticsCluster, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ClusterSize == nil {
		return nil, errors.New("invalid value for required argument 'ClusterSize'")
	}
	if args.DbSystemId == nil {
		return nil, errors.New("invalid value for required argument 'DbSystemId'")
	}
	if args.ShapeName == nil {
		return nil, errors.New("invalid value for required argument 'ShapeName'")
	}
	var resource MysqlAnalyticsCluster
	err := ctx.RegisterResource("oci:index/mysqlAnalyticsCluster:MysqlAnalyticsCluster", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMysqlAnalyticsCluster gets an existing MysqlAnalyticsCluster resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMysqlAnalyticsCluster(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MysqlAnalyticsClusterState, opts ...pulumi.ResourceOption) (*MysqlAnalyticsCluster, error) {
	var resource MysqlAnalyticsCluster
	err := ctx.ReadResource("oci:index/mysqlAnalyticsCluster:MysqlAnalyticsCluster", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering MysqlAnalyticsCluster resources.
type mysqlAnalyticsClusterState struct {
	// An Analytics Cluster Node is a compute host that is part of an Analytics Cluster.
	ClusterNodes []MysqlAnalyticsClusterClusterNode `pulumi:"clusterNodes"`
	// (Updatable) A change to the number of nodes in the Analytics Cluster will result in the entire cluster being torn down and re-created with the new cluster of nodes. This may result in a significant downtime for the analytics capability while the Analytics Cluster is re-provisioned.
	ClusterSize *int `pulumi:"clusterSize"`
	// The DB System [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
	DbSystemId *string `pulumi:"dbSystemId"`
	// Additional information about the current lifecycleState.
	LifecycleDetails *string `pulumi:"lifecycleDetails"`
	// (Updatable) A change to the shape of the nodes in the Analytics Cluster will result in the entire cluster being torn down and re-created with Compute instances of the new Shape. This may result in significant downtime for the analytics capability while the Analytics Cluster is re-provisioned.
	ShapeName *string `pulumi:"shapeName"`
	// (Updatable) The target state for the Analytics Cluster. Could be set to `ACTIVE` or `INACTIVE`.
	State *string `pulumi:"state"`
	// The date and time the Analytics Cluster was created, as described by [RFC 3339](https://tools.ietf.org/rfc/rfc3339).
	TimeCreated *string `pulumi:"timeCreated"`
	// The time the Analytics Cluster was last updated, as described by [RFC 3339](https://tools.ietf.org/rfc/rfc3339).
	TimeUpdated *string `pulumi:"timeUpdated"`
}

type MysqlAnalyticsClusterState struct {
	// An Analytics Cluster Node is a compute host that is part of an Analytics Cluster.
	ClusterNodes MysqlAnalyticsClusterClusterNodeArrayInput
	// (Updatable) A change to the number of nodes in the Analytics Cluster will result in the entire cluster being torn down and re-created with the new cluster of nodes. This may result in a significant downtime for the analytics capability while the Analytics Cluster is re-provisioned.
	ClusterSize pulumi.IntPtrInput
	// The DB System [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
	DbSystemId pulumi.StringPtrInput
	// Additional information about the current lifecycleState.
	LifecycleDetails pulumi.StringPtrInput
	// (Updatable) A change to the shape of the nodes in the Analytics Cluster will result in the entire cluster being torn down and re-created with Compute instances of the new Shape. This may result in significant downtime for the analytics capability while the Analytics Cluster is re-provisioned.
	ShapeName pulumi.StringPtrInput
	// (Updatable) The target state for the Analytics Cluster. Could be set to `ACTIVE` or `INACTIVE`.
	State pulumi.StringPtrInput
	// The date and time the Analytics Cluster was created, as described by [RFC 3339](https://tools.ietf.org/rfc/rfc3339).
	TimeCreated pulumi.StringPtrInput
	// The time the Analytics Cluster was last updated, as described by [RFC 3339](https://tools.ietf.org/rfc/rfc3339).
	TimeUpdated pulumi.StringPtrInput
}

func (MysqlAnalyticsClusterState) ElementType() reflect.Type {
	return reflect.TypeOf((*mysqlAnalyticsClusterState)(nil)).Elem()
}

type mysqlAnalyticsClusterArgs struct {
	// (Updatable) A change to the number of nodes in the Analytics Cluster will result in the entire cluster being torn down and re-created with the new cluster of nodes. This may result in a significant downtime for the analytics capability while the Analytics Cluster is re-provisioned.
	ClusterSize int `pulumi:"clusterSize"`
	// The DB System [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
	DbSystemId string `pulumi:"dbSystemId"`
	// (Updatable) A change to the shape of the nodes in the Analytics Cluster will result in the entire cluster being torn down and re-created with Compute instances of the new Shape. This may result in significant downtime for the analytics capability while the Analytics Cluster is re-provisioned.
	ShapeName string `pulumi:"shapeName"`
	// (Updatable) The target state for the Analytics Cluster. Could be set to `ACTIVE` or `INACTIVE`.
	State *string `pulumi:"state"`
}

// The set of arguments for constructing a MysqlAnalyticsCluster resource.
type MysqlAnalyticsClusterArgs struct {
	// (Updatable) A change to the number of nodes in the Analytics Cluster will result in the entire cluster being torn down and re-created with the new cluster of nodes. This may result in a significant downtime for the analytics capability while the Analytics Cluster is re-provisioned.
	ClusterSize pulumi.IntInput
	// The DB System [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm).
	DbSystemId pulumi.StringInput
	// (Updatable) A change to the shape of the nodes in the Analytics Cluster will result in the entire cluster being torn down and re-created with Compute instances of the new Shape. This may result in significant downtime for the analytics capability while the Analytics Cluster is re-provisioned.
	ShapeName pulumi.StringInput
	// (Updatable) The target state for the Analytics Cluster. Could be set to `ACTIVE` or `INACTIVE`.
	State pulumi.StringPtrInput
}

func (MysqlAnalyticsClusterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*mysqlAnalyticsClusterArgs)(nil)).Elem()
}

type MysqlAnalyticsClusterInput interface {
	pulumi.Input

	ToMysqlAnalyticsClusterOutput() MysqlAnalyticsClusterOutput
	ToMysqlAnalyticsClusterOutputWithContext(ctx context.Context) MysqlAnalyticsClusterOutput
}

func (*MysqlAnalyticsCluster) ElementType() reflect.Type {
	return reflect.TypeOf((*MysqlAnalyticsCluster)(nil))
}

func (i *MysqlAnalyticsCluster) ToMysqlAnalyticsClusterOutput() MysqlAnalyticsClusterOutput {
	return i.ToMysqlAnalyticsClusterOutputWithContext(context.Background())
}

func (i *MysqlAnalyticsCluster) ToMysqlAnalyticsClusterOutputWithContext(ctx context.Context) MysqlAnalyticsClusterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MysqlAnalyticsClusterOutput)
}

func (i *MysqlAnalyticsCluster) ToMysqlAnalyticsClusterPtrOutput() MysqlAnalyticsClusterPtrOutput {
	return i.ToMysqlAnalyticsClusterPtrOutputWithContext(context.Background())
}

func (i *MysqlAnalyticsCluster) ToMysqlAnalyticsClusterPtrOutputWithContext(ctx context.Context) MysqlAnalyticsClusterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MysqlAnalyticsClusterPtrOutput)
}

type MysqlAnalyticsClusterPtrInput interface {
	pulumi.Input

	ToMysqlAnalyticsClusterPtrOutput() MysqlAnalyticsClusterPtrOutput
	ToMysqlAnalyticsClusterPtrOutputWithContext(ctx context.Context) MysqlAnalyticsClusterPtrOutput
}

type mysqlAnalyticsClusterPtrType MysqlAnalyticsClusterArgs

func (*mysqlAnalyticsClusterPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MysqlAnalyticsCluster)(nil))
}

func (i *mysqlAnalyticsClusterPtrType) ToMysqlAnalyticsClusterPtrOutput() MysqlAnalyticsClusterPtrOutput {
	return i.ToMysqlAnalyticsClusterPtrOutputWithContext(context.Background())
}

func (i *mysqlAnalyticsClusterPtrType) ToMysqlAnalyticsClusterPtrOutputWithContext(ctx context.Context) MysqlAnalyticsClusterPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MysqlAnalyticsClusterPtrOutput)
}

// MysqlAnalyticsClusterArrayInput is an input type that accepts MysqlAnalyticsClusterArray and MysqlAnalyticsClusterArrayOutput values.
// You can construct a concrete instance of `MysqlAnalyticsClusterArrayInput` via:
//
//          MysqlAnalyticsClusterArray{ MysqlAnalyticsClusterArgs{...} }
type MysqlAnalyticsClusterArrayInput interface {
	pulumi.Input

	ToMysqlAnalyticsClusterArrayOutput() MysqlAnalyticsClusterArrayOutput
	ToMysqlAnalyticsClusterArrayOutputWithContext(context.Context) MysqlAnalyticsClusterArrayOutput
}

type MysqlAnalyticsClusterArray []MysqlAnalyticsClusterInput

func (MysqlAnalyticsClusterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MysqlAnalyticsCluster)(nil)).Elem()
}

func (i MysqlAnalyticsClusterArray) ToMysqlAnalyticsClusterArrayOutput() MysqlAnalyticsClusterArrayOutput {
	return i.ToMysqlAnalyticsClusterArrayOutputWithContext(context.Background())
}

func (i MysqlAnalyticsClusterArray) ToMysqlAnalyticsClusterArrayOutputWithContext(ctx context.Context) MysqlAnalyticsClusterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MysqlAnalyticsClusterArrayOutput)
}

// MysqlAnalyticsClusterMapInput is an input type that accepts MysqlAnalyticsClusterMap and MysqlAnalyticsClusterMapOutput values.
// You can construct a concrete instance of `MysqlAnalyticsClusterMapInput` via:
//
//          MysqlAnalyticsClusterMap{ "key": MysqlAnalyticsClusterArgs{...} }
type MysqlAnalyticsClusterMapInput interface {
	pulumi.Input

	ToMysqlAnalyticsClusterMapOutput() MysqlAnalyticsClusterMapOutput
	ToMysqlAnalyticsClusterMapOutputWithContext(context.Context) MysqlAnalyticsClusterMapOutput
}

type MysqlAnalyticsClusterMap map[string]MysqlAnalyticsClusterInput

func (MysqlAnalyticsClusterMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MysqlAnalyticsCluster)(nil)).Elem()
}

func (i MysqlAnalyticsClusterMap) ToMysqlAnalyticsClusterMapOutput() MysqlAnalyticsClusterMapOutput {
	return i.ToMysqlAnalyticsClusterMapOutputWithContext(context.Background())
}

func (i MysqlAnalyticsClusterMap) ToMysqlAnalyticsClusterMapOutputWithContext(ctx context.Context) MysqlAnalyticsClusterMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MysqlAnalyticsClusterMapOutput)
}

type MysqlAnalyticsClusterOutput struct {
	*pulumi.OutputState
}

func (MysqlAnalyticsClusterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MysqlAnalyticsCluster)(nil))
}

func (o MysqlAnalyticsClusterOutput) ToMysqlAnalyticsClusterOutput() MysqlAnalyticsClusterOutput {
	return o
}

func (o MysqlAnalyticsClusterOutput) ToMysqlAnalyticsClusterOutputWithContext(ctx context.Context) MysqlAnalyticsClusterOutput {
	return o
}

func (o MysqlAnalyticsClusterOutput) ToMysqlAnalyticsClusterPtrOutput() MysqlAnalyticsClusterPtrOutput {
	return o.ToMysqlAnalyticsClusterPtrOutputWithContext(context.Background())
}

func (o MysqlAnalyticsClusterOutput) ToMysqlAnalyticsClusterPtrOutputWithContext(ctx context.Context) MysqlAnalyticsClusterPtrOutput {
	return o.ApplyT(func(v MysqlAnalyticsCluster) *MysqlAnalyticsCluster {
		return &v
	}).(MysqlAnalyticsClusterPtrOutput)
}

type MysqlAnalyticsClusterPtrOutput struct {
	*pulumi.OutputState
}

func (MysqlAnalyticsClusterPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MysqlAnalyticsCluster)(nil))
}

func (o MysqlAnalyticsClusterPtrOutput) ToMysqlAnalyticsClusterPtrOutput() MysqlAnalyticsClusterPtrOutput {
	return o
}

func (o MysqlAnalyticsClusterPtrOutput) ToMysqlAnalyticsClusterPtrOutputWithContext(ctx context.Context) MysqlAnalyticsClusterPtrOutput {
	return o
}

type MysqlAnalyticsClusterArrayOutput struct{ *pulumi.OutputState }

func (MysqlAnalyticsClusterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MysqlAnalyticsCluster)(nil))
}

func (o MysqlAnalyticsClusterArrayOutput) ToMysqlAnalyticsClusterArrayOutput() MysqlAnalyticsClusterArrayOutput {
	return o
}

func (o MysqlAnalyticsClusterArrayOutput) ToMysqlAnalyticsClusterArrayOutputWithContext(ctx context.Context) MysqlAnalyticsClusterArrayOutput {
	return o
}

func (o MysqlAnalyticsClusterArrayOutput) Index(i pulumi.IntInput) MysqlAnalyticsClusterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MysqlAnalyticsCluster {
		return vs[0].([]MysqlAnalyticsCluster)[vs[1].(int)]
	}).(MysqlAnalyticsClusterOutput)
}

type MysqlAnalyticsClusterMapOutput struct{ *pulumi.OutputState }

func (MysqlAnalyticsClusterMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]MysqlAnalyticsCluster)(nil))
}

func (o MysqlAnalyticsClusterMapOutput) ToMysqlAnalyticsClusterMapOutput() MysqlAnalyticsClusterMapOutput {
	return o
}

func (o MysqlAnalyticsClusterMapOutput) ToMysqlAnalyticsClusterMapOutputWithContext(ctx context.Context) MysqlAnalyticsClusterMapOutput {
	return o
}

func (o MysqlAnalyticsClusterMapOutput) MapIndex(k pulumi.StringInput) MysqlAnalyticsClusterOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) MysqlAnalyticsCluster {
		return vs[0].(map[string]MysqlAnalyticsCluster)[vs[1].(string)]
	}).(MysqlAnalyticsClusterOutput)
}

func init() {
	pulumi.RegisterOutputType(MysqlAnalyticsClusterOutput{})
	pulumi.RegisterOutputType(MysqlAnalyticsClusterPtrOutput{})
	pulumi.RegisterOutputType(MysqlAnalyticsClusterArrayOutput{})
	pulumi.RegisterOutputType(MysqlAnalyticsClusterMapOutput{})
}
