// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package oci

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource provides the Rrset resource in Oracle Cloud Infrastructure DNS service.
//
// Replaces records in the specified RRSet. For private zones, the scope query parameter is required with a
// value of `PRIVATE`. When the zone name is provided as a path parameter and `PRIVATE` is used for the scope
// query parameter then the viewId query parameter is required.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-oci/sdk/go/oci"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := oci.NewDnsRrset(ctx, "testRrset", &oci.DnsRrsetArgs{
// 			Domain:        pulumi.Any(_var.Rrset_domain),
// 			Rtype:         pulumi.Any(_var.Rrset_rtype),
// 			ZoneNameOrId:  pulumi.Any(oci_dns_zone.Test_zone.Id),
// 			CompartmentId: pulumi.Any(_var.Compartment_id),
// 			Items: DnsRrsetItemArray{
// 				&DnsRrsetItemArgs{
// 					Domain: pulumi.Any(_var.Rrset_items_domain),
// 					Rdata:  pulumi.Any(_var.Rrset_items_rdata),
// 					Rtype:  pulumi.Any(_var.Rrset_items_rtype),
// 					Ttl:    pulumi.Any(_var.Rrset_items_ttl),
// 				},
// 			},
// 			Scope:  pulumi.Any(_var.Rrset_scope),
// 			ViewId: pulumi.Any(oci_dns_view.Test_view.Id),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// For legacy Rrsets that were created without using `scope`, these Rrsets can be imported using the `id`, e.g.
//
// ```sh
//  $ pulumi import oci:index/dnsRrset:DnsRrset test_rrset "zoneNameOrId/{zoneNameOrId}/domain/{domain}/rtype/{rtype}"
// ```
//
//  For Rrsets created using `scope` and `view_id`, these Rrsets can be imported using the `id`, e.g.
//
// ```sh
//  $ pulumi import oci:index/dnsRrset:DnsRrset test_rrset "zoneNameOrId/{zoneNameOrId}/domain/{domain}/rtype/{rtype}/scope/{scope}/viewId/{viewId}"
// ```
//
//  skip adding `{view_id}` at the end if Rrset was created without `view_id`.
type DnsRrset struct {
	pulumi.CustomResourceState

	// (Updatable) The OCID of the compartment the resource belongs to.
	CompartmentId pulumi.StringOutput `pulumi:"compartmentId"`
	// The fully qualified domain name where the record can be located.
	Domain pulumi.StringOutput `pulumi:"domain"`
	// (Updatable)
	// **NOTE** Omitting `items` at time of create, will delete any existing records in the RRSet
	Items DnsRrsetItemArrayOutput `pulumi:"items"`
	// The type of the target RRSet within the target zone.
	Rtype pulumi.StringOutput `pulumi:"rtype"`
	// Specifies to operate only on resources that have a matching DNS scope.
	// This value will be null for zones in the global DNS and `PRIVATE` when creating private Rrsets.
	Scope pulumi.StringPtrOutput `pulumi:"scope"`
	// The OCID of the view the resource is associated with.
	ViewId pulumi.StringPtrOutput `pulumi:"viewId"`
	// The name or OCID of the target zone.
	ZoneNameOrId pulumi.StringOutput `pulumi:"zoneNameOrId"`
}

// NewDnsRrset registers a new resource with the given unique name, arguments, and options.
func NewDnsRrset(ctx *pulumi.Context,
	name string, args *DnsRrsetArgs, opts ...pulumi.ResourceOption) (*DnsRrset, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Domain == nil {
		return nil, errors.New("invalid value for required argument 'Domain'")
	}
	if args.Rtype == nil {
		return nil, errors.New("invalid value for required argument 'Rtype'")
	}
	if args.ZoneNameOrId == nil {
		return nil, errors.New("invalid value for required argument 'ZoneNameOrId'")
	}
	var resource DnsRrset
	err := ctx.RegisterResource("oci:index/dnsRrset:DnsRrset", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDnsRrset gets an existing DnsRrset resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDnsRrset(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DnsRrsetState, opts ...pulumi.ResourceOption) (*DnsRrset, error) {
	var resource DnsRrset
	err := ctx.ReadResource("oci:index/dnsRrset:DnsRrset", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DnsRrset resources.
type dnsRrsetState struct {
	// (Updatable) The OCID of the compartment the resource belongs to.
	CompartmentId *string `pulumi:"compartmentId"`
	// The fully qualified domain name where the record can be located.
	Domain *string `pulumi:"domain"`
	// (Updatable)
	// **NOTE** Omitting `items` at time of create, will delete any existing records in the RRSet
	Items []DnsRrsetItem `pulumi:"items"`
	// The type of the target RRSet within the target zone.
	Rtype *string `pulumi:"rtype"`
	// Specifies to operate only on resources that have a matching DNS scope.
	// This value will be null for zones in the global DNS and `PRIVATE` when creating private Rrsets.
	Scope *string `pulumi:"scope"`
	// The OCID of the view the resource is associated with.
	ViewId *string `pulumi:"viewId"`
	// The name or OCID of the target zone.
	ZoneNameOrId *string `pulumi:"zoneNameOrId"`
}

type DnsRrsetState struct {
	// (Updatable) The OCID of the compartment the resource belongs to.
	CompartmentId pulumi.StringPtrInput
	// The fully qualified domain name where the record can be located.
	Domain pulumi.StringPtrInput
	// (Updatable)
	// **NOTE** Omitting `items` at time of create, will delete any existing records in the RRSet
	Items DnsRrsetItemArrayInput
	// The type of the target RRSet within the target zone.
	Rtype pulumi.StringPtrInput
	// Specifies to operate only on resources that have a matching DNS scope.
	// This value will be null for zones in the global DNS and `PRIVATE` when creating private Rrsets.
	Scope pulumi.StringPtrInput
	// The OCID of the view the resource is associated with.
	ViewId pulumi.StringPtrInput
	// The name or OCID of the target zone.
	ZoneNameOrId pulumi.StringPtrInput
}

func (DnsRrsetState) ElementType() reflect.Type {
	return reflect.TypeOf((*dnsRrsetState)(nil)).Elem()
}

type dnsRrsetArgs struct {
	// (Updatable) The OCID of the compartment the resource belongs to.
	CompartmentId *string `pulumi:"compartmentId"`
	// The fully qualified domain name where the record can be located.
	Domain string `pulumi:"domain"`
	// (Updatable)
	// **NOTE** Omitting `items` at time of create, will delete any existing records in the RRSet
	Items []DnsRrsetItem `pulumi:"items"`
	// The type of the target RRSet within the target zone.
	Rtype string `pulumi:"rtype"`
	// Specifies to operate only on resources that have a matching DNS scope.
	// This value will be null for zones in the global DNS and `PRIVATE` when creating private Rrsets.
	Scope *string `pulumi:"scope"`
	// The OCID of the view the resource is associated with.
	ViewId *string `pulumi:"viewId"`
	// The name or OCID of the target zone.
	ZoneNameOrId string `pulumi:"zoneNameOrId"`
}

// The set of arguments for constructing a DnsRrset resource.
type DnsRrsetArgs struct {
	// (Updatable) The OCID of the compartment the resource belongs to.
	CompartmentId pulumi.StringPtrInput
	// The fully qualified domain name where the record can be located.
	Domain pulumi.StringInput
	// (Updatable)
	// **NOTE** Omitting `items` at time of create, will delete any existing records in the RRSet
	Items DnsRrsetItemArrayInput
	// The type of the target RRSet within the target zone.
	Rtype pulumi.StringInput
	// Specifies to operate only on resources that have a matching DNS scope.
	// This value will be null for zones in the global DNS and `PRIVATE` when creating private Rrsets.
	Scope pulumi.StringPtrInput
	// The OCID of the view the resource is associated with.
	ViewId pulumi.StringPtrInput
	// The name or OCID of the target zone.
	ZoneNameOrId pulumi.StringInput
}

func (DnsRrsetArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*dnsRrsetArgs)(nil)).Elem()
}

type DnsRrsetInput interface {
	pulumi.Input

	ToDnsRrsetOutput() DnsRrsetOutput
	ToDnsRrsetOutputWithContext(ctx context.Context) DnsRrsetOutput
}

func (*DnsRrset) ElementType() reflect.Type {
	return reflect.TypeOf((*DnsRrset)(nil))
}

func (i *DnsRrset) ToDnsRrsetOutput() DnsRrsetOutput {
	return i.ToDnsRrsetOutputWithContext(context.Background())
}

func (i *DnsRrset) ToDnsRrsetOutputWithContext(ctx context.Context) DnsRrsetOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DnsRrsetOutput)
}

func (i *DnsRrset) ToDnsRrsetPtrOutput() DnsRrsetPtrOutput {
	return i.ToDnsRrsetPtrOutputWithContext(context.Background())
}

func (i *DnsRrset) ToDnsRrsetPtrOutputWithContext(ctx context.Context) DnsRrsetPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DnsRrsetPtrOutput)
}

type DnsRrsetPtrInput interface {
	pulumi.Input

	ToDnsRrsetPtrOutput() DnsRrsetPtrOutput
	ToDnsRrsetPtrOutputWithContext(ctx context.Context) DnsRrsetPtrOutput
}

type dnsRrsetPtrType DnsRrsetArgs

func (*dnsRrsetPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DnsRrset)(nil))
}

func (i *dnsRrsetPtrType) ToDnsRrsetPtrOutput() DnsRrsetPtrOutput {
	return i.ToDnsRrsetPtrOutputWithContext(context.Background())
}

func (i *dnsRrsetPtrType) ToDnsRrsetPtrOutputWithContext(ctx context.Context) DnsRrsetPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DnsRrsetPtrOutput)
}

// DnsRrsetArrayInput is an input type that accepts DnsRrsetArray and DnsRrsetArrayOutput values.
// You can construct a concrete instance of `DnsRrsetArrayInput` via:
//
//          DnsRrsetArray{ DnsRrsetArgs{...} }
type DnsRrsetArrayInput interface {
	pulumi.Input

	ToDnsRrsetArrayOutput() DnsRrsetArrayOutput
	ToDnsRrsetArrayOutputWithContext(context.Context) DnsRrsetArrayOutput
}

type DnsRrsetArray []DnsRrsetInput

func (DnsRrsetArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DnsRrset)(nil)).Elem()
}

func (i DnsRrsetArray) ToDnsRrsetArrayOutput() DnsRrsetArrayOutput {
	return i.ToDnsRrsetArrayOutputWithContext(context.Background())
}

func (i DnsRrsetArray) ToDnsRrsetArrayOutputWithContext(ctx context.Context) DnsRrsetArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DnsRrsetArrayOutput)
}

// DnsRrsetMapInput is an input type that accepts DnsRrsetMap and DnsRrsetMapOutput values.
// You can construct a concrete instance of `DnsRrsetMapInput` via:
//
//          DnsRrsetMap{ "key": DnsRrsetArgs{...} }
type DnsRrsetMapInput interface {
	pulumi.Input

	ToDnsRrsetMapOutput() DnsRrsetMapOutput
	ToDnsRrsetMapOutputWithContext(context.Context) DnsRrsetMapOutput
}

type DnsRrsetMap map[string]DnsRrsetInput

func (DnsRrsetMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DnsRrset)(nil)).Elem()
}

func (i DnsRrsetMap) ToDnsRrsetMapOutput() DnsRrsetMapOutput {
	return i.ToDnsRrsetMapOutputWithContext(context.Background())
}

func (i DnsRrsetMap) ToDnsRrsetMapOutputWithContext(ctx context.Context) DnsRrsetMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DnsRrsetMapOutput)
}

type DnsRrsetOutput struct {
	*pulumi.OutputState
}

func (DnsRrsetOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DnsRrset)(nil))
}

func (o DnsRrsetOutput) ToDnsRrsetOutput() DnsRrsetOutput {
	return o
}

func (o DnsRrsetOutput) ToDnsRrsetOutputWithContext(ctx context.Context) DnsRrsetOutput {
	return o
}

func (o DnsRrsetOutput) ToDnsRrsetPtrOutput() DnsRrsetPtrOutput {
	return o.ToDnsRrsetPtrOutputWithContext(context.Background())
}

func (o DnsRrsetOutput) ToDnsRrsetPtrOutputWithContext(ctx context.Context) DnsRrsetPtrOutput {
	return o.ApplyT(func(v DnsRrset) *DnsRrset {
		return &v
	}).(DnsRrsetPtrOutput)
}

type DnsRrsetPtrOutput struct {
	*pulumi.OutputState
}

func (DnsRrsetPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DnsRrset)(nil))
}

func (o DnsRrsetPtrOutput) ToDnsRrsetPtrOutput() DnsRrsetPtrOutput {
	return o
}

func (o DnsRrsetPtrOutput) ToDnsRrsetPtrOutputWithContext(ctx context.Context) DnsRrsetPtrOutput {
	return o
}

type DnsRrsetArrayOutput struct{ *pulumi.OutputState }

func (DnsRrsetArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DnsRrset)(nil))
}

func (o DnsRrsetArrayOutput) ToDnsRrsetArrayOutput() DnsRrsetArrayOutput {
	return o
}

func (o DnsRrsetArrayOutput) ToDnsRrsetArrayOutputWithContext(ctx context.Context) DnsRrsetArrayOutput {
	return o
}

func (o DnsRrsetArrayOutput) Index(i pulumi.IntInput) DnsRrsetOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DnsRrset {
		return vs[0].([]DnsRrset)[vs[1].(int)]
	}).(DnsRrsetOutput)
}

type DnsRrsetMapOutput struct{ *pulumi.OutputState }

func (DnsRrsetMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]DnsRrset)(nil))
}

func (o DnsRrsetMapOutput) ToDnsRrsetMapOutput() DnsRrsetMapOutput {
	return o
}

func (o DnsRrsetMapOutput) ToDnsRrsetMapOutputWithContext(ctx context.Context) DnsRrsetMapOutput {
	return o
}

func (o DnsRrsetMapOutput) MapIndex(k pulumi.StringInput) DnsRrsetOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) DnsRrset {
		return vs[0].(map[string]DnsRrset)[vs[1].(string)]
	}).(DnsRrsetOutput)
}

func init() {
	pulumi.RegisterOutputType(DnsRrsetOutput{})
	pulumi.RegisterOutputType(DnsRrsetPtrOutput{})
	pulumi.RegisterOutputType(DnsRrsetArrayOutput{})
	pulumi.RegisterOutputType(DnsRrsetMapOutput{})
}
