// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Oci
{
    public static class GetFunctionsFunctions
    {
        /// <summary>
        /// This data source provides the list of Functions in Oracle Cloud Infrastructure Functions service.
        /// 
        /// Lists functions for an application.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Oci = Pulumi.Oci;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var testFunctions = Output.Create(Oci.GetFunctionsFunctions.InvokeAsync(new Oci.GetFunctionsFunctionsArgs
        ///         {
        ///             ApplicationId = oci_functions_application.Test_application.Id,
        ///             DisplayName = @var.Function_display_name,
        ///             Id = @var.Function_id,
        ///             State = @var.Function_state,
        ///         }));
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetFunctionsFunctionsResult> InvokeAsync(GetFunctionsFunctionsArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetFunctionsFunctionsResult>("oci:index/getFunctionsFunctions:GetFunctionsFunctions", args ?? new GetFunctionsFunctionsArgs(), options.WithVersion());
    }


    public sealed class GetFunctionsFunctionsArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the application to which this function belongs.
        /// </summary>
        [Input("applicationId", required: true)]
        public string ApplicationId { get; set; } = null!;

        /// <summary>
        /// A filter to return only functions with display names that match the display name string. Matching is exact.
        /// </summary>
        [Input("displayName")]
        public string? DisplayName { get; set; }

        [Input("filters")]
        private List<Inputs.GetFunctionsFunctionsFilterArgs>? _filters;
        public List<Inputs.GetFunctionsFunctionsFilterArgs> Filters
        {
            get => _filters ?? (_filters = new List<Inputs.GetFunctionsFunctionsFilterArgs>());
            set => _filters = value;
        }

        /// <summary>
        /// A filter to return only functions with the specified OCID.
        /// </summary>
        [Input("id")]
        public string? Id { get; set; }

        /// <summary>
        /// A filter to return only functions that match the lifecycle state in this parameter. Example: `Creating`
        /// </summary>
        [Input("state")]
        public string? State { get; set; }

        public GetFunctionsFunctionsArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetFunctionsFunctionsResult
    {
        /// <summary>
        /// The OCID of the application the function belongs to.
        /// </summary>
        public readonly string ApplicationId;
        /// <summary>
        /// The display name of the function. The display name is unique within the application containing the function.
        /// </summary>
        public readonly string? DisplayName;
        public readonly ImmutableArray<Outputs.GetFunctionsFunctionsFilterResult> Filters;
        /// <summary>
        /// The list of functions.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetFunctionsFunctionsFunctionResult> Functions;
        /// <summary>
        /// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the function.
        /// </summary>
        public readonly string? Id;
        /// <summary>
        /// The current state of the function.
        /// </summary>
        public readonly string? State;

        [OutputConstructor]
        private GetFunctionsFunctionsResult(
            string applicationId,

            string? displayName,

            ImmutableArray<Outputs.GetFunctionsFunctionsFilterResult> filters,

            ImmutableArray<Outputs.GetFunctionsFunctionsFunctionResult> functions,

            string? id,

            string? state)
        {
            ApplicationId = applicationId;
            DisplayName = displayName;
            Filters = filters;
            Functions = functions;
            Id = id;
            State = state;
        }
    }
}
