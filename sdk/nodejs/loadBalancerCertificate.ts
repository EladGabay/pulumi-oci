// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * ## Import
 *
 * Certificates can be imported using the `id`, e.g.
 *
 * ```sh
 *  $ pulumi import oci:index/loadBalancerCertificate:LoadBalancerCertificate test_certificate "loadBalancers/{loadBalancerId}/certificates/{certificateName}"
 * ```
 */
export class LoadBalancerCertificate extends pulumi.CustomResource {
    /**
     * Get an existing LoadBalancerCertificate resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: LoadBalancerCertificateState, opts?: pulumi.CustomResourceOptions): LoadBalancerCertificate {
        return new LoadBalancerCertificate(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'oci:index/loadBalancerCertificate:LoadBalancerCertificate';

    /**
     * Returns true if the given object is an instance of LoadBalancerCertificate.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is LoadBalancerCertificate {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === LoadBalancerCertificate.__pulumiType;
    }

    /**
     * The Certificate Authority certificate, or any interim certificate, that you received from your SSL certificate provider.
     */
    public readonly caCertificate!: pulumi.Output<string>;
    /**
     * A friendly name for the certificate bundle. It must be unique and it cannot be changed. Valid certificate bundle names include only alphanumeric characters, dashes, and underscores. Certificate bundle names cannot contain spaces. Avoid entering confidential information.  Example: `exampleCertificateBundle`
     */
    public readonly certificateName!: pulumi.Output<string>;
    /**
     * The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the load balancer on which to add the certificate bundle.
     */
    public readonly loadBalancerId!: pulumi.Output<string>;
    /**
     * A passphrase for encrypted private keys. This is needed only if you created your certificate with a passphrase.
     */
    public readonly passphrase!: pulumi.Output<string | undefined>;
    /**
     * The SSL private key for your certificate, in PEM format.
     */
    public readonly privateKey!: pulumi.Output<string>;
    /**
     * The public certificate, in PEM format, that you received from your SSL certificate provider.
     */
    public readonly publicCertificate!: pulumi.Output<string>;
    public /*out*/ readonly state!: pulumi.Output<string>;

    /**
     * Create a LoadBalancerCertificate resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: LoadBalancerCertificateArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: LoadBalancerCertificateArgs | LoadBalancerCertificateState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as LoadBalancerCertificateState | undefined;
            inputs["caCertificate"] = state ? state.caCertificate : undefined;
            inputs["certificateName"] = state ? state.certificateName : undefined;
            inputs["loadBalancerId"] = state ? state.loadBalancerId : undefined;
            inputs["passphrase"] = state ? state.passphrase : undefined;
            inputs["privateKey"] = state ? state.privateKey : undefined;
            inputs["publicCertificate"] = state ? state.publicCertificate : undefined;
            inputs["state"] = state ? state.state : undefined;
        } else {
            const args = argsOrState as LoadBalancerCertificateArgs | undefined;
            if ((!args || args.certificateName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'certificateName'");
            }
            if ((!args || args.loadBalancerId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'loadBalancerId'");
            }
            inputs["caCertificate"] = args ? args.caCertificate : undefined;
            inputs["certificateName"] = args ? args.certificateName : undefined;
            inputs["loadBalancerId"] = args ? args.loadBalancerId : undefined;
            inputs["passphrase"] = args ? args.passphrase : undefined;
            inputs["privateKey"] = args ? args.privateKey : undefined;
            inputs["publicCertificate"] = args ? args.publicCertificate : undefined;
            inputs["state"] = undefined /*out*/;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion()});
        }
        super(LoadBalancerCertificate.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering LoadBalancerCertificate resources.
 */
export interface LoadBalancerCertificateState {
    /**
     * The Certificate Authority certificate, or any interim certificate, that you received from your SSL certificate provider.
     */
    caCertificate?: pulumi.Input<string>;
    /**
     * A friendly name for the certificate bundle. It must be unique and it cannot be changed. Valid certificate bundle names include only alphanumeric characters, dashes, and underscores. Certificate bundle names cannot contain spaces. Avoid entering confidential information.  Example: `exampleCertificateBundle`
     */
    certificateName?: pulumi.Input<string>;
    /**
     * The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the load balancer on which to add the certificate bundle.
     */
    loadBalancerId?: pulumi.Input<string>;
    /**
     * A passphrase for encrypted private keys. This is needed only if you created your certificate with a passphrase.
     */
    passphrase?: pulumi.Input<string>;
    /**
     * The SSL private key for your certificate, in PEM format.
     */
    privateKey?: pulumi.Input<string>;
    /**
     * The public certificate, in PEM format, that you received from your SSL certificate provider.
     */
    publicCertificate?: pulumi.Input<string>;
    state?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a LoadBalancerCertificate resource.
 */
export interface LoadBalancerCertificateArgs {
    /**
     * The Certificate Authority certificate, or any interim certificate, that you received from your SSL certificate provider.
     */
    caCertificate?: pulumi.Input<string>;
    /**
     * A friendly name for the certificate bundle. It must be unique and it cannot be changed. Valid certificate bundle names include only alphanumeric characters, dashes, and underscores. Certificate bundle names cannot contain spaces. Avoid entering confidential information.  Example: `exampleCertificateBundle`
     */
    certificateName: pulumi.Input<string>;
    /**
     * The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the load balancer on which to add the certificate bundle.
     */
    loadBalancerId: pulumi.Input<string>;
    /**
     * A passphrase for encrypted private keys. This is needed only if you created your certificate with a passphrase.
     */
    passphrase?: pulumi.Input<string>;
    /**
     * The SSL private key for your certificate, in PEM format.
     */
    privateKey?: pulumi.Input<string>;
    /**
     * The public certificate, in PEM format, that you received from your SSL certificate provider.
     */
    publicCertificate?: pulumi.Input<string>;
}
