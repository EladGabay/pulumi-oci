// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package oci

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource provides the Database Software Image resource in Oracle Cloud Infrastructure Database service.
//
// create database software image in the specified compartment.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-oci/sdk/go/oci"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := oci.NewDatabaseDatabaseSoftwareImage(ctx, "testDatabaseSoftwareImage", &oci.DatabaseDatabaseSoftwareImageArgs{
// 			CompartmentId:                      pulumi.Any(_var.Compartment_id),
// 			DisplayName:                        pulumi.Any(_var.Database_software_image_display_name),
// 			DatabaseSoftwareImageOneOffPatches: pulumi.Any(_var.Database_software_image_database_software_image_one_off_patches),
// 			DatabaseVersion:                    pulumi.Any(_var.Database_software_image_database_version),
// 			DefinedTags:                        pulumi.Any(_var.Database_software_image_defined_tags),
// 			FreeformTags: pulumi.AnyMap{
// 				"Department": pulumi.Any("Finance"),
// 			},
// 			ImageShapeFamily: pulumi.Any(_var.Database_software_image_image_shape_family),
// 			ImageType:        pulumi.Any(_var.Database_software_image_image_type),
// 			LsInventory:      pulumi.Any(_var.Database_software_image_ls_inventory),
// 			PatchSet:         pulumi.Any(_var.Database_software_image_patch_set),
// 			SourceDbHomeId:   pulumi.Any(oci_database_db_home.Test_db_home.Id),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// DatabaseSoftwareImages can be imported using the `id`, e.g.
//
// ```sh
//  $ pulumi import oci:index/databaseDatabaseSoftwareImage:DatabaseDatabaseSoftwareImage test_database_software_image "id"
// ```
type DatabaseDatabaseSoftwareImage struct {
	pulumi.CustomResourceState

	// (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment the database software image  belongs in.
	CompartmentId pulumi.StringOutput `pulumi:"compartmentId"`
	// List of one-off patches for Database Homes.
	DatabaseSoftwareImageIncludedPatches pulumi.StringArrayOutput `pulumi:"databaseSoftwareImageIncludedPatches"`
	// List of one-off patches for Database Homes.
	DatabaseSoftwareImageOneOffPatches pulumi.StringArrayOutput `pulumi:"databaseSoftwareImageOneOffPatches"`
	// The database version with which the database software image is to be built.
	DatabaseVersion pulumi.StringOutput `pulumi:"databaseVersion"`
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
	DefinedTags pulumi.MapOutput `pulumi:"definedTags"`
	// (Updatable) The user-friendly name for the database software image. The name does not have to be unique.
	DisplayName pulumi.StringOutput `pulumi:"displayName"`
	// (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Department": "Finance"}`
	FreeformTags pulumi.MapOutput `pulumi:"freeformTags"`
	// To what shape the image is meant for.
	ImageShapeFamily pulumi.StringOutput `pulumi:"imageShapeFamily"`
	// The type of software image. Can be grid or database.
	ImageType pulumi.StringOutput `pulumi:"imageType"`
	// The patches included in the image and the version of the image
	IncludedPatchesSummary pulumi.StringOutput `pulumi:"includedPatchesSummary"`
	// True if this Database software image is supported for Upgrade.
	IsUpgradeSupported pulumi.BoolOutput `pulumi:"isUpgradeSupported"`
	// Detailed message for the lifecycle state.
	LifecycleDetails pulumi.StringOutput `pulumi:"lifecycleDetails"`
	// output from lsinventory which will get passed as a string
	LsInventory pulumi.StringOutput `pulumi:"lsInventory"`
	// The PSU or PBP or Release Updates. To get a list of supported versions, use the [ListDbVersions](https://docs.cloud.oracle.com/iaas/api/#/en/database/latest/DbVersionSummary/ListDbVersions) operation.
	PatchSet pulumi.StringOutput `pulumi:"patchSet"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Database Home.
	SourceDbHomeId pulumi.StringOutput `pulumi:"sourceDbHomeId"`
	// The current state of the database software image.
	State pulumi.StringOutput `pulumi:"state"`
	// The date and time the database software image was created.
	TimeCreated pulumi.StringOutput `pulumi:"timeCreated"`
}

// NewDatabaseDatabaseSoftwareImage registers a new resource with the given unique name, arguments, and options.
func NewDatabaseDatabaseSoftwareImage(ctx *pulumi.Context,
	name string, args *DatabaseDatabaseSoftwareImageArgs, opts ...pulumi.ResourceOption) (*DatabaseDatabaseSoftwareImage, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.CompartmentId == nil {
		return nil, errors.New("invalid value for required argument 'CompartmentId'")
	}
	if args.DisplayName == nil {
		return nil, errors.New("invalid value for required argument 'DisplayName'")
	}
	var resource DatabaseDatabaseSoftwareImage
	err := ctx.RegisterResource("oci:index/databaseDatabaseSoftwareImage:DatabaseDatabaseSoftwareImage", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDatabaseDatabaseSoftwareImage gets an existing DatabaseDatabaseSoftwareImage resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDatabaseDatabaseSoftwareImage(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DatabaseDatabaseSoftwareImageState, opts ...pulumi.ResourceOption) (*DatabaseDatabaseSoftwareImage, error) {
	var resource DatabaseDatabaseSoftwareImage
	err := ctx.ReadResource("oci:index/databaseDatabaseSoftwareImage:DatabaseDatabaseSoftwareImage", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DatabaseDatabaseSoftwareImage resources.
type databaseDatabaseSoftwareImageState struct {
	// (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment the database software image  belongs in.
	CompartmentId *string `pulumi:"compartmentId"`
	// List of one-off patches for Database Homes.
	DatabaseSoftwareImageIncludedPatches []string `pulumi:"databaseSoftwareImageIncludedPatches"`
	// List of one-off patches for Database Homes.
	DatabaseSoftwareImageOneOffPatches []string `pulumi:"databaseSoftwareImageOneOffPatches"`
	// The database version with which the database software image is to be built.
	DatabaseVersion *string `pulumi:"databaseVersion"`
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
	DefinedTags map[string]interface{} `pulumi:"definedTags"`
	// (Updatable) The user-friendly name for the database software image. The name does not have to be unique.
	DisplayName *string `pulumi:"displayName"`
	// (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Department": "Finance"}`
	FreeformTags map[string]interface{} `pulumi:"freeformTags"`
	// To what shape the image is meant for.
	ImageShapeFamily *string `pulumi:"imageShapeFamily"`
	// The type of software image. Can be grid or database.
	ImageType *string `pulumi:"imageType"`
	// The patches included in the image and the version of the image
	IncludedPatchesSummary *string `pulumi:"includedPatchesSummary"`
	// True if this Database software image is supported for Upgrade.
	IsUpgradeSupported *bool `pulumi:"isUpgradeSupported"`
	// Detailed message for the lifecycle state.
	LifecycleDetails *string `pulumi:"lifecycleDetails"`
	// output from lsinventory which will get passed as a string
	LsInventory *string `pulumi:"lsInventory"`
	// The PSU or PBP or Release Updates. To get a list of supported versions, use the [ListDbVersions](https://docs.cloud.oracle.com/iaas/api/#/en/database/latest/DbVersionSummary/ListDbVersions) operation.
	PatchSet *string `pulumi:"patchSet"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Database Home.
	SourceDbHomeId *string `pulumi:"sourceDbHomeId"`
	// The current state of the database software image.
	State *string `pulumi:"state"`
	// The date and time the database software image was created.
	TimeCreated *string `pulumi:"timeCreated"`
}

type DatabaseDatabaseSoftwareImageState struct {
	// (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment the database software image  belongs in.
	CompartmentId pulumi.StringPtrInput
	// List of one-off patches for Database Homes.
	DatabaseSoftwareImageIncludedPatches pulumi.StringArrayInput
	// List of one-off patches for Database Homes.
	DatabaseSoftwareImageOneOffPatches pulumi.StringArrayInput
	// The database version with which the database software image is to be built.
	DatabaseVersion pulumi.StringPtrInput
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
	DefinedTags pulumi.MapInput
	// (Updatable) The user-friendly name for the database software image. The name does not have to be unique.
	DisplayName pulumi.StringPtrInput
	// (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Department": "Finance"}`
	FreeformTags pulumi.MapInput
	// To what shape the image is meant for.
	ImageShapeFamily pulumi.StringPtrInput
	// The type of software image. Can be grid or database.
	ImageType pulumi.StringPtrInput
	// The patches included in the image and the version of the image
	IncludedPatchesSummary pulumi.StringPtrInput
	// True if this Database software image is supported for Upgrade.
	IsUpgradeSupported pulumi.BoolPtrInput
	// Detailed message for the lifecycle state.
	LifecycleDetails pulumi.StringPtrInput
	// output from lsinventory which will get passed as a string
	LsInventory pulumi.StringPtrInput
	// The PSU or PBP or Release Updates. To get a list of supported versions, use the [ListDbVersions](https://docs.cloud.oracle.com/iaas/api/#/en/database/latest/DbVersionSummary/ListDbVersions) operation.
	PatchSet pulumi.StringPtrInput
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Database Home.
	SourceDbHomeId pulumi.StringPtrInput
	// The current state of the database software image.
	State pulumi.StringPtrInput
	// The date and time the database software image was created.
	TimeCreated pulumi.StringPtrInput
}

func (DatabaseDatabaseSoftwareImageState) ElementType() reflect.Type {
	return reflect.TypeOf((*databaseDatabaseSoftwareImageState)(nil)).Elem()
}

type databaseDatabaseSoftwareImageArgs struct {
	// (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment the database software image  belongs in.
	CompartmentId string `pulumi:"compartmentId"`
	// List of one-off patches for Database Homes.
	DatabaseSoftwareImageOneOffPatches []string `pulumi:"databaseSoftwareImageOneOffPatches"`
	// The database version with which the database software image is to be built.
	DatabaseVersion *string `pulumi:"databaseVersion"`
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
	DefinedTags map[string]interface{} `pulumi:"definedTags"`
	// (Updatable) The user-friendly name for the database software image. The name does not have to be unique.
	DisplayName string `pulumi:"displayName"`
	// (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Department": "Finance"}`
	FreeformTags map[string]interface{} `pulumi:"freeformTags"`
	// To what shape the image is meant for.
	ImageShapeFamily *string `pulumi:"imageShapeFamily"`
	// The type of software image. Can be grid or database.
	ImageType *string `pulumi:"imageType"`
	// output from lsinventory which will get passed as a string
	LsInventory *string `pulumi:"lsInventory"`
	// The PSU or PBP or Release Updates. To get a list of supported versions, use the [ListDbVersions](https://docs.cloud.oracle.com/iaas/api/#/en/database/latest/DbVersionSummary/ListDbVersions) operation.
	PatchSet *string `pulumi:"patchSet"`
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Database Home.
	SourceDbHomeId *string `pulumi:"sourceDbHomeId"`
}

// The set of arguments for constructing a DatabaseDatabaseSoftwareImage resource.
type DatabaseDatabaseSoftwareImageArgs struct {
	// (Updatable) The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the compartment the database software image  belongs in.
	CompartmentId pulumi.StringInput
	// List of one-off patches for Database Homes.
	DatabaseSoftwareImageOneOffPatches pulumi.StringArrayInput
	// The database version with which the database software image is to be built.
	DatabaseVersion pulumi.StringPtrInput
	// (Updatable) Defined tags for this resource. Each key is predefined and scoped to a namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).
	DefinedTags pulumi.MapInput
	// (Updatable) The user-friendly name for the database software image. The name does not have to be unique.
	DisplayName pulumi.StringInput
	// (Updatable) Free-form tags for this resource. Each tag is a simple key-value pair with no predefined name, type, or namespace. For more information, see [Resource Tags](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/resourcetags.htm).  Example: `{"Department": "Finance"}`
	FreeformTags pulumi.MapInput
	// To what shape the image is meant for.
	ImageShapeFamily pulumi.StringPtrInput
	// The type of software image. Can be grid or database.
	ImageType pulumi.StringPtrInput
	// output from lsinventory which will get passed as a string
	LsInventory pulumi.StringPtrInput
	// The PSU or PBP or Release Updates. To get a list of supported versions, use the [ListDbVersions](https://docs.cloud.oracle.com/iaas/api/#/en/database/latest/DbVersionSummary/ListDbVersions) operation.
	PatchSet pulumi.StringPtrInput
	// The [OCID](https://docs.cloud.oracle.com/iaas/Content/General/Concepts/identifiers.htm) of the Database Home.
	SourceDbHomeId pulumi.StringPtrInput
}

func (DatabaseDatabaseSoftwareImageArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*databaseDatabaseSoftwareImageArgs)(nil)).Elem()
}

type DatabaseDatabaseSoftwareImageInput interface {
	pulumi.Input

	ToDatabaseDatabaseSoftwareImageOutput() DatabaseDatabaseSoftwareImageOutput
	ToDatabaseDatabaseSoftwareImageOutputWithContext(ctx context.Context) DatabaseDatabaseSoftwareImageOutput
}

func (*DatabaseDatabaseSoftwareImage) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseDatabaseSoftwareImage)(nil))
}

func (i *DatabaseDatabaseSoftwareImage) ToDatabaseDatabaseSoftwareImageOutput() DatabaseDatabaseSoftwareImageOutput {
	return i.ToDatabaseDatabaseSoftwareImageOutputWithContext(context.Background())
}

func (i *DatabaseDatabaseSoftwareImage) ToDatabaseDatabaseSoftwareImageOutputWithContext(ctx context.Context) DatabaseDatabaseSoftwareImageOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseDatabaseSoftwareImageOutput)
}

func (i *DatabaseDatabaseSoftwareImage) ToDatabaseDatabaseSoftwareImagePtrOutput() DatabaseDatabaseSoftwareImagePtrOutput {
	return i.ToDatabaseDatabaseSoftwareImagePtrOutputWithContext(context.Background())
}

func (i *DatabaseDatabaseSoftwareImage) ToDatabaseDatabaseSoftwareImagePtrOutputWithContext(ctx context.Context) DatabaseDatabaseSoftwareImagePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseDatabaseSoftwareImagePtrOutput)
}

type DatabaseDatabaseSoftwareImagePtrInput interface {
	pulumi.Input

	ToDatabaseDatabaseSoftwareImagePtrOutput() DatabaseDatabaseSoftwareImagePtrOutput
	ToDatabaseDatabaseSoftwareImagePtrOutputWithContext(ctx context.Context) DatabaseDatabaseSoftwareImagePtrOutput
}

type databaseDatabaseSoftwareImagePtrType DatabaseDatabaseSoftwareImageArgs

func (*databaseDatabaseSoftwareImagePtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**DatabaseDatabaseSoftwareImage)(nil))
}

func (i *databaseDatabaseSoftwareImagePtrType) ToDatabaseDatabaseSoftwareImagePtrOutput() DatabaseDatabaseSoftwareImagePtrOutput {
	return i.ToDatabaseDatabaseSoftwareImagePtrOutputWithContext(context.Background())
}

func (i *databaseDatabaseSoftwareImagePtrType) ToDatabaseDatabaseSoftwareImagePtrOutputWithContext(ctx context.Context) DatabaseDatabaseSoftwareImagePtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseDatabaseSoftwareImagePtrOutput)
}

// DatabaseDatabaseSoftwareImageArrayInput is an input type that accepts DatabaseDatabaseSoftwareImageArray and DatabaseDatabaseSoftwareImageArrayOutput values.
// You can construct a concrete instance of `DatabaseDatabaseSoftwareImageArrayInput` via:
//
//          DatabaseDatabaseSoftwareImageArray{ DatabaseDatabaseSoftwareImageArgs{...} }
type DatabaseDatabaseSoftwareImageArrayInput interface {
	pulumi.Input

	ToDatabaseDatabaseSoftwareImageArrayOutput() DatabaseDatabaseSoftwareImageArrayOutput
	ToDatabaseDatabaseSoftwareImageArrayOutputWithContext(context.Context) DatabaseDatabaseSoftwareImageArrayOutput
}

type DatabaseDatabaseSoftwareImageArray []DatabaseDatabaseSoftwareImageInput

func (DatabaseDatabaseSoftwareImageArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DatabaseDatabaseSoftwareImage)(nil)).Elem()
}

func (i DatabaseDatabaseSoftwareImageArray) ToDatabaseDatabaseSoftwareImageArrayOutput() DatabaseDatabaseSoftwareImageArrayOutput {
	return i.ToDatabaseDatabaseSoftwareImageArrayOutputWithContext(context.Background())
}

func (i DatabaseDatabaseSoftwareImageArray) ToDatabaseDatabaseSoftwareImageArrayOutputWithContext(ctx context.Context) DatabaseDatabaseSoftwareImageArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseDatabaseSoftwareImageArrayOutput)
}

// DatabaseDatabaseSoftwareImageMapInput is an input type that accepts DatabaseDatabaseSoftwareImageMap and DatabaseDatabaseSoftwareImageMapOutput values.
// You can construct a concrete instance of `DatabaseDatabaseSoftwareImageMapInput` via:
//
//          DatabaseDatabaseSoftwareImageMap{ "key": DatabaseDatabaseSoftwareImageArgs{...} }
type DatabaseDatabaseSoftwareImageMapInput interface {
	pulumi.Input

	ToDatabaseDatabaseSoftwareImageMapOutput() DatabaseDatabaseSoftwareImageMapOutput
	ToDatabaseDatabaseSoftwareImageMapOutputWithContext(context.Context) DatabaseDatabaseSoftwareImageMapOutput
}

type DatabaseDatabaseSoftwareImageMap map[string]DatabaseDatabaseSoftwareImageInput

func (DatabaseDatabaseSoftwareImageMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DatabaseDatabaseSoftwareImage)(nil)).Elem()
}

func (i DatabaseDatabaseSoftwareImageMap) ToDatabaseDatabaseSoftwareImageMapOutput() DatabaseDatabaseSoftwareImageMapOutput {
	return i.ToDatabaseDatabaseSoftwareImageMapOutputWithContext(context.Background())
}

func (i DatabaseDatabaseSoftwareImageMap) ToDatabaseDatabaseSoftwareImageMapOutputWithContext(ctx context.Context) DatabaseDatabaseSoftwareImageMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatabaseDatabaseSoftwareImageMapOutput)
}

type DatabaseDatabaseSoftwareImageOutput struct {
	*pulumi.OutputState
}

func (DatabaseDatabaseSoftwareImageOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*DatabaseDatabaseSoftwareImage)(nil))
}

func (o DatabaseDatabaseSoftwareImageOutput) ToDatabaseDatabaseSoftwareImageOutput() DatabaseDatabaseSoftwareImageOutput {
	return o
}

func (o DatabaseDatabaseSoftwareImageOutput) ToDatabaseDatabaseSoftwareImageOutputWithContext(ctx context.Context) DatabaseDatabaseSoftwareImageOutput {
	return o
}

func (o DatabaseDatabaseSoftwareImageOutput) ToDatabaseDatabaseSoftwareImagePtrOutput() DatabaseDatabaseSoftwareImagePtrOutput {
	return o.ToDatabaseDatabaseSoftwareImagePtrOutputWithContext(context.Background())
}

func (o DatabaseDatabaseSoftwareImageOutput) ToDatabaseDatabaseSoftwareImagePtrOutputWithContext(ctx context.Context) DatabaseDatabaseSoftwareImagePtrOutput {
	return o.ApplyT(func(v DatabaseDatabaseSoftwareImage) *DatabaseDatabaseSoftwareImage {
		return &v
	}).(DatabaseDatabaseSoftwareImagePtrOutput)
}

type DatabaseDatabaseSoftwareImagePtrOutput struct {
	*pulumi.OutputState
}

func (DatabaseDatabaseSoftwareImagePtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DatabaseDatabaseSoftwareImage)(nil))
}

func (o DatabaseDatabaseSoftwareImagePtrOutput) ToDatabaseDatabaseSoftwareImagePtrOutput() DatabaseDatabaseSoftwareImagePtrOutput {
	return o
}

func (o DatabaseDatabaseSoftwareImagePtrOutput) ToDatabaseDatabaseSoftwareImagePtrOutputWithContext(ctx context.Context) DatabaseDatabaseSoftwareImagePtrOutput {
	return o
}

type DatabaseDatabaseSoftwareImageArrayOutput struct{ *pulumi.OutputState }

func (DatabaseDatabaseSoftwareImageArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]DatabaseDatabaseSoftwareImage)(nil))
}

func (o DatabaseDatabaseSoftwareImageArrayOutput) ToDatabaseDatabaseSoftwareImageArrayOutput() DatabaseDatabaseSoftwareImageArrayOutput {
	return o
}

func (o DatabaseDatabaseSoftwareImageArrayOutput) ToDatabaseDatabaseSoftwareImageArrayOutputWithContext(ctx context.Context) DatabaseDatabaseSoftwareImageArrayOutput {
	return o
}

func (o DatabaseDatabaseSoftwareImageArrayOutput) Index(i pulumi.IntInput) DatabaseDatabaseSoftwareImageOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) DatabaseDatabaseSoftwareImage {
		return vs[0].([]DatabaseDatabaseSoftwareImage)[vs[1].(int)]
	}).(DatabaseDatabaseSoftwareImageOutput)
}

type DatabaseDatabaseSoftwareImageMapOutput struct{ *pulumi.OutputState }

func (DatabaseDatabaseSoftwareImageMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]DatabaseDatabaseSoftwareImage)(nil))
}

func (o DatabaseDatabaseSoftwareImageMapOutput) ToDatabaseDatabaseSoftwareImageMapOutput() DatabaseDatabaseSoftwareImageMapOutput {
	return o
}

func (o DatabaseDatabaseSoftwareImageMapOutput) ToDatabaseDatabaseSoftwareImageMapOutputWithContext(ctx context.Context) DatabaseDatabaseSoftwareImageMapOutput {
	return o
}

func (o DatabaseDatabaseSoftwareImageMapOutput) MapIndex(k pulumi.StringInput) DatabaseDatabaseSoftwareImageOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) DatabaseDatabaseSoftwareImage {
		return vs[0].(map[string]DatabaseDatabaseSoftwareImage)[vs[1].(string)]
	}).(DatabaseDatabaseSoftwareImageOutput)
}

func init() {
	pulumi.RegisterOutputType(DatabaseDatabaseSoftwareImageOutput{})
	pulumi.RegisterOutputType(DatabaseDatabaseSoftwareImagePtrOutput{})
	pulumi.RegisterOutputType(DatabaseDatabaseSoftwareImageArrayOutput{})
	pulumi.RegisterOutputType(DatabaseDatabaseSoftwareImageMapOutput{})
}
