// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package oci

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// This resource provides the Channel resource in Oracle Cloud Infrastructure MySQL Database service.
//
// Creates a Channel to establish replication from a source to a target.
//
// ## Import
//
// Channels can be imported using the `id`, e.g.
//
// ```sh
//  $ pulumi import oci:index/mysqlChannel:MysqlChannel test_channel "id"
// ```
type MysqlChannel struct {
	pulumi.CustomResourceState

	// The OCID of the compartment.
	CompartmentId pulumi.StringOutput `pulumi:"compartmentId"`
	// (Updatable) Usage of predefined tag keys. These predefined keys are scoped to namespaces. Example: `{"foo-namespace.bar-key": "value"}`
	DefinedTags pulumi.MapOutput `pulumi:"definedTags"`
	// (Updatable) User provided information about the Channel.
	Description pulumi.StringOutput `pulumi:"description"`
	// (Updatable) The user-friendly name for the Channel. It does not have to be unique.
	DisplayName pulumi.StringOutput `pulumi:"displayName"`
	// (Updatable) Simple key-value pair applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
	FreeformTags pulumi.MapOutput `pulumi:"freeformTags"`
	// (Updatable) Whether the Channel should be enabled upon creation. If set to true, the Channel will be asynchronously started as a result of the create Channel operation.
	IsEnabled pulumi.BoolOutput `pulumi:"isEnabled"`
	// A message describing the state of the Channel.
	LifecycleDetails pulumi.StringOutput `pulumi:"lifecycleDetails"`
	// (Updatable) Parameters detailing how to provision the source for the given Channel.
	Source MysqlChannelSourceOutput `pulumi:"source"`
	// The state of the Channel.
	State pulumi.StringOutput `pulumi:"state"`
	// (Updatable) Parameters detailing how to provision the target for the given Channel.
	Target MysqlChannelTargetOutput `pulumi:"target"`
	// The date and time the Channel was created, as described by [RFC 3339](https://tools.ietf.org/rfc/rfc3339).
	TimeCreated pulumi.StringOutput `pulumi:"timeCreated"`
	// The time the Channel was last updated, as described by [RFC 3339](https://tools.ietf.org/rfc/rfc3339).
	TimeUpdated pulumi.StringOutput `pulumi:"timeUpdated"`
}

// NewMysqlChannel registers a new resource with the given unique name, arguments, and options.
func NewMysqlChannel(ctx *pulumi.Context,
	name string, args *MysqlChannelArgs, opts ...pulumi.ResourceOption) (*MysqlChannel, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Source == nil {
		return nil, errors.New("invalid value for required argument 'Source'")
	}
	if args.Target == nil {
		return nil, errors.New("invalid value for required argument 'Target'")
	}
	var resource MysqlChannel
	err := ctx.RegisterResource("oci:index/mysqlChannel:MysqlChannel", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMysqlChannel gets an existing MysqlChannel resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMysqlChannel(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MysqlChannelState, opts ...pulumi.ResourceOption) (*MysqlChannel, error) {
	var resource MysqlChannel
	err := ctx.ReadResource("oci:index/mysqlChannel:MysqlChannel", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering MysqlChannel resources.
type mysqlChannelState struct {
	// The OCID of the compartment.
	CompartmentId *string `pulumi:"compartmentId"`
	// (Updatable) Usage of predefined tag keys. These predefined keys are scoped to namespaces. Example: `{"foo-namespace.bar-key": "value"}`
	DefinedTags map[string]interface{} `pulumi:"definedTags"`
	// (Updatable) User provided information about the Channel.
	Description *string `pulumi:"description"`
	// (Updatable) The user-friendly name for the Channel. It does not have to be unique.
	DisplayName *string `pulumi:"displayName"`
	// (Updatable) Simple key-value pair applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
	FreeformTags map[string]interface{} `pulumi:"freeformTags"`
	// (Updatable) Whether the Channel should be enabled upon creation. If set to true, the Channel will be asynchronously started as a result of the create Channel operation.
	IsEnabled *bool `pulumi:"isEnabled"`
	// A message describing the state of the Channel.
	LifecycleDetails *string `pulumi:"lifecycleDetails"`
	// (Updatable) Parameters detailing how to provision the source for the given Channel.
	Source *MysqlChannelSource `pulumi:"source"`
	// The state of the Channel.
	State *string `pulumi:"state"`
	// (Updatable) Parameters detailing how to provision the target for the given Channel.
	Target *MysqlChannelTarget `pulumi:"target"`
	// The date and time the Channel was created, as described by [RFC 3339](https://tools.ietf.org/rfc/rfc3339).
	TimeCreated *string `pulumi:"timeCreated"`
	// The time the Channel was last updated, as described by [RFC 3339](https://tools.ietf.org/rfc/rfc3339).
	TimeUpdated *string `pulumi:"timeUpdated"`
}

type MysqlChannelState struct {
	// The OCID of the compartment.
	CompartmentId pulumi.StringPtrInput
	// (Updatable) Usage of predefined tag keys. These predefined keys are scoped to namespaces. Example: `{"foo-namespace.bar-key": "value"}`
	DefinedTags pulumi.MapInput
	// (Updatable) User provided information about the Channel.
	Description pulumi.StringPtrInput
	// (Updatable) The user-friendly name for the Channel. It does not have to be unique.
	DisplayName pulumi.StringPtrInput
	// (Updatable) Simple key-value pair applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
	FreeformTags pulumi.MapInput
	// (Updatable) Whether the Channel should be enabled upon creation. If set to true, the Channel will be asynchronously started as a result of the create Channel operation.
	IsEnabled pulumi.BoolPtrInput
	// A message describing the state of the Channel.
	LifecycleDetails pulumi.StringPtrInput
	// (Updatable) Parameters detailing how to provision the source for the given Channel.
	Source MysqlChannelSourcePtrInput
	// The state of the Channel.
	State pulumi.StringPtrInput
	// (Updatable) Parameters detailing how to provision the target for the given Channel.
	Target MysqlChannelTargetPtrInput
	// The date and time the Channel was created, as described by [RFC 3339](https://tools.ietf.org/rfc/rfc3339).
	TimeCreated pulumi.StringPtrInput
	// The time the Channel was last updated, as described by [RFC 3339](https://tools.ietf.org/rfc/rfc3339).
	TimeUpdated pulumi.StringPtrInput
}

func (MysqlChannelState) ElementType() reflect.Type {
	return reflect.TypeOf((*mysqlChannelState)(nil)).Elem()
}

type mysqlChannelArgs struct {
	// The OCID of the compartment.
	CompartmentId *string `pulumi:"compartmentId"`
	// (Updatable) Usage of predefined tag keys. These predefined keys are scoped to namespaces. Example: `{"foo-namespace.bar-key": "value"}`
	DefinedTags map[string]interface{} `pulumi:"definedTags"`
	// (Updatable) User provided information about the Channel.
	Description *string `pulumi:"description"`
	// (Updatable) The user-friendly name for the Channel. It does not have to be unique.
	DisplayName *string `pulumi:"displayName"`
	// (Updatable) Simple key-value pair applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
	FreeformTags map[string]interface{} `pulumi:"freeformTags"`
	// (Updatable) Whether the Channel should be enabled upon creation. If set to true, the Channel will be asynchronously started as a result of the create Channel operation.
	IsEnabled *bool `pulumi:"isEnabled"`
	// (Updatable) Parameters detailing how to provision the source for the given Channel.
	Source MysqlChannelSource `pulumi:"source"`
	// (Updatable) Parameters detailing how to provision the target for the given Channel.
	Target MysqlChannelTarget `pulumi:"target"`
}

// The set of arguments for constructing a MysqlChannel resource.
type MysqlChannelArgs struct {
	// The OCID of the compartment.
	CompartmentId pulumi.StringPtrInput
	// (Updatable) Usage of predefined tag keys. These predefined keys are scoped to namespaces. Example: `{"foo-namespace.bar-key": "value"}`
	DefinedTags pulumi.MapInput
	// (Updatable) User provided information about the Channel.
	Description pulumi.StringPtrInput
	// (Updatable) The user-friendly name for the Channel. It does not have to be unique.
	DisplayName pulumi.StringPtrInput
	// (Updatable) Simple key-value pair applied without any predefined name, type or scope. Exists for cross-compatibility only. Example: `{"bar-key": "value"}`
	FreeformTags pulumi.MapInput
	// (Updatable) Whether the Channel should be enabled upon creation. If set to true, the Channel will be asynchronously started as a result of the create Channel operation.
	IsEnabled pulumi.BoolPtrInput
	// (Updatable) Parameters detailing how to provision the source for the given Channel.
	Source MysqlChannelSourceInput
	// (Updatable) Parameters detailing how to provision the target for the given Channel.
	Target MysqlChannelTargetInput
}

func (MysqlChannelArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*mysqlChannelArgs)(nil)).Elem()
}

type MysqlChannelInput interface {
	pulumi.Input

	ToMysqlChannelOutput() MysqlChannelOutput
	ToMysqlChannelOutputWithContext(ctx context.Context) MysqlChannelOutput
}

func (*MysqlChannel) ElementType() reflect.Type {
	return reflect.TypeOf((*MysqlChannel)(nil))
}

func (i *MysqlChannel) ToMysqlChannelOutput() MysqlChannelOutput {
	return i.ToMysqlChannelOutputWithContext(context.Background())
}

func (i *MysqlChannel) ToMysqlChannelOutputWithContext(ctx context.Context) MysqlChannelOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MysqlChannelOutput)
}

func (i *MysqlChannel) ToMysqlChannelPtrOutput() MysqlChannelPtrOutput {
	return i.ToMysqlChannelPtrOutputWithContext(context.Background())
}

func (i *MysqlChannel) ToMysqlChannelPtrOutputWithContext(ctx context.Context) MysqlChannelPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MysqlChannelPtrOutput)
}

type MysqlChannelPtrInput interface {
	pulumi.Input

	ToMysqlChannelPtrOutput() MysqlChannelPtrOutput
	ToMysqlChannelPtrOutputWithContext(ctx context.Context) MysqlChannelPtrOutput
}

type mysqlChannelPtrType MysqlChannelArgs

func (*mysqlChannelPtrType) ElementType() reflect.Type {
	return reflect.TypeOf((**MysqlChannel)(nil))
}

func (i *mysqlChannelPtrType) ToMysqlChannelPtrOutput() MysqlChannelPtrOutput {
	return i.ToMysqlChannelPtrOutputWithContext(context.Background())
}

func (i *mysqlChannelPtrType) ToMysqlChannelPtrOutputWithContext(ctx context.Context) MysqlChannelPtrOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MysqlChannelPtrOutput)
}

// MysqlChannelArrayInput is an input type that accepts MysqlChannelArray and MysqlChannelArrayOutput values.
// You can construct a concrete instance of `MysqlChannelArrayInput` via:
//
//          MysqlChannelArray{ MysqlChannelArgs{...} }
type MysqlChannelArrayInput interface {
	pulumi.Input

	ToMysqlChannelArrayOutput() MysqlChannelArrayOutput
	ToMysqlChannelArrayOutputWithContext(context.Context) MysqlChannelArrayOutput
}

type MysqlChannelArray []MysqlChannelInput

func (MysqlChannelArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MysqlChannel)(nil)).Elem()
}

func (i MysqlChannelArray) ToMysqlChannelArrayOutput() MysqlChannelArrayOutput {
	return i.ToMysqlChannelArrayOutputWithContext(context.Background())
}

func (i MysqlChannelArray) ToMysqlChannelArrayOutputWithContext(ctx context.Context) MysqlChannelArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MysqlChannelArrayOutput)
}

// MysqlChannelMapInput is an input type that accepts MysqlChannelMap and MysqlChannelMapOutput values.
// You can construct a concrete instance of `MysqlChannelMapInput` via:
//
//          MysqlChannelMap{ "key": MysqlChannelArgs{...} }
type MysqlChannelMapInput interface {
	pulumi.Input

	ToMysqlChannelMapOutput() MysqlChannelMapOutput
	ToMysqlChannelMapOutputWithContext(context.Context) MysqlChannelMapOutput
}

type MysqlChannelMap map[string]MysqlChannelInput

func (MysqlChannelMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MysqlChannel)(nil)).Elem()
}

func (i MysqlChannelMap) ToMysqlChannelMapOutput() MysqlChannelMapOutput {
	return i.ToMysqlChannelMapOutputWithContext(context.Background())
}

func (i MysqlChannelMap) ToMysqlChannelMapOutputWithContext(ctx context.Context) MysqlChannelMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MysqlChannelMapOutput)
}

type MysqlChannelOutput struct {
	*pulumi.OutputState
}

func (MysqlChannelOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*MysqlChannel)(nil))
}

func (o MysqlChannelOutput) ToMysqlChannelOutput() MysqlChannelOutput {
	return o
}

func (o MysqlChannelOutput) ToMysqlChannelOutputWithContext(ctx context.Context) MysqlChannelOutput {
	return o
}

func (o MysqlChannelOutput) ToMysqlChannelPtrOutput() MysqlChannelPtrOutput {
	return o.ToMysqlChannelPtrOutputWithContext(context.Background())
}

func (o MysqlChannelOutput) ToMysqlChannelPtrOutputWithContext(ctx context.Context) MysqlChannelPtrOutput {
	return o.ApplyT(func(v MysqlChannel) *MysqlChannel {
		return &v
	}).(MysqlChannelPtrOutput)
}

type MysqlChannelPtrOutput struct {
	*pulumi.OutputState
}

func (MysqlChannelPtrOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MysqlChannel)(nil))
}

func (o MysqlChannelPtrOutput) ToMysqlChannelPtrOutput() MysqlChannelPtrOutput {
	return o
}

func (o MysqlChannelPtrOutput) ToMysqlChannelPtrOutputWithContext(ctx context.Context) MysqlChannelPtrOutput {
	return o
}

type MysqlChannelArrayOutput struct{ *pulumi.OutputState }

func (MysqlChannelArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]MysqlChannel)(nil))
}

func (o MysqlChannelArrayOutput) ToMysqlChannelArrayOutput() MysqlChannelArrayOutput {
	return o
}

func (o MysqlChannelArrayOutput) ToMysqlChannelArrayOutputWithContext(ctx context.Context) MysqlChannelArrayOutput {
	return o
}

func (o MysqlChannelArrayOutput) Index(i pulumi.IntInput) MysqlChannelOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) MysqlChannel {
		return vs[0].([]MysqlChannel)[vs[1].(int)]
	}).(MysqlChannelOutput)
}

type MysqlChannelMapOutput struct{ *pulumi.OutputState }

func (MysqlChannelMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]MysqlChannel)(nil))
}

func (o MysqlChannelMapOutput) ToMysqlChannelMapOutput() MysqlChannelMapOutput {
	return o
}

func (o MysqlChannelMapOutput) ToMysqlChannelMapOutputWithContext(ctx context.Context) MysqlChannelMapOutput {
	return o
}

func (o MysqlChannelMapOutput) MapIndex(k pulumi.StringInput) MysqlChannelOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) MysqlChannel {
		return vs[0].(map[string]MysqlChannel)[vs[1].(string)]
	}).(MysqlChannelOutput)
}

func init() {
	pulumi.RegisterOutputType(MysqlChannelOutput{})
	pulumi.RegisterOutputType(MysqlChannelPtrOutput{})
	pulumi.RegisterOutputType(MysqlChannelArrayOutput{})
	pulumi.RegisterOutputType(MysqlChannelMapOutput{})
}
